
usb_delivery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159d8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001608  08015a98  08015a98  00025a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080170a0  080170a0  000301b4  2**0
                  CONTENTS
  4 .ARM          00000008  080170a0  080170a0  000270a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080170a8  080170a8  000301b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080170a8  080170a8  000270a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080170ac  080170ac  000270ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  080170b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00001cec  200001b4  08017264  000301b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000900  20001ea0  08017264  00031ea0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d659  00000000  00000000  000301e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ac4  00000000  00000000  0005d83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  00064300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e68  00000000  00000000  00066268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a9bd  00000000  00000000  000680d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024fdc  00000000  00000000  00072a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf80a  00000000  00000000  00097a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00003d1d  00000000  00000000  00157273  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  00000274  00000000  00000000  0015af90  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  0015b204  2**2
                  CONTENTS, READONLY
 22 .debug_frame  000093ec  00000000  00000000  0015b228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001b4 	.word	0x200001b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08015a70 	.word	0x08015a70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b8 	.word	0x200001b8
 8000104:	08015a70 	.word	0x08015a70

08000108 <USBPD_CAD_Init>:
 8000108:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 800010a:	b081      	sub	sp, #4
 800010c:	000c      	movs	r4, r1
 800010e:	001d      	movs	r5, r3
 8000110:	4668      	mov	r0, sp
 8000112:	7900      	ldrb	r0, [r0, #4]
 8000114:	2801      	cmp	r0, #1
 8000116:	d84c      	bhi.n	80001b2 <USBPD_CAD_Init+0xaa>
 8000118:	200c      	movs	r0, #12
 800011a:	f015 f85d 	bl	80151d8 <malloc>
 800011e:	4969      	ldr	r1, [pc, #420]	; (80002c4 <.text_6>)
 8000120:	466a      	mov	r2, sp
 8000122:	7912      	ldrb	r2, [r2, #4]
 8000124:	0092      	lsls	r2, r2, #2
 8000126:	188a      	adds	r2, r1, r2
 8000128:	6050      	str	r0, [r2, #4]
 800012a:	2800      	cmp	r0, #0
 800012c:	d101      	bne.n	8000132 <USBPD_CAD_Init+0x2a>
 800012e:	2003      	movs	r0, #3
 8000130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000132:	9500      	str	r5, [sp, #0]
 8000134:	2300      	movs	r3, #0
 8000136:	2500      	movs	r5, #0
 8000138:	2600      	movs	r6, #0
 800013a:	c068      	stmia	r0!, {r3, r5, r6}
 800013c:	7808      	ldrb	r0, [r1, #0]
 800013e:	1c40      	adds	r0, r0, #1
 8000140:	7008      	strb	r0, [r1, #0]
 8000142:	6850      	ldr	r0, [r2, #4]
 8000144:	9900      	ldr	r1, [sp, #0]
 8000146:	6001      	str	r1, [r0, #0]
 8000148:	7203      	strb	r3, [r0, #8]
 800014a:	6044      	str	r4, [r0, #4]
 800014c:	485e      	ldr	r0, [pc, #376]	; (80002c8 <.text_7>)
 800014e:	495f      	ldr	r1, [pc, #380]	; (80002cc <.text_8>)
 8000150:	2201      	movs	r2, #1
 8000152:	4b5f      	ldr	r3, [pc, #380]	; (80002d0 <.text_9>)
 8000154:	4d5f      	ldr	r5, [pc, #380]	; (80002d4 <.text_10>)
 8000156:	682e      	ldr	r6, [r5, #0]
 8000158:	401e      	ands	r6, r3
 800015a:	4f5f      	ldr	r7, [pc, #380]	; (80002d8 <.text_11>)
 800015c:	42be      	cmp	r6, r7
 800015e:	d004      	beq.n	800016a <USBPD_CAD_Init+0x62>
 8000160:	682d      	ldr	r5, [r5, #0]
 8000162:	402b      	ands	r3, r5
 8000164:	4d5d      	ldr	r5, [pc, #372]	; (80002dc <.text_12>)
 8000166:	42ab      	cmp	r3, r5
 8000168:	d10d      	bne.n	8000186 <USBPD_CAD_Init+0x7e>
 800016a:	4b5d      	ldr	r3, [pc, #372]	; (80002e0 <.text_13>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d109      	bne.n	8000186 <USBPD_CAD_Init+0x7e>
 8000172:	4b5c      	ldr	r3, [pc, #368]	; (80002e4 <.text_14>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	051b      	lsls	r3, r3, #20
 8000178:	0d1b      	lsrs	r3, r3, #20
 800017a:	258a      	movs	r5, #138	; 0x8a
 800017c:	00ed      	lsls	r5, r5, #3
 800017e:	42ab      	cmp	r3, r5
 8000180:	d101      	bne.n	8000186 <USBPD_CAD_Init+0x7e>
 8000182:	4b59      	ldr	r3, [pc, #356]	; (80002e8 <.text_15>)
 8000184:	e000      	b.n	8000188 <USBPD_CAD_Init+0x80>
 8000186:	4b59      	ldr	r3, [pc, #356]	; (80002ec <.text_16>)
 8000188:	689d      	ldr	r5, [r3, #8]
 800018a:	609a      	str	r2, [r3, #8]
 800018c:	689e      	ldr	r6, [r3, #8]
 800018e:	2e01      	cmp	r6, #1
 8000190:	d0fc      	beq.n	800018c <USBPD_CAD_Init+0x84>
 8000192:	6019      	str	r1, [r3, #0]
 8000194:	6819      	ldr	r1, [r3, #0]
 8000196:	6001      	str	r1, [r0, #0]
 8000198:	609d      	str	r5, [r3, #8]
 800019a:	6898      	ldr	r0, [r3, #8]
 800019c:	4302      	orrs	r2, r0
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	9902      	ldr	r1, [sp, #8]
 80001a2:	6863      	ldr	r3, [r4, #4]
 80001a4:	9a00      	ldr	r2, [sp, #0]
 80001a6:	4668      	mov	r0, sp
 80001a8:	7900      	ldrb	r0, [r0, #4]
 80001aa:	f00b ff07 	bl	800bfbc <CAD_Init>
 80001ae:	2000      	movs	r0, #0
 80001b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80001b2:	2001      	movs	r0, #1
 80001b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080001b6 <USBPD_CAD_PortEnable>:
 80001b6:	2802      	cmp	r0, #2
 80001b8:	d204      	bcs.n	80001c4 <USBPD_CAD_PortEnable+0xe>
 80001ba:	4a42      	ldr	r2, [pc, #264]	; (80002c4 <.text_6>)
 80001bc:	0080      	lsls	r0, r0, #2
 80001be:	1810      	adds	r0, r2, r0
 80001c0:	6840      	ldr	r0, [r0, #4]
 80001c2:	7201      	strb	r1, [r0, #8]
 80001c4:	4770      	bx	lr

080001c6 <USBPD_CAD_Process>:
 80001c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001c8:	b084      	sub	sp, #16
 80001ca:	2500      	movs	r5, #0
 80001cc:	4c47      	ldr	r4, [pc, #284]	; (80002ec <.text_16>)
 80001ce:	e048      	b.n	8000262 <USBPD_CAD_Process+0x9c>
 80001d0:	68a1      	ldr	r1, [r4, #8]
 80001d2:	60a0      	str	r0, [r4, #8]
 80001d4:	68a2      	ldr	r2, [r4, #8]
 80001d6:	2a01      	cmp	r2, #1
 80001d8:	d0fc      	beq.n	80001d4 <USBPD_CAD_Process+0xe>
 80001da:	4a3c      	ldr	r2, [pc, #240]	; (80002cc <.text_8>)
 80001dc:	6022      	str	r2, [r4, #0]
 80001de:	6822      	ldr	r2, [r4, #0]
 80001e0:	4e39      	ldr	r6, [pc, #228]	; (80002c8 <.text_7>)
 80001e2:	6032      	str	r2, [r6, #0]
 80001e4:	60a1      	str	r1, [r4, #8]
 80001e6:	68a1      	ldr	r1, [r4, #8]
 80001e8:	4308      	orrs	r0, r1
 80001ea:	60a0      	str	r0, [r4, #8]
 80001ec:	e030      	b.n	8000250 <USBPD_CAD_Process+0x8a>
 80001ee:	2608      	movs	r6, #8
 80001f0:	4316      	orrs	r6, r2
 80001f2:	600e      	str	r6, [r1, #0]
 80001f4:	4669      	mov	r1, sp
 80001f6:	7809      	ldrb	r1, [r1, #0]
 80001f8:	2901      	cmp	r1, #1
 80001fa:	d129      	bne.n	8000250 <USBPD_CAD_Process+0x8a>
 80001fc:	4934      	ldr	r1, [pc, #208]	; (80002d0 <.text_9>)
 80001fe:	4a35      	ldr	r2, [pc, #212]	; (80002d4 <.text_10>)
 8000200:	6816      	ldr	r6, [r2, #0]
 8000202:	400e      	ands	r6, r1
 8000204:	4f34      	ldr	r7, [pc, #208]	; (80002d8 <.text_11>)
 8000206:	42be      	cmp	r6, r7
 8000208:	d004      	beq.n	8000214 <USBPD_CAD_Process+0x4e>
 800020a:	6812      	ldr	r2, [r2, #0]
 800020c:	4011      	ands	r1, r2
 800020e:	4a33      	ldr	r2, [pc, #204]	; (80002dc <.text_12>)
 8000210:	4291      	cmp	r1, r2
 8000212:	d1dd      	bne.n	80001d0 <USBPD_CAD_Process+0xa>
 8000214:	4932      	ldr	r1, [pc, #200]	; (80002e0 <.text_13>)
 8000216:	6809      	ldr	r1, [r1, #0]
 8000218:	2900      	cmp	r1, #0
 800021a:	d1d9      	bne.n	80001d0 <USBPD_CAD_Process+0xa>
 800021c:	4931      	ldr	r1, [pc, #196]	; (80002e4 <.text_14>)
 800021e:	6809      	ldr	r1, [r1, #0]
 8000220:	0509      	lsls	r1, r1, #20
 8000222:	0d09      	lsrs	r1, r1, #20
 8000224:	228a      	movs	r2, #138	; 0x8a
 8000226:	00d2      	lsls	r2, r2, #3
 8000228:	4291      	cmp	r1, r2
 800022a:	d1d1      	bne.n	80001d0 <USBPD_CAD_Process+0xa>
 800022c:	492e      	ldr	r1, [pc, #184]	; (80002e8 <.text_15>)
 800022e:	6889      	ldr	r1, [r1, #8]
 8000230:	4a2d      	ldr	r2, [pc, #180]	; (80002e8 <.text_15>)
 8000232:	6090      	str	r0, [r2, #8]
 8000234:	4a2c      	ldr	r2, [pc, #176]	; (80002e8 <.text_15>)
 8000236:	6892      	ldr	r2, [r2, #8]
 8000238:	2a01      	cmp	r2, #1
 800023a:	d0fb      	beq.n	8000234 <USBPD_CAD_Process+0x6e>
 800023c:	4a2a      	ldr	r2, [pc, #168]	; (80002e8 <.text_15>)
 800023e:	4e23      	ldr	r6, [pc, #140]	; (80002cc <.text_8>)
 8000240:	6016      	str	r6, [r2, #0]
 8000242:	6816      	ldr	r6, [r2, #0]
 8000244:	4f20      	ldr	r7, [pc, #128]	; (80002c8 <.text_7>)
 8000246:	603e      	str	r6, [r7, #0]
 8000248:	6091      	str	r1, [r2, #8]
 800024a:	6891      	ldr	r1, [r2, #8]
 800024c:	4308      	orrs	r0, r1
 800024e:	6090      	str	r0, [r2, #8]
 8000250:	9a01      	ldr	r2, [sp, #4]
 8000252:	4668      	mov	r0, sp
 8000254:	7801      	ldrb	r1, [r0, #0]
 8000256:	0028      	movs	r0, r5
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4798      	blx	r3
 800025e:	1c6d      	adds	r5, r5, #1
 8000260:	b2ed      	uxtb	r5, r5
 8000262:	4818      	ldr	r0, [pc, #96]	; (80002c4 <.text_6>)
 8000264:	7800      	ldrb	r0, [r0, #0]
 8000266:	4285      	cmp	r5, r0
 8000268:	da20      	bge.n	80002ac <USBPD_CAD_Process+0xe6>
 800026a:	00ae      	lsls	r6, r5, #2
 800026c:	2002      	movs	r0, #2
 800026e:	a902      	add	r1, sp, #8
 8000270:	5188      	str	r0, [r1, r6]
 8000272:	4814      	ldr	r0, [pc, #80]	; (80002c4 <.text_6>)
 8000274:	1d00      	adds	r0, r0, #4
 8000276:	1987      	adds	r7, r0, r6
 8000278:	6838      	ldr	r0, [r7, #0]
 800027a:	7a00      	ldrb	r0, [r0, #8]
 800027c:	2801      	cmp	r0, #1
 800027e:	d1ee      	bne.n	800025e <USBPD_CAD_Process+0x98>
 8000280:	aa01      	add	r2, sp, #4
 8000282:	4669      	mov	r1, sp
 8000284:	0028      	movs	r0, r5
 8000286:	f00c f841 	bl	800c30c <CAD_StateMachine>
 800028a:	a902      	add	r1, sp, #8
 800028c:	5188      	str	r0, [r1, r6]
 800028e:	4668      	mov	r0, sp
 8000290:	7800      	ldrb	r0, [r0, #0]
 8000292:	2800      	cmp	r0, #0
 8000294:	d0e3      	beq.n	800025e <USBPD_CAD_Process+0x98>
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	6819      	ldr	r1, [r3, #0]
 800029a:	680a      	ldr	r2, [r1, #0]
 800029c:	2001      	movs	r0, #1
 800029e:	0896      	lsrs	r6, r2, #2
 80002a0:	4006      	ands	r6, r0
 80002a2:	d1a4      	bne.n	80001ee <USBPD_CAD_Process+0x28>
 80002a4:	2608      	movs	r6, #8
 80002a6:	43b2      	bics	r2, r6
 80002a8:	600a      	str	r2, [r1, #0]
 80002aa:	e7a3      	b.n	80001f4 <USBPD_CAD_Process+0x2e>
 80002ac:	2801      	cmp	r0, #1
 80002ae:	d101      	bne.n	80002b4 <USBPD_CAD_Process+0xee>
 80002b0:	9802      	ldr	r0, [sp, #8]
 80002b2:	e004      	b.n	80002be <USBPD_CAD_Process+0xf8>
 80002b4:	9803      	ldr	r0, [sp, #12]
 80002b6:	9902      	ldr	r1, [sp, #8]
 80002b8:	4288      	cmp	r0, r1
 80002ba:	d300      	bcc.n	80002be <USBPD_CAD_Process+0xf8>
 80002bc:	4608      	mov	r0, r1
 80002be:	b005      	add	sp, #20
 80002c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080002c4 <.text_6>:
 80002c4:	200001d0 	.word	0x200001d0

080002c8 <.text_7>:
 80002c8:	200001dc 	.word	0x200001dc

080002cc <.text_8>:
 80002cc:	f407a5c2 	.word	0xf407a5c2

080002d0 <.text_9>:
 80002d0:	0000fff0 	.word	0x0000fff0

080002d4 <.text_10>:
 80002d4:	e000ed00 	.word	0xe000ed00

080002d8 <.text_11>:
 80002d8:	0000c240 	.word	0x0000c240

080002dc <.text_12>:
 80002dc:	0000c270 	.word	0x0000c270

080002e0 <.text_13>:
 80002e0:	e0042000 	.word	0xe0042000

080002e4 <.text_14>:
 80002e4:	5c001000 	.word	0x5c001000

080002e8 <.text_15>:
 80002e8:	58024c00 	.word	0x58024c00

080002ec <.text_16>:
 80002ec:	40023000 	.word	0x40023000

080002f0 <USBPD_CAD_AssertRd>:
 80002f0:	b510      	push	{r4, lr}
 80002f2:	0004      	movs	r4, r0
 80002f4:	f00d fc2e 	bl	800db54 <USBPDM1_DeAssertRp>
 80002f8:	0020      	movs	r0, r4
 80002fa:	f00d fc35 	bl	800db68 <USBPDM1_AssertRd>
 80002fe:	bd10      	pop	{r4, pc}

08000300 <USBPD_CAD_AssertRp>:
 8000300:	b510      	push	{r4, lr}
 8000302:	0004      	movs	r4, r0
 8000304:	f00d fcd6 	bl	800dcb4 <USBPDM1_DeAssertRd>
 8000308:	0020      	movs	r0, r4
 800030a:	f00d fb6b 	bl	800d9e4 <USBPDM1_AssertRp>
 800030e:	bd10      	pop	{r4, pc}

08000310 <USBPD_CAD_EnterErrorRecovery>:
 8000310:	b580      	push	{r7, lr}
 8000312:	f00b ff35 	bl	800c180 <CAD_Enter_ErrorRecovery>
 8000316:	bd01      	pop	{r0, pc}

08000318 <USBPD_CAD_SRC_SetRpResistor>:
 8000318:	b580      	push	{r7, lr}
 800031a:	f00b ff9b 	bl	800c254 <CAD_Set_ResistorRp>
 800031e:	2800      	cmp	r0, #0
 8000320:	d000      	beq.n	8000324 <USBPD_CAD_SRC_SetRpResistor+0xc>
 8000322:	2004      	movs	r0, #4
 8000324:	bd02      	pop	{r1, pc}

08000326 <USBPD_CAD_SetRpResistor>:
 8000326:	b580      	push	{r7, lr}
 8000328:	f7ff fff6 	bl	8000318 <USBPD_CAD_SRC_SetRpResistor>
 800032c:	bd02      	pop	{r1, pc}

0800032e <USBPD_CAD_GetMemoryConsumption>:
 800032e:	2018      	movs	r0, #24
 8000330:	4770      	bx	lr
	...

08000334 <USBPD_PE_Init>:
 8000334:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000336:	000d      	movs	r5, r1
 8000338:	0017      	movs	r7, r2
 800033a:	001c      	movs	r4, r3
 800033c:	6869      	ldr	r1, [r5, #4]
 800033e:	070a      	lsls	r2, r1, #28
 8000340:	0fd2      	lsrs	r2, r2, #31
 8000342:	d002      	beq.n	800034a <USBPD_PE_Init+0x16>
 8000344:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000346:	2900      	cmp	r1, #0
 8000348:	d002      	beq.n	8000350 <USBPD_PE_Init+0x1c>
 800034a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800034c:	2900      	cmp	r1, #0
 800034e:	d101      	bne.n	8000354 <USBPD_PE_Init+0x20>
 8000350:	201b      	movs	r0, #27
 8000352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000354:	4669      	mov	r1, sp
 8000356:	7008      	strb	r0, [r1, #0]
 8000358:	4668      	mov	r0, sp
 800035a:	7800      	ldrb	r0, [r0, #0]
 800035c:	2801      	cmp	r0, #1
 800035e:	d838      	bhi.n	80003d2 <USBPD_PE_Init+0x9e>
 8000360:	2696      	movs	r6, #150	; 0x96
 8000362:	00f6      	lsls	r6, r6, #3
 8000364:	0030      	movs	r0, r6
 8000366:	f014 ff37 	bl	80151d8 <malloc>
 800036a:	4970      	ldr	r1, [pc, #448]	; (800052c <.text_13>)
 800036c:	466a      	mov	r2, sp
 800036e:	7812      	ldrb	r2, [r2, #0]
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	5088      	str	r0, [r1, r2]
 8000374:	2800      	cmp	r0, #0
 8000376:	d101      	bne.n	800037c <USBPD_PE_Init+0x48>
 8000378:	2416      	movs	r4, #22
 800037a:	e03e      	b.n	80003fa <USBPD_PE_Init+0xc6>
 800037c:	9001      	str	r0, [sp, #4]
 800037e:	0031      	movs	r1, r6
 8000380:	f014 fef0 	bl	8015164 <__aeabi_memclr>
 8000384:	9801      	ldr	r0, [sp, #4]
 8000386:	6005      	str	r5, [r0, #0]
 8000388:	9801      	ldr	r0, [sp, #4]
 800038a:	6047      	str	r7, [r0, #4]
 800038c:	4668      	mov	r0, sp
 800038e:	7800      	ldrb	r0, [r0, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	7408      	strb	r0, [r1, #16]
 8000394:	9801      	ldr	r0, [sp, #4]
 8000396:	6084      	str	r4, [r0, #8]
 8000398:	9801      	ldr	r0, [sp, #4]
 800039a:	4965      	ldr	r1, [pc, #404]	; (8000530 <.text_14>)
 800039c:	1843      	adds	r3, r0, r1
 800039e:	49b3      	ldr	r1, [pc, #716]	; (800066c <.text_16>)
 80003a0:	1842      	adds	r2, r0, r1
 80003a2:	0029      	movs	r1, r5
 80003a4:	4668      	mov	r0, sp
 80003a6:	7800      	ldrb	r0, [r0, #0]
 80003a8:	f005 f8ee 	bl	8005588 <USBPD_PRL_Init>
 80003ac:	0004      	movs	r4, r0
 80003ae:	d124      	bne.n	80003fa <USBPD_PE_Init+0xc6>
 80003b0:	9801      	ldr	r0, [sp, #4]
 80003b2:	6840      	ldr	r0, [r0, #4]
 80003b4:	6801      	ldr	r1, [r0, #0]
 80003b6:	2603      	movs	r6, #3
 80003b8:	9a01      	ldr	r2, [sp, #4]
 80003ba:	6812      	ldr	r2, [r2, #0]
 80003bc:	6852      	ldr	r2, [r2, #4]
 80003be:	0753      	lsls	r3, r2, #29
 80003c0:	0fdb      	lsrs	r3, r3, #31
 80003c2:	d008      	beq.n	80003d6 <USBPD_PE_Init+0xa2>
 80003c4:	2208      	movs	r2, #8
 80003c6:	430a      	orrs	r2, r1
 80003c8:	6002      	str	r2, [r0, #0]
 80003ca:	686b      	ldr	r3, [r5, #4]
 80003cc:	4033      	ands	r3, r6
 80003ce:	2201      	movs	r2, #1
 80003d0:	e007      	b.n	80003e2 <USBPD_PE_Init+0xae>
 80003d2:	2417      	movs	r4, #23
 80003d4:	e011      	b.n	80003fa <USBPD_PE_Init+0xc6>
 80003d6:	2208      	movs	r2, #8
 80003d8:	4391      	bics	r1, r2
 80003da:	6001      	str	r1, [r0, #0]
 80003dc:	686b      	ldr	r3, [r5, #4]
 80003de:	4033      	ands	r3, r6
 80003e0:	2200      	movs	r2, #0
 80003e2:	4611      	mov	r1, r2
 80003e4:	4668      	mov	r0, sp
 80003e6:	7800      	ldrb	r0, [r0, #0]
 80003e8:	f005 f913 	bl	8005612 <USBPD_PRL_SetHeader>
 80003ec:	6868      	ldr	r0, [r5, #4]
 80003ee:	4006      	ands	r6, r0
 80003f0:	0031      	movs	r1, r6
 80003f2:	4668      	mov	r0, sp
 80003f4:	7800      	ldrb	r0, [r0, #0]
 80003f6:	f005 f94a 	bl	800568e <USBPD_PRL_CBL_SetHeaderSpecification>
 80003fa:	0020      	movs	r0, r4
 80003fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080003fe <USBPD_PE_TimerCounter>:
 80003fe:	494b      	ldr	r1, [pc, #300]	; (800052c <.text_13>)
 8000400:	0080      	lsls	r0, r0, #2
 8000402:	5808      	ldr	r0, [r1, r0]
 8000404:	499a      	ldr	r1, [pc, #616]	; (8000670 <.text_17>)
 8000406:	084a      	lsrs	r2, r1, #1
 8000408:	8bc3      	ldrh	r3, [r0, #30]
 800040a:	4213      	tst	r3, r2
 800040c:	d002      	beq.n	8000414 <USBPD_PE_TimerCounter+0x16>
 800040e:	8bc3      	ldrh	r3, [r0, #30]
 8000410:	185b      	adds	r3, r3, r1
 8000412:	83c3      	strh	r3, [r0, #30]
 8000414:	8c03      	ldrh	r3, [r0, #32]
 8000416:	4213      	tst	r3, r2
 8000418:	d002      	beq.n	8000420 <USBPD_PE_TimerCounter+0x22>
 800041a:	8c03      	ldrh	r3, [r0, #32]
 800041c:	185b      	adds	r3, r3, r1
 800041e:	8403      	strh	r3, [r0, #32]
 8000420:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8000422:	4213      	tst	r3, r2
 8000424:	d002      	beq.n	800042c <USBPD_PE_TimerCounter+0x2e>
 8000426:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8000428:	185b      	adds	r3, r3, r1
 800042a:	84c3      	strh	r3, [r0, #38]	; 0x26
 800042c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800042e:	4213      	tst	r3, r2
 8000430:	d002      	beq.n	8000438 <USBPD_PE_TimerCounter+0x3a>
 8000432:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000434:	185b      	adds	r3, r3, r1
 8000436:	8443      	strh	r3, [r0, #34]	; 0x22
 8000438:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800043a:	4213      	tst	r3, r2
 800043c:	d002      	beq.n	8000444 <USBPD_PE_TimerCounter+0x46>
 800043e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8000440:	1851      	adds	r1, r2, r1
 8000442:	8481      	strh	r1, [r0, #36]	; 0x24
 8000444:	4770      	bx	lr

08000446 <USBPD_PE_TimerCounteUpdate>:
 8000446:	b570      	push	{r4, r5, r6, lr}
 8000448:	000e      	movs	r6, r1
 800044a:	4938      	ldr	r1, [pc, #224]	; (800052c <.text_13>)
 800044c:	0080      	lsls	r0, r0, #2
 800044e:	580c      	ldr	r4, [r1, r0]
 8000450:	4db0      	ldr	r5, [pc, #704]	; (8000714 <.text_19>)
 8000452:	8be0      	ldrh	r0, [r4, #30]
 8000454:	4228      	tst	r0, r5
 8000456:	d004      	beq.n	8000462 <USBPD_PE_TimerCounteUpdate+0x1c>
 8000458:	b2b1      	uxth	r1, r6
 800045a:	8be0      	ldrh	r0, [r4, #30]
 800045c:	f000 ff26 	bl	80012ac <PE_UpdateTimer>
 8000460:	83e0      	strh	r0, [r4, #30]
 8000462:	8c20      	ldrh	r0, [r4, #32]
 8000464:	4228      	tst	r0, r5
 8000466:	d004      	beq.n	8000472 <USBPD_PE_TimerCounteUpdate+0x2c>
 8000468:	b2b1      	uxth	r1, r6
 800046a:	8c20      	ldrh	r0, [r4, #32]
 800046c:	f000 ff1e 	bl	80012ac <PE_UpdateTimer>
 8000470:	8420      	strh	r0, [r4, #32]
 8000472:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8000474:	4228      	tst	r0, r5
 8000476:	d004      	beq.n	8000482 <USBPD_PE_TimerCounteUpdate+0x3c>
 8000478:	b2b1      	uxth	r1, r6
 800047a:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 800047c:	f000 ff16 	bl	80012ac <PE_UpdateTimer>
 8000480:	84e0      	strh	r0, [r4, #38]	; 0x26
 8000482:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8000484:	4228      	tst	r0, r5
 8000486:	d004      	beq.n	8000492 <USBPD_PE_TimerCounteUpdate+0x4c>
 8000488:	b2b1      	uxth	r1, r6
 800048a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800048c:	f000 ff0e 	bl	80012ac <PE_UpdateTimer>
 8000490:	8460      	strh	r0, [r4, #34]	; 0x22
 8000492:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8000494:	4228      	tst	r0, r5
 8000496:	d004      	beq.n	80004a2 <USBPD_PE_TimerCounteUpdate+0x5c>
 8000498:	b2b1      	uxth	r1, r6
 800049a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800049c:	f000 ff06 	bl	80012ac <PE_UpdateTimer>
 80004a0:	84a0      	strh	r0, [r4, #36]	; 0x24
 80004a2:	bd70      	pop	{r4, r5, r6, pc}

080004a4 <USBPD_PE_IsCableConnected>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4a21      	ldr	r2, [pc, #132]	; (800052c <.text_13>)
 80004a8:	0080      	lsls	r0, r0, #2
 80004aa:	5810      	ldr	r0, [r2, r0]
 80004ac:	6842      	ldr	r2, [r0, #4]
 80004ae:	6813      	ldr	r3, [r2, #0]
 80004b0:	4cae      	ldr	r4, [pc, #696]	; (800076c <.text_21>)
 80004b2:	401c      	ands	r4, r3
 80004b4:	0309      	lsls	r1, r1, #12
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	015b      	lsls	r3, r3, #5
 80004ba:	4019      	ands	r1, r3
 80004bc:	4321      	orrs	r1, r4
 80004be:	6011      	str	r1, [r2, #0]
 80004c0:	2148      	movs	r1, #72	; 0x48
 80004c2:	7441      	strb	r1, [r0, #17]
 80004c4:	bd10      	pop	{r4, pc}

080004c6 <USBPD_PE_StateMachine_DRP>:
 80004c6:	b580      	push	{r7, lr}
 80004c8:	49a9      	ldr	r1, [pc, #676]	; (8000770 <.text_22>)
 80004ca:	0082      	lsls	r2, r0, #2
 80004cc:	5889      	ldr	r1, [r1, r2]
 80004ce:	6849      	ldr	r1, [r1, #4]
 80004d0:	6809      	ldr	r1, [r1, #0]
 80004d2:	074a      	lsls	r2, r1, #29
 80004d4:	0fd2      	lsrs	r2, r2, #31
 80004d6:	d002      	beq.n	80004de <USBPD_PE_StateMachine_DRP+0x18>
 80004d8:	f002 fb02 	bl	8002ae0 <USBPD_PE_StateMachine_SRC>
 80004dc:	bd02      	pop	{r1, pc}
 80004de:	f001 fbe3 	bl	8001ca8 <USBPD_PE_StateMachine_SNK>
 80004e2:	bd02      	pop	{r1, pc}

080004e4 <USBPD_PE_InitVDM_Callback>:
 80004e4:	4aa2      	ldr	r2, [pc, #648]	; (8000770 <.text_22>)
 80004e6:	0080      	lsls	r0, r0, #2
 80004e8:	5810      	ldr	r0, [r2, r0]
 80004ea:	60c1      	str	r1, [r0, #12]
 80004ec:	4770      	bx	lr

080004ee <USBPD_PE_Request_HardReset>:
 80004ee:	b580      	push	{r7, lr}
 80004f0:	499f      	ldr	r1, [pc, #636]	; (8000770 <.text_22>)
 80004f2:	0082      	lsls	r2, r0, #2
 80004f4:	5889      	ldr	r1, [r1, r2]
 80004f6:	220f      	movs	r2, #15
 80004f8:	2332      	movs	r3, #50	; 0x32
 80004fa:	54ca      	strb	r2, [r1, r3]
 80004fc:	6889      	ldr	r1, [r1, #8]
 80004fe:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000500:	4788      	blx	r1
 8000502:	2000      	movs	r0, #0
 8000504:	bd02      	pop	{r1, pc}

08000506 <USBPD_PE_Request_CableReset>:
 8000506:	b580      	push	{r7, lr}
 8000508:	4908      	ldr	r1, [pc, #32]	; (800052c <.text_13>)
 800050a:	0082      	lsls	r2, r0, #2
 800050c:	5889      	ldr	r1, [r1, r2]
 800050e:	684a      	ldr	r2, [r1, #4]
 8000510:	6812      	ldr	r2, [r2, #0]
 8000512:	4b98      	ldr	r3, [pc, #608]	; (8000774 <.text_23>)
 8000514:	4013      	ands	r3, r2
 8000516:	4a98      	ldr	r2, [pc, #608]	; (8000778 <.text_24>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d105      	bne.n	8000528 <USBPD_PE_Request_CableReset+0x22>
 800051c:	2299      	movs	r2, #153	; 0x99
 800051e:	2332      	movs	r3, #50	; 0x32
 8000520:	54ca      	strb	r2, [r1, r3]
 8000522:	6889      	ldr	r1, [r1, #8]
 8000524:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000526:	4788      	blx	r1
 8000528:	2010      	movs	r0, #16
 800052a:	bd02      	pop	{r1, pc}

0800052c <.text_13>:
 800052c:	200001e0 	.word	0x200001e0

08000530 <.text_14>:
 8000530:	0000048e 	.word	0x0000048e

08000534 <USBPD_PE_Request_CtrlMessage>:
 8000534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	488d      	ldr	r0, [pc, #564]	; (8000770 <.text_22>)
 800053a:	a914      	add	r1, sp, #80	; 0x50
 800053c:	7809      	ldrb	r1, [r1, #0]
 800053e:	0089      	lsls	r1, r1, #2
 8000540:	5840      	ldr	r0, [r0, r1]
 8000542:	9000      	str	r0, [sp, #0]
 8000544:	a802      	add	r0, sp, #8
 8000546:	498d      	ldr	r1, [pc, #564]	; (800077c <.text_25>)
 8000548:	2248      	movs	r2, #72	; 0x48
 800054a:	f014 fe10 	bl	801516e <__aeabi_memcpy>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	2132      	movs	r1, #50	; 0x32
 8000552:	5c40      	ldrb	r0, [r0, r1]
 8000554:	2800      	cmp	r0, #0
 8000556:	d106      	bne.n	8000566 <USBPD_PE_Request_CtrlMessage+0x32>
 8000558:	9800      	ldr	r0, [sp, #0]
 800055a:	6840      	ldr	r0, [r0, #4]
 800055c:	6806      	ldr	r6, [r0, #0]
 800055e:	2101      	movs	r1, #1
 8000560:	0b30      	lsrs	r0, r6, #12
 8000562:	4008      	ands	r0, r1
 8000564:	d101      	bne.n	800056a <USBPD_PE_Request_CtrlMessage+0x36>
 8000566:	2003      	movs	r0, #3
 8000568:	e07e      	b.n	8000668 <USBPD_PE_Request_CtrlMessage+0x134>
 800056a:	9800      	ldr	r0, [sp, #0]
 800056c:	6802      	ldr	r2, [r0, #0]
 800056e:	6850      	ldr	r0, [r2, #4]
 8000570:	0703      	lsls	r3, r0, #28
 8000572:	0fd8      	lsrs	r0, r3, #31
 8000574:	0774      	lsls	r4, r6, #29
 8000576:	0fe3      	lsrs	r3, r4, #31
 8000578:	2701      	movs	r7, #1
 800057a:	405f      	eors	r7, r3
 800057c:	0574      	lsls	r4, r6, #21
 800057e:	0f64      	lsrs	r4, r4, #29
 8000580:	2c03      	cmp	r4, #3
 8000582:	d101      	bne.n	8000588 <USBPD_PE_Request_CtrlMessage+0x54>
 8000584:	2401      	movs	r4, #1
 8000586:	e000      	b.n	800058a <USBPD_PE_Request_CtrlMessage+0x56>
 8000588:	2400      	movs	r4, #0
 800058a:	2503      	movs	r5, #3
 800058c:	402e      	ands	r6, r5
 800058e:	2e02      	cmp	r6, #2
 8000590:	d101      	bne.n	8000596 <USBPD_PE_Request_CtrlMessage+0x62>
 8000592:	2601      	movs	r6, #1
 8000594:	e000      	b.n	8000598 <USBPD_PE_Request_CtrlMessage+0x64>
 8000596:	2600      	movs	r6, #0
 8000598:	007f      	lsls	r7, r7, #1
 800059a:	4307      	orrs	r7, r0
 800059c:	0098      	lsls	r0, r3, #2
 800059e:	4338      	orrs	r0, r7
 80005a0:	00e4      	lsls	r4, r4, #3
 80005a2:	4304      	orrs	r4, r0
 80005a4:	01b3      	lsls	r3, r6, #6
 80005a6:	4323      	orrs	r3, r4
 80005a8:	401d      	ands	r5, r3
 80005aa:	d002      	beq.n	80005b2 <USBPD_PE_Request_CtrlMessage+0x7e>
 80005ac:	0018      	movs	r0, r3
 80005ae:	2310      	movs	r3, #16
 80005b0:	4303      	orrs	r3, r0
 80005b2:	2405      	movs	r4, #5
 80005b4:	4223      	tst	r3, r4
 80005b6:	d002      	beq.n	80005be <USBPD_PE_Request_CtrlMessage+0x8a>
 80005b8:	0018      	movs	r0, r3
 80005ba:	2320      	movs	r3, #32
 80005bc:	4303      	orrs	r3, r0
 80005be:	a815      	add	r0, sp, #84	; 0x54
 80005c0:	7805      	ldrb	r5, [r0, #0]
 80005c2:	006e      	lsls	r6, r5, #1
 80005c4:	1970      	adds	r0, r6, r5
 80005c6:	9001      	str	r0, [sp, #4]
 80005c8:	a802      	add	r0, sp, #8
 80005ca:	9e01      	ldr	r6, [sp, #4]
 80005cc:	5d86      	ldrb	r6, [r0, r6]
 80005ce:	4033      	ands	r3, r6
 80005d0:	42b3      	cmp	r3, r6
 80005d2:	d11c      	bne.n	800060e <USBPD_PE_Request_CtrlMessage+0xda>
 80005d4:	2300      	movs	r3, #0
 80005d6:	9e00      	ldr	r6, [sp, #0]
 80005d8:	2733      	movs	r7, #51	; 0x33
 80005da:	55f3      	strb	r3, [r6, r7]
 80005dc:	9b00      	ldr	r3, [sp, #0]
 80005de:	4eb0      	ldr	r6, [pc, #704]	; (80008a0 <.text_29>)
 80005e0:	199b      	adds	r3, r3, r6
 80005e2:	2d05      	cmp	r5, #5
 80005e4:	d02e      	beq.n	8000644 <USBPD_PE_Request_CtrlMessage+0x110>
 80005e6:	2d0b      	cmp	r5, #11
 80005e8:	d00c      	beq.n	8000604 <USBPD_PE_Request_CtrlMessage+0xd0>
 80005ea:	2d0d      	cmp	r5, #13
 80005ec:	d011      	beq.n	8000612 <USBPD_PE_Request_CtrlMessage+0xde>
 80005ee:	2d11      	cmp	r5, #17
 80005f0:	d014      	beq.n	800061c <USBPD_PE_Request_CtrlMessage+0xe8>
 80005f2:	2d12      	cmp	r5, #18
 80005f4:	d016      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0xf0>
 80005f6:	2d14      	cmp	r5, #20
 80005f8:	d016      	beq.n	8000628 <USBPD_PE_Request_CtrlMessage+0xf4>
 80005fa:	2d15      	cmp	r5, #21
 80005fc:	d019      	beq.n	8000632 <USBPD_PE_Request_CtrlMessage+0xfe>
 80005fe:	2d16      	cmp	r5, #22
 8000600:	d00e      	beq.n	8000620 <USBPD_PE_Request_CtrlMessage+0xec>
 8000602:	e020      	b.n	8000646 <USBPD_PE_Request_CtrlMessage+0x112>
 8000604:	9900      	ldr	r1, [sp, #0]
 8000606:	6889      	ldr	r1, [r1, #8]
 8000608:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800060a:	2900      	cmp	r1, #0
 800060c:	d11b      	bne.n	8000646 <USBPD_PE_Request_CtrlMessage+0x112>
 800060e:	2002      	movs	r0, #2
 8000610:	e02a      	b.n	8000668 <USBPD_PE_Request_CtrlMessage+0x134>
 8000612:	a916      	add	r1, sp, #88	; 0x58
 8000614:	7809      	ldrb	r1, [r1, #0]
 8000616:	9a00      	ldr	r2, [sp, #0]
 8000618:	55d1      	strb	r1, [r2, r7]
 800061a:	e014      	b.n	8000646 <USBPD_PE_Request_CtrlMessage+0x112>
 800061c:	2111      	movs	r1, #17
 800061e:	e00f      	b.n	8000640 <USBPD_PE_Request_CtrlMessage+0x10c>
 8000620:	2116      	movs	r1, #22
 8000622:	e00d      	b.n	8000640 <USBPD_PE_Request_CtrlMessage+0x10c>
 8000624:	2112      	movs	r1, #18
 8000626:	e00b      	b.n	8000640 <USBPD_PE_Request_CtrlMessage+0x10c>
 8000628:	8912      	ldrh	r2, [r2, #8]
 800062a:	0892      	lsrs	r2, r2, #2
 800062c:	420a      	tst	r2, r1
 800062e:	d10a      	bne.n	8000646 <USBPD_PE_Request_CtrlMessage+0x112>
 8000630:	e003      	b.n	800063a <USBPD_PE_Request_CtrlMessage+0x106>
 8000632:	8912      	ldrh	r2, [r2, #8]
 8000634:	09d2      	lsrs	r2, r2, #7
 8000636:	420a      	tst	r2, r1
 8000638:	d101      	bne.n	800063e <USBPD_PE_Request_CtrlMessage+0x10a>
 800063a:	2010      	movs	r0, #16
 800063c:	e014      	b.n	8000668 <USBPD_PE_Request_CtrlMessage+0x134>
 800063e:	2115      	movs	r1, #21
 8000640:	7019      	strb	r1, [r3, #0]
 8000642:	e000      	b.n	8000646 <USBPD_PE_Request_CtrlMessage+0x112>
 8000644:	701c      	strb	r4, [r3, #0]
 8000646:	9901      	ldr	r1, [sp, #4]
 8000648:	1841      	adds	r1, r0, r1
 800064a:	7849      	ldrb	r1, [r1, #1]
 800064c:	7059      	strb	r1, [r3, #1]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	1840      	adds	r0, r0, r1
 8000652:	7880      	ldrb	r0, [r0, #2]
 8000654:	9900      	ldr	r1, [sp, #0]
 8000656:	2232      	movs	r2, #50	; 0x32
 8000658:	5488      	strb	r0, [r1, r2]
 800065a:	a814      	add	r0, sp, #80	; 0x50
 800065c:	7800      	ldrb	r0, [r0, #0]
 800065e:	9900      	ldr	r1, [sp, #0]
 8000660:	6889      	ldr	r1, [r1, #8]
 8000662:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000664:	4788      	blx	r1
 8000666:	2000      	movs	r0, #0
 8000668:	b017      	add	sp, #92	; 0x5c
 800066a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800066c <.text_16>:
 800066c:	00000281 	.word	0x00000281

08000670 <.text_17>:
 8000670:	0000ffff 	.word	0x0000ffff

08000674 <USBPD_PE_Request_DataMessage>:
 8000674:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	000b      	movs	r3, r1
 800067a:	0017      	movs	r7, r2
 800067c:	483c      	ldr	r0, [pc, #240]	; (8000770 <.text_22>)
 800067e:	4669      	mov	r1, sp
 8000680:	7a09      	ldrb	r1, [r1, #8]
 8000682:	0089      	lsls	r1, r1, #2
 8000684:	5841      	ldr	r1, [r0, r1]
 8000686:	2402      	movs	r4, #2
 8000688:	2032      	movs	r0, #50	; 0x32
 800068a:	5c08      	ldrb	r0, [r1, r0]
 800068c:	2800      	cmp	r0, #0
 800068e:	d105      	bne.n	800069c <USBPD_PE_Request_DataMessage+0x28>
 8000690:	6848      	ldr	r0, [r1, #4]
 8000692:	2201      	movs	r2, #1
 8000694:	6805      	ldr	r5, [r0, #0]
 8000696:	0b2d      	lsrs	r5, r5, #12
 8000698:	4015      	ands	r5, r2
 800069a:	d101      	bne.n	80006a0 <USBPD_PE_Request_DataMessage+0x2c>
 800069c:	2003      	movs	r0, #3
 800069e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006a0:	466d      	mov	r5, sp
 80006a2:	702b      	strb	r3, [r5, #0]
 80006a4:	2300      	movs	r3, #0
 80006a6:	2633      	movs	r6, #51	; 0x33
 80006a8:	558b      	strb	r3, [r1, r6]
 80006aa:	4db9      	ldr	r5, [pc, #740]	; (8000990 <.text_34>)
 80006ac:	4eb9      	ldr	r6, [pc, #740]	; (8000994 <.text_35>)
 80006ae:	9701      	str	r7, [sp, #4]
 80006b0:	466f      	mov	r7, sp
 80006b2:	783f      	ldrb	r7, [r7, #0]
 80006b4:	2f01      	cmp	r7, #1
 80006b6:	d004      	beq.n	80006c2 <USBPD_PE_Request_DataMessage+0x4e>
 80006b8:	2f06      	cmp	r7, #6
 80006ba:	d013      	beq.n	80006e4 <USBPD_PE_Request_DataMessage+0x70>
 80006bc:	2f07      	cmp	r7, #7
 80006be:	d01a      	beq.n	80006f6 <USBPD_PE_Request_DataMessage+0x82>
 80006c0:	e025      	b.n	800070e <USBPD_PE_Request_DataMessage+0x9a>
 80006c2:	6800      	ldr	r0, [r0, #0]
 80006c4:	0880      	lsrs	r0, r0, #2
 80006c6:	4010      	ands	r0, r2
 80006c8:	d00a      	beq.n	80006e0 <USBPD_PE_Request_DataMessage+0x6c>
 80006ca:	48b3      	ldr	r0, [pc, #716]	; (8000998 <.text_36>)
 80006cc:	540a      	strb	r2, [r1, r0]
 80006ce:	2007      	movs	r0, #7
 80006d0:	2232      	movs	r2, #50	; 0x32
 80006d2:	5488      	strb	r0, [r1, r2]
 80006d4:	2400      	movs	r4, #0
 80006d6:	4668      	mov	r0, sp
 80006d8:	7a00      	ldrb	r0, [r0, #8]
 80006da:	6889      	ldr	r1, [r1, #8]
 80006dc:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006de:	4788      	blx	r1
 80006e0:	0020      	movs	r0, r4
 80006e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006e4:	6800      	ldr	r0, [r0, #0]
 80006e6:	4006      	ands	r6, r0
 80006e8:	42ae      	cmp	r6, r5
 80006ea:	d1f9      	bne.n	80006e0 <USBPD_PE_Request_DataMessage+0x6c>
 80006ec:	9801      	ldr	r0, [sp, #4]
 80006ee:	6800      	ldr	r0, [r0, #0]
 80006f0:	6288      	str	r0, [r1, #40]	; 0x28
 80006f2:	202b      	movs	r0, #43	; 0x2b
 80006f4:	e7ec      	b.n	80006d0 <USBPD_PE_Request_DataMessage+0x5c>
 80006f6:	6800      	ldr	r0, [r0, #0]
 80006f8:	4006      	ands	r6, r0
 80006fa:	42ae      	cmp	r6, r5
 80006fc:	d1f0      	bne.n	80006e0 <USBPD_PE_Request_DataMessage+0x6c>
 80006fe:	9801      	ldr	r0, [sp, #4]
 8000700:	6800      	ldr	r0, [r0, #0]
 8000702:	6288      	str	r0, [r1, #40]	; 0x28
 8000704:	207d      	movs	r0, #125	; 0x7d
 8000706:	4aa4      	ldr	r2, [pc, #656]	; (8000998 <.text_36>)
 8000708:	5488      	strb	r0, [r1, r2]
 800070a:	2062      	movs	r0, #98	; 0x62
 800070c:	e7e0      	b.n	80006d0 <USBPD_PE_Request_DataMessage+0x5c>
 800070e:	2410      	movs	r4, #16
 8000710:	e7e6      	b.n	80006e0 <USBPD_PE_Request_DataMessage+0x6c>
	...

08000714 <.text_19>:
 8000714:	00007fff 	.word	0x00007fff

08000718 <USBPD_PE_Send_Request>:
 8000718:	b538      	push	{r3, r4, r5, lr}
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <.text_22>)
 800071c:	0084      	lsls	r4, r0, #2
 800071e:	591b      	ldr	r3, [r3, r4]
 8000720:	2432      	movs	r4, #50	; 0x32
 8000722:	5d1c      	ldrb	r4, [r3, r4]
 8000724:	2c00      	cmp	r4, #0
 8000726:	d104      	bne.n	8000732 <USBPD_PE_Send_Request+0x1a>
 8000728:	685c      	ldr	r4, [r3, #4]
 800072a:	6824      	ldr	r4, [r4, #0]
 800072c:	04e5      	lsls	r5, r4, #19
 800072e:	0fed      	lsrs	r5, r5, #31
 8000730:	d101      	bne.n	8000736 <USBPD_PE_Send_Request+0x1e>
 8000732:	2003      	movs	r0, #3
 8000734:	bd32      	pop	{r1, r4, r5, pc}
 8000736:	4dba      	ldr	r5, [pc, #744]	; (8000a20 <.text_39>)
 8000738:	4025      	ands	r5, r4
 800073a:	24c0      	movs	r4, #192	; 0xc0
 800073c:	00a4      	lsls	r4, r4, #2
 800073e:	42a5      	cmp	r5, r4
 8000740:	d112      	bne.n	8000768 <USBPD_PE_Send_Request+0x50>
 8000742:	2445      	movs	r4, #69	; 0x45
 8000744:	2532      	movs	r5, #50	; 0x32
 8000746:	555c      	strb	r4, [r3, r5]
 8000748:	6199      	str	r1, [r3, #24]
 800074a:	6959      	ldr	r1, [r3, #20]
 800074c:	240c      	movs	r4, #12
 800074e:	43a1      	bics	r1, r4
 8000750:	0092      	lsls	r2, r2, #2
 8000752:	4014      	ands	r4, r2
 8000754:	430c      	orrs	r4, r1
 8000756:	615c      	str	r4, [r3, #20]
 8000758:	2100      	movs	r1, #0
 800075a:	2233      	movs	r2, #51	; 0x33
 800075c:	5499      	strb	r1, [r3, r2]
 800075e:	6899      	ldr	r1, [r3, #8]
 8000760:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000762:	4788      	blx	r1
 8000764:	2000      	movs	r0, #0
 8000766:	bd32      	pop	{r1, r4, r5, pc}
 8000768:	2002      	movs	r0, #2
 800076a:	bd32      	pop	{r1, r4, r5, pc}

0800076c <.text_21>:
 800076c:	ffffefff 	.word	0xffffefff

08000770 <.text_22>:
 8000770:	200001e0 	.word	0x200001e0

08000774 <.text_23>:
 8000774:	00008708 	.word	0x00008708

08000778 <.text_24>:
 8000778:	00008308 	.word	0x00008308

0800077c <.text_25>:
 800077c:	0801675c 	.word	0x0801675c

08000780 <USBPD_PE_SendExtendedMessage>:
 8000780:	b5fb      	push	{r0, r1, r3, r4, r5, r6, r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	48b9      	ldr	r0, [pc, #740]	; (8000a6c <.text_41>)
 8000786:	4669      	mov	r1, sp
 8000788:	7a09      	ldrb	r1, [r1, #8]
 800078a:	0089      	lsls	r1, r1, #2
 800078c:	5845      	ldr	r5, [r0, r1]
 800078e:	2032      	movs	r0, #50	; 0x32
 8000790:	5c28      	ldrb	r0, [r5, r0]
 8000792:	2800      	cmp	r0, #0
 8000794:	d104      	bne.n	80007a0 <USBPD_PE_SendExtendedMessage+0x20>
 8000796:	6868      	ldr	r0, [r5, #4]
 8000798:	6800      	ldr	r0, [r0, #0]
 800079a:	04c1      	lsls	r1, r0, #19
 800079c:	0fc9      	lsrs	r1, r1, #31
 800079e:	d101      	bne.n	80007a4 <USBPD_PE_SendExtendedMessage+0x24>
 80007a0:	2003      	movs	r0, #3
 80007a2:	e064      	b.n	800086e <USBPD_PE_SendExtendedMessage+0xee>
 80007a4:	0541      	lsls	r1, r0, #21
 80007a6:	0f49      	lsrs	r1, r1, #29
 80007a8:	2903      	cmp	r1, #3
 80007aa:	d10a      	bne.n	80007c2 <USBPD_PE_SendExtendedMessage+0x42>
 80007ac:	0780      	lsls	r0, r0, #30
 80007ae:	0f80      	lsrs	r0, r0, #30
 80007b0:	2801      	cmp	r0, #1
 80007b2:	d801      	bhi.n	80007b8 <USBPD_PE_SendExtendedMessage+0x38>
 80007b4:	2001      	movs	r0, #1
 80007b6:	e05a      	b.n	800086e <USBPD_PE_SendExtendedMessage+0xee>
 80007b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80007ba:	21ff      	movs	r1, #255	; 0xff
 80007bc:	1d89      	adds	r1, r1, #6
 80007be:	428c      	cmp	r4, r1
 80007c0:	d301      	bcc.n	80007c6 <USBPD_PE_SendExtendedMessage+0x46>
 80007c2:	2002      	movs	r0, #2
 80007c4:	e053      	b.n	800086e <USBPD_PE_SendExtendedMessage+0xee>
 80007c6:	4668      	mov	r0, sp
 80007c8:	7002      	strb	r2, [r0, #0]
 80007ca:	6968      	ldr	r0, [r5, #20]
 80007cc:	2110      	movs	r1, #16
 80007ce:	4388      	bics	r0, r1
 80007d0:	6168      	str	r0, [r5, #20]
 80007d2:	2010      	movs	r0, #16
 80007d4:	4669      	mov	r1, sp
 80007d6:	7809      	ldrb	r1, [r1, #0]
 80007d8:	2903      	cmp	r1, #3
 80007da:	d008      	beq.n	80007ee <USBPD_PE_SendExtendedMessage+0x6e>
 80007dc:	2904      	cmp	r1, #4
 80007de:	d01c      	beq.n	800081a <USBPD_PE_SendExtendedMessage+0x9a>
 80007e0:	2906      	cmp	r1, #6
 80007e2:	d01c      	beq.n	800081e <USBPD_PE_SendExtendedMessage+0x9e>
 80007e4:	2908      	cmp	r1, #8
 80007e6:	d01c      	beq.n	8000822 <USBPD_PE_SendExtendedMessage+0xa2>
 80007e8:	290a      	cmp	r1, #10
 80007ea:	d01f      	beq.n	800082c <USBPD_PE_SendExtendedMessage+0xac>
 80007ec:	e03f      	b.n	800086e <USBPD_PE_SendExtendedMessage+0xee>
 80007ee:	210c      	movs	r1, #12
 80007f0:	4a9f      	ldr	r2, [pc, #636]	; (8000a70 <.text_42>)
 80007f2:	18aa      	adds	r2, r5, r2
 80007f4:	7091      	strb	r1, [r2, #2]
 80007f6:	6969      	ldr	r1, [r5, #20]
 80007f8:	4308      	orrs	r0, r1
 80007fa:	6168      	str	r0, [r5, #20]
 80007fc:	2600      	movs	r6, #0
 80007fe:	0020      	movs	r0, r4
 8000800:	d021      	beq.n	8000846 <USBPD_PE_SendExtendedMessage+0xc6>
 8000802:	2700      	movs	r7, #0
 8000804:	4668      	mov	r0, sp
 8000806:	7a00      	ldrb	r0, [r0, #8]
 8000808:	f000 fa74 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 800080c:	2801      	cmp	r0, #1
 800080e:	d100      	bne.n	8000812 <USBPD_PE_SendExtendedMessage+0x92>
 8000810:	2704      	movs	r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	9804      	ldr	r0, [sp, #16]
 8000816:	4e97      	ldr	r6, [pc, #604]	; (8000a74 <.text_43>)
 8000818:	e00f      	b.n	800083a <USBPD_PE_SendExtendedMessage+0xba>
 800081a:	210d      	movs	r1, #13
 800081c:	e7e8      	b.n	80007f0 <USBPD_PE_SendExtendedMessage+0x70>
 800081e:	210e      	movs	r1, #14
 8000820:	e7e6      	b.n	80007f0 <USBPD_PE_SendExtendedMessage+0x70>
 8000822:	207b      	movs	r0, #123	; 0x7b
 8000824:	4992      	ldr	r1, [pc, #584]	; (8000a70 <.text_42>)
 8000826:	1869      	adds	r1, r5, r1
 8000828:	7088      	strb	r0, [r1, #2]
 800082a:	e7e7      	b.n	80007fc <USBPD_PE_SendExtendedMessage+0x7c>
 800082c:	207c      	movs	r0, #124	; 0x7c
 800082e:	e7f9      	b.n	8000824 <USBPD_PE_SendExtendedMessage+0xa4>
 8000830:	5c81      	ldrb	r1, [r0, r2]
 8000832:	19d3      	adds	r3, r2, r7
 8000834:	18eb      	adds	r3, r5, r3
 8000836:	5599      	strb	r1, [r3, r6]
 8000838:	1c52      	adds	r2, r2, #1
 800083a:	42a2      	cmp	r2, r4
 800083c:	d3f8      	bcc.n	8000830 <USBPD_PE_SendExtendedMessage+0xb0>
 800083e:	2092      	movs	r0, #146	; 0x92
 8000840:	00c0      	lsls	r0, r0, #3
 8000842:	522c      	strh	r4, [r5, r0]
 8000844:	e002      	b.n	800084c <USBPD_PE_SendExtendedMessage+0xcc>
 8000846:	2092      	movs	r0, #146	; 0x92
 8000848:	00c0      	lsls	r0, r0, #3
 800084a:	522e      	strh	r6, [r5, r0]
 800084c:	4668      	mov	r0, sp
 800084e:	7b00      	ldrb	r0, [r0, #12]
 8000850:	2133      	movs	r1, #51	; 0x33
 8000852:	5468      	strb	r0, [r5, r1]
 8000854:	4668      	mov	r0, sp
 8000856:	7800      	ldrb	r0, [r0, #0]
 8000858:	4985      	ldr	r1, [pc, #532]	; (8000a70 <.text_42>)
 800085a:	5468      	strb	r0, [r5, r1]
 800085c:	2031      	movs	r0, #49	; 0x31
 800085e:	2132      	movs	r1, #50	; 0x32
 8000860:	5468      	strb	r0, [r5, r1]
 8000862:	4668      	mov	r0, sp
 8000864:	7a00      	ldrb	r0, [r0, #8]
 8000866:	68a9      	ldr	r1, [r5, #8]
 8000868:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800086a:	4788      	blx	r1
 800086c:	2000      	movs	r0, #0
 800086e:	b005      	add	sp, #20
 8000870:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000872 <PE_Send_RESET>:
 8000872:	b538      	push	{r3, r4, r5, lr}
 8000874:	0004      	movs	r4, r0
 8000876:	000d      	movs	r5, r1
 8000878:	2d05      	cmp	r5, #5
 800087a:	d101      	bne.n	8000880 <PE_Send_RESET+0xe>
 800087c:	211f      	movs	r1, #31
 800087e:	e000      	b.n	8000882 <PE_Send_RESET+0x10>
 8000880:	215e      	movs	r1, #94	; 0x5e
 8000882:	f000 fd01 	bl	8001288 <PE_Notification>
 8000886:	0029      	movs	r1, r5
 8000888:	7c20      	ldrb	r0, [r4, #16]
 800088a:	f005 f89f 	bl	80059cc <USBPD_PRL_ResetRequestProcess>
 800088e:	bd31      	pop	{r0, r4, r5, pc}

08000890 <PE_Get_SpecRevision>:
 8000890:	4976      	ldr	r1, [pc, #472]	; (8000a6c <.text_41>)
 8000892:	0080      	lsls	r0, r0, #2
 8000894:	5808      	ldr	r0, [r1, r0]
 8000896:	6840      	ldr	r0, [r0, #4]
 8000898:	7800      	ldrb	r0, [r0, #0]
 800089a:	0780      	lsls	r0, r0, #30
 800089c:	0f80      	lsrs	r0, r0, #30
 800089e:	4770      	bx	lr

080008a0 <.text_29>:
 80008a0:	0000025e 	.word	0x0000025e

080008a4 <PE_ChangePowerRole>:
 80008a4:	b538      	push	{r3, r4, r5, lr}
 80008a6:	6842      	ldr	r2, [r0, #4]
 80008a8:	6813      	ldr	r3, [r2, #0]
 80008aa:	2404      	movs	r4, #4
 80008ac:	43a3      	bics	r3, r4
 80008ae:	008c      	lsls	r4, r1, #2
 80008b0:	2504      	movs	r5, #4
 80008b2:	402c      	ands	r4, r5
 80008b4:	431c      	orrs	r4, r3
 80008b6:	6014      	str	r4, [r2, #0]
 80008b8:	7c00      	ldrb	r0, [r0, #16]
 80008ba:	f004 fec6 	bl	800564a <USBPD_PRL_SetHeaderPowerRole>
 80008be:	bd31      	pop	{r0, r4, r5, pc}

080008c0 <PE_Get_RxEvent>:
 80008c0:	b530      	push	{r4, r5, lr}
 80008c2:	0001      	movs	r1, r0
 80008c4:	2014      	movs	r0, #20
 80008c6:	f3ef 8210 	mrs	r2, PRIMASK
 80008ca:	b672      	cpsid	i
 80008cc:	233c      	movs	r3, #60	; 0x3c
 80008ce:	5ccc      	ldrb	r4, [r1, r3]
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d029      	beq.n	8000928 <PE_Get_RxEvent+0x68>
 80008d4:	2393      	movs	r3, #147	; 0x93
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	18cb      	adds	r3, r1, r3
 80008da:	5d1d      	ldrb	r5, [r3, r4]
 80008dc:	066d      	lsls	r5, r5, #25
 80008de:	d401      	bmi.n	80008e4 <PE_Get_RxEvent+0x24>
 80008e0:	2003      	movs	r0, #3
 80008e2:	bd30      	pop	{r4, r5, pc}
 80008e4:	2584      	movs	r5, #132	; 0x84
 80008e6:	006d      	lsls	r5, r5, #1
 80008e8:	436c      	muls	r4, r5
 80008ea:	190c      	adds	r4, r1, r4
 80008ec:	3ccb      	subs	r4, #203	; 0xcb
 80008ee:	638c      	str	r4, [r1, #56]	; 0x38
 80008f0:	7825      	ldrb	r5, [r4, #0]
 80008f2:	7864      	ldrb	r4, [r4, #1]
 80008f4:	0224      	lsls	r4, r4, #8
 80008f6:	192c      	adds	r4, r5, r4
 80008f8:	868c      	strh	r4, [r1, #52]	; 0x34
 80008fa:	000c      	movs	r4, r1
 80008fc:	3430      	adds	r4, #48	; 0x30
 80008fe:	253c      	movs	r5, #60	; 0x3c
 8000900:	5d49      	ldrb	r1, [r1, r5]
 8000902:	5c59      	ldrb	r1, [r3, r1]
 8000904:	06c9      	lsls	r1, r1, #27
 8000906:	0ec9      	lsrs	r1, r1, #27
 8000908:	2901      	cmp	r1, #1
 800090a:	d004      	beq.n	8000916 <PE_Get_RxEvent+0x56>
 800090c:	2902      	cmp	r1, #2
 800090e:	d005      	beq.n	800091c <PE_Get_RxEvent+0x5c>
 8000910:	2904      	cmp	r1, #4
 8000912:	d006      	beq.n	8000922 <PE_Get_RxEvent+0x62>
 8000914:	e008      	b.n	8000928 <PE_Get_RxEvent+0x68>
 8000916:	2011      	movs	r0, #17
 8000918:	2100      	movs	r1, #0
 800091a:	e004      	b.n	8000926 <PE_Get_RxEvent+0x66>
 800091c:	2012      	movs	r0, #18
 800091e:	2101      	movs	r1, #1
 8000920:	e001      	b.n	8000926 <PE_Get_RxEvent+0x66>
 8000922:	2013      	movs	r0, #19
 8000924:	2102      	movs	r1, #2
 8000926:	7021      	strb	r1, [r4, #0]
 8000928:	f382 8810 	msr	PRIMASK, r2
 800092c:	bd30      	pop	{r4, r5, pc}

0800092e <PE_Clear_RxEvent>:
 800092e:	b510      	push	{r4, lr}
 8000930:	0001      	movs	r1, r0
 8000932:	f3ef 8410 	mrs	r4, PRIMASK
 8000936:	b672      	cpsid	i
 8000938:	203c      	movs	r0, #60	; 0x3c
 800093a:	5c08      	ldrb	r0, [r1, r0]
 800093c:	2800      	cmp	r0, #0
 800093e:	d015      	beq.n	800096c <PE_Clear_RxEvent+0x3e>
 8000940:	1e42      	subs	r2, r0, #1
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	48c1      	ldr	r0, [pc, #772]	; (8000c4c <.text_52>)
 8000946:	180b      	adds	r3, r1, r0
 8000948:	2000      	movs	r0, #0
 800094a:	5498      	strb	r0, [r3, r2]
 800094c:	1e52      	subs	r2, r2, #1
 800094e:	4192      	sbcs	r2, r2
 8000950:	0fd2      	lsrs	r2, r2, #31
 8000952:	5c9b      	ldrb	r3, [r3, r2]
 8000954:	065b      	lsls	r3, r3, #25
 8000956:	d507      	bpl.n	8000968 <PE_Clear_RxEvent+0x3a>
 8000958:	1c52      	adds	r2, r2, #1
 800095a:	203c      	movs	r0, #60	; 0x3c
 800095c:	540a      	strb	r2, [r1, r0]
 800095e:	7c08      	ldrb	r0, [r1, #16]
 8000960:	6889      	ldr	r1, [r1, #8]
 8000962:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000964:	4788      	blx	r1
 8000966:	e001      	b.n	800096c <PE_Clear_RxEvent+0x3e>
 8000968:	223c      	movs	r2, #60	; 0x3c
 800096a:	5488      	strb	r0, [r1, r2]
 800096c:	f384 8810 	msr	PRIMASK, r4
 8000970:	bd10      	pop	{r4, pc}

08000972 <PE_PRL_Control_RxEvent>:
 8000972:	493e      	ldr	r1, [pc, #248]	; (8000a6c <.text_41>)
 8000974:	0080      	lsls	r0, r0, #2
 8000976:	580a      	ldr	r2, [r1, r0]
 8000978:	2000      	movs	r0, #0
 800097a:	f3ef 8110 	mrs	r1, PRIMASK
 800097e:	b672      	cpsid	i
 8000980:	233c      	movs	r3, #60	; 0x3c
 8000982:	5cd2      	ldrb	r2, [r2, r3]
 8000984:	2a00      	cmp	r2, #0
 8000986:	d000      	beq.n	800098a <PE_PRL_Control_RxEvent+0x18>
 8000988:	2001      	movs	r0, #1
 800098a:	f381 8810 	msr	PRIMASK, r1
 800098e:	4770      	bx	lr

08000990 <.text_34>:
 8000990:	00000302 	.word	0x00000302

08000994 <.text_35>:
 8000994:	00000703 	.word	0x00000703

08000998 <.text_36>:
 8000998:	0000025f 	.word	0x0000025f

0800099c <PE_Convert_SOPRxEvent>:
 800099c:	2800      	cmp	r0, #0
 800099e:	d003      	beq.n	80009a8 <PE_Convert_SOPRxEvent+0xc>
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d005      	beq.n	80009b0 <PE_Convert_SOPRxEvent+0x14>
 80009a4:	d302      	bcc.n	80009ac <PE_Convert_SOPRxEvent+0x10>
 80009a6:	e005      	b.n	80009b4 <PE_Convert_SOPRxEvent+0x18>
 80009a8:	2011      	movs	r0, #17
 80009aa:	4770      	bx	lr
 80009ac:	2012      	movs	r0, #18
 80009ae:	4770      	bx	lr
 80009b0:	2013      	movs	r0, #19
 80009b2:	4770      	bx	lr
 80009b4:	2014      	movs	r0, #20
 80009b6:	4770      	bx	lr

080009b8 <PE_Check_AMSConflict>:
 80009b8:	b538      	push	{r3, r4, r5, lr}
 80009ba:	0004      	movs	r4, r0
 80009bc:	2500      	movs	r5, #0
 80009be:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80009c0:	49bb      	ldr	r1, [pc, #748]	; (8000cb0 <.text_55>)
 80009c2:	4001      	ands	r1, r0
 80009c4:	290d      	cmp	r1, #13
 80009c6:	d103      	bne.n	80009d0 <PE_Check_AMSConflict+0x18>
 80009c8:	2010      	movs	r0, #16
 80009ca:	7460      	strb	r0, [r4, #17]
 80009cc:	2015      	movs	r0, #21
 80009ce:	bd32      	pop	{r1, r4, r5, pc}
 80009d0:	7f20      	ldrb	r0, [r4, #28]
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d01b      	beq.n	8000a0e <PE_Check_AMSConflict+0x56>
 80009d6:	1e40      	subs	r0, r0, #1
 80009d8:	2801      	cmp	r0, #1
 80009da:	d90a      	bls.n	80009f2 <PE_Check_AMSConflict+0x3a>
 80009dc:	1e80      	subs	r0, r0, #2
 80009de:	d019      	beq.n	8000a14 <PE_Check_AMSConflict+0x5c>
 80009e0:	1e40      	subs	r0, r0, #1
 80009e2:	d019      	beq.n	8000a18 <PE_Check_AMSConflict+0x60>
 80009e4:	1e40      	subs	r0, r0, #1
 80009e6:	280b      	cmp	r0, #11
 80009e8:	d903      	bls.n	80009f2 <PE_Check_AMSConflict+0x3a>
 80009ea:	380c      	subs	r0, #12
 80009ec:	d00f      	beq.n	8000a0e <PE_Check_AMSConflict+0x56>
 80009ee:	386e      	subs	r0, #110	; 0x6e
 80009f0:	d101      	bne.n	80009f6 <PE_Check_AMSConflict+0x3e>
 80009f2:	2011      	movs	r0, #17
 80009f4:	e00f      	b.n	8000a16 <PE_Check_AMSConflict+0x5e>
 80009f6:	215c      	movs	r1, #92	; 0x5c
 80009f8:	0020      	movs	r0, r4
 80009fa:	f000 fc45 	bl	8001288 <PE_Notification>
 80009fe:	6860      	ldr	r0, [r4, #4]
 8000a00:	6800      	ldr	r0, [r0, #0]
 8000a02:	4907      	ldr	r1, [pc, #28]	; (8000a20 <.text_39>)
 8000a04:	4001      	ands	r1, r0
 8000a06:	20c0      	movs	r0, #192	; 0xc0
 8000a08:	0080      	lsls	r0, r0, #2
 8000a0a:	4281      	cmp	r1, r0
 8000a0c:	d102      	bne.n	8000a14 <PE_Check_AMSConflict+0x5c>
 8000a0e:	2003      	movs	r0, #3
 8000a10:	7460      	strb	r0, [r4, #17]
 8000a12:	e002      	b.n	8000a1a <PE_Check_AMSConflict+0x62>
 8000a14:	200f      	movs	r0, #15
 8000a16:	7460      	strb	r0, [r4, #17]
 8000a18:	2515      	movs	r5, #21
 8000a1a:	0028      	movs	r0, r5
 8000a1c:	bd32      	pop	{r1, r4, r5, pc}
	...

08000a20 <.text_39>:
 8000a20:	00000704 	.word	0x00000704

08000a24 <PE_PRL_ResetReceived>:
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	0004      	movs	r4, r0
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <.text_41>)
 8000a2a:	00a2      	lsls	r2, r4, #2
 8000a2c:	5885      	ldr	r5, [r0, r2]
 8000a2e:	2905      	cmp	r1, #5
 8000a30:	d112      	bne.n	8000a58 <PE_PRL_ResetReceived+0x34>
 8000a32:	6868      	ldr	r0, [r5, #4]
 8000a34:	6801      	ldr	r1, [r0, #0]
 8000a36:	2210      	movs	r2, #16
 8000a38:	4391      	bics	r1, r2
 8000a3a:	6001      	str	r1, [r0, #0]
 8000a3c:	6968      	ldr	r0, [r5, #20]
 8000a3e:	49b1      	ldr	r1, [pc, #708]	; (8000d04 <.text_58>)
 8000a40:	4001      	ands	r1, r0
 8000a42:	0110      	lsls	r0, r2, #4
 8000a44:	4308      	orrs	r0, r1
 8000a46:	6168      	str	r0, [r5, #20]
 8000a48:	2014      	movs	r0, #20
 8000a4a:	2132      	movs	r1, #50	; 0x32
 8000a4c:	5468      	strb	r0, [r5, r1]
 8000a4e:	211e      	movs	r1, #30
 8000a50:	0028      	movs	r0, r5
 8000a52:	f000 fc19 	bl	8001288 <PE_Notification>
 8000a56:	e004      	b.n	8000a62 <PE_PRL_ResetReceived+0x3e>
 8000a58:	6968      	ldr	r0, [r5, #20]
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	0289      	lsls	r1, r1, #10
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	6169      	str	r1, [r5, #20]
 8000a62:	0020      	movs	r0, r4
 8000a64:	68a9      	ldr	r1, [r5, #8]
 8000a66:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000a68:	4788      	blx	r1
 8000a6a:	bd31      	pop	{r0, r4, r5, pc}

08000a6c <.text_41>:
 8000a6c:	200001e0 	.word	0x200001e0

08000a70 <.text_42>:
 8000a70:	0000025d 	.word	0x0000025d

08000a74 <.text_43>:
 8000a74:	00000385 	.word	0x00000385

08000a78 <PE_PRL_BistCompleted>:
 8000a78:	4770      	bx	lr

08000a7a <PE_Reset_HardReset>:
 8000a7a:	b538      	push	{r3, r4, r5, lr}
 8000a7c:	0004      	movs	r4, r0
 8000a7e:	2032      	movs	r0, #50	; 0x32
 8000a80:	5c20      	ldrb	r0, [r4, r0]
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d003      	beq.n	8000a8e <PE_Reset_HardReset+0x14>
 8000a86:	215b      	movs	r1, #91	; 0x5b
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f000 fbfd 	bl	8001288 <PE_Notification>
 8000a8e:	0020      	movs	r0, r4
 8000a90:	f000 f82c 	bl	8000aec <PE_Reset_ZI>
 8000a94:	2503      	movs	r5, #3
 8000a96:	6820      	ldr	r0, [r4, #0]
 8000a98:	6843      	ldr	r3, [r0, #4]
 8000a9a:	402b      	ands	r3, r5
 8000a9c:	7c20      	ldrb	r0, [r4, #16]
 8000a9e:	6861      	ldr	r1, [r4, #4]
 8000aa0:	6809      	ldr	r1, [r1, #0]
 8000aa2:	074a      	lsls	r2, r1, #29
 8000aa4:	0fd2      	lsrs	r2, r2, #31
 8000aa6:	d008      	beq.n	8000aba <PE_Reset_HardReset+0x40>
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	f004 fdb2 	bl	8005612 <USBPD_PRL_SetHeader>
 8000aae:	6860      	ldr	r0, [r4, #4]
 8000ab0:	6801      	ldr	r1, [r0, #0]
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	6002      	str	r2, [r0, #0]
 8000ab8:	e007      	b.n	8000aca <PE_Reset_HardReset+0x50>
 8000aba:	2100      	movs	r1, #0
 8000abc:	f004 fda9 	bl	8005612 <USBPD_PRL_SetHeader>
 8000ac0:	6860      	ldr	r0, [r4, #4]
 8000ac2:	6801      	ldr	r1, [r0, #0]
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	4391      	bics	r1, r2
 8000ac8:	6001      	str	r1, [r0, #0]
 8000aca:	6820      	ldr	r0, [r4, #0]
 8000acc:	6840      	ldr	r0, [r0, #4]
 8000ace:	4005      	ands	r5, r0
 8000ad0:	6860      	ldr	r0, [r4, #4]
 8000ad2:	6801      	ldr	r1, [r0, #0]
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	4391      	bics	r1, r2
 8000ad8:	430d      	orrs	r5, r1
 8000ada:	6005      	str	r5, [r0, #0]
 8000adc:	2101      	movs	r1, #1
 8000ade:	7c20      	ldrb	r0, [r4, #16]
 8000ae0:	f004 fe08 	bl	80056f4 <USBPD_PRL_SOPCapability>
 8000ae4:	7c20      	ldrb	r0, [r4, #16]
 8000ae6:	f004 ffaf 	bl	8005a48 <USBPD_PRL_Reset>
 8000aea:	bd31      	pop	{r0, r4, r5, pc}

08000aec <PE_Reset_ZI>:
 8000aec:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000aee:	0004      	movs	r4, r0
 8000af0:	2000      	movs	r0, #0
 8000af2:	9001      	str	r0, [sp, #4]
 8000af4:	6860      	ldr	r0, [r4, #4]
 8000af6:	6801      	ldr	r1, [r0, #0]
 8000af8:	2210      	movs	r2, #16
 8000afa:	4391      	bics	r1, r2
 8000afc:	6001      	str	r1, [r0, #0]
 8000afe:	2100      	movs	r1, #0
 8000b00:	0020      	movs	r0, r4
 8000b02:	f000 fbe6 	bl	80012d2 <PE_SetPowerNegotiation>
 8000b06:	2193      	movs	r1, #147	; 0x93
 8000b08:	0089      	lsls	r1, r1, #2
 8000b0a:	0020      	movs	r0, r4
 8000b0c:	3014      	adds	r0, #20
 8000b0e:	f014 fb29 	bl	8015164 <__aeabi_memclr>
 8000b12:	2304      	movs	r3, #4
 8000b14:	aa01      	add	r2, sp, #4
 8000b16:	2102      	movs	r1, #2
 8000b18:	7c20      	ldrb	r0, [r4, #16]
 8000b1a:	68a5      	ldr	r5, [r4, #8]
 8000b1c:	69ad      	ldr	r5, [r5, #24]
 8000b1e:	47a8      	blx	r5
 8000b20:	2080      	movs	r0, #128	; 0x80
 8000b22:	0440      	lsls	r0, r0, #17
 8000b24:	9000      	str	r0, [sp, #0]
 8000b26:	2304      	movs	r3, #4
 8000b28:	466a      	mov	r2, sp
 8000b2a:	2106      	movs	r1, #6
 8000b2c:	7c20      	ldrb	r0, [r4, #16]
 8000b2e:	68a5      	ldr	r5, [r4, #8]
 8000b30:	69ad      	ldr	r5, [r5, #24]
 8000b32:	47a8      	blx	r5
 8000b34:	2503      	movs	r5, #3
 8000b36:	6820      	ldr	r0, [r4, #0]
 8000b38:	6841      	ldr	r1, [r0, #4]
 8000b3a:	4029      	ands	r1, r5
 8000b3c:	7c20      	ldrb	r0, [r4, #16]
 8000b3e:	f004 fda6 	bl	800568e <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b42:	6820      	ldr	r0, [r4, #0]
 8000b44:	6840      	ldr	r0, [r0, #4]
 8000b46:	4005      	ands	r5, r0
 8000b48:	6860      	ldr	r0, [r4, #4]
 8000b4a:	6801      	ldr	r1, [r0, #0]
 8000b4c:	4a6e      	ldr	r2, [pc, #440]	; (8000d08 <.text_59>)
 8000b4e:	400a      	ands	r2, r1
 8000b50:	06a9      	lsls	r1, r5, #26
 8000b52:	4311      	orrs	r1, r2
 8000b54:	6001      	str	r1, [r0, #0]
 8000b56:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b58 <PE_Reset_Counter>:
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	2298      	movs	r2, #152	; 0x98
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	1880      	adds	r0, r0, r2
 8000b62:	f014 faff 	bl	8015164 <__aeabi_memclr>
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <PE_Reset_StateMachine>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	0004      	movs	r4, r0
 8000b6c:	2032      	movs	r0, #50	; 0x32
 8000b6e:	5c20      	ldrb	r0, [r4, r0]
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d003      	beq.n	8000b7c <PE_Reset_StateMachine+0x14>
 8000b74:	215b      	movs	r1, #91	; 0x5b
 8000b76:	0020      	movs	r0, r4
 8000b78:	f000 fb86 	bl	8001288 <PE_Notification>
 8000b7c:	0020      	movs	r0, r4
 8000b7e:	f7ff ffb5 	bl	8000aec <PE_Reset_ZI>
 8000b82:	2101      	movs	r1, #1
 8000b84:	0020      	movs	r0, r4
 8000b86:	f000 fba4 	bl	80012d2 <PE_SetPowerNegotiation>
 8000b8a:	7c20      	ldrb	r0, [r4, #16]
 8000b8c:	f004 ff5c 	bl	8005a48 <USBPD_PRL_Reset>
 8000b90:	6860      	ldr	r0, [r4, #4]
 8000b92:	6801      	ldr	r1, [r0, #0]
 8000b94:	2501      	movs	r5, #1
 8000b96:	08ca      	lsrs	r2, r1, #3
 8000b98:	402a      	ands	r2, r5
 8000b9a:	078b      	lsls	r3, r1, #30
 8000b9c:	0f9b      	lsrs	r3, r3, #30
 8000b9e:	7c20      	ldrb	r0, [r4, #16]
 8000ba0:	0889      	lsrs	r1, r1, #2
 8000ba2:	400d      	ands	r5, r1
 8000ba4:	d004      	beq.n	8000bb0 <PE_Reset_StateMachine+0x48>
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	f004 fd33 	bl	8005612 <USBPD_PRL_SetHeader>
 8000bac:	2002      	movs	r0, #2
 8000bae:	e003      	b.n	8000bb8 <PE_Reset_StateMachine+0x50>
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f004 fd2e 	bl	8005612 <USBPD_PRL_SetHeader>
 8000bb6:	203e      	movs	r0, #62	; 0x3e
 8000bb8:	7460      	strb	r0, [r4, #17]
 8000bba:	bd31      	pop	{r0, r4, r5, pc}

08000bbc <PE_ExtRevisionInteroperability>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	4a53      	ldr	r2, [pc, #332]	; (8000d0c <.text_60>)
 8000bc0:	0083      	lsls	r3, r0, #2
 8000bc2:	58d3      	ldr	r3, [r2, r3]
 8000bc4:	685c      	ldr	r4, [r3, #4]
 8000bc6:	6825      	ldr	r5, [r4, #0]
 8000bc8:	2203      	movs	r2, #3
 8000bca:	2603      	movs	r6, #3
 8000bcc:	402e      	ands	r6, r5
 8000bce:	42b1      	cmp	r1, r6
 8000bd0:	db00      	blt.n	8000bd4 <PE_ExtRevisionInteroperability+0x18>
 8000bd2:	0031      	movs	r1, r6
 8000bd4:	4395      	bics	r5, r2
 8000bd6:	4011      	ands	r1, r2
 8000bd8:	4329      	orrs	r1, r5
 8000bda:	6021      	str	r1, [r4, #0]
 8000bdc:	6859      	ldr	r1, [r3, #4]
 8000bde:	680c      	ldr	r4, [r1, #0]
 8000be0:	2503      	movs	r5, #3
 8000be2:	4025      	ands	r5, r4
 8000be4:	2d01      	cmp	r5, #1
 8000be6:	d101      	bne.n	8000bec <PE_ExtRevisionInteroperability+0x30>
 8000be8:	2500      	movs	r5, #0
 8000bea:	e000      	b.n	8000bee <PE_ExtRevisionInteroperability+0x32>
 8000bec:	2501      	movs	r5, #1
 8000bee:	2620      	movs	r6, #32
 8000bf0:	43b4      	bics	r4, r6
 8000bf2:	016d      	lsls	r5, r5, #5
 8000bf4:	4325      	orrs	r5, r4
 8000bf6:	600d      	str	r5, [r1, #0]
 8000bf8:	6859      	ldr	r1, [r3, #4]
 8000bfa:	680b      	ldr	r3, [r1, #0]
 8000bfc:	2103      	movs	r1, #3
 8000bfe:	4019      	ands	r1, r3
 8000c00:	f004 fd39 	bl	8005676 <USBPD_PRL_SetHeaderSpecification>
 8000c04:	bd70      	pop	{r4, r5, r6, pc}

08000c06 <PE_PRL_FastRoleSwapReception>:
 8000c06:	4941      	ldr	r1, [pc, #260]	; (8000d0c <.text_60>)
 8000c08:	0082      	lsls	r2, r0, #2
 8000c0a:	5889      	ldr	r1, [r1, r2]
 8000c0c:	7f0a      	ldrb	r2, [r1, #28]
 8000c0e:	2a09      	cmp	r2, #9
 8000c10:	d100      	bne.n	8000c14 <PE_PRL_FastRoleSwapReception+0xe>
 8000c12:	4770      	bx	lr
 8000c14:	b580      	push	{r7, lr}
 8000c16:	e373      	b.n	8001300 <.text_69>

08000c18 <PE_PRL_PostReceiveEvent>:
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	4a3c      	ldr	r2, [pc, #240]	; (8000d0c <.text_60>)
 8000c1c:	0080      	lsls	r0, r0, #2
 8000c1e:	5810      	ldr	r0, [r2, r0]
 8000c20:	2200      	movs	r2, #0
 8000c22:	1883      	adds	r3, r0, r2
 8000c24:	4c09      	ldr	r4, [pc, #36]	; (8000c4c <.text_52>)
 8000c26:	191b      	adds	r3, r3, r4
 8000c28:	781c      	ldrb	r4, [r3, #0]
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d005      	beq.n	8000c3a <PE_PRL_PostReceiveEvent+0x22>
 8000c2e:	1c52      	adds	r2, r2, #1
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	2a02      	cmp	r2, #2
 8000c34:	dbf5      	blt.n	8000c22 <PE_PRL_PostReceiveEvent+0xa>
 8000c36:	2000      	movs	r0, #0
 8000c38:	bd10      	pop	{r4, pc}
 8000c3a:	2020      	movs	r0, #32
 8000c3c:	7018      	strb	r0, [r3, #0]
 8000c3e:	7818      	ldrb	r0, [r3, #0]
 8000c40:	2201      	movs	r2, #1
 8000c42:	408a      	lsls	r2, r1
 8000c44:	4302      	orrs	r2, r0
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	2001      	movs	r0, #1
 8000c4a:	bd10      	pop	{r4, pc}

08000c4c <.text_52>:
 8000c4c:	0000024d 	.word	0x0000024d

08000c50 <PE_PRL_PostReceiveEventError>:
 8000c50:	b530      	push	{r4, r5, lr}
 8000c52:	492e      	ldr	r1, [pc, #184]	; (8000d0c <.text_60>)
 8000c54:	0080      	lsls	r0, r0, #2
 8000c56:	5809      	ldr	r1, [r1, r0]
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	b2d3      	uxtb	r3, r2
 8000c5e:	18cb      	adds	r3, r1, r3
 8000c60:	4c2b      	ldr	r4, [pc, #172]	; (8000d10 <.text_61>)
 8000c62:	191b      	adds	r3, r3, r4
 8000c64:	781c      	ldrb	r4, [r3, #0]
 8000c66:	2560      	movs	r5, #96	; 0x60
 8000c68:	4025      	ands	r5, r4
 8000c6a:	2d20      	cmp	r5, #32
 8000c6c:	d004      	beq.n	8000c78 <PE_PRL_PostReceiveEventError+0x28>
 8000c6e:	1c52      	adds	r2, r2, #1
 8000c70:	b2d3      	uxtb	r3, r2
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dbf2      	blt.n	8000c5c <PE_PRL_PostReceiveEventError+0xc>
 8000c76:	bd30      	pop	{r4, r5, pc}
 8000c78:	7018      	strb	r0, [r3, #0]
 8000c7a:	bd30      	pop	{r4, r5, pc}

08000c7c <PE_PRL_PostReceiveEventCopy>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <.text_60>)
 8000c80:	0080      	lsls	r0, r0, #2
 8000c82:	5810      	ldr	r0, [r2, r0]
 8000c84:	2200      	movs	r2, #0
 8000c86:	b2d3      	uxtb	r3, r2
 8000c88:	18c4      	adds	r4, r0, r3
 8000c8a:	4d21      	ldr	r5, [pc, #132]	; (8000d10 <.text_61>)
 8000c8c:	5d64      	ldrb	r4, [r4, r5]
 8000c8e:	2560      	movs	r5, #96	; 0x60
 8000c90:	4025      	ands	r5, r4
 8000c92:	2d20      	cmp	r5, #32
 8000c94:	d004      	beq.n	8000ca0 <PE_PRL_PostReceiveEventCopy+0x24>
 8000c96:	1c52      	adds	r2, r2, #1
 8000c98:	b2d3      	uxtb	r3, r2
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	dbf3      	blt.n	8000c86 <PE_PRL_PostReceiveEventCopy+0xa>
 8000c9e:	bd31      	pop	{r0, r4, r5, pc}
 8000ca0:	2284      	movs	r2, #132	; 0x84
 8000ca2:	0052      	lsls	r2, r2, #1
 8000ca4:	4353      	muls	r3, r2
 8000ca6:	18c0      	adds	r0, r0, r3
 8000ca8:	303d      	adds	r0, #61	; 0x3d
 8000caa:	f014 fa60 	bl	801516e <__aeabi_memcpy>
 8000cae:	bd31      	pop	{r0, r4, r5, pc}

08000cb0 <.text_55>:
 8000cb0:	0000f01f 	.word	0x0000f01f

08000cb4 <PE_PRL_PostReceiveEventComplete>:
 8000cb4:	b538      	push	{r3, r4, r5, lr}
 8000cb6:	4915      	ldr	r1, [pc, #84]	; (8000d0c <.text_60>)
 8000cb8:	0082      	lsls	r2, r0, #2
 8000cba:	5889      	ldr	r1, [r1, r2]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	188b      	adds	r3, r1, r2
 8000cc0:	4c13      	ldr	r4, [pc, #76]	; (8000d10 <.text_61>)
 8000cc2:	191b      	adds	r3, r3, r4
 8000cc4:	1c52      	adds	r2, r2, #1
 8000cc6:	781c      	ldrb	r4, [r3, #0]
 8000cc8:	2560      	movs	r5, #96	; 0x60
 8000cca:	4025      	ands	r5, r4
 8000ccc:	2d20      	cmp	r5, #32
 8000cce:	d003      	beq.n	8000cd8 <PE_PRL_PostReceiveEventComplete+0x24>
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	2a02      	cmp	r2, #2
 8000cd4:	dbf3      	blt.n	8000cbe <PE_PRL_PostReceiveEventComplete+0xa>
 8000cd6:	bd31      	pop	{r0, r4, r5, pc}
 8000cd8:	781c      	ldrb	r4, [r3, #0]
 8000cda:	2540      	movs	r5, #64	; 0x40
 8000cdc:	4325      	orrs	r5, r4
 8000cde:	701d      	strb	r5, [r3, #0]
 8000ce0:	233c      	movs	r3, #60	; 0x3c
 8000ce2:	5ccb      	ldrb	r3, [r1, r3]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <PE_PRL_PostReceiveEventComplete+0x38>
 8000ce8:	233c      	movs	r3, #60	; 0x3c
 8000cea:	54ca      	strb	r2, [r1, r3]
 8000cec:	6889      	ldr	r1, [r1, #8]
 8000cee:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000cf0:	4788      	blx	r1
 8000cf2:	bd31      	pop	{r0, r4, r5, pc}

08000cf4 <PE_Get_UnchunkedSupport>:
 8000cf4:	4905      	ldr	r1, [pc, #20]	; (8000d0c <.text_60>)
 8000cf6:	0080      	lsls	r0, r0, #2
 8000cf8:	5808      	ldr	r0, [r1, r0]
 8000cfa:	6840      	ldr	r0, [r0, #4]
 8000cfc:	6800      	ldr	r0, [r0, #0]
 8000cfe:	0181      	lsls	r1, r0, #6
 8000d00:	0fc8      	lsrs	r0, r1, #31
 8000d02:	4770      	bx	lr

08000d04 <.text_58>:
 8000d04:	fffffcff 	.word	0xfffffcff

08000d08 <.text_59>:
 8000d08:	f3ffffff 	.word	0xf3ffffff

08000d0c <.text_60>:
 8000d0c:	200001e0 	.word	0x200001e0

08000d10 <.text_61>:
 8000d10:	0000024d 	.word	0x0000024d

08000d14 <PE_SubStateMachine_Generic>:
 8000d14:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	0004      	movs	r4, r0
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	9003      	str	r0, [sp, #12]
 8000d1e:	497f      	ldr	r1, [pc, #508]	; (8000f1c <PE_SubStateMachine_Generic+0x208>)
 8000d20:	1866      	adds	r6, r4, r1
 8000d22:	2500      	movs	r5, #0
 8000d24:	2714      	movs	r7, #20
 8000d26:	7c61      	ldrb	r1, [r4, #17]
 8000d28:	2901      	cmp	r1, #1
 8000d2a:	d100      	bne.n	8000d2e <PE_SubStateMachine_Generic+0x1a>
 8000d2c:	e153      	b.n	8000fd6 <PE_SubStateMachine_Generic+0x2c2>
 8000d2e:	2918      	cmp	r1, #24
 8000d30:	d036      	beq.n	8000da0 <PE_SubStateMachine_Generic+0x8c>
 8000d32:	2919      	cmp	r1, #25
 8000d34:	d04b      	beq.n	8000dce <PE_SubStateMachine_Generic+0xba>
 8000d36:	291d      	cmp	r1, #29
 8000d38:	d100      	bne.n	8000d3c <PE_SubStateMachine_Generic+0x28>
 8000d3a:	e08c      	b.n	8000e56 <PE_SubStateMachine_Generic+0x142>
 8000d3c:	2927      	cmp	r1, #39	; 0x27
 8000d3e:	d100      	bne.n	8000d42 <PE_SubStateMachine_Generic+0x2e>
 8000d40:	e0a1      	b.n	8000e86 <PE_SubStateMachine_Generic+0x172>
 8000d42:	2928      	cmp	r1, #40	; 0x28
 8000d44:	d100      	bne.n	8000d48 <PE_SubStateMachine_Generic+0x34>
 8000d46:	e0ab      	b.n	8000ea0 <PE_SubStateMachine_Generic+0x18c>
 8000d48:	2929      	cmp	r1, #41	; 0x29
 8000d4a:	d100      	bne.n	8000d4e <PE_SubStateMachine_Generic+0x3a>
 8000d4c:	e0b3      	b.n	8000eb6 <PE_SubStateMachine_Generic+0x1a2>
 8000d4e:	292c      	cmp	r1, #44	; 0x2c
 8000d50:	d100      	bne.n	8000d54 <PE_SubStateMachine_Generic+0x40>
 8000d52:	e254      	b.n	80011fe <PE_SubStateMachine_Generic+0x4ea>
 8000d54:	2930      	cmp	r1, #48	; 0x30
 8000d56:	d100      	bne.n	8000d5a <PE_SubStateMachine_Generic+0x46>
 8000d58:	e18d      	b.n	8001076 <PE_SubStateMachine_Generic+0x362>
 8000d5a:	293a      	cmp	r1, #58	; 0x3a
 8000d5c:	d100      	bne.n	8000d60 <PE_SubStateMachine_Generic+0x4c>
 8000d5e:	e229      	b.n	80011b4 <PE_SubStateMachine_Generic+0x4a0>
 8000d60:	293b      	cmp	r1, #59	; 0x3b
 8000d62:	d100      	bne.n	8000d66 <PE_SubStateMachine_Generic+0x52>
 8000d64:	e20e      	b.n	8001184 <PE_SubStateMachine_Generic+0x470>
 8000d66:	293c      	cmp	r1, #60	; 0x3c
 8000d68:	d100      	bne.n	8000d6c <PE_SubStateMachine_Generic+0x58>
 8000d6a:	e1ed      	b.n	8001148 <PE_SubStateMachine_Generic+0x434>
 8000d6c:	2963      	cmp	r1, #99	; 0x63
 8000d6e:	d100      	bne.n	8000d72 <PE_SubStateMachine_Generic+0x5e>
 8000d70:	e139      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x2d2>
 8000d72:	2964      	cmp	r1, #100	; 0x64
 8000d74:	d100      	bne.n	8000d78 <PE_SubStateMachine_Generic+0x64>
 8000d76:	e15a      	b.n	800102e <PE_SubStateMachine_Generic+0x31a>
 8000d78:	2974      	cmp	r1, #116	; 0x74
 8000d7a:	d100      	bne.n	8000d7e <PE_SubStateMachine_Generic+0x6a>
 8000d7c:	e1a2      	b.n	80010c4 <PE_SubStateMachine_Generic+0x3b0>
 8000d7e:	2993      	cmp	r1, #147	; 0x93
 8000d80:	d100      	bne.n	8000d84 <PE_SubStateMachine_Generic+0x70>
 8000d82:	e0ae      	b.n	8000ee2 <PE_SubStateMachine_Generic+0x1ce>
 8000d84:	2994      	cmp	r1, #148	; 0x94
 8000d86:	d100      	bne.n	8000d8a <PE_SubStateMachine_Generic+0x76>
 8000d88:	e0af      	b.n	8000eea <PE_SubStateMachine_Generic+0x1d6>
 8000d8a:	2995      	cmp	r1, #149	; 0x95
 8000d8c:	d100      	bne.n	8000d90 <PE_SubStateMachine_Generic+0x7c>
 8000d8e:	e0cb      	b.n	8000f28 <PE_SubStateMachine_Generic+0x214>
 8000d90:	2999      	cmp	r1, #153	; 0x99
 8000d92:	d000      	beq.n	8000d96 <PE_SubStateMachine_Generic+0x82>
 8000d94:	e238      	b.n	8001208 <PE_SubStateMachine_Generic+0x4f4>
 8000d96:	2106      	movs	r1, #6
 8000d98:	0020      	movs	r0, r4
 8000d9a:	f7ff fd6a 	bl	8000872 <PE_Send_RESET>
 8000d9e:	e1cf      	b.n	8001140 <PE_SubStateMachine_Generic+0x42c>
 8000da0:	6861      	ldr	r1, [r4, #4]
 8000da2:	6809      	ldr	r1, [r1, #0]
 8000da4:	074a      	lsls	r2, r1, #29
 8000da6:	0fd2      	lsrs	r2, r2, #31
 8000da8:	d002      	beq.n	8000db0 <PE_SubStateMachine_Generic+0x9c>
 8000daa:	6960      	ldr	r0, [r4, #20]
 8000dac:	0781      	lsls	r1, r0, #30
 8000dae:	0fc8      	lsrs	r0, r1, #31
 8000db0:	9000      	str	r0, [sp, #0]
 8000db2:	2319      	movs	r3, #25
 8000db4:	2208      	movs	r2, #8
 8000db6:	2100      	movs	r1, #0
 8000db8:	0020      	movs	r0, r4
 8000dba:	f000 fb01 	bl	80013c0 <PE_Send_CtrlMessage>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d16d      	bne.n	8000e9e <PE_SubStateMachine_Generic+0x18a>
 8000dc2:	2007      	movs	r0, #7
 8000dc4:	7720      	strb	r0, [r4, #28]
 8000dc6:	4856      	ldr	r0, [pc, #344]	; (8000f20 <PE_SubStateMachine_Generic+0x20c>)
 8000dc8:	83e0      	strh	r0, [r4, #30]
 8000dca:	201b      	movs	r0, #27
 8000dcc:	e066      	b.n	8000e9c <PE_SubStateMachine_Generic+0x188>
 8000dce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000dd0:	7800      	ldrb	r0, [r0, #0]
 8000dd2:	2811      	cmp	r0, #17
 8000dd4:	d13e      	bne.n	8000e54 <PE_SubStateMachine_Generic+0x140>
 8000dd6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000dd8:	0bc1      	lsrs	r1, r0, #15
 8000dda:	d120      	bne.n	8000e1e <PE_SubStateMachine_Generic+0x10a>
 8000ddc:	0b01      	lsrs	r1, r0, #12
 8000dde:	2207      	movs	r2, #7
 8000de0:	4211      	tst	r1, r2
 8000de2:	d01c      	beq.n	8000e1e <PE_SubStateMachine_Generic+0x10a>
 8000de4:	06c0      	lsls	r0, r0, #27
 8000de6:	0ec0      	lsrs	r0, r0, #27
 8000de8:	2804      	cmp	r0, #4
 8000dea:	d118      	bne.n	8000e1e <PE_SubStateMachine_Generic+0x10a>
 8000dec:	400a      	ands	r2, r1
 8000dee:	0093      	lsls	r3, r2, #2
 8000df0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000df2:	1c82      	adds	r2, r0, #2
 8000df4:	2105      	movs	r1, #5
 8000df6:	7c20      	ldrb	r0, [r4, #16]
 8000df8:	68a6      	ldr	r6, [r4, #8]
 8000dfa:	69b6      	ldr	r6, [r6, #24]
 8000dfc:	47b0      	blx	r6
 8000dfe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e00:	7800      	ldrb	r0, [r0, #0]
 8000e02:	2814      	cmp	r0, #20
 8000e04:	d004      	beq.n	8000e10 <PE_SubStateMachine_Generic+0xfc>
 8000e06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000e08:	700f      	strb	r7, [r1, #0]
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f7ff fd8f 	bl	800092e <PE_Clear_RxEvent>
 8000e10:	2003      	movs	r0, #3
 8000e12:	7460      	strb	r0, [r4, #17]
 8000e14:	9503      	str	r5, [sp, #12]
 8000e16:	2107      	movs	r1, #7
 8000e18:	0020      	movs	r0, r4
 8000e1a:	f000 fa35 	bl	8001288 <PE_Notification>
 8000e1e:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e20:	21f0      	movs	r1, #240	; 0xf0
 8000e22:	0209      	lsls	r1, r1, #8
 8000e24:	4001      	ands	r1, r0
 8000e26:	d115      	bne.n	8000e54 <PE_SubStateMachine_Generic+0x140>
 8000e28:	06c0      	lsls	r0, r0, #27
 8000e2a:	0ec0      	lsrs	r0, r0, #27
 8000e2c:	2804      	cmp	r0, #4
 8000e2e:	d001      	beq.n	8000e34 <PE_SubStateMachine_Generic+0x120>
 8000e30:	2810      	cmp	r0, #16
 8000e32:	d10f      	bne.n	8000e54 <PE_SubStateMachine_Generic+0x140>
 8000e34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e36:	7800      	ldrb	r0, [r0, #0]
 8000e38:	2814      	cmp	r0, #20
 8000e3a:	d004      	beq.n	8000e46 <PE_SubStateMachine_Generic+0x132>
 8000e3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000e3e:	7007      	strb	r7, [r0, #0]
 8000e40:	0020      	movs	r0, r4
 8000e42:	f7ff fd74 	bl	800092e <PE_Clear_RxEvent>
 8000e46:	2003      	movs	r0, #3
 8000e48:	7460      	strb	r0, [r4, #17]
 8000e4a:	9503      	str	r5, [sp, #12]
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	0020      	movs	r0, r4
 8000e50:	f000 fa1a 	bl	8001288 <PE_Notification>
 8000e54:	e0b9      	b.n	8000fca <PE_SubStateMachine_Generic+0x2b6>
 8000e56:	ab04      	add	r3, sp, #16
 8000e58:	aa05      	add	r2, sp, #20
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	7c20      	ldrb	r0, [r4, #16]
 8000e5e:	68a5      	ldr	r5, [r4, #8]
 8000e60:	696d      	ldr	r5, [r5, #20]
 8000e62:	47a8      	blx	r5
 8000e64:	2000      	movs	r0, #0
 8000e66:	9002      	str	r0, [sp, #8]
 8000e68:	2003      	movs	r0, #3
 8000e6a:	9001      	str	r0, [sp, #4]
 8000e6c:	9804      	ldr	r0, [sp, #16]
 8000e6e:	0880      	lsrs	r0, r0, #2
 8000e70:	9000      	str	r0, [sp, #0]
 8000e72:	ab05      	add	r3, sp, #20
 8000e74:	2204      	movs	r2, #4
 8000e76:	2100      	movs	r1, #0
 8000e78:	0020      	movs	r0, r4
 8000e7a:	f000 face 	bl	800141a <PE_Send_DataMessage>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d10d      	bne.n	8000e9e <PE_SubStateMachine_Generic+0x18a>
 8000e82:	210a      	movs	r1, #10
 8000e84:	e11a      	b.n	80010bc <PE_SubStateMachine_Generic+0x3a8>
 8000e86:	2011      	movs	r0, #17
 8000e88:	7720      	strb	r0, [r4, #28]
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	7c20      	ldrb	r0, [r4, #16]
 8000e8e:	f004 fdca 	bl	8005a26 <USBDPD_PRL_BistCarrierEyeMode>
 8000e92:	2028      	movs	r0, #40	; 0x28
 8000e94:	7460      	strb	r0, [r4, #17]
 8000e96:	4823      	ldr	r0, [pc, #140]	; (8000f24 <PE_SubStateMachine_Generic+0x210>)
 8000e98:	83e0      	strh	r0, [r4, #30]
 8000e9a:	203a      	movs	r0, #58	; 0x3a
 8000e9c:	9003      	str	r0, [sp, #12]
 8000e9e:	e1b5      	b.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 8000ea0:	8be0      	ldrh	r0, [r4, #30]
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	0209      	lsls	r1, r1, #8
 8000ea6:	4288      	cmp	r0, r1
 8000ea8:	d1f9      	bne.n	8000e9e <PE_SubStateMachine_Generic+0x18a>
 8000eaa:	2105      	movs	r1, #5
 8000eac:	7c20      	ldrb	r0, [r4, #16]
 8000eae:	f004 fdc2 	bl	8005a36 <USBDPD_PRL_BistCarrierEyeModeExit>
 8000eb2:	83e5      	strh	r5, [r4, #30]
 8000eb4:	e144      	b.n	8001140 <PE_SubStateMachine_Generic+0x42c>
 8000eb6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000eb8:	7800      	ldrb	r0, [r0, #0]
 8000eba:	2811      	cmp	r0, #17
 8000ebc:	d1ef      	bne.n	8000e9e <PE_SubStateMachine_Generic+0x18a>
 8000ebe:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000ec0:	0bc1      	lsrs	r1, r0, #15
 8000ec2:	d10d      	bne.n	8000ee0 <PE_SubStateMachine_Generic+0x1cc>
 8000ec4:	0441      	lsls	r1, r0, #17
 8000ec6:	0f49      	lsrs	r1, r1, #29
 8000ec8:	d00a      	beq.n	8000ee0 <PE_SubStateMachine_Generic+0x1cc>
 8000eca:	06c0      	lsls	r0, r0, #27
 8000ecc:	0ec0      	lsrs	r0, r0, #27
 8000ece:	2803      	cmp	r0, #3
 8000ed0:	d106      	bne.n	8000ee0 <PE_SubStateMachine_Generic+0x1cc>
 8000ed2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000ed4:	7007      	strb	r7, [r0, #0]
 8000ed6:	0020      	movs	r0, r4
 8000ed8:	f7ff fd29 	bl	800092e <PE_Clear_RxEvent>
 8000edc:	2011      	movs	r0, #17
 8000ede:	7720      	strb	r0, [r4, #28]
 8000ee0:	e194      	b.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f000 f995 	bl	8001212 <PE_SubStateMachine_ReceiveDRS>
 8000ee8:	e190      	b.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 8000eea:	6861      	ldr	r1, [r4, #4]
 8000eec:	6809      	ldr	r1, [r1, #0]
 8000eee:	074a      	lsls	r2, r1, #29
 8000ef0:	0fd2      	lsrs	r2, r2, #31
 8000ef2:	d002      	beq.n	8000efa <PE_SubStateMachine_Generic+0x1e6>
 8000ef4:	6960      	ldr	r0, [r4, #20]
 8000ef6:	0781      	lsls	r1, r0, #30
 8000ef8:	0fc8      	lsrs	r0, r1, #31
 8000efa:	9000      	str	r0, [sp, #0]
 8000efc:	2395      	movs	r3, #149	; 0x95
 8000efe:	2209      	movs	r2, #9
 8000f00:	2100      	movs	r1, #0
 8000f02:	0020      	movs	r0, r4
 8000f04:	f000 fa5c 	bl	80013c0 <PE_Send_CtrlMessage>
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	d1ed      	bne.n	8000ee8 <PE_SubStateMachine_Generic+0x1d4>
 8000f0c:	200f      	movs	r0, #15
 8000f0e:	7720      	strb	r0, [r4, #28]
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <PE_SubStateMachine_Generic+0x20c>)
 8000f12:	83e0      	strh	r0, [r4, #30]
 8000f14:	201b      	movs	r0, #27
 8000f16:	9003      	str	r0, [sp, #12]
 8000f18:	2122      	movs	r1, #34	; 0x22
 8000f1a:	e0cf      	b.n	80010bc <PE_SubStateMachine_Generic+0x3a8>
 8000f1c:	00000265 	.word	0x00000265
 8000f20:	0000801b 	.word	0x0000801b
 8000f24:	0000803a 	.word	0x0000803a
 8000f28:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000f2a:	7800      	ldrb	r0, [r0, #0]
 8000f2c:	2814      	cmp	r0, #20
 8000f2e:	d04c      	beq.n	8000fca <PE_SubStateMachine_Generic+0x2b6>
 8000f30:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000f32:	21f0      	movs	r1, #240	; 0xf0
 8000f34:	0209      	lsls	r1, r1, #8
 8000f36:	4001      	ands	r1, r0
 8000f38:	d147      	bne.n	8000fca <PE_SubStateMachine_Generic+0x2b6>
 8000f3a:	211f      	movs	r1, #31
 8000f3c:	231f      	movs	r3, #31
 8000f3e:	4003      	ands	r3, r0
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d006      	beq.n	8000f52 <PE_SubStateMachine_Generic+0x23e>
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d01f      	beq.n	8000f88 <PE_SubStateMachine_Generic+0x274>
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d01d      	beq.n	8000f88 <PE_SubStateMachine_Generic+0x274>
 8000f4c:	2b10      	cmp	r3, #16
 8000f4e:	d02c      	beq.n	8000faa <PE_SubStateMachine_Generic+0x296>
 8000f50:	e03b      	b.n	8000fca <PE_SubStateMachine_Generic+0x2b6>
 8000f52:	6860      	ldr	r0, [r4, #4]
 8000f54:	6801      	ldr	r1, [r0, #0]
 8000f56:	2601      	movs	r6, #1
 8000f58:	08ca      	lsrs	r2, r1, #3
 8000f5a:	4032      	ands	r2, r6
 8000f5c:	d104      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x254>
 8000f5e:	2208      	movs	r2, #8
 8000f60:	430a      	orrs	r2, r1
 8000f62:	6002      	str	r2, [r0, #0]
 8000f64:	2125      	movs	r1, #37	; 0x25
 8000f66:	e003      	b.n	8000f70 <PE_SubStateMachine_Generic+0x25c>
 8000f68:	2208      	movs	r2, #8
 8000f6a:	4391      	bics	r1, r2
 8000f6c:	6001      	str	r1, [r0, #0]
 8000f6e:	2124      	movs	r1, #36	; 0x24
 8000f70:	0020      	movs	r0, r4
 8000f72:	f000 f989 	bl	8001288 <PE_Notification>
 8000f76:	6860      	ldr	r0, [r4, #4]
 8000f78:	6800      	ldr	r0, [r0, #0]
 8000f7a:	08c0      	lsrs	r0, r0, #3
 8000f7c:	4006      	ands	r6, r0
 8000f7e:	0031      	movs	r1, r6
 8000f80:	7c20      	ldrb	r0, [r4, #16]
 8000f82:	f004 fb6c 	bl	800565e <USBPD_PRL_SetHeaderDataRole>
 8000f86:	e008      	b.n	8000f9a <PE_SubStateMachine_Generic+0x286>
 8000f88:	4001      	ands	r1, r0
 8000f8a:	290c      	cmp	r1, #12
 8000f8c:	d101      	bne.n	8000f92 <PE_SubStateMachine_Generic+0x27e>
 8000f8e:	2126      	movs	r1, #38	; 0x26
 8000f90:	e000      	b.n	8000f94 <PE_SubStateMachine_Generic+0x280>
 8000f92:	2127      	movs	r1, #39	; 0x27
 8000f94:	0020      	movs	r0, r4
 8000f96:	f000 f977 	bl	8001288 <PE_Notification>
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	7460      	strb	r0, [r4, #17]
 8000f9e:	9503      	str	r5, [sp, #12]
 8000fa0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000fa2:	7800      	ldrb	r0, [r0, #0]
 8000fa4:	2814      	cmp	r0, #20
 8000fa6:	d10b      	bne.n	8000fc0 <PE_SubStateMachine_Generic+0x2ac>
 8000fa8:	e00f      	b.n	8000fca <PE_SubStateMachine_Generic+0x2b6>
 8000faa:	2128      	movs	r1, #40	; 0x28
 8000fac:	0020      	movs	r0, r4
 8000fae:	f000 f96b 	bl	8001288 <PE_Notification>
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	7460      	strb	r0, [r4, #17]
 8000fb6:	9503      	str	r5, [sp, #12]
 8000fb8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000fba:	7800      	ldrb	r0, [r0, #0]
 8000fbc:	2814      	cmp	r0, #20
 8000fbe:	d004      	beq.n	8000fca <PE_SubStateMachine_Generic+0x2b6>
 8000fc0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000fc2:	7007      	strb	r7, [r0, #0]
 8000fc4:	0020      	movs	r0, r4
 8000fc6:	f7ff fcb2 	bl	800092e <PE_Clear_RxEvent>
 8000fca:	8be0      	ldrh	r0, [r4, #30]
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0209      	lsls	r1, r1, #8
 8000fd0:	4288      	cmp	r0, r1
 8000fd2:	d107      	bne.n	8000fe4 <PE_SubStateMachine_Generic+0x2d0>
 8000fd4:	e0b4      	b.n	8001140 <PE_SubStateMachine_Generic+0x42c>
 8000fd6:	9500      	str	r5, [sp, #0]
 8000fd8:	2303      	movs	r3, #3
 8000fda:	2210      	movs	r2, #16
 8000fdc:	2100      	movs	r1, #0
 8000fde:	0020      	movs	r0, r4
 8000fe0:	f000 f9ee 	bl	80013c0 <PE_Send_CtrlMessage>
 8000fe4:	e112      	b.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 8000fe6:	9504      	str	r5, [sp, #16]
 8000fe8:	ab04      	add	r3, sp, #16
 8000fea:	48ca      	ldr	r0, [pc, #808]	; (8001314 <.text_70>)
 8000fec:	1822      	adds	r2, r4, r0
 8000fee:	2108      	movs	r1, #8
 8000ff0:	7c20      	ldrb	r0, [r4, #16]
 8000ff2:	68a7      	ldr	r7, [r4, #8]
 8000ff4:	697f      	ldr	r7, [r7, #20]
 8000ff6:	47b8      	blx	r7
 8000ff8:	7035      	strb	r5, [r6, #0]
 8000ffa:	7075      	strb	r5, [r6, #1]
 8000ffc:	7c20      	ldrb	r0, [r4, #16]
 8000ffe:	f7ff fe79 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 8001002:	2800      	cmp	r0, #0
 8001004:	d103      	bne.n	800100e <PE_SubStateMachine_Generic+0x2fa>
 8001006:	7870      	ldrb	r0, [r6, #1]
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	4301      	orrs	r1, r0
 800100c:	7071      	strb	r1, [r6, #1]
 800100e:	9502      	str	r5, [sp, #8]
 8001010:	2003      	movs	r0, #3
 8001012:	9001      	str	r0, [sp, #4]
 8001014:	9804      	ldr	r0, [sp, #16]
 8001016:	1d00      	adds	r0, r0, #4
 8001018:	b280      	uxth	r0, r0
 800101a:	9000      	str	r0, [sp, #0]
 800101c:	48be      	ldr	r0, [pc, #760]	; (8001318 <.text_71>)
 800101e:	1823      	adds	r3, r4, r0
 8001020:	2201      	movs	r2, #1
 8001022:	2100      	movs	r1, #0
 8001024:	0020      	movs	r0, r4
 8001026:	f000 fca1 	bl	800196c <PE_Send_ExtendedMessage>
 800102a:	2148      	movs	r1, #72	; 0x48
 800102c:	e046      	b.n	80010bc <PE_SubStateMachine_Generic+0x3a8>
 800102e:	9504      	str	r5, [sp, #16]
 8001030:	ab04      	add	r3, sp, #16
 8001032:	48b8      	ldr	r0, [pc, #736]	; (8001314 <.text_70>)
 8001034:	1822      	adds	r2, r4, r0
 8001036:	2113      	movs	r1, #19
 8001038:	7c20      	ldrb	r0, [r4, #16]
 800103a:	68a7      	ldr	r7, [r4, #8]
 800103c:	697f      	ldr	r7, [r7, #20]
 800103e:	47b8      	blx	r7
 8001040:	7035      	strb	r5, [r6, #0]
 8001042:	7075      	strb	r5, [r6, #1]
 8001044:	7c20      	ldrb	r0, [r4, #16]
 8001046:	f7ff fe55 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 800104a:	2800      	cmp	r0, #0
 800104c:	d103      	bne.n	8001056 <PE_SubStateMachine_Generic+0x342>
 800104e:	7870      	ldrb	r0, [r6, #1]
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	4301      	orrs	r1, r0
 8001054:	7071      	strb	r1, [r6, #1]
 8001056:	9502      	str	r5, [sp, #8]
 8001058:	2003      	movs	r0, #3
 800105a:	9001      	str	r0, [sp, #4]
 800105c:	9804      	ldr	r0, [sp, #16]
 800105e:	1d00      	adds	r0, r0, #4
 8001060:	b280      	uxth	r0, r0
 8001062:	9000      	str	r0, [sp, #0]
 8001064:	48ac      	ldr	r0, [pc, #688]	; (8001318 <.text_71>)
 8001066:	1823      	adds	r3, r4, r0
 8001068:	220f      	movs	r2, #15
 800106a:	2100      	movs	r1, #0
 800106c:	0020      	movs	r0, r4
 800106e:	f000 fc7d 	bl	800196c <PE_Send_ExtendedMessage>
 8001072:	2161      	movs	r1, #97	; 0x61
 8001074:	e022      	b.n	80010bc <PE_SubStateMachine_Generic+0x3a8>
 8001076:	9504      	str	r5, [sp, #16]
 8001078:	ab04      	add	r3, sp, #16
 800107a:	48a6      	ldr	r0, [pc, #664]	; (8001314 <.text_70>)
 800107c:	1822      	adds	r2, r4, r0
 800107e:	2109      	movs	r1, #9
 8001080:	7c20      	ldrb	r0, [r4, #16]
 8001082:	68a7      	ldr	r7, [r4, #8]
 8001084:	697f      	ldr	r7, [r7, #20]
 8001086:	47b8      	blx	r7
 8001088:	7035      	strb	r5, [r6, #0]
 800108a:	7075      	strb	r5, [r6, #1]
 800108c:	7c20      	ldrb	r0, [r4, #16]
 800108e:	f7ff fe31 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 8001092:	2800      	cmp	r0, #0
 8001094:	d103      	bne.n	800109e <PE_SubStateMachine_Generic+0x38a>
 8001096:	7870      	ldrb	r0, [r6, #1]
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	4301      	orrs	r1, r0
 800109c:	7071      	strb	r1, [r6, #1]
 800109e:	9502      	str	r5, [sp, #8]
 80010a0:	2003      	movs	r0, #3
 80010a2:	9001      	str	r0, [sp, #4]
 80010a4:	9804      	ldr	r0, [sp, #16]
 80010a6:	1d00      	adds	r0, r0, #4
 80010a8:	b280      	uxth	r0, r0
 80010aa:	9000      	str	r0, [sp, #0]
 80010ac:	489a      	ldr	r0, [pc, #616]	; (8001318 <.text_71>)
 80010ae:	1823      	adds	r3, r4, r0
 80010b0:	2202      	movs	r2, #2
 80010b2:	2100      	movs	r1, #0
 80010b4:	0020      	movs	r0, r4
 80010b6:	f000 fc59 	bl	800196c <PE_Send_ExtendedMessage>
 80010ba:	214f      	movs	r1, #79	; 0x4f
 80010bc:	0020      	movs	r0, r4
 80010be:	f000 f8e3 	bl	8001288 <PE_Notification>
 80010c2:	e0a3      	b.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 80010c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80010c6:	7800      	ldrb	r0, [r0, #0]
 80010c8:	2814      	cmp	r0, #20
 80010ca:	d034      	beq.n	8001136 <PE_SubStateMachine_Generic+0x422>
 80010cc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80010ce:	0bc1      	lsrs	r1, r0, #15
 80010d0:	d11a      	bne.n	8001108 <PE_SubStateMachine_Generic+0x3f4>
 80010d2:	0441      	lsls	r1, r0, #17
 80010d4:	0f49      	lsrs	r1, r1, #29
 80010d6:	d017      	beq.n	8001108 <PE_SubStateMachine_Generic+0x3f4>
 80010d8:	06c0      	lsls	r0, r0, #27
 80010da:	0ec0      	lsrs	r0, r0, #27
 80010dc:	2805      	cmp	r0, #5
 80010de:	d113      	bne.n	8001108 <PE_SubStateMachine_Generic+0x3f4>
 80010e0:	2304      	movs	r3, #4
 80010e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80010e4:	1d02      	adds	r2, r0, #4
 80010e6:	210f      	movs	r1, #15
 80010e8:	7c20      	ldrb	r0, [r4, #16]
 80010ea:	68a6      	ldr	r6, [r4, #8]
 80010ec:	69b6      	ldr	r6, [r6, #24]
 80010ee:	47b0      	blx	r6
 80010f0:	2003      	movs	r0, #3
 80010f2:	7460      	strb	r0, [r4, #17]
 80010f4:	9503      	str	r5, [sp, #12]
 80010f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80010f8:	7800      	ldrb	r0, [r0, #0]
 80010fa:	2814      	cmp	r0, #20
 80010fc:	d004      	beq.n	8001108 <PE_SubStateMachine_Generic+0x3f4>
 80010fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001100:	700f      	strb	r7, [r1, #0]
 8001102:	0020      	movs	r0, r4
 8001104:	f7ff fc13 	bl	800092e <PE_Clear_RxEvent>
 8001108:	2034      	movs	r0, #52	; 0x34
 800110a:	5c20      	ldrb	r0, [r4, r0]
 800110c:	06c0      	lsls	r0, r0, #27
 800110e:	0ec0      	lsrs	r0, r0, #27
 8001110:	2810      	cmp	r0, #16
 8001112:	d110      	bne.n	8001136 <PE_SubStateMachine_Generic+0x422>
 8001114:	2159      	movs	r1, #89	; 0x59
 8001116:	0020      	movs	r0, r4
 8001118:	f000 f8b6 	bl	8001288 <PE_Notification>
 800111c:	83e5      	strh	r5, [r4, #30]
 800111e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001120:	7800      	ldrb	r0, [r0, #0]
 8001122:	2814      	cmp	r0, #20
 8001124:	d004      	beq.n	8001130 <PE_SubStateMachine_Generic+0x41c>
 8001126:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001128:	7007      	strb	r7, [r0, #0]
 800112a:	0020      	movs	r0, r4
 800112c:	f7ff fbff 	bl	800092e <PE_Clear_RxEvent>
 8001130:	2003      	movs	r0, #3
 8001132:	7460      	strb	r0, [r4, #17]
 8001134:	9503      	str	r5, [sp, #12]
 8001136:	8be0      	ldrh	r0, [r4, #30]
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	0209      	lsls	r1, r1, #8
 800113c:	4288      	cmp	r0, r1
 800113e:	d165      	bne.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 8001140:	2003      	movs	r0, #3
 8001142:	7460      	strb	r0, [r4, #17]
 8001144:	9503      	str	r5, [sp, #12]
 8001146:	e061      	b.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 8001148:	ab04      	add	r3, sp, #16
 800114a:	4872      	ldr	r0, [pc, #456]	; (8001314 <.text_70>)
 800114c:	1822      	adds	r2, r4, r0
 800114e:	210d      	movs	r1, #13
 8001150:	7c20      	ldrb	r0, [r4, #16]
 8001152:	68a7      	ldr	r7, [r4, #8]
 8001154:	697f      	ldr	r7, [r7, #20]
 8001156:	47b8      	blx	r7
 8001158:	7035      	strb	r5, [r6, #0]
 800115a:	7075      	strb	r5, [r6, #1]
 800115c:	7c20      	ldrb	r0, [r4, #16]
 800115e:	f7ff fdc9 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 8001162:	2800      	cmp	r0, #0
 8001164:	d103      	bne.n	800116e <PE_SubStateMachine_Generic+0x45a>
 8001166:	7870      	ldrb	r0, [r6, #1]
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	4301      	orrs	r1, r0
 800116c:	7071      	strb	r1, [r6, #1]
 800116e:	9502      	str	r5, [sp, #8]
 8001170:	2003      	movs	r0, #3
 8001172:	9001      	str	r0, [sp, #4]
 8001174:	9804      	ldr	r0, [sp, #16]
 8001176:	1d00      	adds	r0, r0, #4
 8001178:	b280      	uxth	r0, r0
 800117a:	9000      	str	r0, [sp, #0]
 800117c:	4866      	ldr	r0, [pc, #408]	; (8001318 <.text_71>)
 800117e:	1823      	adds	r3, r4, r0
 8001180:	2207      	movs	r2, #7
 8001182:	e037      	b.n	80011f4 <PE_SubStateMachine_Generic+0x4e0>
 8001184:	9504      	str	r5, [sp, #16]
 8001186:	ab05      	add	r3, sp, #20
 8001188:	aa04      	add	r2, sp, #16
 800118a:	210f      	movs	r1, #15
 800118c:	7c20      	ldrb	r0, [r4, #16]
 800118e:	68a5      	ldr	r5, [r4, #8]
 8001190:	696d      	ldr	r5, [r5, #20]
 8001192:	47a8      	blx	r5
 8001194:	9805      	ldr	r0, [sp, #20]
 8001196:	2800      	cmp	r0, #0
 8001198:	d036      	beq.n	8001208 <PE_SubStateMachine_Generic+0x4f4>
 800119a:	2000      	movs	r0, #0
 800119c:	9002      	str	r0, [sp, #8]
 800119e:	2003      	movs	r0, #3
 80011a0:	9001      	str	r0, [sp, #4]
 80011a2:	2001      	movs	r0, #1
 80011a4:	9000      	str	r0, [sp, #0]
 80011a6:	ab04      	add	r3, sp, #16
 80011a8:	2205      	movs	r2, #5
 80011aa:	2100      	movs	r1, #0
 80011ac:	0020      	movs	r0, r4
 80011ae:	f000 f934 	bl	800141a <PE_Send_DataMessage>
 80011b2:	e02b      	b.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 80011b4:	ab04      	add	r3, sp, #16
 80011b6:	4857      	ldr	r0, [pc, #348]	; (8001314 <.text_70>)
 80011b8:	1822      	adds	r2, r4, r0
 80011ba:	2111      	movs	r1, #17
 80011bc:	7c20      	ldrb	r0, [r4, #16]
 80011be:	68a7      	ldr	r7, [r4, #8]
 80011c0:	697f      	ldr	r7, [r7, #20]
 80011c2:	47b8      	blx	r7
 80011c4:	9804      	ldr	r0, [sp, #16]
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d01e      	beq.n	8001208 <PE_SubStateMachine_Generic+0x4f4>
 80011ca:	7035      	strb	r5, [r6, #0]
 80011cc:	7075      	strb	r5, [r6, #1]
 80011ce:	7c20      	ldrb	r0, [r4, #16]
 80011d0:	f7ff fd90 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d103      	bne.n	80011e0 <PE_SubStateMachine_Generic+0x4cc>
 80011d8:	7870      	ldrb	r0, [r6, #1]
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	4301      	orrs	r1, r0
 80011de:	7071      	strb	r1, [r6, #1]
 80011e0:	9502      	str	r5, [sp, #8]
 80011e2:	2003      	movs	r0, #3
 80011e4:	9001      	str	r0, [sp, #4]
 80011e6:	9804      	ldr	r0, [sp, #16]
 80011e8:	1d00      	adds	r0, r0, #4
 80011ea:	b280      	uxth	r0, r0
 80011ec:	9000      	str	r0, [sp, #0]
 80011ee:	484a      	ldr	r0, [pc, #296]	; (8001318 <.text_71>)
 80011f0:	1823      	adds	r3, r4, r0
 80011f2:	2205      	movs	r2, #5
 80011f4:	2100      	movs	r1, #0
 80011f6:	0020      	movs	r0, r4
 80011f8:	f000 fbb8 	bl	800196c <PE_Send_ExtendedMessage>
 80011fc:	e006      	b.n	800120c <PE_SubStateMachine_Generic+0x4f8>
 80011fe:	2150      	movs	r1, #80	; 0x50
 8001200:	0020      	movs	r0, r4
 8001202:	f000 f841 	bl	8001288 <PE_Notification>
 8001206:	e79b      	b.n	8001140 <PE_SubStateMachine_Generic+0x42c>
 8001208:	2001      	movs	r0, #1
 800120a:	7460      	strb	r0, [r4, #17]
 800120c:	9803      	ldr	r0, [sp, #12]
 800120e:	b00d      	add	sp, #52	; 0x34
 8001210:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001212 <PE_SubStateMachine_ReceiveDRS>:
 8001212:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8001214:	0004      	movs	r4, r0
 8001216:	2501      	movs	r5, #1
 8001218:	262a      	movs	r6, #42	; 0x2a
 800121a:	7c20      	ldrb	r0, [r4, #16]
 800121c:	68a1      	ldr	r1, [r4, #8]
 800121e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001220:	4788      	blx	r1
 8001222:	280a      	cmp	r0, #10
 8001224:	d002      	beq.n	800122c <PE_SubStateMachine_ReceiveDRS+0x1a>
 8001226:	280c      	cmp	r0, #12
 8001228:	d02c      	beq.n	8001284 <PE_SubStateMachine_ReceiveDRS+0x72>
 800122a:	e023      	b.n	8001274 <PE_SubStateMachine_ReceiveDRS+0x62>
 800122c:	2000      	movs	r0, #0
 800122e:	9000      	str	r0, [sp, #0]
 8001230:	2303      	movs	r3, #3
 8001232:	2203      	movs	r2, #3
 8001234:	2100      	movs	r1, #0
 8001236:	0020      	movs	r0, r4
 8001238:	f000 f8c2 	bl	80013c0 <PE_Send_CtrlMessage>
 800123c:	2800      	cmp	r0, #0
 800123e:	d122      	bne.n	8001286 <PE_SubStateMachine_ReceiveDRS+0x74>
 8001240:	6860      	ldr	r0, [r4, #4]
 8001242:	6801      	ldr	r1, [r0, #0]
 8001244:	08ca      	lsrs	r2, r1, #3
 8001246:	402a      	ands	r2, r5
 8001248:	d104      	bne.n	8001254 <PE_SubStateMachine_ReceiveDRS+0x42>
 800124a:	2208      	movs	r2, #8
 800124c:	430a      	orrs	r2, r1
 800124e:	6002      	str	r2, [r0, #0]
 8001250:	2125      	movs	r1, #37	; 0x25
 8001252:	e003      	b.n	800125c <PE_SubStateMachine_ReceiveDRS+0x4a>
 8001254:	2208      	movs	r2, #8
 8001256:	4391      	bics	r1, r2
 8001258:	6001      	str	r1, [r0, #0]
 800125a:	2124      	movs	r1, #36	; 0x24
 800125c:	0020      	movs	r0, r4
 800125e:	f000 f813 	bl	8001288 <PE_Notification>
 8001262:	6860      	ldr	r0, [r4, #4]
 8001264:	6800      	ldr	r0, [r0, #0]
 8001266:	08c0      	lsrs	r0, r0, #3
 8001268:	4005      	ands	r5, r0
 800126a:	0029      	movs	r1, r5
 800126c:	7c20      	ldrb	r0, [r4, #16]
 800126e:	f004 f9f6 	bl	800565e <USBPD_PRL_SetHeaderDataRole>
 8001272:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001274:	6860      	ldr	r0, [r4, #4]
 8001276:	7800      	ldrb	r0, [r0, #0]
 8001278:	0780      	lsls	r0, r0, #30
 800127a:	0f80      	lsrs	r0, r0, #30
 800127c:	2802      	cmp	r0, #2
 800127e:	d101      	bne.n	8001284 <PE_SubStateMachine_ReceiveDRS+0x72>
 8001280:	7465      	strb	r5, [r4, #17]
 8001282:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001284:	7466      	strb	r6, [r4, #17]
 8001286:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08001288 <PE_Notification>:
 8001288:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800128a:	0004      	movs	r4, r0
 800128c:	000d      	movs	r5, r1
 800128e:	2000      	movs	r0, #0
 8001290:	9000      	str	r0, [sp, #0]
 8001292:	2300      	movs	r3, #0
 8001294:	002a      	movs	r2, r5
 8001296:	7c21      	ldrb	r1, [r4, #16]
 8001298:	2009      	movs	r0, #9
 800129a:	4e36      	ldr	r6, [pc, #216]	; (8001374 <.text_74>)
 800129c:	6836      	ldr	r6, [r6, #0]
 800129e:	47b0      	blx	r6
 80012a0:	0029      	movs	r1, r5
 80012a2:	7c20      	ldrb	r0, [r4, #16]
 80012a4:	68a2      	ldr	r2, [r4, #8]
 80012a6:	68d2      	ldr	r2, [r2, #12]
 80012a8:	4790      	blx	r2
 80012aa:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080012ac <PE_UpdateTimer>:
 80012ac:	0443      	lsls	r3, r0, #17
 80012ae:	0c5b      	lsrs	r3, r3, #17
 80012b0:	4299      	cmp	r1, r3
 80012b2:	da02      	bge.n	80012ba <PE_UpdateTimer+0xe>
 80012b4:	1a40      	subs	r0, r0, r1
 80012b6:	b280      	uxth	r0, r0
 80012b8:	4770      	bx	lr
 80012ba:	2080      	movs	r0, #128	; 0x80
 80012bc:	0200      	lsls	r0, r0, #8
 80012be:	4770      	bx	lr

080012c0 <PE_CallHardResetCallback>:
 80012c0:	6883      	ldr	r3, [r0, #8]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <PE_CallHardResetCallback+0xa>
 80012c8:	4770      	bx	lr
 80012ca:	b580      	push	{r7, lr}
 80012cc:	7c00      	ldrb	r0, [r0, #16]
 80012ce:	4798      	blx	r3
 80012d0:	bd01      	pop	{r0, pc}

080012d2 <PE_SetPowerNegotiation>:
 80012d2:	b510      	push	{r4, lr}
 80012d4:	6842      	ldr	r2, [r0, #4]
 80012d6:	6813      	ldr	r3, [r2, #0]
 80012d8:	055c      	lsls	r4, r3, #21
 80012da:	0f64      	lsrs	r4, r4, #29
 80012dc:	42a1      	cmp	r1, r4
 80012de:	d00a      	beq.n	80012f6 <PE_SetPowerNegotiation+0x24>
 80012e0:	4c25      	ldr	r4, [pc, #148]	; (8001378 <.text_75>)
 80012e2:	401c      	ands	r4, r3
 80012e4:	0209      	lsls	r1, r1, #8
 80012e6:	23e0      	movs	r3, #224	; 0xe0
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	400b      	ands	r3, r1
 80012ec:	4323      	orrs	r3, r4
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	215a      	movs	r1, #90	; 0x5a
 80012f2:	f7ff ffc9 	bl	8001288 <PE_Notification>
 80012f6:	bd10      	pop	{r4, pc}

080012f8 <USBPD_PE_ExecFastRoleSwapSignalling>:
 80012f8:	b580      	push	{r7, lr}
 80012fa:	4920      	ldr	r1, [pc, #128]	; (800137c <.text_76>)
 80012fc:	0082      	lsls	r2, r0, #2
 80012fe:	5889      	ldr	r1, [r1, r2]

08001300 <.text_69>:
 8001300:	694a      	ldr	r2, [r1, #20]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	025b      	lsls	r3, r3, #9
 8001306:	4313      	orrs	r3, r2
 8001308:	614b      	str	r3, [r1, #20]
 800130a:	6889      	ldr	r1, [r1, #8]
 800130c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800130e:	4788      	blx	r1
 8001310:	bd01      	pop	{r0, pc}
	...

08001314 <.text_70>:
 8001314:	00000267 	.word	0x00000267

08001318 <.text_71>:
 8001318:	00000263 	.word	0x00000263

0800131c <PE_CalculateMinTiming>:
 800131c:	0001      	movs	r1, r0
 800131e:	2000      	movs	r0, #0
 8001320:	43c0      	mvns	r0, r0
 8001322:	0c42      	lsrs	r2, r0, #17
 8001324:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8001326:	4213      	tst	r3, r2
 8001328:	d001      	beq.n	800132e <PE_CalculateMinTiming+0x12>
 800132a:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 800132c:	4010      	ands	r0, r2
 800132e:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8001330:	4213      	tst	r3, r2
 8001332:	d006      	beq.n	8001342 <PE_CalculateMinTiming+0x26>
 8001334:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8001336:	4013      	ands	r3, r2
 8001338:	4298      	cmp	r0, r3
 800133a:	d302      	bcc.n	8001342 <PE_CalculateMinTiming+0x26>
 800133c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800133e:	0010      	movs	r0, r2
 8001340:	4008      	ands	r0, r1
 8001342:	4770      	bx	lr

08001344 <PE_SetPowerNegociation>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	0005      	movs	r5, r0
 8001348:	000c      	movs	r4, r1
 800134a:	6868      	ldr	r0, [r5, #4]
 800134c:	6800      	ldr	r0, [r0, #0]
 800134e:	0540      	lsls	r0, r0, #21
 8001350:	0f40      	lsrs	r0, r0, #29
 8001352:	4284      	cmp	r4, r0
 8001354:	d003      	beq.n	800135e <PE_SetPowerNegociation+0x1a>
 8001356:	215a      	movs	r1, #90	; 0x5a
 8001358:	0028      	movs	r0, r5
 800135a:	f7ff ff95 	bl	8001288 <PE_Notification>
 800135e:	6868      	ldr	r0, [r5, #4]
 8001360:	6801      	ldr	r1, [r0, #0]
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <.text_75>)
 8001364:	400a      	ands	r2, r1
 8001366:	0221      	lsls	r1, r4, #8
 8001368:	23e0      	movs	r3, #224	; 0xe0
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	400b      	ands	r3, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	6003      	str	r3, [r0, #0]
 8001372:	bd31      	pop	{r0, r4, r5, pc}

08001374 <.text_74>:
 8001374:	20000000 	.word	0x20000000

08001378 <.text_75>:
 8001378:	fffff8ff 	.word	0xfffff8ff

0800137c <.text_76>:
 800137c:	200001e0 	.word	0x200001e0

08001380 <USBPD_PE_SetTrace>:
 8001380:	0001      	movs	r1, r0
 8001382:	d100      	bne.n	8001386 <USBPD_PE_SetTrace+0x6>
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <.text_5>)
 8001386:	4906      	ldr	r1, [pc, #24]	; (80013a0 <.text_6>)
 8001388:	6008      	str	r0, [r1, #0]
 800138a:	4770      	bx	lr

0800138c <USBPD_PE_CheckLIB>:
 800138c:	4905      	ldr	r1, [pc, #20]	; (80013a4 <.text_7>)
 800138e:	4288      	cmp	r0, r1
 8001390:	d101      	bne.n	8001396 <USBPD_PE_CheckLIB+0xa>
 8001392:	2001      	movs	r0, #1
 8001394:	4770      	bx	lr
 8001396:	2000      	movs	r0, #0
 8001398:	4770      	bx	lr
	...

0800139c <.text_5>:
 800139c:	080013bf 	.word	0x080013bf

080013a0 <.text_6>:
 80013a0:	20000000 	.word	0x20000000

080013a4 <.text_7>:
 80013a4:	30320000 	.word	0x30320000

080013a8 <USBPD_PE_GetMemoryConsumption>:
 80013a8:	b510      	push	{r4, lr}
 80013aa:	f004 f92f 	bl	800560c <USBPD_PRL_GetMemoryConsumption>
 80013ae:	0004      	movs	r4, r0
 80013b0:	f7fe ffbd 	bl	800032e <USBPD_CAD_GetMemoryConsumption>
 80013b4:	1820      	adds	r0, r4, r0
 80013b6:	2196      	movs	r1, #150	; 0x96
 80013b8:	0109      	lsls	r1, r1, #4
 80013ba:	1840      	adds	r0, r0, r1
 80013bc:	bd10      	pop	{r4, pc}

080013be <PE_Trace_Empty>:
 80013be:	4770      	bx	lr

080013c0 <PE_Send_CtrlMessage>:
 80013c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80013c2:	9b08      	ldr	r3, [sp, #32]
 80013c4:	2501      	movs	r5, #1
 80013c6:	0004      	movs	r4, r0
 80013c8:	000f      	movs	r7, r1
 80013ca:	0016      	movs	r6, r2
 80013cc:	a808      	add	r0, sp, #32
 80013ce:	7003      	strb	r3, [r0, #0]
 80013d0:	6860      	ldr	r0, [r4, #4]
 80013d2:	6800      	ldr	r0, [r0, #0]
 80013d4:	0b00      	lsrs	r0, r0, #12
 80013d6:	4028      	ands	r0, r5
 80013d8:	d013      	beq.n	8001402 <PE_Send_CtrlMessage+0x42>
 80013da:	a808      	add	r0, sp, #32
 80013dc:	7800      	ldrb	r0, [r0, #0]
 80013de:	9001      	str	r0, [sp, #4]
 80013e0:	2002      	movs	r0, #2
 80013e2:	9000      	str	r0, [sp, #0]
 80013e4:	482a      	ldr	r0, [pc, #168]	; (8001490 <.text_4>)
 80013e6:	1823      	adds	r3, r4, r0
 80013e8:	0032      	movs	r2, r6
 80013ea:	0039      	movs	r1, r7
 80013ec:	7c20      	ldrb	r0, [r4, #16]
 80013ee:	f004 f985 	bl	80056fc <USBPD_PRL_SendMessage>
 80013f2:	0001      	movs	r1, r0
 80013f4:	2803      	cmp	r0, #3
 80013f6:	d0eb      	beq.n	80013d0 <PE_Send_CtrlMessage+0x10>
 80013f8:	0020      	movs	r0, r4
 80013fa:	2e0d      	cmp	r6, #13
 80013fc:	d104      	bne.n	8001408 <PE_Send_CtrlMessage+0x48>
 80013fe:	2201      	movs	r2, #1
 8001400:	e003      	b.n	800140a <PE_Send_CtrlMessage+0x4a>
 8001402:	7460      	strb	r0, [r4, #17]
 8001404:	2010      	movs	r0, #16
 8001406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001408:	2200      	movs	r2, #0
 800140a:	466b      	mov	r3, sp
 800140c:	7a1b      	ldrb	r3, [r3, #8]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	000b      	movs	r3, r1
 8001412:	0039      	movs	r1, r7
 8001414:	f000 fad3 	bl	80019be <PE_CheckSendMessageStatus>
 8001418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800141a <PE_Send_DataMessage>:
 800141a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	0004      	movs	r4, r0
 8001420:	2000      	movs	r0, #0
 8001422:	4e1c      	ldr	r6, [pc, #112]	; (8001494 <.text_5>)
 8001424:	e00c      	b.n	8001440 <PE_Send_DataMessage+0x26>
 8001426:	2100      	movs	r1, #0
 8001428:	0082      	lsls	r2, r0, #2
 800142a:	18a2      	adds	r2, r4, r2
 800142c:	1855      	adds	r5, r2, r1
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	00cf      	lsls	r7, r1, #3
 8001432:	40fa      	lsrs	r2, r7
 8001434:	55aa      	strb	r2, [r5, r6]
 8001436:	1c49      	adds	r1, r1, #1
 8001438:	2904      	cmp	r1, #4
 800143a:	d3f5      	bcc.n	8001428 <PE_Send_DataMessage+0xe>
 800143c:	1d1b      	adds	r3, r3, #4
 800143e:	1c40      	adds	r0, r0, #1
 8001440:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001442:	4288      	cmp	r0, r1
 8001444:	d3ef      	bcc.n	8001426 <PE_Send_DataMessage+0xc>
 8001446:	6860      	ldr	r0, [r4, #4]
 8001448:	6800      	ldr	r0, [r0, #0]
 800144a:	04c1      	lsls	r1, r0, #19
 800144c:	0fc9      	lsrs	r1, r1, #31
 800144e:	d01c      	beq.n	800148a <PE_Send_DataMessage+0x70>
 8001450:	a80c      	add	r0, sp, #48	; 0x30
 8001452:	7800      	ldrb	r0, [r0, #0]
 8001454:	9001      	str	r0, [sp, #4]
 8001456:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001458:	0080      	lsls	r0, r0, #2
 800145a:	1c80      	adds	r0, r0, #2
 800145c:	b280      	uxth	r0, r0
 800145e:	9000      	str	r0, [sp, #0]
 8001460:	1eb0      	subs	r0, r6, #2
 8001462:	1823      	adds	r3, r4, r0
 8001464:	4668      	mov	r0, sp
 8001466:	7c02      	ldrb	r2, [r0, #16]
 8001468:	7b01      	ldrb	r1, [r0, #12]
 800146a:	7c20      	ldrb	r0, [r4, #16]
 800146c:	f004 f946 	bl	80056fc <USBPD_PRL_SendMessage>
 8001470:	2803      	cmp	r0, #3
 8001472:	d0e8      	beq.n	8001446 <PE_Send_DataMessage+0x2c>
 8001474:	4669      	mov	r1, sp
 8001476:	7b09      	ldrb	r1, [r1, #12]
 8001478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	0003      	movs	r3, r0
 800147e:	2200      	movs	r2, #0
 8001480:	0020      	movs	r0, r4
 8001482:	f000 fa9c 	bl	80019be <PE_CheckSendMessageStatus>
 8001486:	b005      	add	sp, #20
 8001488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148a:	2010      	movs	r0, #16
 800148c:	e7fb      	b.n	8001486 <PE_Send_DataMessage+0x6c>
	...

08001490 <.text_4>:
 8001490:	00000263 	.word	0x00000263

08001494 <.text_5>:
 8001494:	00000265 	.word	0x00000265

08001498 <PE_Check_ControlMessage>:
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	0004      	movs	r4, r0
 800149c:	272a      	movs	r7, #42	; 0x2a
 800149e:	2603      	movs	r6, #3
 80014a0:	2501      	movs	r5, #1
 80014a2:	200b      	movs	r0, #11
 80014a4:	2134      	movs	r1, #52	; 0x34
 80014a6:	5c61      	ldrb	r1, [r4, r1]
 80014a8:	06c9      	lsls	r1, r1, #27
 80014aa:	0ec9      	lsrs	r1, r1, #27
 80014ac:	1e49      	subs	r1, r1, #1
 80014ae:	2915      	cmp	r1, #21
 80014b0:	d900      	bls.n	80014b4 <PE_Check_ControlMessage+0x1c>
 80014b2:	e0c8      	b.n	8001646 <PE_Check_ControlMessage+0x1ae>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <PE_Check_ControlMessage+0x24>)
 80014b6:	5c52      	ldrb	r2, [r2, r1]
 80014b8:	0052      	lsls	r2, r2, #1
 80014ba:	4497      	add	pc, r2
 80014bc:	c1c10aca 	.word	0xc1c10aca
 80014c0:	5b1ec1ca 	.word	0x5b1ec1ca
 80014c4:	c13d3045 	.word	0xc13d3045
 80014c8:	bfc4c417 	.word	0xbfc4c417
 80014cc:	a4bc9874 	.word	0xa4bc9874
 80014d0:	88b5      	.short	0x88b5
 80014d2:	6860      	ldr	r0, [r4, #4]
 80014d4:	6800      	ldr	r0, [r0, #0]
 80014d6:	0880      	lsrs	r0, r0, #2
 80014d8:	4005      	ands	r5, r0
 80014da:	d163      	bne.n	80015a4 <PE_Check_ControlMessage+0x10c>
 80014dc:	2002      	movs	r0, #2
 80014de:	7720      	strb	r0, [r4, #28]
 80014e0:	212b      	movs	r1, #43	; 0x2b
 80014e2:	0020      	movs	r0, r4
 80014e4:	f7ff fed0 	bl	8001288 <PE_Notification>
 80014e8:	2098      	movs	r0, #152	; 0x98
 80014ea:	e0aa      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 80014ec:	7726      	strb	r6, [r4, #28]
 80014ee:	2132      	movs	r1, #50	; 0x32
 80014f0:	0020      	movs	r0, r4
 80014f2:	f7ff fec9 	bl	8001288 <PE_Notification>
 80014f6:	2010      	movs	r0, #16
 80014f8:	e0a3      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 80014fa:	2006      	movs	r0, #6
 80014fc:	7720      	strb	r0, [r4, #28]
 80014fe:	6860      	ldr	r0, [r4, #4]
 8001500:	6800      	ldr	r0, [r0, #0]
 8001502:	0881      	lsrs	r1, r0, #2
 8001504:	4029      	ands	r1, r5
 8001506:	d104      	bne.n	8001512 <PE_Check_ControlMessage+0x7a>
 8001508:	6821      	ldr	r1, [r4, #0]
 800150a:	6849      	ldr	r1, [r1, #4]
 800150c:	08c9      	lsrs	r1, r1, #3
 800150e:	4029      	ands	r1, r5
 8001510:	d029      	beq.n	8001566 <PE_Check_ControlMessage+0xce>
 8001512:	210c      	movs	r1, #12
 8001514:	0020      	movs	r0, r4
 8001516:	f7ff feb7 	bl	8001288 <PE_Notification>
 800151a:	204c      	movs	r0, #76	; 0x4c
 800151c:	e091      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 800151e:	6820      	ldr	r0, [r4, #0]
 8001520:	6840      	ldr	r0, [r0, #4]
 8001522:	08c0      	lsrs	r0, r0, #3
 8001524:	4028      	ands	r0, r5
 8001526:	d01c      	beq.n	8001562 <PE_Check_ControlMessage+0xca>
 8001528:	2008      	movs	r0, #8
 800152a:	7720      	strb	r0, [r4, #28]
 800152c:	213c      	movs	r1, #60	; 0x3c
 800152e:	0020      	movs	r0, r4
 8001530:	f7ff feaa 	bl	8001288 <PE_Notification>
 8001534:	2022      	movs	r0, #34	; 0x22
 8001536:	e084      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 8001538:	68a0      	ldr	r0, [r4, #8]
 800153a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800153c:	2800      	cmp	r0, #0
 800153e:	d010      	beq.n	8001562 <PE_Check_ControlMessage+0xca>
 8001540:	2010      	movs	r0, #16
 8001542:	7720      	strb	r0, [r4, #28]
 8001544:	209d      	movs	r0, #157	; 0x9d
 8001546:	e07c      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 8001548:	2123      	movs	r1, #35	; 0x23
 800154a:	0020      	movs	r0, r4
 800154c:	f7ff fe9c 	bl	8001288 <PE_Notification>
 8001550:	200f      	movs	r0, #15
 8001552:	6961      	ldr	r1, [r4, #20]
 8001554:	0609      	lsls	r1, r1, #24
 8001556:	0f49      	lsrs	r1, r1, #29
 8001558:	d173      	bne.n	8001642 <PE_Check_ControlMessage+0x1aa>
 800155a:	68a1      	ldr	r1, [r4, #8]
 800155c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800155e:	2900      	cmp	r1, #0
 8001560:	d105      	bne.n	800156e <PE_Check_ControlMessage+0xd6>
 8001562:	6860      	ldr	r0, [r4, #4]
 8001564:	6800      	ldr	r0, [r0, #0]
 8001566:	4006      	ands	r6, r0
 8001568:	2e02      	cmp	r6, #2
 800156a:	d11a      	bne.n	80015a2 <PE_Check_ControlMessage+0x10a>
 800156c:	e070      	b.n	8001650 <PE_Check_ControlMessage+0x1b8>
 800156e:	7720      	strb	r0, [r4, #28]
 8001570:	2093      	movs	r0, #147	; 0x93
 8001572:	e066      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 8001574:	6860      	ldr	r0, [r4, #4]
 8001576:	6800      	ldr	r0, [r0, #0]
 8001578:	0541      	lsls	r1, r0, #21
 800157a:	0f49      	lsrs	r1, r1, #29
 800157c:	2903      	cmp	r1, #3
 800157e:	d10d      	bne.n	800159c <PE_Check_ControlMessage+0x104>
 8001580:	0881      	lsrs	r1, r0, #2
 8001582:	4029      	ands	r1, r5
 8001584:	d004      	beq.n	8001590 <PE_Check_ControlMessage+0xf8>
 8001586:	6821      	ldr	r1, [r4, #0]
 8001588:	6849      	ldr	r1, [r1, #4]
 800158a:	08c9      	lsrs	r1, r1, #3
 800158c:	4029      	ands	r1, r5
 800158e:	d005      	beq.n	800159c <PE_Check_ControlMessage+0x104>
 8001590:	2007      	movs	r0, #7
 8001592:	7720      	strb	r0, [r4, #28]
 8001594:	201d      	movs	r0, #29
 8001596:	7460      	strb	r0, [r4, #17]
 8001598:	2106      	movs	r1, #6
 800159a:	e050      	b.n	800163e <PE_Check_ControlMessage+0x1a6>
 800159c:	4006      	ands	r6, r0
 800159e:	2e02      	cmp	r6, #2
 80015a0:	d056      	beq.n	8001650 <PE_Check_ControlMessage+0x1b8>
 80015a2:	7467      	strb	r7, [r4, #17]
 80015a4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80015a6:	6820      	ldr	r0, [r4, #0]
 80015a8:	8901      	ldrh	r1, [r0, #8]
 80015aa:	08c9      	lsrs	r1, r1, #3
 80015ac:	4229      	tst	r1, r5
 80015ae:	d04f      	beq.n	8001650 <PE_Check_ControlMessage+0x1b8>
 80015b0:	6861      	ldr	r1, [r4, #4]
 80015b2:	6809      	ldr	r1, [r1, #0]
 80015b4:	0889      	lsrs	r1, r1, #2
 80015b6:	4029      	ands	r1, r5
 80015b8:	d103      	bne.n	80015c2 <PE_Check_ControlMessage+0x12a>
 80015ba:	6840      	ldr	r0, [r0, #4]
 80015bc:	08c0      	lsrs	r0, r0, #3
 80015be:	4028      	ands	r0, r5
 80015c0:	d046      	beq.n	8001650 <PE_Check_ControlMessage+0x1b8>
 80015c2:	200a      	movs	r0, #10
 80015c4:	7720      	strb	r0, [r4, #28]
 80015c6:	2063      	movs	r0, #99	; 0x63
 80015c8:	7460      	strb	r0, [r4, #17]
 80015ca:	2146      	movs	r1, #70	; 0x46
 80015cc:	e037      	b.n	800163e <PE_Check_ControlMessage+0x1a6>
 80015ce:	6860      	ldr	r0, [r4, #4]
 80015d0:	6800      	ldr	r0, [r0, #0]
 80015d2:	0880      	lsrs	r0, r0, #2
 80015d4:	4028      	ands	r0, r5
 80015d6:	d004      	beq.n	80015e2 <PE_Check_ControlMessage+0x14a>
 80015d8:	6820      	ldr	r0, [r4, #0]
 80015da:	6840      	ldr	r0, [r0, #4]
 80015dc:	08c0      	lsrs	r0, r0, #3
 80015de:	4028      	ands	r0, r5
 80015e0:	d036      	beq.n	8001650 <PE_Check_ControlMessage+0x1b8>
 80015e2:	207f      	movs	r0, #127	; 0x7f
 80015e4:	7720      	strb	r0, [r4, #28]
 80015e6:	2064      	movs	r0, #100	; 0x64
 80015e8:	7460      	strb	r0, [r4, #17]
 80015ea:	2160      	movs	r1, #96	; 0x60
 80015ec:	e027      	b.n	800163e <PE_Check_ControlMessage+0x1a6>
 80015ee:	6821      	ldr	r1, [r4, #0]
 80015f0:	8909      	ldrh	r1, [r1, #8]
 80015f2:	0949      	lsrs	r1, r1, #5
 80015f4:	4229      	tst	r1, r5
 80015f6:	d02b      	beq.n	8001650 <PE_Check_ControlMessage+0x1b8>
 80015f8:	7720      	strb	r0, [r4, #28]
 80015fa:	214d      	movs	r1, #77	; 0x4d
 80015fc:	0020      	movs	r0, r4
 80015fe:	f7ff fe43 	bl	8001288 <PE_Notification>
 8001602:	2030      	movs	r0, #48	; 0x30
 8001604:	e01d      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 8001606:	6821      	ldr	r1, [r4, #0]
 8001608:	8909      	ldrh	r1, [r1, #8]
 800160a:	0889      	lsrs	r1, r1, #2
 800160c:	4229      	tst	r1, r5
 800160e:	d01f      	beq.n	8001650 <PE_Check_ControlMessage+0x1b8>
 8001610:	7720      	strb	r0, [r4, #28]
 8001612:	2149      	movs	r1, #73	; 0x49
 8001614:	0020      	movs	r0, r4
 8001616:	f7ff fe37 	bl	8001288 <PE_Notification>
 800161a:	6860      	ldr	r0, [r4, #4]
 800161c:	6800      	ldr	r0, [r0, #0]
 800161e:	0880      	lsrs	r0, r0, #2
 8001620:	4005      	ands	r5, r0
 8001622:	d00d      	beq.n	8001640 <PE_Check_ControlMessage+0x1a8>
 8001624:	202d      	movs	r0, #45	; 0x2d
 8001626:	e00c      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 8001628:	6820      	ldr	r0, [r4, #0]
 800162a:	8900      	ldrh	r0, [r0, #8]
 800162c:	09c0      	lsrs	r0, r0, #7
 800162e:	4228      	tst	r0, r5
 8001630:	d00e      	beq.n	8001650 <PE_Check_ControlMessage+0x1b8>
 8001632:	202f      	movs	r0, #47	; 0x2f
 8001634:	e005      	b.n	8001642 <PE_Check_ControlMessage+0x1aa>
 8001636:	2009      	movs	r0, #9
 8001638:	7720      	strb	r0, [r4, #28]
 800163a:	e009      	b.n	8001650 <PE_Check_ControlMessage+0x1b8>
 800163c:	2159      	movs	r1, #89	; 0x59
 800163e:	e18f      	b.n	8001960 <.text_9>
 8001640:	2011      	movs	r0, #17
 8001642:	7460      	strb	r0, [r4, #17]
 8001644:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001646:	6860      	ldr	r0, [r4, #4]
 8001648:	6800      	ldr	r0, [r0, #0]
 800164a:	4006      	ands	r6, r0
 800164c:	2e02      	cmp	r6, #2
 800164e:	d100      	bne.n	8001652 <PE_Check_ControlMessage+0x1ba>
 8001650:	7465      	strb	r5, [r4, #17]
 8001652:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001654 <PE_Check_DataMessage>:
 8001654:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001656:	0004      	movs	r4, r0
 8001658:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800165a:	2501      	movs	r5, #1
 800165c:	2707      	movs	r7, #7
 800165e:	2600      	movs	r6, #0
 8001660:	06c1      	lsls	r1, r0, #27
 8001662:	0ec9      	lsrs	r1, r1, #27
 8001664:	2901      	cmp	r1, #1
 8001666:	d026      	beq.n	80016b6 <PE_Check_DataMessage+0x62>
 8001668:	2902      	cmp	r1, #2
 800166a:	d008      	beq.n	800167e <PE_Check_DataMessage+0x2a>
 800166c:	2903      	cmp	r1, #3
 800166e:	d039      	beq.n	80016e4 <PE_Check_DataMessage+0x90>
 8001670:	2906      	cmp	r1, #6
 8001672:	d06a      	beq.n	800174a <PE_Check_DataMessage+0xf6>
 8001674:	2907      	cmp	r1, #7
 8001676:	d077      	beq.n	8001768 <PE_Check_DataMessage+0x114>
 8001678:	290f      	cmp	r1, #15
 800167a:	d062      	beq.n	8001742 <PE_Check_DataMessage+0xee>
 800167c:	e07d      	b.n	800177a <PE_Check_DataMessage+0x126>
 800167e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001680:	7881      	ldrb	r1, [r0, #2]
 8001682:	78c2      	ldrb	r2, [r0, #3]
 8001684:	0212      	lsls	r2, r2, #8
 8001686:	1889      	adds	r1, r1, r2
 8001688:	7902      	ldrb	r2, [r0, #4]
 800168a:	0412      	lsls	r2, r2, #16
 800168c:	1889      	adds	r1, r1, r2
 800168e:	7940      	ldrb	r0, [r0, #5]
 8001690:	0600      	lsls	r0, r0, #24
 8001692:	1808      	adds	r0, r1, r0
 8001694:	9000      	str	r0, [sp, #0]
 8001696:	6860      	ldr	r0, [r4, #4]
 8001698:	6800      	ldr	r0, [r0, #0]
 800169a:	0880      	lsrs	r0, r0, #2
 800169c:	4028      	ands	r0, r5
 800169e:	d06e      	beq.n	800177e <PE_Check_DataMessage+0x12a>
 80016a0:	2304      	movs	r3, #4
 80016a2:	466a      	mov	r2, sp
 80016a4:	2106      	movs	r1, #6
 80016a6:	7c20      	ldrb	r0, [r4, #16]
 80016a8:	68a7      	ldr	r7, [r4, #8]
 80016aa:	69bf      	ldr	r7, [r7, #24]
 80016ac:	47b8      	blx	r7
 80016ae:	7725      	strb	r5, [r4, #28]
 80016b0:	84a6      	strh	r6, [r4, #36]	; 0x24
 80016b2:	2009      	movs	r0, #9
 80016b4:	e062      	b.n	800177c <PE_Check_DataMessage+0x128>
 80016b6:	6861      	ldr	r1, [r4, #4]
 80016b8:	6809      	ldr	r1, [r1, #0]
 80016ba:	0889      	lsrs	r1, r1, #2
 80016bc:	400d      	ands	r5, r1
 80016be:	d15e      	bne.n	800177e <PE_Check_DataMessage+0x12a>
 80016c0:	0600      	lsls	r0, r0, #24
 80016c2:	0f81      	lsrs	r1, r0, #30
 80016c4:	7c20      	ldrb	r0, [r4, #16]
 80016c6:	f7ff fa79 	bl	8000bbc <PE_ExtRevisionInteroperability>
 80016ca:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80016cc:	0b00      	lsrs	r0, r0, #12
 80016ce:	4007      	ands	r7, r0
 80016d0:	00bb      	lsls	r3, r7, #2
 80016d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016d4:	1c82      	adds	r2, r0, #2
 80016d6:	2104      	movs	r1, #4
 80016d8:	7c20      	ldrb	r0, [r4, #16]
 80016da:	68a5      	ldr	r5, [r4, #8]
 80016dc:	69ad      	ldr	r5, [r5, #24]
 80016de:	47a8      	blx	r5
 80016e0:	2044      	movs	r0, #68	; 0x44
 80016e2:	e04b      	b.n	800177c <PE_Check_DataMessage+0x128>
 80016e4:	9601      	str	r6, [sp, #4]
 80016e6:	9600      	str	r6, [sp, #0]
 80016e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016ea:	7881      	ldrb	r1, [r0, #2]
 80016ec:	78c2      	ldrb	r2, [r0, #3]
 80016ee:	0212      	lsls	r2, r2, #8
 80016f0:	1889      	adds	r1, r1, r2
 80016f2:	7902      	ldrb	r2, [r0, #4]
 80016f4:	0412      	lsls	r2, r2, #16
 80016f6:	1889      	adds	r1, r1, r2
 80016f8:	7940      	ldrb	r0, [r0, #5]
 80016fa:	0600      	lsls	r0, r0, #24
 80016fc:	180d      	adds	r5, r1, r0
 80016fe:	466b      	mov	r3, sp
 8001700:	aa01      	add	r2, sp, #4
 8001702:	2103      	movs	r1, #3
 8001704:	7c20      	ldrb	r0, [r4, #16]
 8001706:	68a6      	ldr	r6, [r4, #8]
 8001708:	6976      	ldr	r6, [r6, #20]
 800170a:	47b0      	blx	r6
 800170c:	9800      	ldr	r0, [sp, #0]
 800170e:	2804      	cmp	r0, #4
 8001710:	d115      	bne.n	800173e <PE_Check_DataMessage+0xea>
 8001712:	6860      	ldr	r0, [r4, #4]
 8001714:	6800      	ldr	r0, [r0, #0]
 8001716:	0a00      	lsrs	r0, r0, #8
 8001718:	4007      	ands	r7, r0
 800171a:	2f03      	cmp	r7, #3
 800171c:	d10f      	bne.n	800173e <PE_Check_DataMessage+0xea>
 800171e:	9801      	ldr	r0, [sp, #4]
 8001720:	4991      	ldr	r1, [pc, #580]	; (8001968 <.text_10>)
 8001722:	4288      	cmp	r0, r1
 8001724:	d10b      	bne.n	800173e <PE_Check_DataMessage+0xea>
 8001726:	0f28      	lsrs	r0, r5, #28
 8001728:	d003      	beq.n	8001732 <PE_Check_DataMessage+0xde>
 800172a:	2805      	cmp	r0, #5
 800172c:	d003      	beq.n	8001736 <PE_Check_DataMessage+0xe2>
 800172e:	2808      	cmp	r0, #8
 8001730:	d103      	bne.n	800173a <PE_Check_DataMessage+0xe6>
 8001732:	2029      	movs	r0, #41	; 0x29
 8001734:	e022      	b.n	800177c <PE_Check_DataMessage+0x128>
 8001736:	2027      	movs	r0, #39	; 0x27
 8001738:	e020      	b.n	800177c <PE_Check_DataMessage+0x128>
 800173a:	202a      	movs	r0, #42	; 0x2a
 800173c:	e01e      	b.n	800177c <PE_Check_DataMessage+0x128>
 800173e:	2003      	movs	r0, #3
 8001740:	e01c      	b.n	800177c <PE_Check_DataMessage+0x128>
 8001742:	0020      	movs	r0, r4
 8001744:	f003 fd7a 	bl	800523c <PE_Check_DataMessageVDM>
 8001748:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800174a:	6820      	ldr	r0, [r4, #0]
 800174c:	8900      	ldrh	r0, [r0, #8]
 800174e:	0900      	lsrs	r0, r0, #4
 8001750:	4228      	tst	r0, r5
 8001752:	d010      	beq.n	8001776 <PE_Check_DataMessage+0x122>
 8001754:	2304      	movs	r3, #4
 8001756:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001758:	1c82      	adds	r2, r0, #2
 800175a:	210b      	movs	r1, #11
 800175c:	7c20      	ldrb	r0, [r4, #16]
 800175e:	68a5      	ldr	r5, [r4, #8]
 8001760:	69ad      	ldr	r5, [r5, #24]
 8001762:	47a8      	blx	r5
 8001764:	202c      	movs	r0, #44	; 0x2c
 8001766:	e009      	b.n	800177c <PE_Check_DataMessage+0x128>
 8001768:	6820      	ldr	r0, [r4, #0]
 800176a:	8900      	ldrh	r0, [r0, #8]
 800176c:	0a00      	lsrs	r0, r0, #8
 800176e:	4228      	tst	r0, r5
 8001770:	d001      	beq.n	8001776 <PE_Check_DataMessage+0x122>
 8001772:	203d      	movs	r0, #61	; 0x3d
 8001774:	e002      	b.n	800177c <PE_Check_DataMessage+0x128>
 8001776:	7465      	strb	r5, [r4, #17]
 8001778:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800177a:	2011      	movs	r0, #17
 800177c:	7460      	strb	r0, [r4, #17]
 800177e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001780 <PE_Check_ExtendedMessage>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	0004      	movs	r4, r0
 8001784:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001786:	7881      	ldrb	r1, [r0, #2]
 8001788:	78c0      	ldrb	r0, [r0, #3]
 800178a:	0200      	lsls	r0, r0, #8
 800178c:	180a      	adds	r2, r1, r0
 800178e:	48a4      	ldr	r0, [pc, #656]	; (8001a20 <.text_13>)
 8001790:	1821      	adds	r1, r4, r0
 8001792:	800a      	strh	r2, [r1, #0]
 8001794:	2034      	movs	r0, #52	; 0x34
 8001796:	5c20      	ldrb	r0, [r4, r0]
 8001798:	06c0      	lsls	r0, r0, #27
 800179a:	0ec0      	lsrs	r0, r0, #27
 800179c:	7088      	strb	r0, [r1, #2]
 800179e:	2501      	movs	r5, #1
 80017a0:	0410      	lsls	r0, r2, #16
 80017a2:	0e80      	lsrs	r0, r0, #26
 80017a4:	2301      	movs	r3, #1
 80017a6:	4003      	ands	r3, r0
 80017a8:	0410      	lsls	r0, r2, #16
 80017aa:	0ec0      	lsrs	r0, r0, #27
 80017ac:	0700      	lsls	r0, r0, #28
 80017ae:	d003      	beq.n	80017b8 <PE_Check_ExtendedMessage+0x38>
 80017b0:	0018      	movs	r0, r3
 80017b2:	d001      	beq.n	80017b8 <PE_Check_ExtendedMessage+0x38>
 80017b4:	2034      	movs	r0, #52	; 0x34
 80017b6:	e08a      	b.n	80018ce <PE_Check_ExtendedMessage+0x14e>
 80017b8:	489a      	ldr	r0, [pc, #616]	; (8001a24 <.text_14>)
 80017ba:	1820      	adds	r0, r4, r0
 80017bc:	9000      	str	r0, [sp, #0]
 80017be:	05d6      	lsls	r6, r2, #23
 80017c0:	0df6      	lsrs	r6, r6, #23
 80017c2:	2000      	movs	r0, #0
 80017c4:	0417      	lsls	r7, r2, #16
 80017c6:	0fff      	lsrs	r7, r7, #31
 80017c8:	d10c      	bne.n	80017e4 <PE_Check_ExtendedMessage+0x64>
 80017ca:	4a97      	ldr	r2, [pc, #604]	; (8001a28 <.text_15>)
 80017cc:	18a2      	adds	r2, r4, r2
 80017ce:	8016      	strh	r6, [r2, #0]
 80017d0:	8813      	ldrh	r3, [r2, #0]
 80017d2:	4298      	cmp	r0, r3
 80017d4:	d218      	bcs.n	8001808 <PE_Check_ExtendedMessage+0x88>
 80017d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017d8:	1d1b      	adds	r3, r3, #4
 80017da:	5c1b      	ldrb	r3, [r3, r0]
 80017dc:	9e00      	ldr	r6, [sp, #0]
 80017de:	5433      	strb	r3, [r6, r0]
 80017e0:	1c40      	adds	r0, r0, #1
 80017e2:	e7f5      	b.n	80017d0 <PE_Check_ExtendedMessage+0x50>
 80017e4:	27f8      	movs	r7, #248	; 0xf8
 80017e6:	01ff      	lsls	r7, r7, #7
 80017e8:	4017      	ands	r7, r2
 80017ea:	d107      	bne.n	80017fc <PE_Check_ExtendedMessage+0x7c>
 80017ec:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80017ee:	0452      	lsls	r2, r2, #17
 80017f0:	0f52      	lsrs	r2, r2, #29
 80017f2:	2a06      	cmp	r2, #6
 80017f4:	d900      	bls.n	80017f8 <PE_Check_ExtendedMessage+0x78>
 80017f6:	2e1a      	cmp	r6, #26
 80017f8:	d800      	bhi.n	80017fc <PE_Check_ExtendedMessage+0x7c>
 80017fa:	e094      	b.n	8001926 <PE_Check_ExtendedMessage+0x1a6>
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d000      	beq.n	8001802 <PE_Check_ExtendedMessage+0x82>
 8001800:	e091      	b.n	8001926 <PE_Check_ExtendedMessage+0x1a6>
 8001802:	4a89      	ldr	r2, [pc, #548]	; (8001a28 <.text_15>)
 8001804:	5aa2      	ldrh	r2, [r4, r2]
 8001806:	42b2      	cmp	r2, r6
 8001808:	d300      	bcc.n	800180c <PE_Check_ExtendedMessage+0x8c>
 800180a:	e08c      	b.n	8001926 <PE_Check_ExtendedMessage+0x1a6>
 800180c:	83e0      	strh	r0, [r4, #30]
 800180e:	2037      	movs	r0, #55	; 0x37
 8001810:	e05d      	b.n	80018ce <PE_Check_ExtendedMessage+0x14e>
 8001812:	2318      	movs	r3, #24
 8001814:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001816:	1d02      	adds	r2, r0, #4
 8001818:	2113      	movs	r1, #19
 800181a:	7c20      	ldrb	r0, [r4, #16]
 800181c:	68a5      	ldr	r5, [r4, #8]
 800181e:	69ad      	ldr	r5, [r5, #24]
 8001820:	47a8      	blx	r5
 8001822:	7466      	strb	r6, [r4, #17]
 8001824:	2162      	movs	r1, #98	; 0x62
 8001826:	e09b      	b.n	8001960 <.text_9>
 8001828:	2306      	movs	r3, #6
 800182a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800182c:	1d02      	adds	r2, r0, #4
 800182e:	2109      	movs	r1, #9
 8001830:	7c20      	ldrb	r0, [r4, #16]
 8001832:	68a5      	ldr	r5, [r4, #8]
 8001834:	69ad      	ldr	r5, [r5, #24]
 8001836:	47a8      	blx	r5
 8001838:	7466      	strb	r6, [r4, #17]
 800183a:	214e      	movs	r1, #78	; 0x4e
 800183c:	e090      	b.n	8001960 <.text_9>
 800183e:	231a      	movs	r3, #26
 8001840:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001842:	1d02      	adds	r2, r0, #4
 8001844:	210d      	movs	r1, #13
 8001846:	e003      	b.n	8001850 <PE_Check_ExtendedMessage+0xd0>
 8001848:	2309      	movs	r3, #9
 800184a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800184c:	1d02      	adds	r2, r0, #4
 800184e:	2111      	movs	r1, #17
 8001850:	7c20      	ldrb	r0, [r4, #16]
 8001852:	68a5      	ldr	r5, [r4, #8]
 8001854:	69ad      	ldr	r5, [r5, #24]
 8001856:	47a8      	blx	r5
 8001858:	e061      	b.n	800191e <PE_Check_ExtendedMessage+0x19e>
 800185a:	4873      	ldr	r0, [pc, #460]	; (8001a28 <.text_15>)
 800185c:	1820      	adds	r0, r4, r0
 800185e:	1eca      	subs	r2, r1, #3
 8001860:	2a08      	cmp	r2, #8
 8001862:	d85e      	bhi.n	8001922 <PE_Check_ExtendedMessage+0x1a2>
 8001864:	a301      	add	r3, pc, #4	; (adr r3, 800186c <PE_Check_ExtendedMessage+0xec>)
 8001866:	5c9b      	ldrb	r3, [r3, r2]
 8001868:	449f      	add	pc, r3
 800186a:	bf00      	nop
 800186c:	46b6280a 	.word	0x46b6280a
 8001870:	669480b6 	.word	0x669480b6
 8001874:	006e      	.short	0x006e
 8001876:	6820      	ldr	r0, [r4, #0]
 8001878:	8900      	ldrh	r0, [r0, #8]
 800187a:	0b00      	lsrs	r0, r0, #12
 800187c:	4228      	tst	r0, r5
 800187e:	d050      	beq.n	8001922 <PE_Check_ExtendedMessage+0x1a2>
 8001880:	2301      	movs	r3, #1
 8001882:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001884:	1d02      	adds	r2, r0, #4
 8001886:	2110      	movs	r1, #16
 8001888:	7c20      	ldrb	r0, [r4, #16]
 800188a:	68a5      	ldr	r5, [r4, #8]
 800188c:	69ad      	ldr	r5, [r5, #24]
 800188e:	47a8      	blx	r5
 8001890:	203a      	movs	r0, #58	; 0x3a
 8001892:	e01c      	b.n	80018ce <PE_Check_ExtendedMessage+0x14e>
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	8900      	ldrh	r0, [r0, #8]
 8001898:	0b00      	lsrs	r0, r0, #12
 800189a:	4228      	tst	r0, r5
 800189c:	d041      	beq.n	8001922 <PE_Check_ExtendedMessage+0x1a2>
 800189e:	2301      	movs	r3, #1
 80018a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018a2:	1d02      	adds	r2, r0, #4
 80018a4:	210e      	movs	r1, #14
 80018a6:	7c20      	ldrb	r0, [r4, #16]
 80018a8:	68a5      	ldr	r5, [r4, #8]
 80018aa:	69ad      	ldr	r5, [r5, #24]
 80018ac:	47a8      	blx	r5
 80018ae:	203b      	movs	r0, #59	; 0x3b
 80018b0:	e00d      	b.n	80018ce <PE_Check_ExtendedMessage+0x14e>
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	8900      	ldrh	r0, [r0, #8]
 80018b6:	0980      	lsrs	r0, r0, #6
 80018b8:	4228      	tst	r0, r5
 80018ba:	d032      	beq.n	8001922 <PE_Check_ExtendedMessage+0x1a2>
 80018bc:	2302      	movs	r3, #2
 80018be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018c0:	1d02      	adds	r2, r0, #4
 80018c2:	210c      	movs	r1, #12
 80018c4:	7c20      	ldrb	r0, [r4, #16]
 80018c6:	68a5      	ldr	r5, [r4, #8]
 80018c8:	69ad      	ldr	r5, [r5, #24]
 80018ca:	47a8      	blx	r5
 80018cc:	203c      	movs	r0, #60	; 0x3c
 80018ce:	7460      	strb	r0, [r4, #17]
 80018d0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	8912      	ldrh	r2, [r2, #8]
 80018d6:	0a92      	lsrs	r2, r2, #10
 80018d8:	e00b      	b.n	80018f2 <PE_Check_ExtendedMessage+0x172>
 80018da:	68a2      	ldr	r2, [r4, #8]
 80018dc:	6915      	ldr	r5, [r2, #16]
 80018de:	2d00      	cmp	r5, #0
 80018e0:	d020      	beq.n	8001924 <PE_Check_ExtendedMessage+0x1a4>
 80018e2:	8803      	ldrh	r3, [r0, #0]
 80018e4:	9a00      	ldr	r2, [sp, #0]
 80018e6:	7c20      	ldrb	r0, [r4, #16]
 80018e8:	47a8      	blx	r5
 80018ea:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80018ec:	6822      	ldr	r2, [r4, #0]
 80018ee:	8912      	ldrh	r2, [r2, #8]
 80018f0:	0a52      	lsrs	r2, r2, #9
 80018f2:	422a      	tst	r2, r5
 80018f4:	d015      	beq.n	8001922 <PE_Check_ExtendedMessage+0x1a2>
 80018f6:	68a2      	ldr	r2, [r4, #8]
 80018f8:	6912      	ldr	r2, [r2, #16]
 80018fa:	2a00      	cmp	r2, #0
 80018fc:	d109      	bne.n	8001912 <PE_Check_ExtendedMessage+0x192>
 80018fe:	e010      	b.n	8001922 <PE_Check_ExtendedMessage+0x1a2>
 8001900:	6822      	ldr	r2, [r4, #0]
 8001902:	8912      	ldrh	r2, [r2, #8]
 8001904:	0a52      	lsrs	r2, r2, #9
 8001906:	422a      	tst	r2, r5
 8001908:	d00c      	beq.n	8001924 <PE_Check_ExtendedMessage+0x1a4>
 800190a:	68a2      	ldr	r2, [r4, #8]
 800190c:	6912      	ldr	r2, [r2, #16]
 800190e:	2a00      	cmp	r2, #0
 8001910:	d008      	beq.n	8001924 <PE_Check_ExtendedMessage+0x1a4>
 8001912:	8803      	ldrh	r3, [r0, #0]
 8001914:	9a00      	ldr	r2, [sp, #0]
 8001916:	7c20      	ldrb	r0, [r4, #16]
 8001918:	68a5      	ldr	r5, [r4, #8]
 800191a:	692d      	ldr	r5, [r5, #16]
 800191c:	47a8      	blx	r5
 800191e:	7466      	strb	r6, [r4, #17]
 8001920:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001922:	7465      	strb	r5, [r4, #17]
 8001924:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001926:	7889      	ldrb	r1, [r1, #2]
 8001928:	2603      	movs	r6, #3
 800192a:	7f20      	ldrb	r0, [r4, #28]
 800192c:	2800      	cmp	r0, #0
 800192e:	d094      	beq.n	800185a <PE_Check_ExtendedMessage+0xda>
 8001930:	2901      	cmp	r1, #1
 8001932:	d00b      	beq.n	800194c <PE_Check_ExtendedMessage+0x1cc>
 8001934:	2902      	cmp	r1, #2
 8001936:	d100      	bne.n	800193a <PE_Check_ExtendedMessage+0x1ba>
 8001938:	e776      	b.n	8001828 <PE_Check_ExtendedMessage+0xa8>
 800193a:	2905      	cmp	r1, #5
 800193c:	d084      	beq.n	8001848 <PE_Check_ExtendedMessage+0xc8>
 800193e:	2907      	cmp	r1, #7
 8001940:	d100      	bne.n	8001944 <PE_Check_ExtendedMessage+0x1c4>
 8001942:	e77c      	b.n	800183e <PE_Check_ExtendedMessage+0xbe>
 8001944:	290f      	cmp	r1, #15
 8001946:	d100      	bne.n	800194a <PE_Check_ExtendedMessage+0x1ca>
 8001948:	e763      	b.n	8001812 <PE_Check_ExtendedMessage+0x92>
 800194a:	e7ea      	b.n	8001922 <PE_Check_ExtendedMessage+0x1a2>
 800194c:	2318      	movs	r3, #24
 800194e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001950:	1d02      	adds	r2, r0, #4
 8001952:	2108      	movs	r1, #8
 8001954:	7c20      	ldrb	r0, [r4, #16]
 8001956:	68a7      	ldr	r7, [r4, #8]
 8001958:	69bf      	ldr	r7, [r7, #24]
 800195a:	47b8      	blx	r7
 800195c:	7466      	strb	r6, [r4, #17]
 800195e:	2147      	movs	r1, #71	; 0x47

08001960 <.text_9>:
 8001960:	0020      	movs	r0, r4
 8001962:	f7ff fc91 	bl	8001288 <PE_Notification>
 8001966:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001968 <.text_10>:
 8001968:	00001388 	.word	0x00001388

0800196c <PE_Send_ExtendedMessage>:
 800196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001972:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001974:	0004      	movs	r4, r0
 8001976:	000d      	movs	r5, r1
 8001978:	4668      	mov	r0, sp
 800197a:	7202      	strb	r2, [r0, #8]
 800197c:	9303      	str	r3, [sp, #12]
 800197e:	6860      	ldr	r0, [r4, #4]
 8001980:	6800      	ldr	r0, [r0, #0]
 8001982:	04c1      	lsls	r1, r0, #19
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	d016      	beq.n	80019b6 <PE_Send_ExtendedMessage+0x4a>
 8001988:	9601      	str	r6, [sp, #4]
 800198a:	9700      	str	r7, [sp, #0]
 800198c:	9b03      	ldr	r3, [sp, #12]
 800198e:	4668      	mov	r0, sp
 8001990:	7a00      	ldrb	r0, [r0, #8]
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	4302      	orrs	r2, r0
 8001996:	0029      	movs	r1, r5
 8001998:	7c20      	ldrb	r0, [r4, #16]
 800199a:	f003 feaf 	bl	80056fc <USBPD_PRL_SendMessage>
 800199e:	2803      	cmp	r0, #3
 80019a0:	d0ed      	beq.n	800197e <PE_Send_ExtendedMessage+0x12>
 80019a2:	0029      	movs	r1, r5
 80019a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80019a6:	9200      	str	r2, [sp, #0]
 80019a8:	0003      	movs	r3, r0
 80019aa:	2200      	movs	r2, #0
 80019ac:	0020      	movs	r0, r4
 80019ae:	f000 f806 	bl	80019be <PE_CheckSendMessageStatus>
 80019b2:	b005      	add	sp, #20
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b6:	2011      	movs	r0, #17
 80019b8:	7460      	strb	r0, [r4, #17]
 80019ba:	2010      	movs	r0, #16
 80019bc:	e7f9      	b.n	80019b2 <PE_Send_ExtendedMessage+0x46>

080019be <PE_CheckSendMessageStatus>:
 80019be:	b510      	push	{r4, lr}
 80019c0:	000c      	movs	r4, r1
 80019c2:	2110      	movs	r1, #16
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d006      	beq.n	80019d6 <PE_CheckSendMessageStatus+0x18>
 80019c8:	2b06      	cmp	r3, #6
 80019ca:	d00e      	beq.n	80019ea <PE_CheckSendMessageStatus+0x2c>
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d011      	beq.n	80019f4 <PE_CheckSendMessageStatus+0x36>
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d008      	beq.n	80019e6 <PE_CheckSendMessageStatus+0x28>
 80019d4:	e022      	b.n	8001a1c <PE_CheckSendMessageStatus+0x5e>
 80019d6:	9902      	ldr	r1, [sp, #8]
 80019d8:	7441      	strb	r1, [r0, #17]
 80019da:	6941      	ldr	r1, [r0, #20]
 80019dc:	4a9f      	ldr	r2, [pc, #636]	; (8001c5c <.text_17>)
 80019de:	400a      	ands	r2, r1
 80019e0:	6142      	str	r2, [r0, #20]
 80019e2:	2100      	movs	r1, #0
 80019e4:	e01a      	b.n	8001a1c <PE_CheckSendMessageStatus+0x5e>
 80019e6:	2109      	movs	r1, #9
 80019e8:	e018      	b.n	8001a1c <PE_CheckSendMessageStatus+0x5e>
 80019ea:	6942      	ldr	r2, [r0, #20]
 80019ec:	020b      	lsls	r3, r1, #8
 80019ee:	4313      	orrs	r3, r2
 80019f0:	6143      	str	r3, [r0, #20]
 80019f2:	e013      	b.n	8001a1c <PE_CheckSendMessageStatus+0x5e>
 80019f4:	2c00      	cmp	r4, #0
 80019f6:	d005      	beq.n	8001a04 <PE_CheckSendMessageStatus+0x46>
 80019f8:	2a01      	cmp	r2, #1
 80019fa:	d101      	bne.n	8001a00 <PE_CheckSendMessageStatus+0x42>
 80019fc:	2299      	movs	r2, #153	; 0x99
 80019fe:	e00c      	b.n	8001a1a <PE_CheckSendMessageStatus+0x5c>
 8001a00:	2107      	movs	r1, #7
 8001a02:	e00b      	b.n	8001a1c <PE_CheckSendMessageStatus+0x5e>
 8001a04:	6844      	ldr	r4, [r0, #4]
 8001a06:	6824      	ldr	r4, [r4, #0]
 8001a08:	0a24      	lsrs	r4, r4, #8
 8001a0a:	4023      	ands	r3, r4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d001      	beq.n	8001a14 <PE_CheckSendMessageStatus+0x56>
 8001a10:	2a01      	cmp	r2, #1
 8001a12:	d101      	bne.n	8001a18 <PE_CheckSendMessageStatus+0x5a>
 8001a14:	220f      	movs	r2, #15
 8001a16:	e000      	b.n	8001a1a <PE_CheckSendMessageStatus+0x5c>
 8001a18:	2211      	movs	r2, #17
 8001a1a:	7442      	strb	r2, [r0, #17]
 8001a1c:	0008      	movs	r0, r1
 8001a1e:	bd10      	pop	{r4, pc}

08001a20 <.text_13>:
 8001a20:	0000025a 	.word	0x0000025a

08001a24 <.text_14>:
 8001a24:	00000281 	.word	0x00000281

08001a28 <.text_15>:
 8001a28:	0000048e 	.word	0x0000048e

08001a2c <PE_SubStateMachine_ExtendedMessages>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	0004      	movs	r4, r0
 8001a32:	2702      	movs	r7, #2
 8001a34:	488a      	ldr	r0, [pc, #552]	; (8001c60 <.text_18>)
 8001a36:	1820      	adds	r0, r4, r0
 8001a38:	9000      	str	r0, [sp, #0]
 8001a3a:	2039      	movs	r0, #57	; 0x39
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	466a      	mov	r2, sp
 8001a40:	7211      	strb	r1, [r2, #8]
 8001a42:	4a88      	ldr	r2, [pc, #544]	; (8001c64 <.text_19>)
 8001a44:	2500      	movs	r5, #0
 8001a46:	2603      	movs	r6, #3
 8001a48:	7c63      	ldrb	r3, [r4, #17]
 8001a4a:	2b31      	cmp	r3, #49	; 0x31
 8001a4c:	d010      	beq.n	8001a70 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001a4e:	2b33      	cmp	r3, #51	; 0x33
 8001a50:	d075      	beq.n	8001b3e <PE_SubStateMachine_ExtendedMessages+0x112>
 8001a52:	2b34      	cmp	r3, #52	; 0x34
 8001a54:	d07c      	beq.n	8001b50 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001a56:	2b35      	cmp	r3, #53	; 0x35
 8001a58:	d100      	bne.n	8001a5c <PE_SubStateMachine_ExtendedMessages+0x30>
 8001a5a:	e0a8      	b.n	8001bae <PE_SubStateMachine_ExtendedMessages+0x182>
 8001a5c:	2b36      	cmp	r3, #54	; 0x36
 8001a5e:	d100      	bne.n	8001a62 <PE_SubStateMachine_ExtendedMessages+0x36>
 8001a60:	e0be      	b.n	8001be0 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 8001a62:	2b37      	cmp	r3, #55	; 0x37
 8001a64:	d100      	bne.n	8001a68 <PE_SubStateMachine_ExtendedMessages+0x3c>
 8001a66:	e0be      	b.n	8001be6 <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001a68:	2b38      	cmp	r3, #56	; 0x38
 8001a6a:	d100      	bne.n	8001a6e <PE_SubStateMachine_ExtendedMessages+0x42>
 8001a6c:	e0ef      	b.n	8001c4e <PE_SubStateMachine_ExtendedMessages+0x222>
 8001a6e:	e0f2      	b.n	8001c56 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a70:	487d      	ldr	r0, [pc, #500]	; (8001c68 <.text_20>)
 8001a72:	1820      	adds	r0, r4, r0
 8001a74:	9004      	str	r0, [sp, #16]
 8001a76:	4669      	mov	r1, sp
 8001a78:	730d      	strb	r5, [r1, #12]
 8001a7a:	497c      	ldr	r1, [pc, #496]	; (8001c6c <.text_21>)
 8001a7c:	5265      	strh	r5, [r4, r1]
 8001a7e:	7c20      	ldrb	r0, [r4, #16]
 8001a80:	f7ff f938 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 8001a84:	2801      	cmp	r0, #1
 8001a86:	d107      	bne.n	8001a98 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001a88:	4879      	ldr	r0, [pc, #484]	; (8001c70 <.text_22>)
 8001a8a:	1820      	adds	r0, r4, r0
 8001a8c:	7005      	strb	r5, [r0, #0]
 8001a8e:	7045      	strb	r5, [r0, #1]
 8001a90:	4878      	ldr	r0, [pc, #480]	; (8001c74 <.text_23>)
 8001a92:	1820      	adds	r0, r4, r0
 8001a94:	9004      	str	r0, [sp, #16]
 8001a96:	e028      	b.n	8001aea <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001a98:	4977      	ldr	r1, [pc, #476]	; (8001c78 <.text_24>)
 8001a9a:	1861      	adds	r1, r4, r1
 8001a9c:	72cd      	strb	r5, [r1, #11]
 8001a9e:	4976      	ldr	r1, [pc, #472]	; (8001c78 <.text_24>)
 8001aa0:	1861      	adds	r1, r4, r1
 8001aa2:	730d      	strb	r5, [r1, #12]
 8001aa4:	7c20      	ldrb	r0, [r4, #16]
 8001aa6:	f7ff f925 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d106      	bne.n	8001abc <PE_SubStateMachine_ExtendedMessages+0x90>
 8001aae:	4872      	ldr	r0, [pc, #456]	; (8001c78 <.text_24>)
 8001ab0:	1820      	adds	r0, r4, r0
 8001ab2:	7b01      	ldrb	r1, [r0, #12]
 8001ab4:	466a      	mov	r2, sp
 8001ab6:	7a12      	ldrb	r2, [r2, #8]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	7302      	strb	r2, [r0, #12]
 8001abc:	4868      	ldr	r0, [pc, #416]	; (8001c60 <.text_18>)
 8001abe:	1820      	adds	r0, r4, r0
 8001ac0:	496a      	ldr	r1, [pc, #424]	; (8001c6c <.text_21>)
 8001ac2:	1861      	adds	r1, r4, r1
 8001ac4:	884a      	ldrh	r2, [r1, #2]
 8001ac6:	2a1b      	cmp	r2, #27
 8001ac8:	d30c      	bcc.n	8001ae4 <PE_SubStateMachine_ExtendedMessages+0xb8>
 8001aca:	496a      	ldr	r1, [pc, #424]	; (8001c74 <.text_23>)
 8001acc:	1861      	adds	r1, r4, r1
 8001ace:	5d49      	ldrb	r1, [r1, r5]
 8001ad0:	5541      	strb	r1, [r0, r5]
 8001ad2:	1c6d      	adds	r5, r5, #1
 8001ad4:	2d1a      	cmp	r5, #26
 8001ad6:	d208      	bcs.n	8001aea <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001ad8:	e7f7      	b.n	8001aca <PE_SubStateMachine_ExtendedMessages+0x9e>
 8001ada:	4a66      	ldr	r2, [pc, #408]	; (8001c74 <.text_23>)
 8001adc:	18a2      	adds	r2, r4, r2
 8001ade:	5d52      	ldrb	r2, [r2, r5]
 8001ae0:	5542      	strb	r2, [r0, r5]
 8001ae2:	1c6d      	adds	r5, r5, #1
 8001ae4:	884a      	ldrh	r2, [r1, #2]
 8001ae6:	4295      	cmp	r5, r2
 8001ae8:	d3f7      	bcc.n	8001ada <PE_SubStateMachine_ExtendedMessages+0xae>
 8001aea:	2001      	movs	r0, #1
 8001aec:	6961      	ldr	r1, [r4, #20]
 8001aee:	0909      	lsrs	r1, r1, #4
 8001af0:	4001      	ands	r1, r0
 8001af2:	d00a      	beq.n	8001b0a <PE_SubStateMachine_ExtendedMessages+0xde>
 8001af4:	6861      	ldr	r1, [r4, #4]
 8001af6:	6809      	ldr	r1, [r1, #0]
 8001af8:	0889      	lsrs	r1, r1, #2
 8001afa:	4001      	ands	r1, r0
 8001afc:	d002      	beq.n	8001b04 <PE_SubStateMachine_ExtendedMessages+0xd8>
 8001afe:	4669      	mov	r1, sp
 8001b00:	7308      	strb	r0, [r1, #12]
 8001b02:	e001      	b.n	8001b08 <PE_SubStateMachine_ExtendedMessages+0xdc>
 8001b04:	4669      	mov	r1, sp
 8001b06:	730f      	strb	r7, [r1, #12]
 8001b08:	2633      	movs	r6, #51	; 0x33
 8001b0a:	4668      	mov	r0, sp
 8001b0c:	7b00      	ldrb	r0, [r0, #12]
 8001b0e:	9002      	str	r0, [sp, #8]
 8001b10:	9601      	str	r6, [sp, #4]
 8001b12:	4856      	ldr	r0, [pc, #344]	; (8001c6c <.text_21>)
 8001b14:	1820      	adds	r0, r4, r0
 8001b16:	8840      	ldrh	r0, [r0, #2]
 8001b18:	1d00      	adds	r0, r0, #4
 8001b1a:	b280      	uxth	r0, r0
 8001b1c:	9000      	str	r0, [sp, #0]
 8001b1e:	9b04      	ldr	r3, [sp, #16]
 8001b20:	4855      	ldr	r0, [pc, #340]	; (8001c78 <.text_24>)
 8001b22:	1820      	adds	r0, r4, r0
 8001b24:	78c2      	ldrb	r2, [r0, #3]
 8001b26:	2033      	movs	r0, #51	; 0x33
 8001b28:	5c21      	ldrb	r1, [r4, r0]
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	f7ff ff1e 	bl	800196c <PE_Send_ExtendedMessage>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d103      	bne.n	8001b3c <PE_SubStateMachine_ExtendedMessages+0x110>
 8001b34:	4850      	ldr	r0, [pc, #320]	; (8001c78 <.text_24>)
 8001b36:	1820      	adds	r0, r4, r0
 8001b38:	7940      	ldrb	r0, [r0, #5]
 8001b3a:	7720      	strb	r0, [r4, #28]
 8001b3c:	e08b      	b.n	8001c56 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001b3e:	83e2      	strh	r2, [r4, #30]
 8001b40:	271b      	movs	r7, #27
 8001b42:	494d      	ldr	r1, [pc, #308]	; (8001c78 <.text_24>)
 8001b44:	1861      	adds	r1, r4, r1
 8001b46:	78c9      	ldrb	r1, [r1, #3]
 8001b48:	2904      	cmp	r1, #4
 8001b4a:	d151      	bne.n	8001bf0 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001b4c:	2074      	movs	r0, #116	; 0x74
 8001b4e:	e04f      	b.n	8001bf0 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001b50:	4849      	ldr	r0, [pc, #292]	; (8001c78 <.text_24>)
 8001b52:	5a20      	ldrh	r0, [r4, r0]
 8001b54:	0440      	lsls	r0, r0, #17
 8001b56:	0f02      	lsrs	r2, r0, #28
 8001b58:	211a      	movs	r1, #26
 8001b5a:	4351      	muls	r1, r2
 8001b5c:	4843      	ldr	r0, [pc, #268]	; (8001c6c <.text_21>)
 8001b5e:	1820      	adds	r0, r4, r0
 8001b60:	8843      	ldrh	r3, [r0, #2]
 8001b62:	4299      	cmp	r1, r3
 8001b64:	da01      	bge.n	8001b6a <PE_SubStateMachine_ExtendedMessages+0x13e>
 8001b66:	2a0a      	cmp	r2, #10
 8001b68:	d301      	bcc.n	8001b6e <PE_SubStateMachine_ExtendedMessages+0x142>
 8001b6a:	7466      	strb	r6, [r4, #17]
 8001b6c:	e01d      	b.n	8001baa <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001b6e:	1a5a      	subs	r2, r3, r1
 8001b70:	2a1a      	cmp	r2, #26
 8001b72:	d202      	bcs.n	8001b7a <PE_SubStateMachine_ExtendedMessages+0x14e>
 8001b74:	1a5b      	subs	r3, r3, r1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	e000      	b.n	8001b7c <PE_SubStateMachine_ExtendedMessages+0x150>
 8001b7a:	231a      	movs	r3, #26
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	e006      	b.n	8001b8e <PE_SubStateMachine_ExtendedMessages+0x162>
 8001b80:	4e3c      	ldr	r6, [pc, #240]	; (8001c74 <.text_23>)
 8001b82:	19a6      	adds	r6, r4, r6
 8001b84:	188f      	adds	r7, r1, r2
 8001b86:	5df6      	ldrb	r6, [r6, r7]
 8001b88:	9f00      	ldr	r7, [sp, #0]
 8001b8a:	54be      	strb	r6, [r7, r2]
 8001b8c:	1c52      	adds	r2, r2, #1
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3f6      	bcc.n	8001b80 <PE_SubStateMachine_ExtendedMessages+0x154>
 8001b92:	4935      	ldr	r1, [pc, #212]	; (8001c68 <.text_20>)
 8001b94:	1863      	adds	r3, r4, r1
 8001b96:	8842      	ldrh	r2, [r0, #2]
 8001b98:	4837      	ldr	r0, [pc, #220]	; (8001c78 <.text_24>)
 8001b9a:	5a20      	ldrh	r0, [r4, r0]
 8001b9c:	0440      	lsls	r0, r0, #17
 8001b9e:	0f01      	lsrs	r1, r0, #28
 8001ba0:	7c20      	ldrb	r0, [r4, #16]
 8001ba2:	f004 fa63 	bl	800606c <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001ba6:	2035      	movs	r0, #53	; 0x35
 8001ba8:	7460      	strb	r0, [r4, #17]
 8001baa:	2700      	movs	r7, #0
 8001bac:	e053      	b.n	8001c56 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001bae:	6960      	ldr	r0, [r4, #20]
 8001bb0:	06c1      	lsls	r1, r0, #27
 8001bb2:	0fc9      	lsrs	r1, r1, #31
 8001bb4:	d001      	beq.n	8001bba <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001bb6:	2036      	movs	r0, #54	; 0x36
 8001bb8:	e000      	b.n	8001bbc <PE_SubStateMachine_ExtendedMessages+0x190>
 8001bba:	2003      	movs	r0, #3
 8001bbc:	492b      	ldr	r1, [pc, #172]	; (8001c6c <.text_21>)
 8001bbe:	1866      	adds	r6, r4, r1
 8001bc0:	9502      	str	r5, [sp, #8]
 8001bc2:	9001      	str	r0, [sp, #4]
 8001bc4:	8870      	ldrh	r0, [r6, #2]
 8001bc6:	9000      	str	r0, [sp, #0]
 8001bc8:	4827      	ldr	r0, [pc, #156]	; (8001c68 <.text_20>)
 8001bca:	1823      	adds	r3, r4, r0
 8001bcc:	3809      	subs	r0, #9
 8001bce:	1820      	adds	r0, r4, r0
 8001bd0:	78c2      	ldrb	r2, [r0, #3]
 8001bd2:	2030      	movs	r0, #48	; 0x30
 8001bd4:	5c21      	ldrb	r1, [r4, r0]
 8001bd6:	0020      	movs	r0, r4
 8001bd8:	f7ff fec8 	bl	800196c <PE_Send_ExtendedMessage>
 8001bdc:	8035      	strh	r5, [r6, #0]
 8001bde:	e03a      	b.n	8001c56 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001be0:	83e2      	strh	r2, [r4, #30]
 8001be2:	271b      	movs	r7, #27
 8001be4:	e004      	b.n	8001bf0 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001be6:	8be0      	ldrh	r0, [r4, #30]
 8001be8:	020b      	lsls	r3, r1, #8
 8001bea:	4298      	cmp	r0, r3
 8001bec:	d102      	bne.n	8001bf4 <PE_SubStateMachine_ExtendedMessages+0x1c8>
 8001bee:	200f      	movs	r0, #15
 8001bf0:	7460      	strb	r0, [r4, #17]
 8001bf2:	e030      	b.n	8001c56 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001bf4:	83e2      	strh	r2, [r4, #30]
 8001bf6:	271b      	movs	r7, #27
 8001bf8:	481b      	ldr	r0, [pc, #108]	; (8001c68 <.text_20>)
 8001bfa:	1825      	adds	r5, r4, r0
 8001bfc:	0029      	movs	r1, r5
 8001bfe:	7c20      	ldrb	r0, [r4, #16]
 8001c00:	f004 fa5c 	bl	80060bc <USBPD_PRL_PrepareChunkRequest>
 8001c04:	6860      	ldr	r0, [r4, #4]
 8001c06:	6800      	ldr	r0, [r0, #0]
 8001c08:	04c1      	lsls	r1, r0, #19
 8001c0a:	0fc9      	lsrs	r1, r1, #31
 8001c0c:	d01b      	beq.n	8001c46 <PE_SubStateMachine_ExtendedMessages+0x21a>
 8001c0e:	2000      	movs	r0, #0
 8001c10:	9001      	str	r0, [sp, #4]
 8001c12:	2006      	movs	r0, #6
 8001c14:	9000      	str	r0, [sp, #0]
 8001c16:	002b      	movs	r3, r5
 8001c18:	4817      	ldr	r0, [pc, #92]	; (8001c78 <.text_24>)
 8001c1a:	1820      	adds	r0, r4, r0
 8001c1c:	7880      	ldrb	r0, [r0, #2]
 8001c1e:	4669      	mov	r1, sp
 8001c20:	7a0a      	ldrb	r2, [r1, #8]
 8001c22:	4302      	orrs	r2, r0
 8001c24:	2030      	movs	r0, #48	; 0x30
 8001c26:	5c21      	ldrb	r1, [r4, r0]
 8001c28:	7c20      	ldrb	r0, [r4, #16]
 8001c2a:	f003 fd67 	bl	80056fc <USBPD_PRL_SendMessage>
 8001c2e:	2803      	cmp	r0, #3
 8001c30:	d0e8      	beq.n	8001c04 <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001c32:	2139      	movs	r1, #57	; 0x39
 8001c34:	9100      	str	r1, [sp, #0]
 8001c36:	0003      	movs	r3, r0
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2030      	movs	r0, #48	; 0x30
 8001c3c:	5c21      	ldrb	r1, [r4, r0]
 8001c3e:	0020      	movs	r0, r4
 8001c40:	f7ff febd 	bl	80019be <PE_CheckSendMessageStatus>
 8001c44:	e007      	b.n	8001c56 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c46:	2011      	movs	r0, #17
 8001c48:	7460      	strb	r0, [r4, #17]
 8001c4a:	201b      	movs	r0, #27
 8001c4c:	e004      	b.n	8001c58 <PE_SubStateMachine_ExtendedMessages+0x22c>
 8001c4e:	7466      	strb	r6, [r4, #17]
 8001c50:	2700      	movs	r7, #0
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <.text_21>)
 8001c54:	5225      	strh	r5, [r4, r0]
 8001c56:	0038      	movs	r0, r7
 8001c58:	b005      	add	sp, #20
 8001c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c5c <.text_17>:
 8001c5c:	ffffdfff 	.word	0xffffdfff

08001c60 <.text_18>:
 8001c60:	00000267 	.word	0x00000267

08001c64 <.text_19>:
 8001c64:	0000801b 	.word	0x0000801b

08001c68 <.text_20>:
 8001c68:	00000263 	.word	0x00000263

08001c6c <.text_21>:
 8001c6c:	0000048e 	.word	0x0000048e

08001c70 <.text_22>:
 8001c70:	00000387 	.word	0x00000387

08001c74 <.text_23>:
 8001c74:	00000385 	.word	0x00000385

08001c78 <.text_24>:
 8001c78:	0000025a 	.word	0x0000025a

08001c7c <PE_ManageRXEvent>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	2130      	movs	r1, #48	; 0x30
 8001c80:	5c41      	ldrb	r1, [r0, r1]
 8001c82:	2231      	movs	r2, #49	; 0x31
 8001c84:	5481      	strb	r1, [r0, r2]
 8001c86:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8001c88:	0bca      	lsrs	r2, r1, #15
 8001c8a:	d002      	beq.n	8001c92 <PE_ManageRXEvent+0x16>
 8001c8c:	f7ff fd78 	bl	8001780 <PE_Check_ExtendedMessage>
 8001c90:	bd01      	pop	{r0, pc}
 8001c92:	22f0      	movs	r2, #240	; 0xf0
 8001c94:	0212      	lsls	r2, r2, #8
 8001c96:	400a      	ands	r2, r1
 8001c98:	d102      	bne.n	8001ca0 <PE_ManageRXEvent+0x24>
 8001c9a:	f7ff fbfd 	bl	8001498 <PE_Check_ControlMessage>
 8001c9e:	bd01      	pop	{r0, pc}
 8001ca0:	f7ff fcd8 	bl	8001654 <PE_Check_DataMessage>
 8001ca4:	bd01      	pop	{r0, pc}
	...

08001ca8 <USBPD_PE_StateMachine_SNK>:
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001caa:	b08e      	sub	sp, #56	; 0x38
 8001cac:	0004      	movs	r4, r0
 8001cae:	48ad      	ldr	r0, [pc, #692]	; (8001f64 <__iar_annotation$$branch+0x1b4>)
 8001cb0:	00a1      	lsls	r1, r4, #2
 8001cb2:	5845      	ldr	r5, [r0, r1]
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	9004      	str	r0, [sp, #16]
 8001cb8:	8be8      	ldrh	r0, [r5, #30]
 8001cba:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8001cbc:	050a      	lsls	r2, r1, #20
 8001cbe:	0f52      	lsrs	r2, r2, #29
 8001cc0:	1880      	adds	r0, r0, r2
 8001cc2:	06c9      	lsls	r1, r1, #27
 8001cc4:	0ec9      	lsrs	r1, r1, #27
 8001cc6:	1846      	adds	r6, r0, r1
 8001cc8:	b2b6      	uxth	r6, r6
 8001cca:	7c68      	ldrb	r0, [r5, #17]
 8001ccc:	2848      	cmp	r0, #72	; 0x48
 8001cce:	d133      	bne.n	8001d38 <USBPD_PE_StateMachine_SNK+0x90>
 8001cd0:	0028      	movs	r0, r5
 8001cd2:	f7fe ff0b 	bl	8000aec <PE_Reset_ZI>
 8001cd6:	0028      	movs	r0, r5
 8001cd8:	f7fe ff3e 	bl	8000b58 <PE_Reset_Counter>
 8001cdc:	6828      	ldr	r0, [r5, #0]
 8001cde:	7900      	ldrb	r0, [r0, #4]
 8001ce0:	0783      	lsls	r3, r0, #30
 8001ce2:	0f9b      	lsrs	r3, r3, #30
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	7c28      	ldrb	r0, [r5, #16]
 8001cea:	f003 fc92 	bl	8005612 <USBPD_PRL_SetHeader>
 8001cee:	6868      	ldr	r0, [r5, #4]
 8001cf0:	6801      	ldr	r1, [r0, #0]
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	4391      	bics	r1, r2
 8001cf6:	6001      	str	r1, [r0, #0]
 8001cf8:	6868      	ldr	r0, [r5, #4]
 8001cfa:	6801      	ldr	r1, [r0, #0]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4391      	bics	r1, r2
 8001d00:	682a      	ldr	r2, [r5, #0]
 8001d02:	7912      	ldrb	r2, [r2, #4]
 8001d04:	0792      	lsls	r2, r2, #30
 8001d06:	0f92      	lsrs	r2, r2, #30
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	6002      	str	r2, [r0, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	7c28      	ldrb	r0, [r5, #16]
 8001d10:	f003 fcf0 	bl	80056f4 <USBPD_PRL_SOPCapability>
 8001d14:	7c28      	ldrb	r0, [r5, #16]
 8001d16:	f003 fe97 	bl	8005a48 <USBPD_PRL_Reset>
 8001d1a:	203e      	movs	r0, #62	; 0x3e
 8001d1c:	7468      	strb	r0, [r5, #17]
 8001d1e:	7ca9      	ldrb	r1, [r5, #18]
 8001d20:	293e      	cmp	r1, #62	; 0x3e
 8001d22:	d009      	beq.n	8001d38 <USBPD_PE_StateMachine_SNK+0x90>
 8001d24:	74a8      	strb	r0, [r5, #18]
 8001d26:	2000      	movs	r0, #0
 8001d28:	9000      	str	r0, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	223e      	movs	r2, #62	; 0x3e
 8001d2e:	7c29      	ldrb	r1, [r5, #16]
 8001d30:	2004      	movs	r0, #4
 8001d32:	4fbe      	ldr	r7, [pc, #760]	; (800202c <__iar_annotation$$branch+0x27c>)
 8001d34:	683f      	ldr	r7, [r7, #0]
 8001d36:	47b8      	blx	r7
 8001d38:	6968      	ldr	r0, [r5, #20]
 8001d3a:	0381      	lsls	r1, r0, #14
 8001d3c:	0fc9      	lsrs	r1, r1, #31
 8001d3e:	d006      	beq.n	8001d4e <USBPD_PE_StateMachine_SNK+0xa6>
 8001d40:	49bb      	ldr	r1, [pc, #748]	; (8002030 <__iar_annotation$$branch+0x280>)
 8001d42:	4001      	ands	r1, r0
 8001d44:	6169      	str	r1, [r5, #20]
 8001d46:	2164      	movs	r1, #100	; 0x64
 8001d48:	0028      	movs	r0, r5
 8001d4a:	f7ff fa9d 	bl	8001288 <PE_Notification>
 8001d4e:	0028      	movs	r0, r5
 8001d50:	f7fe fdb6 	bl	80008c0 <PE_Get_RxEvent>
 8001d54:	4669      	mov	r1, sp
 8001d56:	7308      	strb	r0, [r1, #12]
 8001d58:	4668      	mov	r0, sp
 8001d5a:	7b00      	ldrb	r0, [r0, #12]
 8001d5c:	2803      	cmp	r0, #3
 8001d5e:	d001      	beq.n	8001d64 <__iar_annotation$$branch+0x4>

08001d60 <__iar_annotation$$branch>:
 8001d60:	f000 fc7a 	bl	8002658 <__iar_annotation$$branch+0x8a8>
 8001d64:	2001      	movs	r0, #1
 8001d66:	e000      	b.n	8001d6a <__iar_annotation$$branch>
 8001d68:	2000      	movs	r0, #0

08001d6a <__iar_annotation$$branch>:
 8001d6a:	f000 fdb1 	bl	80028d0 <__iar_annotation$$branch+0xbe>
 8001d6e:	74a9      	strb	r1, [r5, #18]
 8001d70:	2000      	movs	r0, #0
 8001d72:	9000      	str	r0, [sp, #0]
 8001d74:	2300      	movs	r3, #0
 8001d76:	22a7      	movs	r2, #167	; 0xa7
 8001d78:	7c29      	ldrb	r1, [r5, #16]
 8001d7a:	2004      	movs	r0, #4
 8001d7c:	4cab      	ldr	r4, [pc, #684]	; (800202c <__iar_annotation$$branch+0x27c>)
 8001d7e:	6824      	ldr	r4, [r4, #0]
 8001d80:	47a0      	blx	r4
 8001d82:	2402      	movs	r4, #2
 8001d84:	2032      	movs	r0, #50	; 0x32
 8001d86:	5c2a      	ldrb	r2, [r5, r0]
 8001d88:	2a0f      	cmp	r2, #15
 8001d8a:	d001      	beq.n	8001d90 <__iar_annotation$$branch+0x26>
 8001d8c:	2a14      	cmp	r2, #20
 8001d8e:	d10f      	bne.n	8001db0 <__iar_annotation$$branch>
 8001d90:	746a      	strb	r2, [r5, #17]
 8001d92:	2000      	movs	r0, #0
 8001d94:	2132      	movs	r1, #50	; 0x32
 8001d96:	5468      	strb	r0, [r5, r1]
 8001d98:	7ca8      	ldrb	r0, [r5, #18]
 8001d9a:	4290      	cmp	r0, r2
 8001d9c:	d008      	beq.n	8001db0 <__iar_annotation$$branch>
 8001d9e:	74aa      	strb	r2, [r5, #18]
 8001da0:	2000      	movs	r0, #0
 8001da2:	9000      	str	r0, [sp, #0]
 8001da4:	2300      	movs	r3, #0
 8001da6:	7c29      	ldrb	r1, [r5, #16]
 8001da8:	2004      	movs	r0, #4
 8001daa:	4ea0      	ldr	r6, [pc, #640]	; (800202c <__iar_annotation$$branch+0x27c>)
 8001dac:	6836      	ldr	r6, [r6, #0]
 8001dae:	47b0      	blx	r6

08001db0 <__iar_annotation$$branch>:
 8001db0:	f000 fc70 	bl	8002694 <__iar_annotation$$branch+0x6>
 8001db4:	6868      	ldr	r0, [r5, #4]
 8001db6:	6801      	ldr	r1, [r0, #0]
 8001db8:	2210      	movs	r2, #16
 8001dba:	4391      	bics	r1, r2
 8001dbc:	6001      	str	r1, [r0, #0]
 8001dbe:	215f      	movs	r1, #95	; 0x5f
 8001dc0:	0028      	movs	r0, r5
 8001dc2:	f7ff fa61 	bl	8001288 <PE_Notification>
 8001dc6:	e00a      	b.n	8001dde <__iar_annotation$$branch+0x2e>
 8001dc8:	6868      	ldr	r0, [r5, #4]
 8001dca:	6801      	ldr	r1, [r0, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	4391      	bics	r1, r2
 8001dd0:	6001      	str	r1, [r0, #0]
 8001dd2:	68a8      	ldr	r0, [r5, #8]
 8001dd4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001dd6:	2900      	cmp	r1, #0
 8001dd8:	d001      	beq.n	8001dde <__iar_annotation$$branch+0x2e>
 8001dda:	7c28      	ldrb	r0, [r5, #16]
 8001ddc:	4788      	blx	r1
 8001dde:	2400      	movs	r4, #0
 8001de0:	43e4      	mvns	r4, r4
 8001de2:	e156      	b.n	8002092 <__iar_annotation$$branch+0x2e2>
 8001de4:	6868      	ldr	r0, [r5, #4]
 8001de6:	6801      	ldr	r1, [r0, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	0b0b      	lsrs	r3, r1, #12
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <__iar_annotation$$branch+0x42>
 8001df0:	e14f      	b.n	8002092 <__iar_annotation$$branch+0x2e2>
 8001df2:	078b      	lsls	r3, r1, #30
 8001df4:	0f9b      	lsrs	r3, r3, #30
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d100      	bne.n	8001dfc <__iar_annotation$$branch+0x4c>
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	4399      	bics	r1, r3
 8001e00:	0152      	lsls	r2, r2, #5
 8001e02:	430a      	orrs	r2, r1
 8001e04:	6002      	str	r2, [r0, #0]
 8001e06:	48a3      	ldr	r0, [pc, #652]	; (8002094 <__iar_annotation$$branch+0x2e4>)
 8001e08:	83e8      	strh	r0, [r5, #30]
 8001e0a:	24fa      	movs	r4, #250	; 0xfa
 8001e0c:	0064      	lsls	r4, r4, #1
 8001e0e:	2043      	movs	r0, #67	; 0x43
 8001e10:	e0d0      	b.n	8001fb4 <__iar_annotation$$branch+0x204>
 8001e12:	4668      	mov	r0, sp
 8001e14:	7b00      	ldrb	r0, [r0, #12]
 8001e16:	2811      	cmp	r0, #17
 8001e18:	d132      	bne.n	8001e80 <__iar_annotation$$branch+0xd0>
 8001e1a:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8001e1c:	0bc1      	lsrs	r1, r0, #15
 8001e1e:	d12f      	bne.n	8001e80 <__iar_annotation$$branch+0xd0>
 8001e20:	2607      	movs	r6, #7
 8001e22:	0b01      	lsrs	r1, r0, #12
 8001e24:	4231      	tst	r1, r6
 8001e26:	d02b      	beq.n	8001e80 <__iar_annotation$$branch+0xd0>
 8001e28:	06c1      	lsls	r1, r0, #27
 8001e2a:	0ec9      	lsrs	r1, r1, #27
 8001e2c:	2901      	cmp	r1, #1
 8001e2e:	d127      	bne.n	8001e80 <__iar_annotation$$branch+0xd0>
 8001e30:	2100      	movs	r1, #0
 8001e32:	70b9      	strb	r1, [r7, #2]
 8001e34:	6969      	ldr	r1, [r5, #20]
 8001e36:	2202      	movs	r2, #2
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	616a      	str	r2, [r5, #20]
 8001e3c:	0600      	lsls	r0, r0, #24
 8001e3e:	0f81      	lsrs	r1, r0, #30
 8001e40:	4668      	mov	r0, sp
 8001e42:	7b40      	ldrb	r0, [r0, #13]
 8001e44:	f7fe feba 	bl	8000bbc <PE_ExtRevisionInteroperability>
 8001e48:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8001e4a:	0b00      	lsrs	r0, r0, #12
 8001e4c:	4006      	ands	r6, r0
 8001e4e:	00b3      	lsls	r3, r6, #2
 8001e50:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001e52:	1c82      	adds	r2, r0, #2
 8001e54:	2104      	movs	r1, #4
 8001e56:	7c28      	ldrb	r0, [r5, #16]
 8001e58:	68ae      	ldr	r6, [r5, #8]
 8001e5a:	69b6      	ldr	r6, [r6, #24]
 8001e5c:	47b0      	blx	r6
 8001e5e:	4668      	mov	r0, sp
 8001e60:	7b00      	ldrb	r0, [r0, #12]
 8001e62:	2814      	cmp	r0, #20
 8001e64:	d005      	beq.n	8001e72 <__iar_annotation$$branch+0xc2>
 8001e66:	2014      	movs	r0, #20
 8001e68:	4669      	mov	r1, sp
 8001e6a:	7308      	strb	r0, [r1, #12]
 8001e6c:	0028      	movs	r0, r5
 8001e6e:	f7fe fd5e 	bl	800092e <PE_Clear_RxEvent>
 8001e72:	6868      	ldr	r0, [r5, #4]
 8001e74:	6801      	ldr	r1, [r0, #0]
 8001e76:	2210      	movs	r2, #16
 8001e78:	4391      	bics	r1, r2
 8001e7a:	6001      	str	r1, [r0, #0]
 8001e7c:	2044      	movs	r0, #68	; 0x44
 8001e7e:	7468      	strb	r0, [r5, #17]
 8001e80:	8be8      	ldrh	r0, [r5, #30]
 8001e82:	03a1      	lsls	r1, r4, #14
 8001e84:	4288      	cmp	r0, r1
 8001e86:	d000      	beq.n	8001e8a <__iar_annotation$$branch+0xda>
 8001e88:	e103      	b.n	8002092 <__iar_annotation$$branch+0x2e2>
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	e38e      	b.n	80025ac <__iar_annotation$$branch+0x7fc>
 8001e8e:	2001      	movs	r0, #1
 8001e90:	7728      	strb	r0, [r5, #28]
 8001e92:	466a      	mov	r2, sp
 8001e94:	0029      	movs	r1, r5
 8001e96:	3118      	adds	r1, #24
 8001e98:	7c28      	ldrb	r0, [r5, #16]
 8001e9a:	68ab      	ldr	r3, [r5, #8]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4798      	blx	r3
 8001ea0:	6968      	ldr	r0, [r5, #20]
 8001ea2:	210c      	movs	r1, #12
 8001ea4:	4388      	bics	r0, r1
 8001ea6:	9900      	ldr	r1, [sp, #0]
 8001ea8:	0089      	lsls	r1, r1, #2
 8001eaa:	220c      	movs	r2, #12
 8001eac:	400a      	ands	r2, r1
 8001eae:	4302      	orrs	r2, r0
 8001eb0:	616a      	str	r2, [r5, #20]
 8001eb2:	2045      	movs	r0, #69	; 0x45
 8001eb4:	e37a      	b.n	80025ac <__iar_annotation$$branch+0x7fc>
 8001eb6:	6968      	ldr	r0, [r5, #20]
 8001eb8:	0441      	lsls	r1, r0, #17
 8001eba:	0fc9      	lsrs	r1, r1, #31
 8001ebc:	d001      	beq.n	8001ec2 <__iar_annotation$$branch+0x112>
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	e000      	b.n	8001ec4 <__iar_annotation$$branch+0x114>
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	9002      	str	r0, [sp, #8]
 8001ec6:	2046      	movs	r0, #70	; 0x46
 8001ec8:	9001      	str	r0, [sp, #4]
 8001eca:	2001      	movs	r0, #1
 8001ecc:	9000      	str	r0, [sp, #0]
 8001ece:	002b      	movs	r3, r5
 8001ed0:	3318      	adds	r3, #24
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	0028      	movs	r0, r5
 8001ed8:	f7ff fa9f 	bl	800141a <PE_Send_DataMessage>
 8001edc:	2800      	cmp	r0, #0
 8001ede:	d000      	beq.n	8001ee2 <__iar_annotation$$branch+0x132>
 8001ee0:	e0d7      	b.n	8002092 <__iar_annotation$$branch+0x2e2>
 8001ee2:	6968      	ldr	r0, [r5, #20]
 8001ee4:	499c      	ldr	r1, [pc, #624]	; (8002158 <__iar_annotation$$branch+0x3a8>)
 8001ee6:	4001      	ands	r1, r0
 8001ee8:	6169      	str	r1, [r5, #20]
 8001eea:	e38f      	b.n	800260c <__iar_annotation$$branch+0x85c>
 8001eec:	a903      	add	r1, sp, #12
 8001eee:	0028      	movs	r0, r5
 8001ef0:	f000 fcf8 	bl	80028e4 <PE_StateMachine_SNK_SelectCapa>
 8001ef4:	e14d      	b.n	8002192 <__iar_annotation$$branch+0x3e2>
 8001ef6:	4668      	mov	r0, sp
 8001ef8:	7b00      	ldrb	r0, [r0, #12]
 8001efa:	2811      	cmp	r0, #17
 8001efc:	d12a      	bne.n	8001f54 <__iar_annotation$$branch+0x1a4>
 8001efe:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8001f00:	4996      	ldr	r1, [pc, #600]	; (800215c <__iar_annotation$$branch+0x3ac>)
 8001f02:	4001      	ands	r1, r0
 8001f04:	2906      	cmp	r1, #6
 8001f06:	d125      	bne.n	8001f54 <__iar_annotation$$branch+0x1a4>
 8001f08:	2014      	movs	r0, #20
 8001f0a:	4669      	mov	r1, sp
 8001f0c:	7308      	strb	r0, [r1, #12]
 8001f0e:	0028      	movs	r0, r5
 8001f10:	f7fe fd0d 	bl	800092e <PE_Clear_RxEvent>
 8001f14:	2103      	movs	r1, #3
 8001f16:	0028      	movs	r0, r5
 8001f18:	f7ff f9db 	bl	80012d2 <PE_SetPowerNegotiation>
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	0028      	movs	r0, r5
 8001f20:	f7ff f9b2 	bl	8001288 <PE_Notification>
 8001f24:	6868      	ldr	r0, [r5, #4]
 8001f26:	6800      	ldr	r0, [r0, #0]
 8001f28:	0401      	lsls	r1, r0, #16
 8001f2a:	0fc9      	lsrs	r1, r1, #31
 8001f2c:	d002      	beq.n	8001f34 <__iar_annotation$$branch+0x184>
 8001f2e:	6828      	ldr	r0, [r5, #0]
 8001f30:	6801      	ldr	r1, [r0, #0]
 8001f32:	e000      	b.n	8001f36 <__iar_annotation$$branch+0x186>
 8001f34:	2101      	movs	r1, #1
 8001f36:	4668      	mov	r0, sp
 8001f38:	7b40      	ldrb	r0, [r0, #13]
 8001f3a:	f003 fbdb 	bl	80056f4 <USBPD_PRL_SOPCapability>
 8001f3e:	2400      	movs	r4, #0
 8001f40:	84ac      	strh	r4, [r5, #36]	; 0x24
 8001f42:	2003      	movs	r0, #3
 8001f44:	6969      	ldr	r1, [r5, #20]
 8001f46:	0889      	lsrs	r1, r1, #2
 8001f48:	4001      	ands	r1, r0
 8001f4a:	2903      	cmp	r1, #3
 8001f4c:	d101      	bne.n	8001f52 <__iar_annotation$$branch+0x1a2>
 8001f4e:	4984      	ldr	r1, [pc, #528]	; (8002160 <__iar_annotation$$branch+0x3b0>)
 8001f50:	84a9      	strh	r1, [r5, #36]	; 0x24
 8001f52:	7468      	strb	r0, [r5, #17]
 8001f54:	8be8      	ldrh	r0, [r5, #30]
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0209      	lsls	r1, r1, #8
 8001f5a:	4288      	cmp	r0, r1
 8001f5c:	d000      	beq.n	8001f60 <__iar_annotation$$branch+0x1b0>
 8001f5e:	e098      	b.n	8002092 <__iar_annotation$$branch+0x2e2>
 8001f60:	e793      	b.n	8001e8a <__iar_annotation$$branch+0xda>
 8001f62:	bf00      	nop
 8001f64:	200001e0 	.word	0x200001e0
 8001f68:	a903      	add	r1, sp, #12
 8001f6a:	0028      	movs	r0, r5
 8001f6c:	f001 fd8a 	bl	8003a84 <PE_StateMachine_VDMCable>
 8001f70:	e10f      	b.n	8002192 <__iar_annotation$$branch+0x3e2>
 8001f72:	2601      	movs	r6, #1
 8001f74:	6868      	ldr	r0, [r5, #4]
 8001f76:	6800      	ldr	r0, [r0, #0]
 8001f78:	0bc0      	lsrs	r0, r0, #15
 8001f7a:	4030      	ands	r0, r6
 8001f7c:	d005      	beq.n	8001f8a <__iar_annotation$$branch+0x1da>
 8001f7e:	68a8      	ldr	r0, [r5, #8]
 8001f80:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d001      	beq.n	8001f8a <__iar_annotation$$branch+0x1da>
 8001f86:	7c28      	ldrb	r0, [r5, #16]
 8001f88:	4790      	blx	r2
 8001f8a:	6868      	ldr	r0, [r5, #4]
 8001f8c:	6801      	ldr	r1, [r0, #0]
 8001f8e:	2210      	movs	r2, #16
 8001f90:	4391      	bics	r1, r2
 8001f92:	6001      	str	r1, [r0, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	0028      	movs	r0, r5
 8001f98:	f7ff f99b 	bl	80012d2 <PE_SetPowerNegotiation>
 8001f9c:	78b8      	ldrb	r0, [r7, #2]
 8001f9e:	2803      	cmp	r0, #3
 8001fa0:	d30a      	bcc.n	8001fb8 <__iar_annotation$$branch+0x208>
 8001fa2:	6968      	ldr	r0, [r5, #20]
 8001fa4:	0840      	lsrs	r0, r0, #1
 8001fa6:	4006      	ands	r6, r0
 8001fa8:	d003      	beq.n	8001fb2 <__iar_annotation$$branch+0x202>
 8001faa:	68a8      	ldr	r0, [r5, #8]
 8001fac:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d16b      	bne.n	800208a <__iar_annotation$$branch+0x2da>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	7468      	strb	r0, [r5, #17]
 8001fb6:	e06c      	b.n	8002092 <__iar_annotation$$branch+0x2e2>
 8001fb8:	1c40      	adds	r0, r0, #1
 8001fba:	70b8      	strb	r0, [r7, #2]
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	0028      	movs	r0, r5
 8001fc0:	f7fe fc57 	bl	8000872 <PE_Send_RESET>
 8001fc4:	4867      	ldr	r0, [pc, #412]	; (8002164 <__iar_annotation$$branch+0x3b4>)
 8001fc6:	83e8      	strh	r0, [r5, #30]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2101      	movs	r1, #1
 8001fcc:	0028      	movs	r0, r5
 8001fce:	f7ff f977 	bl	80012c0 <PE_CallHardResetCallback>
 8001fd2:	e012      	b.n	8001ffa <__iar_annotation$$branch+0x24a>
 8001fd4:	6868      	ldr	r0, [r5, #4]
 8001fd6:	6800      	ldr	r0, [r0, #0]
 8001fd8:	0401      	lsls	r1, r0, #16
 8001fda:	0fc9      	lsrs	r1, r1, #31
 8001fdc:	d006      	beq.n	8001fec <__iar_annotation$$branch+0x23c>
 8001fde:	68a8      	ldr	r0, [r5, #8]
 8001fe0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d002      	beq.n	8001fec <__iar_annotation$$branch+0x23c>
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	7c28      	ldrb	r0, [r5, #16]
 8001fea:	4790      	blx	r2
 8001fec:	2200      	movs	r2, #0
 8001fee:	2101      	movs	r1, #1
 8001ff0:	0028      	movs	r0, r5
 8001ff2:	f7ff f965 	bl	80012c0 <PE_CallHardResetCallback>
 8001ff6:	485b      	ldr	r0, [pc, #364]	; (8002164 <__iar_annotation$$branch+0x3b4>)
 8001ff8:	83e8      	strh	r0, [r5, #30]
 8001ffa:	209b      	movs	r0, #155	; 0x9b
 8001ffc:	e2d6      	b.n	80025ac <__iar_annotation$$branch+0x7fc>
 8001ffe:	4668      	mov	r0, sp
 8002000:	7b40      	ldrb	r0, [r0, #13]
 8002002:	68aa      	ldr	r2, [r5, #8]
 8002004:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002006:	4790      	blx	r2
 8002008:	2801      	cmp	r0, #1
 800200a:	d108      	bne.n	800201e <__iar_annotation$$branch+0x26e>
 800200c:	4856      	ldr	r0, [pc, #344]	; (8002168 <__iar_annotation$$branch+0x3b8>)
 800200e:	83e8      	strh	r0, [r5, #30]
 8002010:	2040      	movs	r0, #64	; 0x40
 8002012:	7468      	strb	r0, [r5, #17]
 8002014:	2400      	movs	r4, #0
 8002016:	2113      	movs	r1, #19
 8002018:	0028      	movs	r0, r5
 800201a:	f7ff f935 	bl	8001288 <PE_Notification>
 800201e:	8be8      	ldrh	r0, [r5, #30]
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	0209      	lsls	r1, r1, #8
 8002024:	4288      	cmp	r0, r1
 8002026:	d134      	bne.n	8002092 <__iar_annotation$$branch+0x2e2>
 8002028:	e01f      	b.n	800206a <__iar_annotation$$branch+0x2ba>
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000
 8002030:	fffdffff 	.word	0xfffdffff
 8002034:	2101      	movs	r1, #1
 8002036:	4668      	mov	r0, sp
 8002038:	7b40      	ldrb	r0, [r0, #13]
 800203a:	68aa      	ldr	r2, [r5, #8]
 800203c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800203e:	4790      	blx	r2
 8002040:	2801      	cmp	r0, #1
 8002042:	d10d      	bne.n	8002060 <__iar_annotation$$branch+0x2b0>
 8002044:	2205      	movs	r2, #5
 8002046:	2100      	movs	r1, #0
 8002048:	0028      	movs	r0, r5
 800204a:	f7ff f939 	bl	80012c0 <PE_CallHardResetCallback>
 800204e:	0028      	movs	r0, r5
 8002050:	f7fe fd13 	bl	8000a7a <PE_Reset_HardReset>
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <__iar_annotation$$branch+0x2e4>)
 8002056:	83e8      	strh	r0, [r5, #30]
 8002058:	24fa      	movs	r4, #250	; 0xfa
 800205a:	0064      	lsls	r4, r4, #1
 800205c:	2043      	movs	r0, #67	; 0x43
 800205e:	7468      	strb	r0, [r5, #17]
 8002060:	8be8      	ldrh	r0, [r5, #30]
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0209      	lsls	r1, r1, #8
 8002066:	4288      	cmp	r0, r1
 8002068:	d113      	bne.n	8002092 <__iar_annotation$$branch+0x2e2>
 800206a:	2206      	movs	r2, #6
 800206c:	2100      	movs	r1, #0
 800206e:	0028      	movs	r0, r5
 8002070:	f7ff f926 	bl	80012c0 <PE_CallHardResetCallback>
 8002074:	78b8      	ldrb	r0, [r7, #2]
 8002076:	2803      	cmp	r0, #3
 8002078:	d200      	bcs.n	800207c <__iar_annotation$$branch+0x2cc>
 800207a:	e706      	b.n	8001e8a <__iar_annotation$$branch+0xda>
 800207c:	6968      	ldr	r0, [r5, #20]
 800207e:	0781      	lsls	r1, r0, #30
 8002080:	0fc9      	lsrs	r1, r1, #31
 8002082:	d004      	beq.n	800208e <__iar_annotation$$branch+0x2de>
 8002084:	68a8      	ldr	r0, [r5, #8]
 8002086:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002088:	2800      	cmp	r0, #0
 800208a:	d000      	beq.n	800208e <__iar_annotation$$branch+0x2de>
 800208c:	e1bc      	b.n	8002408 <__iar_annotation$$branch+0x658>
 800208e:	2400      	movs	r4, #0
 8002090:	746c      	strb	r4, [r5, #17]
 8002092:	e3cc      	b.n	800282e <__iar_annotation$$branch+0x1c>
 8002094:	000081f4 	.word	0x000081f4
 8002098:	2000      	movs	r0, #0
 800209a:	9000      	str	r0, [sp, #0]
 800209c:	2303      	movs	r3, #3
 800209e:	2203      	movs	r2, #3
 80020a0:	e0aa      	b.n	80021f8 <__iar_annotation$$branch+0x448>
 80020a2:	6868      	ldr	r0, [r5, #4]
 80020a4:	6800      	ldr	r0, [r0, #0]
 80020a6:	0540      	lsls	r0, r0, #21
 80020a8:	0f40      	lsrs	r0, r0, #29
 80020aa:	2804      	cmp	r0, #4
 80020ac:	d100      	bne.n	80020b0 <__iar_annotation$$branch+0x300>
 80020ae:	e6ec      	b.n	8001e8a <__iar_annotation$$branch+0xda>
 80020b0:	2000      	movs	r0, #0
 80020b2:	9000      	str	r0, [sp, #0]
 80020b4:	2350      	movs	r3, #80	; 0x50
 80020b6:	220d      	movs	r2, #13
 80020b8:	2031      	movs	r0, #49	; 0x31
 80020ba:	5c29      	ldrb	r1, [r5, r0]
 80020bc:	0028      	movs	r0, r5
 80020be:	f7ff f97f 	bl	80013c0 <PE_Send_CtrlMessage>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d1e5      	bne.n	8002092 <__iar_annotation$$branch+0x2e2>
 80020c6:	2003      	movs	r0, #3
 80020c8:	7728      	strb	r0, [r5, #28]
 80020ca:	83ee      	strh	r6, [r5, #30]
 80020cc:	241b      	movs	r4, #27
 80020ce:	2130      	movs	r1, #48	; 0x30
 80020d0:	e1ee      	b.n	80024b0 <__iar_annotation$$branch+0x700>
 80020d2:	4668      	mov	r0, sp
 80020d4:	7b00      	ldrb	r0, [r0, #12]
 80020d6:	2814      	cmp	r0, #20
 80020d8:	d013      	beq.n	8002102 <__iar_annotation$$branch+0x352>
 80020da:	2030      	movs	r0, #48	; 0x30
 80020dc:	5c28      	ldrb	r0, [r5, r0]
 80020de:	2131      	movs	r1, #49	; 0x31
 80020e0:	5c69      	ldrb	r1, [r5, r1]
 80020e2:	4288      	cmp	r0, r1
 80020e4:	d10d      	bne.n	8002102 <__iar_annotation$$branch+0x352>
 80020e6:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80020e8:	491c      	ldr	r1, [pc, #112]	; (800215c <__iar_annotation$$branch+0x3ac>)
 80020ea:	4001      	ands	r1, r0
 80020ec:	2903      	cmp	r1, #3
 80020ee:	d108      	bne.n	8002102 <__iar_annotation$$branch+0x352>
 80020f0:	2003      	movs	r0, #3
 80020f2:	7468      	strb	r0, [r5, #17]
 80020f4:	2400      	movs	r4, #0
 80020f6:	2014      	movs	r0, #20
 80020f8:	4669      	mov	r1, sp
 80020fa:	7308      	strb	r0, [r1, #12]
 80020fc:	0028      	movs	r0, r5
 80020fe:	f7fe fc16 	bl	800092e <PE_Clear_RxEvent>
 8002102:	e727      	b.n	8001f54 <__iar_annotation$$branch+0x1a4>
 8002104:	9400      	str	r4, [sp, #0]
 8002106:	2343      	movs	r3, #67	; 0x43
 8002108:	2207      	movs	r2, #7
 800210a:	0028      	movs	r0, r5
 800210c:	f7ff f958 	bl	80013c0 <PE_Send_CtrlMessage>
 8002110:	2800      	cmp	r0, #0
 8002112:	d11f      	bne.n	8002154 <__iar_annotation$$branch+0x3a4>
 8002114:	2006      	movs	r0, #6
 8002116:	7728      	strb	r0, [r5, #28]
 8002118:	83ee      	strh	r6, [r5, #30]
 800211a:	241b      	movs	r4, #27
 800211c:	210b      	movs	r1, #11
 800211e:	e1c7      	b.n	80024b0 <__iar_annotation$$branch+0x700>
 8002120:	4668      	mov	r0, sp
 8002122:	7b00      	ldrb	r0, [r0, #12]
 8002124:	2811      	cmp	r0, #17
 8002126:	d115      	bne.n	8002154 <__iar_annotation$$branch+0x3a4>
 8002128:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800212a:	490c      	ldr	r1, [pc, #48]	; (800215c <__iar_annotation$$branch+0x3ac>)
 800212c:	4001      	ands	r1, r0
 800212e:	2906      	cmp	r1, #6
 8002130:	d110      	bne.n	8002154 <__iar_annotation$$branch+0x3a4>
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	0028      	movs	r0, r5
 8002136:	f7ff f8a7 	bl	8001288 <PE_Notification>
 800213a:	2003      	movs	r0, #3
 800213c:	7468      	strb	r0, [r5, #17]
 800213e:	2400      	movs	r4, #0
 8002140:	4668      	mov	r0, sp
 8002142:	7b00      	ldrb	r0, [r0, #12]
 8002144:	2814      	cmp	r0, #20
 8002146:	d005      	beq.n	8002154 <__iar_annotation$$branch+0x3a4>
 8002148:	2014      	movs	r0, #20
 800214a:	4669      	mov	r1, sp
 800214c:	7308      	strb	r0, [r1, #12]
 800214e:	0028      	movs	r0, r5
 8002150:	f7fe fbed 	bl	800092e <PE_Clear_RxEvent>
 8002154:	e36b      	b.n	800282e <__iar_annotation$$branch+0x1c>
 8002156:	bf00      	nop
 8002158:	ffffbfff 	.word	0xffffbfff
 800215c:	0000f01f 	.word	0x0000f01f
 8002160:	0000a328 	.word	0x0000a328
 8002164:	000083e8 	.word	0x000083e8
 8002168:	000088e3 	.word	0x000088e3
 800216c:	2000      	movs	r0, #0
 800216e:	9000      	str	r0, [sp, #0]
 8002170:	2303      	movs	r3, #3
 8002172:	2204      	movs	r2, #4
 8002174:	e040      	b.n	80021f8 <__iar_annotation$$branch+0x448>
 8002176:	2804      	cmp	r0, #4
 8002178:	d007      	beq.n	800218a <__iar_annotation$$branch+0x3da>
 800217a:	2000      	movs	r0, #0
 800217c:	7728      	strb	r0, [r5, #28]
 800217e:	2004      	movs	r0, #4
 8002180:	7468      	strb	r0, [r5, #17]
 8002182:	2120      	movs	r1, #32
 8002184:	0028      	movs	r0, r5
 8002186:	f7ff f87f 	bl	8001288 <PE_Notification>
 800218a:	a903      	add	r1, sp, #12
 800218c:	0028      	movs	r0, r5
 800218e:	f000 fc17 	bl	80029c0 <PE_StateMachine_SNK_ReadyWait>
 8002192:	e34b      	b.n	800282c <__iar_annotation$$branch+0x1a>
 8002194:	68a8      	ldr	r0, [r5, #8]
 8002196:	6881      	ldr	r1, [r0, #8]
 8002198:	2900      	cmp	r1, #0
 800219a:	d031      	beq.n	8002200 <__iar_annotation$$branch+0x450>
 800219c:	4668      	mov	r0, sp
 800219e:	7b40      	ldrb	r0, [r0, #13]
 80021a0:	4788      	blx	r1
 80021a2:	280a      	cmp	r0, #10
 80021a4:	d002      	beq.n	80021ac <__iar_annotation$$branch+0x3fc>
 80021a6:	280d      	cmp	r0, #13
 80021a8:	d021      	beq.n	80021ee <__iar_annotation$$branch+0x43e>
 80021aa:	e029      	b.n	8002200 <__iar_annotation$$branch+0x450>
 80021ac:	2201      	movs	r2, #1
 80021ae:	2100      	movs	r1, #0
 80021b0:	7c28      	ldrb	r0, [r5, #16]
 80021b2:	68ab      	ldr	r3, [r5, #8]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	4798      	blx	r3
 80021b8:	2000      	movs	r0, #0
 80021ba:	9000      	str	r0, [sp, #0]
 80021bc:	2352      	movs	r3, #82	; 0x52
 80021be:	2203      	movs	r2, #3
 80021c0:	2100      	movs	r1, #0
 80021c2:	0028      	movs	r0, r5
 80021c4:	f7ff f8fc 	bl	80013c0 <PE_Send_CtrlMessage>
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d10f      	bne.n	80021ec <__iar_annotation$$branch+0x43c>
 80021cc:	2008      	movs	r0, #8
 80021ce:	7728      	strb	r0, [r5, #28]
 80021d0:	6868      	ldr	r0, [r5, #4]
 80021d2:	6801      	ldr	r1, [r0, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	430a      	orrs	r2, r1
 80021d8:	6002      	str	r2, [r0, #0]
 80021da:	2206      	movs	r2, #6
 80021dc:	2100      	movs	r1, #0
 80021de:	7c28      	ldrb	r0, [r5, #16]
 80021e0:	68ab      	ldr	r3, [r5, #8]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	4798      	blx	r3
 80021e6:	4899      	ldr	r0, [pc, #612]	; (800244c <__iar_annotation$$branch+0x69c>)
 80021e8:	83e8      	strh	r0, [r5, #30]
 80021ea:	4c99      	ldr	r4, [pc, #612]	; (8002450 <__iar_annotation$$branch+0x6a0>)
 80021ec:	e31f      	b.n	800282e <__iar_annotation$$branch+0x1c>
 80021ee:	2000      	movs	r0, #0
 80021f0:	9000      	str	r0, [sp, #0]
 80021f2:	2303      	movs	r3, #3
 80021f4:	220c      	movs	r2, #12
 80021f6:	2100      	movs	r1, #0
 80021f8:	0028      	movs	r0, r5
 80021fa:	f7ff f8e1 	bl	80013c0 <PE_Send_CtrlMessage>
 80021fe:	e316      	b.n	800282e <__iar_annotation$$branch+0x1c>
 8002200:	202a      	movs	r0, #42	; 0x2a
 8002202:	e1d3      	b.n	80025ac <__iar_annotation$$branch+0x7fc>
 8002204:	4668      	mov	r0, sp
 8002206:	7b00      	ldrb	r0, [r0, #12]
 8002208:	2811      	cmp	r0, #17
 800220a:	d116      	bne.n	800223a <__iar_annotation$$branch+0x48a>
 800220c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800220e:	4991      	ldr	r1, [pc, #580]	; (8002454 <__iar_annotation$$branch+0x6a4>)
 8002210:	4001      	ands	r1, r0
 8002212:	2906      	cmp	r1, #6
 8002214:	d111      	bne.n	800223a <__iar_annotation$$branch+0x48a>
 8002216:	2209      	movs	r2, #9
 8002218:	2100      	movs	r1, #0
 800221a:	7c28      	ldrb	r0, [r5, #16]
 800221c:	68ab      	ldr	r3, [r5, #8]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	4798      	blx	r3
 8002222:	2053      	movs	r0, #83	; 0x53
 8002224:	7468      	strb	r0, [r5, #17]
 8002226:	4668      	mov	r0, sp
 8002228:	7b00      	ldrb	r0, [r0, #12]
 800222a:	2814      	cmp	r0, #20
 800222c:	d005      	beq.n	800223a <__iar_annotation$$branch+0x48a>
 800222e:	2014      	movs	r0, #20
 8002230:	4669      	mov	r1, sp
 8002232:	7308      	strb	r0, [r1, #12]
 8002234:	0028      	movs	r0, r5
 8002236:	f7fe fb7a 	bl	800092e <PE_Clear_RxEvent>
 800223a:	8be8      	ldrh	r0, [r5, #30]
 800223c:	03a1      	lsls	r1, r4, #14
 800223e:	4288      	cmp	r0, r1
 8002240:	d1dd      	bne.n	80021fe <__iar_annotation$$branch+0x44e>
 8002242:	68a8      	ldr	r0, [r5, #8]
 8002244:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002246:	2800      	cmp	r0, #0
 8002248:	d100      	bne.n	800224c <__iar_annotation$$branch+0x49c>
 800224a:	e61e      	b.n	8001e8a <__iar_annotation$$branch+0xda>
 800224c:	e0dc      	b.n	8002408 <__iar_annotation$$branch+0x658>
 800224e:	2104      	movs	r1, #4
 8002250:	0028      	movs	r0, r5
 8002252:	f7ff f83e 	bl	80012d2 <PE_SetPowerNegotiation>
 8002256:	220a      	movs	r2, #10
 8002258:	2100      	movs	r1, #0
 800225a:	7c28      	ldrb	r0, [r5, #16]
 800225c:	68ab      	ldr	r3, [r5, #8]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	4798      	blx	r3
 8002262:	6868      	ldr	r0, [r5, #4]
 8002264:	7800      	ldrb	r0, [r0, #0]
 8002266:	0780      	lsls	r0, r0, #30
 8002268:	0f80      	lsrs	r0, r0, #30
 800226a:	2802      	cmp	r0, #2
 800226c:	d102      	bne.n	8002274 <__iar_annotation$$branch+0x4c4>
 800226e:	7c28      	ldrb	r0, [r5, #16]
 8002270:	f003 fa1d 	bl	80056ae <USBPD_PRL_SRCSetSinkNG>
 8002274:	220b      	movs	r2, #11
 8002276:	2101      	movs	r1, #1
 8002278:	7c28      	ldrb	r0, [r5, #16]
 800227a:	68ab      	ldr	r3, [r5, #8]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	4798      	blx	r3
 8002280:	2101      	movs	r1, #1
 8002282:	4668      	mov	r0, sp
 8002284:	7b40      	ldrb	r0, [r0, #13]
 8002286:	f003 f9e0 	bl	800564a <USBPD_PRL_SetHeaderPowerRole>
 800228a:	2000      	movs	r0, #0
 800228c:	9000      	str	r0, [sp, #0]
 800228e:	2354      	movs	r3, #84	; 0x54
 8002290:	2206      	movs	r2, #6
 8002292:	2100      	movs	r1, #0
 8002294:	0028      	movs	r0, r5
 8002296:	f7ff f893 	bl	80013c0 <PE_Send_CtrlMessage>
 800229a:	2800      	cmp	r0, #0
 800229c:	d108      	bne.n	80022b0 <__iar_annotation$$branch+0x500>
 800229e:	220c      	movs	r2, #12
 80022a0:	2100      	movs	r1, #0
 80022a2:	7c28      	ldrb	r0, [r5, #16]
 80022a4:	68ab      	ldr	r3, [r5, #8]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	4798      	blx	r3
 80022aa:	486b      	ldr	r0, [pc, #428]	; (8002458 <__iar_annotation$$branch+0x6a8>)
 80022ac:	83e8      	strh	r0, [r5, #30]
 80022ae:	2414      	movs	r4, #20
 80022b0:	7c68      	ldrb	r0, [r5, #17]
 80022b2:	2854      	cmp	r0, #84	; 0x54
 80022b4:	d0a3      	beq.n	80021fe <__iar_annotation$$branch+0x44e>
 80022b6:	2100      	movs	r1, #0
 80022b8:	4668      	mov	r0, sp
 80022ba:	7b40      	ldrb	r0, [r0, #13]
 80022bc:	f003 f9c5 	bl	800564a <USBPD_PRL_SetHeaderPowerRole>
 80022c0:	2206      	movs	r2, #6
 80022c2:	2101      	movs	r1, #1
 80022c4:	7c28      	ldrb	r0, [r5, #16]
 80022c6:	68ab      	ldr	r3, [r5, #8]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	4798      	blx	r3
 80022cc:	2207      	movs	r2, #7
 80022ce:	e0c6      	b.n	800245e <__iar_annotation$$branch+0x6ae>
 80022d0:	8be8      	ldrh	r0, [r5, #30]
 80022d2:	03a1      	lsls	r1, r4, #14
 80022d4:	4288      	cmp	r0, r1
 80022d6:	d192      	bne.n	80021fe <__iar_annotation$$branch+0x44e>
 80022d8:	2101      	movs	r1, #1
 80022da:	0028      	movs	r0, r5
 80022dc:	f7fe fae2 	bl	80008a4 <PE_ChangePowerRole>
 80022e0:	220e      	movs	r2, #14
 80022e2:	2101      	movs	r1, #1
 80022e4:	7c28      	ldrb	r0, [r5, #16]
 80022e6:	68ab      	ldr	r3, [r5, #8]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	4798      	blx	r3
 80022ec:	6868      	ldr	r0, [r5, #4]
 80022ee:	7800      	ldrb	r0, [r0, #0]
 80022f0:	0780      	lsls	r0, r0, #30
 80022f2:	0f80      	lsrs	r0, r0, #30
 80022f4:	2802      	cmp	r0, #2
 80022f6:	d102      	bne.n	80022fe <__iar_annotation$$branch+0x54e>
 80022f8:	7c28      	ldrb	r0, [r5, #16]
 80022fa:	f003 f9dc 	bl	80056b6 <USBPD_PRL_SRCReleaseSinkNG>
 80022fe:	0028      	movs	r0, r5
 8002300:	f7fe fc32 	bl	8000b68 <PE_Reset_StateMachine>
 8002304:	2115      	movs	r1, #21
 8002306:	e0d3      	b.n	80024b0 <__iar_annotation$$branch+0x700>
 8002308:	9400      	str	r4, [sp, #0]
 800230a:	2358      	movs	r3, #88	; 0x58
 800230c:	220a      	movs	r2, #10
 800230e:	0028      	movs	r0, r5
 8002310:	f7ff f856 	bl	80013c0 <PE_Send_CtrlMessage>
 8002314:	2800      	cmp	r0, #0
 8002316:	d000      	beq.n	800231a <__iar_annotation$$branch+0x56a>
 8002318:	e0a0      	b.n	800245c <__iar_annotation$$branch+0x6ac>
 800231a:	2008      	movs	r0, #8
 800231c:	7728      	strb	r0, [r5, #28]
 800231e:	83ee      	strh	r6, [r5, #30]
 8002320:	241b      	movs	r4, #27
 8002322:	2202      	movs	r2, #2
 8002324:	e09b      	b.n	800245e <__iar_annotation$$branch+0x6ae>
 8002326:	4668      	mov	r0, sp
 8002328:	7b00      	ldrb	r0, [r0, #12]
 800232a:	2811      	cmp	r0, #17
 800232c:	d10e      	bne.n	800234c <__iar_annotation$$branch+0x59c>
 800232e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002330:	21f0      	movs	r1, #240	; 0xf0
 8002332:	0209      	lsls	r1, r1, #8
 8002334:	4001      	ands	r1, r0
 8002336:	d109      	bne.n	800234c <__iar_annotation$$branch+0x59c>
 8002338:	06c0      	lsls	r0, r0, #27
 800233a:	0ec0      	lsrs	r0, r0, #27
 800233c:	2803      	cmp	r0, #3
 800233e:	d006      	beq.n	800234e <__iar_annotation$$branch+0x59e>
 8002340:	2804      	cmp	r0, #4
 8002342:	d029      	beq.n	8002398 <__iar_annotation$$branch+0x5e8>
 8002344:	280c      	cmp	r0, #12
 8002346:	d025      	beq.n	8002394 <__iar_annotation$$branch+0x5e4>
 8002348:	2810      	cmp	r0, #16
 800234a:	d02e      	beq.n	80023aa <__iar_annotation$$branch+0x5fa>
 800234c:	e0e9      	b.n	8002522 <__iar_annotation$$branch+0x772>
 800234e:	6868      	ldr	r0, [r5, #4]
 8002350:	6801      	ldr	r1, [r0, #0]
 8002352:	2210      	movs	r2, #16
 8002354:	430a      	orrs	r2, r1
 8002356:	6002      	str	r2, [r0, #0]
 8002358:	483c      	ldr	r0, [pc, #240]	; (800244c <__iar_annotation$$branch+0x69c>)
 800235a:	83e8      	strh	r0, [r5, #30]
 800235c:	4c3c      	ldr	r4, [pc, #240]	; (8002450 <__iar_annotation$$branch+0x6a0>)
 800235e:	2206      	movs	r2, #6
 8002360:	2100      	movs	r1, #0
 8002362:	7c28      	ldrb	r0, [r5, #16]
 8002364:	68ab      	ldr	r3, [r5, #8]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	4798      	blx	r3
 800236a:	2104      	movs	r1, #4
 800236c:	0028      	movs	r0, r5
 800236e:	f7fe ffb0 	bl	80012d2 <PE_SetPowerNegotiation>
 8002372:	213a      	movs	r1, #58	; 0x3a
 8002374:	0028      	movs	r0, r5
 8002376:	f7fe ff87 	bl	8001288 <PE_Notification>
 800237a:	4668      	mov	r0, sp
 800237c:	7b00      	ldrb	r0, [r0, #12]
 800237e:	2814      	cmp	r0, #20
 8002380:	d005      	beq.n	800238e <__iar_annotation$$branch+0x5de>
 8002382:	2014      	movs	r0, #20
 8002384:	4669      	mov	r1, sp
 8002386:	7308      	strb	r0, [r1, #12]
 8002388:	0028      	movs	r0, r5
 800238a:	f7fe fad0 	bl	800092e <PE_Clear_RxEvent>
 800238e:	2059      	movs	r0, #89	; 0x59
 8002390:	7468      	strb	r0, [r5, #17]
 8002392:	e0c6      	b.n	8002522 <__iar_annotation$$branch+0x772>
 8002394:	213b      	movs	r1, #59	; 0x3b
 8002396:	e000      	b.n	800239a <__iar_annotation$$branch+0x5ea>
 8002398:	2116      	movs	r1, #22
 800239a:	0028      	movs	r0, r5
 800239c:	f7fe ff74 	bl	8001288 <PE_Notification>
 80023a0:	4668      	mov	r0, sp
 80023a2:	7b00      	ldrb	r0, [r0, #12]
 80023a4:	2814      	cmp	r0, #20
 80023a6:	d108      	bne.n	80023ba <__iar_annotation$$branch+0x60a>
 80023a8:	e0b8      	b.n	800251c <__iar_annotation$$branch+0x76c>
 80023aa:	2117      	movs	r1, #23
 80023ac:	0028      	movs	r0, r5
 80023ae:	f7fe ff6b 	bl	8001288 <PE_Notification>
 80023b2:	4668      	mov	r0, sp
 80023b4:	7b00      	ldrb	r0, [r0, #12]
 80023b6:	2814      	cmp	r0, #20
 80023b8:	d0f6      	beq.n	80023a8 <__iar_annotation$$branch+0x5f8>
 80023ba:	2014      	movs	r0, #20
 80023bc:	4669      	mov	r1, sp
 80023be:	7308      	strb	r0, [r1, #12]
 80023c0:	0028      	movs	r0, r5
 80023c2:	f7fe fab4 	bl	800092e <PE_Clear_RxEvent>
 80023c6:	e0a9      	b.n	800251c <__iar_annotation$$branch+0x76c>
 80023c8:	4668      	mov	r0, sp
 80023ca:	7b00      	ldrb	r0, [r0, #12]
 80023cc:	2811      	cmp	r0, #17
 80023ce:	d10c      	bne.n	80023ea <__iar_annotation$$branch+0x63a>
 80023d0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80023d2:	4920      	ldr	r1, [pc, #128]	; (8002454 <__iar_annotation$$branch+0x6a4>)
 80023d4:	4001      	ands	r1, r0
 80023d6:	2906      	cmp	r1, #6
 80023d8:	d107      	bne.n	80023ea <__iar_annotation$$branch+0x63a>
 80023da:	205a      	movs	r0, #90	; 0x5a
 80023dc:	7468      	strb	r0, [r5, #17]
 80023de:	2014      	movs	r0, #20
 80023e0:	4669      	mov	r1, sp
 80023e2:	7308      	strb	r0, [r1, #12]
 80023e4:	0028      	movs	r0, r5
 80023e6:	f7fe faa2 	bl	800092e <PE_Clear_RxEvent>
 80023ea:	8be8      	ldrh	r0, [r5, #30]
 80023ec:	03a1      	lsls	r1, r4, #14
 80023ee:	4288      	cmp	r0, r1
 80023f0:	d12a      	bne.n	8002448 <__iar_annotation$$branch+0x698>
 80023f2:	220f      	movs	r2, #15
 80023f4:	2100      	movs	r1, #0
 80023f6:	7c28      	ldrb	r0, [r5, #16]
 80023f8:	68ab      	ldr	r3, [r5, #8]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	4798      	blx	r3
 80023fe:	68a8      	ldr	r0, [r5, #8]
 8002400:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002402:	2800      	cmp	r0, #0
 8002404:	d100      	bne.n	8002408 <__iar_annotation$$branch+0x658>
 8002406:	e540      	b.n	8001e8a <__iar_annotation$$branch+0xda>
 8002408:	2092      	movs	r0, #146	; 0x92
 800240a:	e0cf      	b.n	80025ac <__iar_annotation$$branch+0x7fc>
 800240c:	220a      	movs	r2, #10
 800240e:	7c28      	ldrb	r0, [r5, #16]
 8002410:	68ab      	ldr	r3, [r5, #8]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	4798      	blx	r3
 8002416:	220b      	movs	r2, #11
 8002418:	2101      	movs	r1, #1
 800241a:	7c28      	ldrb	r0, [r5, #16]
 800241c:	68ab      	ldr	r3, [r5, #8]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	4798      	blx	r3
 8002422:	2000      	movs	r0, #0
 8002424:	9000      	str	r0, [sp, #0]
 8002426:	2354      	movs	r3, #84	; 0x54
 8002428:	2206      	movs	r2, #6
 800242a:	2100      	movs	r1, #0
 800242c:	0028      	movs	r0, r5
 800242e:	f7fe ffc7 	bl	80013c0 <PE_Send_CtrlMessage>
 8002432:	2800      	cmp	r0, #0
 8002434:	d112      	bne.n	800245c <__iar_annotation$$branch+0x6ac>
 8002436:	220c      	movs	r2, #12
 8002438:	2100      	movs	r1, #0
 800243a:	7c28      	ldrb	r0, [r5, #16]
 800243c:	68ab      	ldr	r3, [r5, #8]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	4798      	blx	r3
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <__iar_annotation$$branch+0x6a8>)
 8002444:	83e8      	strh	r0, [r5, #30]
 8002446:	2414      	movs	r4, #20
 8002448:	e1f1      	b.n	800282e <__iar_annotation$$branch+0x1c>
 800244a:	bf00      	nop
 800244c:	0000838e 	.word	0x0000838e
 8002450:	0000038e 	.word	0x0000038e
 8002454:	0000f01f 	.word	0x0000f01f
 8002458:	00008014 	.word	0x00008014
 800245c:	220f      	movs	r2, #15
 800245e:	2100      	movs	r1, #0
 8002460:	7c28      	ldrb	r0, [r5, #16]
 8002462:	68ab      	ldr	r3, [r5, #8]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	4798      	blx	r3
 8002468:	e1e1      	b.n	800282e <__iar_annotation$$branch+0x1c>
 800246a:	ab05      	add	r3, sp, #20
 800246c:	aa07      	add	r2, sp, #28
 800246e:	7c28      	ldrb	r0, [r5, #16]
 8002470:	68ae      	ldr	r6, [r5, #8]
 8002472:	6976      	ldr	r6, [r6, #20]
 8002474:	47b0      	blx	r6
 8002476:	2000      	movs	r0, #0
 8002478:	9002      	str	r0, [sp, #8]
 800247a:	2003      	movs	r0, #3
 800247c:	9001      	str	r0, [sp, #4]
 800247e:	9805      	ldr	r0, [sp, #20]
 8002480:	0880      	lsrs	r0, r0, #2
 8002482:	9000      	str	r0, [sp, #0]
 8002484:	ab07      	add	r3, sp, #28
 8002486:	2201      	movs	r2, #1
 8002488:	2100      	movs	r1, #0
 800248a:	0028      	movs	r0, r5
 800248c:	f7fe ffc5 	bl	800141a <PE_Send_DataMessage>
 8002490:	e1cd      	b.n	800282e <__iar_annotation$$branch+0x1c>
 8002492:	2000      	movs	r0, #0
 8002494:	9002      	str	r0, [sp, #8]
 8002496:	2003      	movs	r0, #3
 8002498:	9001      	str	r0, [sp, #4]
 800249a:	2001      	movs	r0, #1
 800249c:	9000      	str	r0, [sp, #0]
 800249e:	002b      	movs	r3, r5
 80024a0:	332c      	adds	r3, #44	; 0x2c
 80024a2:	2206      	movs	r2, #6
 80024a4:	0028      	movs	r0, r5
 80024a6:	f7fe ffb8 	bl	800141a <PE_Send_DataMessage>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d103      	bne.n	80024b6 <__iar_annotation$$branch+0x706>
 80024ae:	215d      	movs	r1, #93	; 0x5d
 80024b0:	0028      	movs	r0, r5
 80024b2:	f7fe fee9 	bl	8001288 <PE_Notification>
 80024b6:	e1ba      	b.n	800282e <__iar_annotation$$branch+0x1c>
 80024b8:	9400      	str	r4, [sp, #0]
 80024ba:	2366      	movs	r3, #102	; 0x66
 80024bc:	2214      	movs	r2, #20
 80024be:	0028      	movs	r0, r5
 80024c0:	f7fe ff7e 	bl	80013c0 <PE_Send_CtrlMessage>
 80024c4:	2800      	cmp	r0, #0
 80024c6:	d1f6      	bne.n	80024b6 <__iar_annotation$$branch+0x706>
 80024c8:	83ee      	strh	r6, [r5, #30]
 80024ca:	241b      	movs	r4, #27
 80024cc:	214a      	movs	r1, #74	; 0x4a
 80024ce:	0028      	movs	r0, r5
 80024d0:	f7fe feda 	bl	8001288 <PE_Notification>
 80024d4:	200b      	movs	r0, #11
 80024d6:	7728      	strb	r0, [r5, #28]
 80024d8:	e1a9      	b.n	800282e <__iar_annotation$$branch+0x1c>
 80024da:	4668      	mov	r0, sp
 80024dc:	7b00      	ldrb	r0, [r0, #12]
 80024de:	2811      	cmp	r0, #17
 80024e0:	d11f      	bne.n	8002522 <__iar_annotation$$branch+0x772>
 80024e2:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80024e4:	0bc1      	lsrs	r1, r0, #15
 80024e6:	d01c      	beq.n	8002522 <__iar_annotation$$branch+0x772>
 80024e8:	06c0      	lsls	r0, r0, #27
 80024ea:	0ec0      	lsrs	r0, r0, #27
 80024ec:	280c      	cmp	r0, #12
 80024ee:	d118      	bne.n	8002522 <__iar_annotation$$branch+0x772>
 80024f0:	2304      	movs	r3, #4
 80024f2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80024f4:	1d02      	adds	r2, r0, #4
 80024f6:	210a      	movs	r1, #10
 80024f8:	7c28      	ldrb	r0, [r5, #16]
 80024fa:	68ac      	ldr	r4, [r5, #8]
 80024fc:	69a4      	ldr	r4, [r4, #24]
 80024fe:	47a0      	blx	r4
 8002500:	4668      	mov	r0, sp
 8002502:	7b00      	ldrb	r0, [r0, #12]
 8002504:	2814      	cmp	r0, #20
 8002506:	d005      	beq.n	8002514 <__iar_annotation$$branch+0x764>
 8002508:	2014      	movs	r0, #20
 800250a:	4669      	mov	r1, sp
 800250c:	7308      	strb	r0, [r1, #12]
 800250e:	0028      	movs	r0, r5
 8002510:	f7fe fa0d 	bl	800092e <PE_Clear_RxEvent>
 8002514:	214b      	movs	r1, #75	; 0x4b
 8002516:	0028      	movs	r0, r5
 8002518:	f7fe feb6 	bl	8001288 <PE_Notification>
 800251c:	2003      	movs	r0, #3
 800251e:	7468      	strb	r0, [r5, #17]
 8002520:	2400      	movs	r4, #0
 8002522:	8be8      	ldrh	r0, [r5, #30]
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	0209      	lsls	r1, r1, #8
 8002528:	4288      	cmp	r0, r1
 800252a:	d1d5      	bne.n	80024d8 <__iar_annotation$$branch+0x728>
 800252c:	e03d      	b.n	80025aa <__iar_annotation$$branch+0x7fa>
 800252e:	9400      	str	r4, [sp, #0]
 8002530:	2339      	movs	r3, #57	; 0x39
 8002532:	783a      	ldrb	r2, [r7, #0]
 8002534:	0028      	movs	r0, r5
 8002536:	f7fe ff43 	bl	80013c0 <PE_Send_CtrlMessage>
 800253a:	2800      	cmp	r0, #0
 800253c:	d1cc      	bne.n	80024d8 <__iar_annotation$$branch+0x728>
 800253e:	7878      	ldrb	r0, [r7, #1]
 8002540:	7728      	strb	r0, [r5, #28]
 8002542:	2144      	movs	r1, #68	; 0x44
 8002544:	0028      	movs	r0, r5
 8002546:	f7fe fe9f 	bl	8001288 <PE_Notification>
 800254a:	e05f      	b.n	800260c <__iar_annotation$$branch+0x85c>
 800254c:	4668      	mov	r0, sp
 800254e:	7b00      	ldrb	r0, [r0, #12]
 8002550:	2814      	cmp	r0, #20
 8002552:	d025      	beq.n	80025a0 <__iar_annotation$$branch+0x7f0>
 8002554:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002556:	0bc0      	lsrs	r0, r0, #15
 8002558:	d00e      	beq.n	8002578 <__iar_annotation$$branch+0x7c8>
 800255a:	0028      	movs	r0, r5
 800255c:	f7ff f910 	bl	8001780 <PE_Check_ExtendedMessage>
 8002560:	4668      	mov	r0, sp
 8002562:	7b00      	ldrb	r0, [r0, #12]
 8002564:	2814      	cmp	r0, #20
 8002566:	d005      	beq.n	8002574 <__iar_annotation$$branch+0x7c4>
 8002568:	2014      	movs	r0, #20
 800256a:	4669      	mov	r1, sp
 800256c:	7308      	strb	r0, [r1, #12]
 800256e:	0028      	movs	r0, r5
 8002570:	f7fe f9dd 	bl	800092e <PE_Clear_RxEvent>
 8002574:	2000      	movs	r0, #0
 8002576:	83e8      	strh	r0, [r5, #30]
 8002578:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800257a:	4936      	ldr	r1, [pc, #216]	; (8002654 <__iar_annotation$$branch+0x8a4>)
 800257c:	4001      	ands	r1, r0
 800257e:	2910      	cmp	r1, #16
 8002580:	d10e      	bne.n	80025a0 <__iar_annotation$$branch+0x7f0>
 8002582:	2003      	movs	r0, #3
 8002584:	7468      	strb	r0, [r5, #17]
 8002586:	2600      	movs	r6, #0
 8002588:	2400      	movs	r4, #0
 800258a:	4668      	mov	r0, sp
 800258c:	7b00      	ldrb	r0, [r0, #12]
 800258e:	2814      	cmp	r0, #20
 8002590:	d005      	beq.n	800259e <__iar_annotation$$branch+0x7ee>
 8002592:	2014      	movs	r0, #20
 8002594:	4669      	mov	r1, sp
 8002596:	7308      	strb	r0, [r1, #12]
 8002598:	0028      	movs	r0, r5
 800259a:	f7fe f9c8 	bl	800092e <PE_Clear_RxEvent>
 800259e:	83ee      	strh	r6, [r5, #30]
 80025a0:	8be8      	ldrh	r0, [r5, #30]
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0209      	lsls	r1, r1, #8
 80025a6:	4288      	cmp	r0, r1
 80025a8:	d102      	bne.n	80025b0 <__iar_annotation$$branch+0x800>
 80025aa:	2003      	movs	r0, #3
 80025ac:	7468      	strb	r0, [r5, #17]
 80025ae:	2400      	movs	r4, #0
 80025b0:	e13d      	b.n	800282e <__iar_annotation$$branch+0x1c>
 80025b2:	0028      	movs	r0, r5
 80025b4:	f7ff fa3a 	bl	8001a2c <PE_SubStateMachine_ExtendedMessages>
 80025b8:	e138      	b.n	800282c <__iar_annotation$$branch+0x1a>
 80025ba:	a903      	add	r1, sp, #12
 80025bc:	0028      	movs	r0, r5
 80025be:	f7fe fba9 	bl	8000d14 <PE_SubStateMachine_Generic>
 80025c2:	e133      	b.n	800282c <__iar_annotation$$branch+0x1a>
 80025c4:	a903      	add	r1, sp, #12
 80025c6:	0028      	movs	r0, r5
 80025c8:	f001 fbae 	bl	8003d28 <PE_SubStateMachine_VconnSwap>
 80025cc:	0004      	movs	r4, r0
 80025ce:	6868      	ldr	r0, [r5, #4]
 80025d0:	6800      	ldr	r0, [r0, #0]
 80025d2:	0401      	lsls	r1, r0, #16
 80025d4:	0fc9      	lsrs	r1, r1, #31
 80025d6:	d002      	beq.n	80025de <__iar_annotation$$branch+0x82e>
 80025d8:	6828      	ldr	r0, [r5, #0]
 80025da:	6801      	ldr	r1, [r0, #0]
 80025dc:	e000      	b.n	80025e0 <__iar_annotation$$branch+0x830>
 80025de:	2101      	movs	r1, #1
 80025e0:	4668      	mov	r0, sp
 80025e2:	7b40      	ldrb	r0, [r0, #13]
 80025e4:	f003 f886 	bl	80056f4 <USBPD_PRL_SOPCapability>
 80025e8:	e121      	b.n	800282e <__iar_annotation$$branch+0x1c>
 80025ea:	4668      	mov	r0, sp
 80025ec:	7b01      	ldrb	r1, [r0, #12]
 80025ee:	0028      	movs	r0, r5
 80025f0:	f002 fde0 	bl	80051b4 <PE_StateMachine_UVDM>
 80025f4:	e11b      	b.n	800282e <__iar_annotation$$branch+0x1c>
 80025f6:	2000      	movs	r0, #0
 80025f8:	9000      	str	r0, [sp, #0]
 80025fa:	2358      	movs	r3, #88	; 0x58
 80025fc:	2213      	movs	r2, #19
 80025fe:	0028      	movs	r0, r5
 8002600:	f7fe fede 	bl	80013c0 <PE_Send_CtrlMessage>
 8002604:	2800      	cmp	r0, #0
 8002606:	d103      	bne.n	8002610 <__iar_annotation$$branch+0x860>
 8002608:	2009      	movs	r0, #9
 800260a:	7728      	strb	r0, [r5, #28]
 800260c:	83ee      	strh	r6, [r5, #30]
 800260e:	241b      	movs	r4, #27
 8002610:	e10d      	b.n	800282e <__iar_annotation$$branch+0x1c>
 8002612:	6968      	ldr	r0, [r5, #20]
 8002614:	2701      	movs	r7, #1
 8002616:	0b01      	lsrs	r1, r0, #12
 8002618:	4039      	ands	r1, r7
 800261a:	d019      	beq.n	8002650 <__iar_annotation$$branch+0x8a0>
 800261c:	0b40      	lsrs	r0, r0, #13
 800261e:	4038      	ands	r0, r7
 8002620:	d007      	beq.n	8002632 <__iar_annotation$$branch+0x882>
 8002622:	215b      	movs	r1, #91	; 0x5b
 8002624:	0028      	movs	r0, r5
 8002626:	f7fe fe2f 	bl	8001288 <PE_Notification>
 800262a:	6968      	ldr	r0, [r5, #20]
 800262c:	49a9      	ldr	r1, [pc, #676]	; (80028d4 <.text_3>)
 800262e:	4001      	ands	r1, r0
 8002630:	6169      	str	r1, [r5, #20]
 8002632:	2003      	movs	r0, #3
 8002634:	7468      	strb	r0, [r5, #17]
 8002636:	7ca9      	ldrb	r1, [r5, #18]
 8002638:	2903      	cmp	r1, #3
 800263a:	d008      	beq.n	800264e <__iar_annotation$$branch+0x89e>
 800263c:	74a8      	strb	r0, [r5, #18]
 800263e:	2000      	movs	r0, #0
 8002640:	9000      	str	r0, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2203      	movs	r2, #3
 8002646:	7c29      	ldrb	r1, [r5, #16]
 8002648:	2004      	movs	r0, #4
 800264a:	6834      	ldr	r4, [r6, #0]
 800264c:	47a0      	blx	r4
 800264e:	2401      	movs	r4, #1
 8002650:	e11b      	b.n	800288a <__iar_annotation$$branch+0x78>
 8002652:	bf00      	nop
 8002654:	0000f01f 	.word	0x0000f01f
 8002658:	4668      	mov	r0, sp
 800265a:	7344      	strb	r4, [r0, #13]
 800265c:	9606      	str	r6, [sp, #24]
 800265e:	6868      	ldr	r0, [r5, #4]
 8002660:	6800      	ldr	r0, [r0, #0]
 8002662:	04c1      	lsls	r1, r0, #19
 8002664:	0fc9      	lsrs	r1, r1, #31
 8002666:	d101      	bne.n	800266c <__iar_annotation$$branch+0x4>

08002668 <__iar_annotation$$branch>:
 8002668:	f7ff fb7e 	bl	8001d68 <__iar_annotation$$branch+0x8>
 800266c:	6968      	ldr	r0, [r5, #20]
 800266e:	03c1      	lsls	r1, r0, #15
 8002670:	0fc9      	lsrs	r1, r1, #31
 8002672:	d101      	bne.n	8002678 <__iar_annotation$$branch+0x4>

08002674 <__iar_annotation$$branch>:
 8002674:	f7ff fb85 	bl	8001d82 <__iar_annotation$$branch+0x18>
 8002678:	21a7      	movs	r1, #167	; 0xa7
 800267a:	7469      	strb	r1, [r5, #17]
 800267c:	4a96      	ldr	r2, [pc, #600]	; (80028d8 <.text_4>)
 800267e:	4002      	ands	r2, r0
 8002680:	616a      	str	r2, [r5, #20]
 8002682:	2000      	movs	r0, #0
 8002684:	2232      	movs	r2, #50	; 0x32
 8002686:	54a8      	strb	r0, [r5, r2]
 8002688:	7ca8      	ldrb	r0, [r5, #18]
 800268a:	28a7      	cmp	r0, #167	; 0xa7
 800268c:	d001      	beq.n	8002692 <__iar_annotation$$branch+0x4>

0800268e <__iar_annotation$$branch>:
 800268e:	f7ff fb6e 	bl	8001d6e <__iar_annotation$$branch+0x4>
 8002692:	2402      	movs	r4, #2
 8002694:	4668      	mov	r0, sp
 8002696:	7b00      	ldrb	r0, [r0, #12]
 8002698:	2801      	cmp	r0, #1
 800269a:	d118      	bne.n	80026ce <__iar_annotation$$branch+0x40>
 800269c:	6868      	ldr	r0, [r5, #4]
 800269e:	6800      	ldr	r0, [r0, #0]
 80026a0:	0701      	lsls	r1, r0, #28
 80026a2:	0fc9      	lsrs	r1, r1, #31
 80026a4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026a6:	0680      	lsls	r0, r0, #26
 80026a8:	0fc2      	lsrs	r2, r0, #31
 80026aa:	4291      	cmp	r1, r2
 80026ac:	d10f      	bne.n	80026ce <__iar_annotation$$branch+0x40>
 80026ae:	2092      	movs	r0, #146	; 0x92
 80026b0:	7468      	strb	r0, [r5, #17]
 80026b2:	7ca8      	ldrb	r0, [r5, #18]
 80026b4:	2892      	cmp	r0, #146	; 0x92
 80026b6:	d00a      	beq.n	80026ce <__iar_annotation$$branch+0x40>
 80026b8:	2092      	movs	r0, #146	; 0x92
 80026ba:	74a8      	strb	r0, [r5, #18]
 80026bc:	2000      	movs	r0, #0
 80026be:	9000      	str	r0, [sp, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	2292      	movs	r2, #146	; 0x92
 80026c4:	7c29      	ldrb	r1, [r5, #16]
 80026c6:	2004      	movs	r0, #4
 80026c8:	4e84      	ldr	r6, [pc, #528]	; (80028dc <.text_5>)
 80026ca:	6836      	ldr	r6, [r6, #0]
 80026cc:	47b0      	blx	r6
 80026ce:	9806      	ldr	r0, [sp, #24]
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d001      	beq.n	80026d8 <__iar_annotation$$branch+0x4a>
 80026d4:	2001      	movs	r0, #1
 80026d6:	9004      	str	r0, [sp, #16]
 80026d8:	7c68      	ldrb	r0, [r5, #17]
 80026da:	4981      	ldr	r1, [pc, #516]	; (80028e0 <.text_6>)
 80026dc:	186f      	adds	r7, r5, r1
 80026de:	4eb2      	ldr	r6, [pc, #712]	; (80029a8 <.text_8>)
 80026e0:	0001      	movs	r1, r0
 80026e2:	d101      	bne.n	80026e8 <__iar_annotation$$branch+0x4>

080026e4 <__iar_annotation$$branch>:
 80026e4:	f7ff fb66 	bl	8001db4 <__iar_annotation$$branch+0x4>
 80026e8:	1e41      	subs	r1, r0, #1
 80026ea:	d03c      	beq.n	8002766 <__iar_annotation$$branch+0x82>
 80026ec:	1e89      	subs	r1, r1, #2
 80026ee:	2901      	cmp	r1, #1
 80026f0:	d800      	bhi.n	80026f4 <__iar_annotation$$branch+0x10>
 80026f2:	e540      	b.n	8002176 <__iar_annotation$$branch+0x3c6>
 80026f4:	1e89      	subs	r1, r1, #2
 80026f6:	d100      	bne.n	80026fa <__iar_annotation$$branch+0x16>
 80026f8:	e436      	b.n	8001f68 <__iar_annotation$$branch+0x1b8>
 80026fa:	390a      	subs	r1, #10
 80026fc:	d100      	bne.n	8002700 <__iar_annotation$$branch+0x1c>
 80026fe:	e438      	b.n	8001f72 <__iar_annotation$$branch+0x1c2>
 8002700:	1e49      	subs	r1, r1, #1
 8002702:	d100      	bne.n	8002706 <__iar_annotation$$branch+0x22>
 8002704:	e4c8      	b.n	8002098 <__iar_annotation$$branch+0x2e8>
 8002706:	1e49      	subs	r1, r1, #1
 8002708:	d100      	bne.n	800270c <__iar_annotation$$branch+0x28>
 800270a:	e4ca      	b.n	80020a2 <__iar_annotation$$branch+0x2f2>
 800270c:	1ec9      	subs	r1, r1, #3
 800270e:	d100      	bne.n	8002712 <__iar_annotation$$branch+0x2e>
 8002710:	e460      	b.n	8001fd4 <__iar_annotation$$branch+0x224>
 8002712:	1f09      	subs	r1, r1, #4
 8002714:	2901      	cmp	r1, #1
 8002716:	d926      	bls.n	8002766 <__iar_annotation$$branch+0x82>
 8002718:	1e89      	subs	r1, r1, #2
 800271a:	d100      	bne.n	800271e <__iar_annotation$$branch+0x3a>
 800271c:	e4f2      	b.n	8002104 <__iar_annotation$$branch+0x354>
 800271e:	1ec9      	subs	r1, r1, #3
 8002720:	d021      	beq.n	8002766 <__iar_annotation$$branch+0x82>
 8002722:	1e49      	subs	r1, r1, #1
 8002724:	d100      	bne.n	8002728 <__iar_annotation$$branch+0x44>
 8002726:	e5ef      	b.n	8002308 <__iar_annotation$$branch+0x558>
 8002728:	1f09      	subs	r1, r1, #4
 800272a:	d100      	bne.n	800272e <__iar_annotation$$branch+0x4a>
 800272c:	e532      	b.n	8002194 <__iar_annotation$$branch+0x3e4>
 800272e:	1f49      	subs	r1, r1, #5
 8002730:	2902      	cmp	r1, #2
 8002732:	d918      	bls.n	8002766 <__iar_annotation$$branch+0x82>
 8002734:	1ec9      	subs	r1, r1, #3
 8002736:	d100      	bne.n	800273a <__iar_annotation$$branch+0x56>
 8002738:	e518      	b.n	800216c <__iar_annotation$$branch+0x3bc>
 800273a:	1e49      	subs	r1, r1, #1
 800273c:	d100      	bne.n	8002740 <__iar_annotation$$branch+0x5c>
 800273e:	e6a8      	b.n	8002492 <__iar_annotation$$branch+0x6e2>
 8002740:	1e49      	subs	r1, r1, #1
 8002742:	d010      	beq.n	8002766 <__iar_annotation$$branch+0x82>
 8002744:	1e89      	subs	r1, r1, #2
 8002746:	d100      	bne.n	800274a <__iar_annotation$$branch+0x66>
 8002748:	e6f1      	b.n	800252e <__iar_annotation$$branch+0x77e>
 800274a:	1e49      	subs	r1, r1, #1
 800274c:	2901      	cmp	r1, #1
 800274e:	d90a      	bls.n	8002766 <__iar_annotation$$branch+0x82>
 8002750:	1e89      	subs	r1, r1, #2
 8002752:	d001      	beq.n	8002758 <__iar_annotation$$branch+0x74>
 8002754:	1e89      	subs	r1, r1, #2
 8002756:	2905      	cmp	r1, #5
 8002758:	d800      	bhi.n	800275c <__iar_annotation$$branch+0x78>
 800275a:	e72a      	b.n	80025b2 <__iar_annotation$$branch+0x802>
 800275c:	1f89      	subs	r1, r1, #6
 800275e:	d100      	bne.n	8002762 <__iar_annotation$$branch+0x7e>
 8002760:	e6f4      	b.n	800254c <__iar_annotation$$branch+0x79c>
 8002762:	1e49      	subs	r1, r1, #1
 8002764:	2903      	cmp	r1, #3
 8002766:	d800      	bhi.n	800276a <__iar_annotation$$branch+0x86>
 8002768:	e727      	b.n	80025ba <__iar_annotation$$branch+0x80a>
 800276a:	1f09      	subs	r1, r1, #4
 800276c:	d101      	bne.n	8002772 <__iar_annotation$$branch+0x4>

0800276e <__iar_annotation$$branch>:
 800276e:	f7ff fb39 	bl	8001de4 <__iar_annotation$$branch+0x34>
 8002772:	1e89      	subs	r1, r1, #2
 8002774:	d100      	bne.n	8002778 <__iar_annotation$$branch+0xa>
 8002776:	e45d      	b.n	8002034 <__iar_annotation$$branch+0x284>
 8002778:	1ec9      	subs	r1, r1, #3
 800277a:	d101      	bne.n	8002780 <__iar_annotation$$branch+0x4>

0800277c <__iar_annotation$$branch>:
 800277c:	f7ff fb49 	bl	8001e12 <__iar_annotation$$branch+0x62>
 8002780:	1e49      	subs	r1, r1, #1
 8002782:	d101      	bne.n	8002788 <__iar_annotation$$branch+0x4>

08002784 <__iar_annotation$$branch>:
 8002784:	f7ff fb83 	bl	8001e8e <__iar_annotation$$branch+0xde>
 8002788:	1e49      	subs	r1, r1, #1
 800278a:	d101      	bne.n	8002790 <__iar_annotation$$branch+0x4>

0800278c <__iar_annotation$$branch>:
 800278c:	f7ff fb93 	bl	8001eb6 <__iar_annotation$$branch+0x106>
 8002790:	1e49      	subs	r1, r1, #1
 8002792:	d101      	bne.n	8002798 <__iar_annotation$$branch+0x4>

08002794 <__iar_annotation$$branch>:
 8002794:	f7ff fbaa 	bl	8001eec <__iar_annotation$$branch+0x13c>
 8002798:	1e49      	subs	r1, r1, #1
 800279a:	d101      	bne.n	80027a0 <__iar_annotation$$branch+0x4>

0800279c <__iar_annotation$$branch>:
 800279c:	f7ff fbab 	bl	8001ef6 <__iar_annotation$$branch+0x146>
 80027a0:	1e89      	subs	r1, r1, #2
 80027a2:	d0a5      	beq.n	80026f0 <__iar_annotation$$branch+0xc>
 80027a4:	1ec9      	subs	r1, r1, #3
 80027a6:	d100      	bne.n	80027aa <__iar_annotation$$branch+0xe>
 80027a8:	e65f      	b.n	800246a <__iar_annotation$$branch+0x6ba>
 80027aa:	1f09      	subs	r1, r1, #4
 80027ac:	d100      	bne.n	80027b0 <__iar_annotation$$branch+0x14>
 80027ae:	e490      	b.n	80020d2 <__iar_annotation$$branch+0x322>
 80027b0:	1e89      	subs	r1, r1, #2
 80027b2:	d100      	bne.n	80027b6 <__iar_annotation$$branch+0x1a>
 80027b4:	e526      	b.n	8002204 <__iar_annotation$$branch+0x454>
 80027b6:	1e49      	subs	r1, r1, #1
 80027b8:	d100      	bne.n	80027bc <__iar_annotation$$branch+0x20>
 80027ba:	e548      	b.n	800224e <__iar_annotation$$branch+0x49e>
 80027bc:	1e49      	subs	r1, r1, #1
 80027be:	d100      	bne.n	80027c2 <__iar_annotation$$branch+0x26>
 80027c0:	e586      	b.n	80022d0 <__iar_annotation$$branch+0x520>
 80027c2:	1f09      	subs	r1, r1, #4
 80027c4:	d100      	bne.n	80027c8 <__iar_annotation$$branch+0x2c>
 80027c6:	e5ae      	b.n	8002326 <__iar_annotation$$branch+0x576>
 80027c8:	1e49      	subs	r1, r1, #1
 80027ca:	d100      	bne.n	80027ce <__iar_annotation$$branch+0x32>
 80027cc:	e5fc      	b.n	80023c8 <__iar_annotation$$branch+0x618>
 80027ce:	1e49      	subs	r1, r1, #1
 80027d0:	d100      	bne.n	80027d4 <__iar_annotation$$branch+0x38>
 80027d2:	e61b      	b.n	800240c <__iar_annotation$$branch+0x65c>
 80027d4:	3908      	subs	r1, #8
 80027d6:	2902      	cmp	r1, #2
 80027d8:	d9c5      	bls.n	8002766 <__iar_annotation$$branch+0x82>
 80027da:	1ec9      	subs	r1, r1, #3
 80027dc:	d100      	bne.n	80027e0 <__iar_annotation$$branch+0x44>
 80027de:	e66b      	b.n	80024b8 <__iar_annotation$$branch+0x708>
 80027e0:	1e49      	subs	r1, r1, #1
 80027e2:	d100      	bne.n	80027e6 <__iar_annotation$$branch+0x4a>
 80027e4:	e679      	b.n	80024da <__iar_annotation$$branch+0x72a>
 80027e6:	390e      	subs	r1, #14
 80027e8:	d0bd      	beq.n	8002766 <__iar_annotation$$branch+0x82>
 80027ea:	3912      	subs	r1, #18
 80027ec:	d100      	bne.n	80027f0 <__iar_annotation$$branch+0x54>
 80027ee:	e6fc      	b.n	80025ea <__iar_annotation$$branch+0x83a>
 80027f0:	390c      	subs	r1, #12
 80027f2:	d101      	bne.n	80027f8 <__iar_annotation$$branch+0x4>

080027f4 <__iar_annotation$$branch>:
 80027f4:	f7ff fae8 	bl	8001dc8 <__iar_annotation$$branch+0x18>
 80027f8:	1e49      	subs	r1, r1, #1
 80027fa:	2902      	cmp	r1, #2
 80027fc:	d9b3      	bls.n	8002766 <__iar_annotation$$branch+0x82>
 80027fe:	1f49      	subs	r1, r1, #5
 8002800:	d100      	bne.n	8002804 <__iar_annotation$$branch+0x10>
 8002802:	e48d      	b.n	8002120 <__iar_annotation$$branch+0x370>
 8002804:	1e49      	subs	r1, r1, #1
 8002806:	d0ae      	beq.n	8002766 <__iar_annotation$$branch+0x82>
 8002808:	1e49      	subs	r1, r1, #1
 800280a:	d100      	bne.n	800280e <__iar_annotation$$branch+0x1a>
 800280c:	e773      	b.n	80026f6 <__iar_annotation$$branch+0x12>
 800280e:	1e49      	subs	r1, r1, #1
 8002810:	d101      	bne.n	8002816 <__iar_annotation$$branch+0x4>

08002812 <__iar_annotation$$branch>:
 8002812:	f7ff fbf4 	bl	8001ffe <__iar_annotation$$branch+0x24e>
 8002816:	1e49      	subs	r1, r1, #1
 8002818:	2908      	cmp	r1, #8
 800281a:	d800      	bhi.n	800281e <__iar_annotation$$branch+0xc>
 800281c:	e6d2      	b.n	80025c4 <__iar_annotation$$branch+0x814>
 800281e:	390b      	subs	r1, #11
 8002820:	d100      	bne.n	8002824 <__iar_annotation$$branch+0x12>
 8002822:	e6e8      	b.n	80025f6 <__iar_annotation$$branch+0x846>
 8002824:	a903      	add	r1, sp, #12
 8002826:	0028      	movs	r0, r5
 8002828:	f001 fdf0 	bl	800440c <PE_StateMachine_VDM>
 800282c:	0004      	movs	r4, r0
 800282e:	7c6a      	ldrb	r2, [r5, #17]
 8002830:	4e2a      	ldr	r6, [pc, #168]	; (80028dc <.text_5>)
 8002832:	7ca8      	ldrb	r0, [r5, #18]
 8002834:	4290      	cmp	r0, r2
 8002836:	d007      	beq.n	8002848 <__iar_annotation$$branch+0x36>
 8002838:	74aa      	strb	r2, [r5, #18]
 800283a:	2000      	movs	r0, #0
 800283c:	9000      	str	r0, [sp, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	7c29      	ldrb	r1, [r5, #16]
 8002842:	2004      	movs	r0, #4
 8002844:	6837      	ldr	r7, [r6, #0]
 8002846:	47b8      	blx	r7
 8002848:	4668      	mov	r0, sp
 800284a:	7b00      	ldrb	r0, [r0, #12]
 800284c:	2814      	cmp	r0, #20
 800284e:	d100      	bne.n	8002852 <__iar_annotation$$branch+0x40>
 8002850:	e6df      	b.n	8002612 <__iar_annotation$$branch+0x862>
 8002852:	0028      	movs	r0, r5
 8002854:	f7fe f8b0 	bl	80009b8 <PE_Check_AMSConflict>
 8002858:	2815      	cmp	r0, #21
 800285a:	d109      	bne.n	8002870 <__iar_annotation$$branch+0x5e>
 800285c:	4668      	mov	r0, sp
 800285e:	7b00      	ldrb	r0, [r0, #12]
 8002860:	2814      	cmp	r0, #20
 8002862:	d005      	beq.n	8002870 <__iar_annotation$$branch+0x5e>
 8002864:	2014      	movs	r0, #20
 8002866:	4669      	mov	r1, sp
 8002868:	7308      	strb	r0, [r1, #12]
 800286a:	0028      	movs	r0, r5
 800286c:	f7fe f85f 	bl	800092e <PE_Clear_RxEvent>
 8002870:	7c6a      	ldrb	r2, [r5, #17]
 8002872:	7ca8      	ldrb	r0, [r5, #18]
 8002874:	4290      	cmp	r0, r2
 8002876:	d007      	beq.n	8002888 <__iar_annotation$$branch+0x76>
 8002878:	74aa      	strb	r2, [r5, #18]
 800287a:	2000      	movs	r0, #0
 800287c:	9000      	str	r0, [sp, #0]
 800287e:	2300      	movs	r3, #0
 8002880:	7c29      	ldrb	r1, [r5, #16]
 8002882:	2004      	movs	r0, #4
 8002884:	6834      	ldr	r4, [r6, #0]
 8002886:	47a0      	blx	r4
 8002888:	2400      	movs	r4, #0
 800288a:	6968      	ldr	r0, [r5, #20]
 800288c:	4947      	ldr	r1, [pc, #284]	; (80029ac <.text_9>)
 800288e:	4001      	ands	r1, r0
 8002890:	6169      	str	r1, [r5, #20]
 8002892:	9804      	ldr	r0, [sp, #16]
 8002894:	2800      	cmp	r0, #0
 8002896:	d017      	beq.n	80028c8 <__iar_annotation$$branch+0xb6>
 8002898:	4845      	ldr	r0, [pc, #276]	; (80029b0 <.text_10>)
 800289a:	6800      	ldr	r0, [r0, #0]
 800289c:	4945      	ldr	r1, [pc, #276]	; (80029b4 <.text_11>)
 800289e:	4288      	cmp	r0, r1
 80028a0:	d012      	beq.n	80028c8 <__iar_annotation$$branch+0xb6>
 80028a2:	4845      	ldr	r0, [pc, #276]	; (80029b8 <.text_12>)
 80028a4:	7c29      	ldrb	r1, [r5, #16]
 80028a6:	0089      	lsls	r1, r1, #2
 80028a8:	5841      	ldr	r1, [r0, r1]
 80028aa:	694a      	ldr	r2, [r1, #20]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	02db      	lsls	r3, r3, #11
 80028b0:	18d2      	adds	r2, r2, r3
 80028b2:	614a      	str	r2, [r1, #20]
 80028b4:	7c29      	ldrb	r1, [r5, #16]
 80028b6:	0089      	lsls	r1, r1, #2
 80028b8:	5840      	ldr	r0, [r0, r1]
 80028ba:	6941      	ldr	r1, [r0, #20]
 80028bc:	0c8a      	lsrs	r2, r1, #18
 80028be:	2a08      	cmp	r2, #8
 80028c0:	d302      	bcc.n	80028c8 <__iar_annotation$$branch+0xb6>
 80028c2:	0389      	lsls	r1, r1, #14
 80028c4:	0b89      	lsrs	r1, r1, #14
 80028c6:	6141      	str	r1, [r0, #20]
 80028c8:	2c00      	cmp	r4, #0
 80028ca:	d100      	bne.n	80028ce <__iar_annotation$$branch+0xbc>
 80028cc:	e6c7      	b.n	800265e <__iar_annotation$$branch+0x8ae>
 80028ce:	0020      	movs	r0, r4
 80028d0:	b00f      	add	sp, #60	; 0x3c
 80028d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028d4 <.text_3>:
 80028d4:	ffffdfff 	.word	0xffffdfff

080028d8 <.text_4>:
 80028d8:	fffeffff 	.word	0xfffeffff

080028dc <.text_5>:
 80028dc:	20000000 	.word	0x20000000

080028e0 <.text_6>:
 80028e0:	0000025e 	.word	0x0000025e

080028e4 <PE_StateMachine_SNK_SelectCapa>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	0004      	movs	r4, r0
 80028e8:	000e      	movs	r6, r1
 80028ea:	2502      	movs	r5, #2
 80028ec:	7830      	ldrb	r0, [r6, #0]
 80028ee:	2811      	cmp	r0, #17
 80028f0:	d150      	bne.n	8002994 <PE_StateMachine_SNK_SelectCapa+0xb0>
 80028f2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80028f4:	21f0      	movs	r1, #240	; 0xf0
 80028f6:	0209      	lsls	r1, r1, #8
 80028f8:	4001      	ands	r1, r0
 80028fa:	d14b      	bne.n	8002994 <PE_StateMachine_SNK_SelectCapa+0xb0>
 80028fc:	21fa      	movs	r1, #250	; 0xfa
 80028fe:	0049      	lsls	r1, r1, #1
 8002900:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <.text_13>)
 8002902:	06c3      	lsls	r3, r0, #27
 8002904:	0edb      	lsrs	r3, r3, #27
 8002906:	1e9b      	subs	r3, r3, #2
 8002908:	2b01      	cmp	r3, #1
 800290a:	d904      	bls.n	8002916 <PE_StateMachine_SNK_SelectCapa+0x32>
 800290c:	1e9b      	subs	r3, r3, #2
 800290e:	d00e      	beq.n	800292e <PE_StateMachine_SNK_SelectCapa+0x4a>
 8002910:	3b08      	subs	r3, #8
 8002912:	d00c      	beq.n	800292e <PE_StateMachine_SNK_SelectCapa+0x4a>
 8002914:	e027      	b.n	8002966 <PE_StateMachine_SNK_SelectCapa+0x82>
 8002916:	83e2      	strh	r2, [r4, #30]
 8002918:	000d      	movs	r5, r1
 800291a:	2104      	movs	r1, #4
 800291c:	0020      	movs	r0, r4
 800291e:	f7fe fcd8 	bl	80012d2 <PE_SetPowerNegotiation>
 8002922:	2047      	movs	r0, #71	; 0x47
 8002924:	7460      	strb	r0, [r4, #17]
 8002926:	7830      	ldrb	r0, [r6, #0]
 8002928:	2814      	cmp	r0, #20
 800292a:	d117      	bne.n	800295c <PE_StateMachine_SNK_SelectCapa+0x78>
 800292c:	e01b      	b.n	8002966 <PE_StateMachine_SNK_SelectCapa+0x82>
 800292e:	6863      	ldr	r3, [r4, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	055b      	lsls	r3, r3, #21
 8002934:	0f5b      	lsrs	r3, r3, #29
 8002936:	2b03      	cmp	r3, #3
 8002938:	d004      	beq.n	8002944 <PE_StateMachine_SNK_SelectCapa+0x60>
 800293a:	2043      	movs	r0, #67	; 0x43
 800293c:	7460      	strb	r0, [r4, #17]
 800293e:	83e2      	strh	r2, [r4, #30]
 8002940:	000d      	movs	r5, r1
 8002942:	e008      	b.n	8002956 <PE_StateMachine_SNK_SelectCapa+0x72>
 8002944:	2500      	movs	r5, #0
 8002946:	06c0      	lsls	r0, r0, #27
 8002948:	0ec0      	lsrs	r0, r0, #27
 800294a:	280c      	cmp	r0, #12
 800294c:	d101      	bne.n	8002952 <PE_StateMachine_SNK_SelectCapa+0x6e>
 800294e:	2049      	movs	r0, #73	; 0x49
 8002950:	e000      	b.n	8002954 <PE_StateMachine_SNK_SelectCapa+0x70>
 8002952:	2003      	movs	r0, #3
 8002954:	7460      	strb	r0, [r4, #17]
 8002956:	7830      	ldrb	r0, [r6, #0]
 8002958:	2814      	cmp	r0, #20
 800295a:	d004      	beq.n	8002966 <PE_StateMachine_SNK_SelectCapa+0x82>
 800295c:	2014      	movs	r0, #20
 800295e:	7030      	strb	r0, [r6, #0]
 8002960:	0020      	movs	r0, r4
 8002962:	f7fd ffe4 	bl	800092e <PE_Clear_RxEvent>
 8002966:	2034      	movs	r0, #52	; 0x34
 8002968:	5c20      	ldrb	r0, [r4, r0]
 800296a:	06c0      	lsls	r0, r0, #27
 800296c:	0ec0      	lsrs	r0, r0, #27
 800296e:	2802      	cmp	r0, #2
 8002970:	d008      	beq.n	8002984 <PE_StateMachine_SNK_SelectCapa+0xa0>
 8002972:	2803      	cmp	r0, #3
 8002974:	d004      	beq.n	8002980 <PE_StateMachine_SNK_SelectCapa+0x9c>
 8002976:	2804      	cmp	r0, #4
 8002978:	d006      	beq.n	8002988 <PE_StateMachine_SNK_SelectCapa+0xa4>
 800297a:	280c      	cmp	r0, #12
 800297c:	d006      	beq.n	800298c <PE_StateMachine_SNK_SelectCapa+0xa8>
 800297e:	e009      	b.n	8002994 <PE_StateMachine_SNK_SelectCapa+0xb0>
 8002980:	2101      	movs	r1, #1
 8002982:	e004      	b.n	800298e <PE_StateMachine_SNK_SelectCapa+0xaa>
 8002984:	2104      	movs	r1, #4
 8002986:	e002      	b.n	800298e <PE_StateMachine_SNK_SelectCapa+0xaa>
 8002988:	2102      	movs	r1, #2
 800298a:	e000      	b.n	800298e <PE_StateMachine_SNK_SelectCapa+0xaa>
 800298c:	2103      	movs	r1, #3
 800298e:	0020      	movs	r0, r4
 8002990:	f7fe fc7a 	bl	8001288 <PE_Notification>
 8002994:	8be0      	ldrh	r0, [r4, #30]
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0209      	lsls	r1, r1, #8
 800299a:	4288      	cmp	r0, r1
 800299c:	d102      	bne.n	80029a4 <PE_StateMachine_SNK_SelectCapa+0xc0>
 800299e:	200f      	movs	r0, #15
 80029a0:	7460      	strb	r0, [r4, #17]
 80029a2:	2500      	movs	r5, #0
 80029a4:	0028      	movs	r0, r5
 80029a6:	bd70      	pop	{r4, r5, r6, pc}

080029a8 <.text_8>:
 80029a8:	0000801b 	.word	0x0000801b

080029ac <.text_9>:
 80029ac:	ffffefff 	.word	0xffffefff

080029b0 <.text_10>:
 80029b0:	200001dc 	.word	0x200001dc

080029b4 <.text_11>:
 80029b4:	b5e8b5cd 	.word	0xb5e8b5cd

080029b8 <.text_12>:
 80029b8:	200001e0 	.word	0x200001e0

080029bc <.text_13>:
 80029bc:	000081f4 	.word	0x000081f4

080029c0 <PE_StateMachine_SNK_ReadyWait>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	0004      	movs	r4, r0
 80029c4:	000e      	movs	r6, r1
 80029c6:	2502      	movs	r5, #2
 80029c8:	7c20      	ldrb	r0, [r4, #16]
 80029ca:	4669      	mov	r1, sp
 80029cc:	7008      	strb	r0, [r1, #0]
 80029ce:	7831      	ldrb	r1, [r6, #0]
 80029d0:	2914      	cmp	r1, #20
 80029d2:	d00b      	beq.n	80029ec <PE_StateMachine_SNK_ReadyWait+0x2c>
 80029d4:	0020      	movs	r0, r4
 80029d6:	f7ff f951 	bl	8001c7c <PE_ManageRXEvent>
 80029da:	7830      	ldrb	r0, [r6, #0]
 80029dc:	2814      	cmp	r0, #20
 80029de:	d07d      	beq.n	8002adc <PE_StateMachine_SNK_ReadyWait+0x11c>
 80029e0:	2014      	movs	r0, #20
 80029e2:	7030      	strb	r0, [r6, #0]
 80029e4:	0020      	movs	r0, r4
 80029e6:	f7fd ffa2 	bl	800092e <PE_Clear_RxEvent>
 80029ea:	e077      	b.n	8002adc <PE_StateMachine_SNK_ReadyWait+0x11c>
 80029ec:	6962      	ldr	r2, [r4, #20]
 80029ee:	0c91      	lsrs	r1, r2, #18
 80029f0:	270f      	movs	r7, #15
 80029f2:	2500      	movs	r5, #0
 80029f4:	2900      	cmp	r1, #0
 80029f6:	d01c      	beq.n	8002a32 <PE_StateMachine_SNK_ReadyWait+0x72>
 80029f8:	8c20      	ldrh	r0, [r4, #32]
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	0212      	lsls	r2, r2, #8
 80029fe:	4290      	cmp	r0, r2
 8002a00:	d108      	bne.n	8002a14 <PE_StateMachine_SNK_ReadyWait+0x54>
 8002a02:	7467      	strb	r7, [r4, #17]
 8002a04:	2098      	movs	r0, #152	; 0x98
 8002a06:	0080      	lsls	r0, r0, #2
 8002a08:	5c20      	ldrb	r0, [r4, r0]
 8002a0a:	1c40      	adds	r0, r0, #1
 8002a0c:	2198      	movs	r1, #152	; 0x98
 8002a0e:	0089      	lsls	r1, r1, #2
 8002a10:	5460      	strb	r0, [r4, r1]
 8002a12:	e063      	b.n	8002adc <PE_StateMachine_SNK_ReadyWait+0x11c>
 8002a14:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002a16:	0500      	lsls	r0, r0, #20
 8002a18:	0f40      	lsrs	r0, r0, #29
 8002a1a:	1842      	adds	r2, r0, r1
 8002a1c:	2333      	movs	r3, #51	; 0x33
 8002a1e:	435a      	muls	r2, r3
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	4313      	orrs	r3, r2
 8002a26:	8423      	strh	r3, [r4, #32]
 8002a28:	1845      	adds	r5, r0, r1
 8002a2a:	2033      	movs	r0, #51	; 0x33
 8002a2c:	4345      	muls	r5, r0
 8002a2e:	b2ad      	uxth	r5, r5
 8002a30:	e054      	b.n	8002adc <PE_StateMachine_SNK_ReadyWait+0x11c>
 8002a32:	2680      	movs	r6, #128	; 0x80
 8002a34:	01f6      	lsls	r6, r6, #7
 8002a36:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8002a38:	0073      	lsls	r3, r6, #1
 8002a3a:	4299      	cmp	r1, r3
 8002a3c:	d104      	bne.n	8002a48 <PE_StateMachine_SNK_ReadyWait+0x88>
 8002a3e:	2045      	movs	r0, #69	; 0x45
 8002a40:	7460      	strb	r0, [r4, #17]
 8002a42:	4316      	orrs	r6, r2
 8002a44:	6166      	str	r6, [r4, #20]
 8002a46:	e049      	b.n	8002adc <PE_StateMachine_SNK_ReadyWait+0x11c>
 8002a48:	f7fd ff93 	bl	8000972 <PE_PRL_Control_RxEvent>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d12b      	bne.n	8002aa8 <PE_StateMachine_SNK_ReadyWait+0xe8>
 8002a50:	2032      	movs	r0, #50	; 0x32
 8002a52:	5c20      	ldrb	r0, [r4, r0]
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d027      	beq.n	8002aa8 <PE_StateMachine_SNK_ReadyWait+0xe8>
 8002a58:	4668      	mov	r0, sp
 8002a5a:	7800      	ldrb	r0, [r0, #0]
 8002a5c:	f002 fe3e 	bl	80056dc <USBPD_PRL_IsResistor_SinkTxOK>
 8002a60:	2801      	cmp	r0, #1
 8002a62:	d105      	bne.n	8002a70 <PE_StateMachine_SNK_ReadyWait+0xb0>
 8002a64:	6860      	ldr	r0, [r4, #4]
 8002a66:	7800      	ldrb	r0, [r0, #0]
 8002a68:	0780      	lsls	r0, r0, #30
 8002a6a:	0f80      	lsrs	r0, r0, #30
 8002a6c:	2802      	cmp	r0, #2
 8002a6e:	d005      	beq.n	8002a7c <PE_StateMachine_SNK_ReadyWait+0xbc>
 8002a70:	6860      	ldr	r0, [r4, #4]
 8002a72:	7800      	ldrb	r0, [r0, #0]
 8002a74:	0780      	lsls	r0, r0, #30
 8002a76:	0f80      	lsrs	r0, r0, #30
 8002a78:	2801      	cmp	r0, #1
 8002a7a:	d115      	bne.n	8002aa8 <PE_StateMachine_SNK_ReadyWait+0xe8>
 8002a7c:	2033      	movs	r0, #51	; 0x33
 8002a7e:	5c20      	ldrb	r0, [r4, r0]
 8002a80:	2131      	movs	r1, #49	; 0x31
 8002a82:	5460      	strb	r0, [r4, r1]
 8002a84:	2032      	movs	r0, #50	; 0x32
 8002a86:	5c20      	ldrb	r0, [r4, r0]
 8002a88:	7460      	strb	r0, [r4, #17]
 8002a8a:	2845      	cmp	r0, #69	; 0x45
 8002a8c:	d102      	bne.n	8002a94 <PE_StateMachine_SNK_ReadyWait+0xd4>
 8002a8e:	6960      	ldr	r0, [r4, #20]
 8002a90:	4306      	orrs	r6, r0
 8002a92:	6166      	str	r6, [r4, #20]
 8002a94:	2032      	movs	r0, #50	; 0x32
 8002a96:	5425      	strb	r5, [r4, r0]
 8002a98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a9a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002a9c:	6960      	ldr	r0, [r4, #20]
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	0189      	lsls	r1, r1, #6
 8002aa2:	4301      	orrs	r1, r0
 8002aa4:	6161      	str	r1, [r4, #20]
 8002aa6:	e00c      	b.n	8002ac2 <PE_StateMachine_SNK_ReadyWait+0x102>
 8002aa8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002aaa:	0071      	lsls	r1, r6, #1
 8002aac:	4288      	cmp	r0, r1
 8002aae:	d10a      	bne.n	8002ac6 <PE_StateMachine_SNK_ReadyWait+0x106>
 8002ab0:	8465      	strh	r5, [r4, #34]	; 0x22
 8002ab2:	2098      	movs	r0, #152	; 0x98
 8002ab4:	0080      	lsls	r0, r0, #2
 8002ab6:	1820      	adds	r0, r4, r0
 8002ab8:	7881      	ldrb	r1, [r0, #2]
 8002aba:	1c49      	adds	r1, r1, #1
 8002abc:	7081      	strb	r1, [r0, #2]
 8002abe:	2005      	movs	r0, #5
 8002ac0:	7460      	strb	r0, [r4, #17]
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002ac6:	0020      	movs	r0, r4
 8002ac8:	f7fe fc28 	bl	800131c <PE_CalculateMinTiming>
 8002acc:	2132      	movs	r1, #50	; 0x32
 8002ace:	5c61      	ldrb	r1, [r4, r1]
 8002ad0:	2900      	cmp	r1, #0
 8002ad2:	d002      	beq.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x11a>
 8002ad4:	280f      	cmp	r0, #15
 8002ad6:	d300      	bcc.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x11a>
 8002ad8:	200f      	movs	r0, #15
 8002ada:	0005      	movs	r5, r0
 8002adc:	0028      	movs	r0, r5
 8002ade:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002ae0 <USBPD_PE_StateMachine_SRC>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	0004      	movs	r4, r0
 8002ae6:	48c8      	ldr	r0, [pc, #800]	; (8002e08 <__iar_annotation$$branch+0x21c>)
 8002ae8:	00a1      	lsls	r1, r4, #2
 8002aea:	5845      	ldr	r5, [r0, r1]
 8002aec:	2000      	movs	r0, #0
 8002aee:	9004      	str	r0, [sp, #16]
 8002af0:	8be8      	ldrh	r0, [r5, #30]
 8002af2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8002af4:	050a      	lsls	r2, r1, #20
 8002af6:	0f52      	lsrs	r2, r2, #29
 8002af8:	1880      	adds	r0, r0, r2
 8002afa:	06c9      	lsls	r1, r1, #27
 8002afc:	0ec9      	lsrs	r1, r1, #27
 8002afe:	1846      	adds	r6, r0, r1
 8002b00:	b2b6      	uxth	r6, r6
 8002b02:	7c68      	ldrb	r0, [r5, #17]
 8002b04:	2848      	cmp	r0, #72	; 0x48
 8002b06:	d134      	bne.n	8002b72 <USBPD_PE_StateMachine_SRC+0x92>
 8002b08:	0028      	movs	r0, r5
 8002b0a:	f7fd ffef 	bl	8000aec <PE_Reset_ZI>
 8002b0e:	0028      	movs	r0, r5
 8002b10:	f7fe f822 	bl	8000b58 <PE_Reset_Counter>
 8002b14:	6828      	ldr	r0, [r5, #0]
 8002b16:	7900      	ldrb	r0, [r0, #4]
 8002b18:	0783      	lsls	r3, r0, #30
 8002b1a:	0f9b      	lsrs	r3, r3, #30
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2101      	movs	r1, #1
 8002b20:	7c28      	ldrb	r0, [r5, #16]
 8002b22:	f002 fd76 	bl	8005612 <USBPD_PRL_SetHeader>
 8002b26:	6868      	ldr	r0, [r5, #4]
 8002b28:	6801      	ldr	r1, [r0, #0]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	6002      	str	r2, [r0, #0]
 8002b30:	6868      	ldr	r0, [r5, #4]
 8002b32:	6801      	ldr	r1, [r0, #0]
 8002b34:	2203      	movs	r2, #3
 8002b36:	4391      	bics	r1, r2
 8002b38:	682a      	ldr	r2, [r5, #0]
 8002b3a:	7912      	ldrb	r2, [r2, #4]
 8002b3c:	0792      	lsls	r2, r2, #30
 8002b3e:	0f92      	lsrs	r2, r2, #30
 8002b40:	430a      	orrs	r2, r1
 8002b42:	6002      	str	r2, [r0, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	7c28      	ldrb	r0, [r5, #16]
 8002b48:	f002 fdd4 	bl	80056f4 <USBPD_PRL_SOPCapability>
 8002b4c:	7c28      	ldrb	r0, [r5, #16]
 8002b4e:	f002 ff7b 	bl	8005a48 <USBPD_PRL_Reset>
 8002b52:	2002      	movs	r0, #2
 8002b54:	7468      	strb	r0, [r5, #17]
 8002b56:	7ca8      	ldrb	r0, [r5, #18]
 8002b58:	2802      	cmp	r0, #2
 8002b5a:	d00a      	beq.n	8002b72 <USBPD_PE_StateMachine_SRC+0x92>
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	74a8      	strb	r0, [r5, #18]
 8002b60:	2000      	movs	r0, #0
 8002b62:	9000      	str	r0, [sp, #0]
 8002b64:	2300      	movs	r3, #0
 8002b66:	2202      	movs	r2, #2
 8002b68:	7c29      	ldrb	r1, [r5, #16]
 8002b6a:	2004      	movs	r0, #4
 8002b6c:	4fa7      	ldr	r7, [pc, #668]	; (8002e0c <__iar_annotation$$branch+0x220>)
 8002b6e:	683f      	ldr	r7, [r7, #0]
 8002b70:	47b8      	blx	r7
 8002b72:	6968      	ldr	r0, [r5, #20]
 8002b74:	0381      	lsls	r1, r0, #14
 8002b76:	0fc9      	lsrs	r1, r1, #31
 8002b78:	d006      	beq.n	8002b88 <USBPD_PE_StateMachine_SRC+0xa8>
 8002b7a:	49a5      	ldr	r1, [pc, #660]	; (8002e10 <__iar_annotation$$branch+0x224>)
 8002b7c:	4001      	ands	r1, r0
 8002b7e:	6169      	str	r1, [r5, #20]
 8002b80:	2164      	movs	r1, #100	; 0x64
 8002b82:	0028      	movs	r0, r5
 8002b84:	f7fe fb80 	bl	8001288 <PE_Notification>
 8002b88:	0028      	movs	r0, r5
 8002b8a:	f7fd fe99 	bl	80008c0 <PE_Get_RxEvent>
 8002b8e:	4669      	mov	r1, sp
 8002b90:	7308      	strb	r0, [r1, #12]
 8002b92:	4668      	mov	r0, sp
 8002b94:	7b00      	ldrb	r0, [r0, #12]
 8002b96:	2803      	cmp	r0, #3
 8002b98:	d001      	beq.n	8002b9e <__iar_annotation$$branch+0x4>

08002b9a <__iar_annotation$$branch>:
 8002b9a:	f000 fcab 	bl	80034f4 <__iar_annotation$$branch+0x908>
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	e000      	b.n	8002ba4 <__iar_annotation$$branch>
 8002ba2:	2000      	movs	r0, #0

08002ba4 <__iar_annotation$$branch>:
 8002ba4:	f000 fdff 	bl	80037a6 <__iar_annotation$$branch+0xbe>
 8002ba8:	74a8      	strb	r0, [r5, #18]
 8002baa:	2000      	movs	r0, #0
 8002bac:	9000      	str	r0, [sp, #0]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	22a6      	movs	r2, #166	; 0xa6
 8002bb2:	7c29      	ldrb	r1, [r5, #16]
 8002bb4:	2004      	movs	r0, #4
 8002bb6:	4c95      	ldr	r4, [pc, #596]	; (8002e0c <__iar_annotation$$branch+0x220>)
 8002bb8:	6824      	ldr	r4, [r4, #0]
 8002bba:	47a0      	blx	r4
 8002bbc:	2402      	movs	r4, #2
 8002bbe:	2032      	movs	r0, #50	; 0x32
 8002bc0:	5c2a      	ldrb	r2, [r5, r0]
 8002bc2:	2a0f      	cmp	r2, #15
 8002bc4:	d001      	beq.n	8002bca <__iar_annotation$$branch+0x26>
 8002bc6:	2a14      	cmp	r2, #20
 8002bc8:	d110      	bne.n	8002bec <__iar_annotation$$branch>
 8002bca:	746a      	strb	r2, [r5, #17]
 8002bcc:	2000      	movs	r0, #0
 8002bce:	2332      	movs	r3, #50	; 0x32
 8002bd0:	54e8      	strb	r0, [r5, r3]
 8002bd2:	62e8      	str	r0, [r5, #44]	; 0x2c
 8002bd4:	7ca8      	ldrb	r0, [r5, #18]
 8002bd6:	4290      	cmp	r0, r2
 8002bd8:	d008      	beq.n	8002bec <__iar_annotation$$branch>
 8002bda:	74aa      	strb	r2, [r5, #18]
 8002bdc:	2000      	movs	r0, #0
 8002bde:	9000      	str	r0, [sp, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	7c29      	ldrb	r1, [r5, #16]
 8002be4:	2004      	movs	r0, #4
 8002be6:	4e89      	ldr	r6, [pc, #548]	; (8002e0c <__iar_annotation$$branch+0x220>)
 8002be8:	6836      	ldr	r6, [r6, #0]
 8002bea:	47b0      	blx	r6

08002bec <__iar_annotation$$branch>:
 8002bec:	f000 fca9 	bl	8003542 <__iar_annotation$$branch+0x6>
 8002bf0:	6868      	ldr	r0, [r5, #4]
 8002bf2:	6801      	ldr	r1, [r0, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	4391      	bics	r1, r2
 8002bf8:	6001      	str	r1, [r0, #0]
 8002bfa:	215f      	movs	r1, #95	; 0x5f
 8002bfc:	0028      	movs	r0, r5
 8002bfe:	f7fe fb43 	bl	8001288 <PE_Notification>
 8002c02:	2400      	movs	r4, #0
 8002c04:	43e4      	mvns	r4, r4
 8002c06:	e1bb      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002c08:	6868      	ldr	r0, [r5, #4]
 8002c0a:	6801      	ldr	r1, [r0, #0]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	4391      	bics	r1, r2
 8002c10:	6001      	str	r1, [r0, #0]
 8002c12:	68a8      	ldr	r0, [r5, #8]
 8002c14:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d0f3      	beq.n	8002c02 <__iar_annotation$$branch+0x16>
 8002c1a:	7c28      	ldrb	r0, [r5, #16]
 8002c1c:	4788      	blx	r1
 8002c1e:	e7f0      	b.n	8002c02 <__iar_annotation$$branch+0x16>
 8002c20:	2701      	movs	r7, #1
 8002c22:	6868      	ldr	r0, [r5, #4]
 8002c24:	6800      	ldr	r0, [r0, #0]
 8002c26:	0bc0      	lsrs	r0, r0, #15
 8002c28:	4038      	ands	r0, r7
 8002c2a:	d002      	beq.n	8002c32 <__iar_annotation$$branch+0x46>
 8002c2c:	6828      	ldr	r0, [r5, #0]
 8002c2e:	6801      	ldr	r1, [r0, #0]
 8002c30:	e000      	b.n	8002c34 <__iar_annotation$$branch+0x48>
 8002c32:	2101      	movs	r1, #1
 8002c34:	4668      	mov	r0, sp
 8002c36:	7b40      	ldrb	r0, [r0, #13]
 8002c38:	f002 fd5c 	bl	80056f4 <USBPD_PRL_SOPCapability>
 8002c3c:	6868      	ldr	r0, [r5, #4]
 8002c3e:	6801      	ldr	r1, [r0, #0]
 8002c40:	0b0a      	lsrs	r2, r1, #12
 8002c42:	403a      	ands	r2, r7
 8002c44:	d02a      	beq.n	8002c9c <__iar_annotation$$branch+0xb0>
 8002c46:	078a      	lsls	r2, r1, #30
 8002c48:	0f92      	lsrs	r2, r2, #30
 8002c4a:	2a01      	cmp	r2, #1
 8002c4c:	d101      	bne.n	8002c52 <__iar_annotation$$branch+0x66>
 8002c4e:	2200      	movs	r2, #0
 8002c50:	e000      	b.n	8002c54 <__iar_annotation$$branch+0x68>
 8002c52:	2201      	movs	r2, #1
 8002c54:	2320      	movs	r3, #32
 8002c56:	4399      	bics	r1, r3
 8002c58:	0152      	lsls	r2, r2, #5
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	6002      	str	r2, [r0, #0]
 8002c5e:	2000      	movs	r0, #0
 8002c60:	70f0      	strb	r0, [r6, #3]
 8002c62:	2101      	movs	r1, #1
 8002c64:	0028      	movs	r0, r5
 8002c66:	f7fe fb34 	bl	80012d2 <PE_SetPowerNegotiation>
 8002c6a:	6868      	ldr	r0, [r5, #4]
 8002c6c:	6800      	ldr	r0, [r0, #0]
 8002c6e:	0901      	lsrs	r1, r0, #4
 8002c70:	4039      	ands	r1, r7
 8002c72:	d004      	beq.n	8002c7e <__iar_annotation$$branch+0x92>
 8002c74:	48c3      	ldr	r0, [pc, #780]	; (8002f84 <__iar_annotation$$branch+0x398>)
 8002c76:	83e8      	strh	r0, [r5, #30]
 8002c78:	2414      	movs	r4, #20
 8002c7a:	2006      	movs	r0, #6
 8002c7c:	e17f      	b.n	8002f7e <__iar_annotation$$branch+0x392>
 8002c7e:	0bc0      	lsrs	r0, r0, #15
 8002c80:	4007      	ands	r7, r0
 8002c82:	d04b      	beq.n	8002d1c <__iar_annotation$$branch+0x130>
 8002c84:	6828      	ldr	r0, [r5, #0]
 8002c86:	7800      	ldrb	r0, [r0, #0]
 8002c88:	0780      	lsls	r0, r0, #30
 8002c8a:	d547      	bpl.n	8002d1c <__iar_annotation$$branch+0x130>
 8002c8c:	68e8      	ldr	r0, [r5, #12]
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d044      	beq.n	8002d1c <__iar_annotation$$branch+0x130>
 8002c92:	7930      	ldrb	r0, [r6, #4]
 8002c94:	1c40      	adds	r0, r0, #1
 8002c96:	7130      	strb	r0, [r6, #4]
 8002c98:	2005      	movs	r0, #5
 8002c9a:	e170      	b.n	8002f7e <__iar_annotation$$branch+0x392>
 8002c9c:	2121      	movs	r1, #33	; 0x21
 8002c9e:	0028      	movs	r0, r5
 8002ca0:	f7fe faf2 	bl	8001288 <PE_Notification>
 8002ca4:	e16a      	b.n	8002f7c <__iar_annotation$$branch+0x390>
 8002ca6:	a903      	add	r1, sp, #12
 8002ca8:	0028      	movs	r0, r5
 8002caa:	f000 feeb 	bl	8003a84 <PE_StateMachine_VDMCable>
 8002cae:	e33a      	b.n	8003326 <__iar_annotation$$branch+0x73a>
 8002cb0:	8be8      	ldrh	r0, [r5, #30]
 8002cb2:	03a1      	lsls	r1, r4, #14
 8002cb4:	4288      	cmp	r0, r1
 8002cb6:	d000      	beq.n	8002cba <__iar_annotation$$branch+0xce>
 8002cb8:	e162      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002cba:	2007      	movs	r0, #7
 8002cbc:	e1f1      	b.n	80030a2 <__iar_annotation$$branch+0x4b6>
 8002cbe:	0028      	movs	r0, r5
 8002cc0:	f000 fdf8 	bl	80038b4 <PE_StateMachine_SRC_SendCapa>
 8002cc4:	e32f      	b.n	8003326 <__iar_annotation$$branch+0x73a>
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f000 fea4 	bl	8003a14 <PE_Send_SRCCapabilities>
 8002ccc:	2805      	cmp	r0, #5
 8002cce:	d10a      	bne.n	8002ce6 <__iar_annotation$$branch+0xfa>
 8002cd0:	2104      	movs	r1, #4
 8002cd2:	0028      	movs	r0, r5
 8002cd4:	f7fe fafd 	bl	80012d2 <PE_SetPowerNegotiation>
 8002cd8:	2001      	movs	r0, #1
 8002cda:	7728      	strb	r0, [r5, #28]
 8002cdc:	83ef      	strh	r7, [r5, #30]
 8002cde:	2016      	movs	r0, #22
 8002ce0:	7468      	strb	r0, [r5, #17]
 8002ce2:	210f      	movs	r1, #15
 8002ce4:	e398      	b.n	8003418 <__iar_annotation$$branch+0x82c>
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	7728      	strb	r0, [r5, #28]
 8002cea:	2011      	movs	r0, #17
 8002cec:	e147      	b.n	8002f7e <__iar_annotation$$branch+0x392>
 8002cee:	03a0      	lsls	r0, r4, #14
 8002cf0:	8c69      	ldrh	r1, [r5, #34]	; 0x22
 8002cf2:	4281      	cmp	r1, r0
 8002cf4:	d106      	bne.n	8002d04 <__iar_annotation$$branch+0x118>
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	8469      	strh	r1, [r5, #34]	; 0x22
 8002cfa:	7931      	ldrb	r1, [r6, #4]
 8002cfc:	1c49      	adds	r1, r1, #1
 8002cfe:	7131      	strb	r1, [r6, #4]
 8002d00:	2105      	movs	r1, #5
 8002d02:	7469      	strb	r1, [r5, #17]
 8002d04:	8be9      	ldrh	r1, [r5, #30]
 8002d06:	4281      	cmp	r1, r0
 8002d08:	d000      	beq.n	8002d0c <__iar_annotation$$branch+0x120>
 8002d0a:	e139      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002d0c:	6828      	ldr	r0, [r5, #0]
 8002d0e:	6840      	ldr	r0, [r0, #4]
 8002d10:	0601      	lsls	r1, r0, #24
 8002d12:	0fc9      	lsrs	r1, r1, #31
 8002d14:	d002      	beq.n	8002d1c <__iar_annotation$$branch+0x130>
 8002d16:	78f0      	ldrb	r0, [r6, #3]
 8002d18:	1c40      	adds	r0, r0, #1
 8002d1a:	70f0      	strb	r0, [r6, #3]
 8002d1c:	2007      	movs	r0, #7
 8002d1e:	e12e      	b.n	8002f7e <__iar_annotation$$branch+0x392>
 8002d20:	4668      	mov	r0, sp
 8002d22:	7b00      	ldrb	r0, [r0, #12]
 8002d24:	2811      	cmp	r0, #17
 8002d26:	d109      	bne.n	8002d3c <__iar_annotation$$branch+0x150>
 8002d28:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002d2a:	0bc1      	lsrs	r1, r0, #15
 8002d2c:	d106      	bne.n	8002d3c <__iar_annotation$$branch+0x150>
 8002d2e:	0441      	lsls	r1, r0, #17
 8002d30:	0f49      	lsrs	r1, r1, #29
 8002d32:	d100      	bne.n	8002d36 <__iar_annotation$$branch+0x14a>
 8002d34:	e0be      	b.n	8002eb4 <__iar_annotation$$branch+0x2c8>
 8002d36:	06c0      	lsls	r0, r0, #27
 8002d38:	0ec0      	lsrs	r0, r0, #27
 8002d3a:	2802      	cmp	r0, #2
 8002d3c:	d000      	beq.n	8002d40 <__iar_annotation$$branch+0x154>
 8002d3e:	e0b9      	b.n	8002eb4 <__iar_annotation$$branch+0x2c8>
 8002d40:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002d42:	7881      	ldrb	r1, [r0, #2]
 8002d44:	78c2      	ldrb	r2, [r0, #3]
 8002d46:	0212      	lsls	r2, r2, #8
 8002d48:	1889      	adds	r1, r1, r2
 8002d4a:	7902      	ldrb	r2, [r0, #4]
 8002d4c:	0412      	lsls	r2, r2, #16
 8002d4e:	1889      	adds	r1, r1, r2
 8002d50:	7940      	ldrb	r0, [r0, #5]
 8002d52:	0600      	lsls	r0, r0, #24
 8002d54:	1808      	adds	r0, r1, r0
 8002d56:	9000      	str	r0, [sp, #0]
 8002d58:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002d5a:	0600      	lsls	r0, r0, #24
 8002d5c:	0f81      	lsrs	r1, r0, #30
 8002d5e:	7c28      	ldrb	r0, [r5, #16]
 8002d60:	f7fd ff2c 	bl	8000bbc <PE_ExtRevisionInteroperability>
 8002d64:	2304      	movs	r3, #4
 8002d66:	466a      	mov	r2, sp
 8002d68:	2106      	movs	r1, #6
 8002d6a:	7c28      	ldrb	r0, [r5, #16]
 8002d6c:	68ac      	ldr	r4, [r5, #8]
 8002d6e:	69a4      	ldr	r4, [r4, #24]
 8002d70:	47a0      	blx	r4
 8002d72:	2009      	movs	r0, #9
 8002d74:	e092      	b.n	8002e9c <__iar_annotation$$branch+0x2b0>
 8002d76:	0028      	movs	r0, r5
 8002d78:	f000 fdea 	bl	8003950 <PE_StateMachine_SRC_NegocCapa>
 8002d7c:	e2d3      	b.n	8003326 <__iar_annotation$$branch+0x73a>
 8002d7e:	8be8      	ldrh	r0, [r5, #30]
 8002d80:	03a1      	lsls	r1, r4, #14
 8002d82:	4288      	cmp	r0, r1
 8002d84:	d000      	beq.n	8002d88 <__iar_annotation$$branch+0x19c>
 8002d86:	e0fb      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002d88:	2104      	movs	r1, #4
 8002d8a:	0028      	movs	r0, r5
 8002d8c:	f7fe faa1 	bl	80012d2 <PE_SetPowerNegotiation>
 8002d90:	68a8      	ldr	r0, [r5, #8]
 8002d92:	6801      	ldr	r1, [r0, #0]
 8002d94:	2900      	cmp	r1, #0
 8002d96:	d100      	bne.n	8002d9a <__iar_annotation$$branch+0x1ae>
 8002d98:	e0f2      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002d9a:	7c28      	ldrb	r0, [r5, #16]
 8002d9c:	4788      	blx	r1
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d000      	beq.n	8002da4 <__iar_annotation$$branch+0x1b8>
 8002da2:	e2ba      	b.n	800331a <__iar_annotation$$branch+0x72e>
 8002da4:	200d      	movs	r0, #13
 8002da6:	e0ea      	b.n	8002f7e <__iar_annotation$$branch+0x392>
 8002da8:	2000      	movs	r0, #0
 8002daa:	9000      	str	r0, [sp, #0]
 8002dac:	2303      	movs	r3, #3
 8002dae:	2206      	movs	r2, #6
 8002db0:	0028      	movs	r0, r5
 8002db2:	f7fe fb05 	bl	80013c0 <PE_Send_CtrlMessage>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d000      	beq.n	8002dbc <__iar_annotation$$branch+0x1d0>
 8002dba:	e0e1      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002dbc:	2103      	movs	r1, #3
 8002dbe:	0028      	movs	r0, r5
 8002dc0:	f7fe fa87 	bl	80012d2 <PE_SetPowerNegotiation>
 8002dc4:	2110      	movs	r1, #16
 8002dc6:	0028      	movs	r0, r5
 8002dc8:	f7fe fa5e 	bl	8001288 <PE_Notification>
 8002dcc:	2000      	movs	r0, #0
 8002dce:	84a8      	strh	r0, [r5, #36]	; 0x24
 8002dd0:	6968      	ldr	r0, [r5, #20]
 8002dd2:	0700      	lsls	r0, r0, #28
 8002dd4:	0f80      	lsrs	r0, r0, #30
 8002dd6:	2803      	cmp	r0, #3
 8002dd8:	d000      	beq.n	8002ddc <__iar_annotation$$branch+0x1f0>
 8002dda:	e0d1      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002ddc:	486a      	ldr	r0, [pc, #424]	; (8002f88 <__iar_annotation$$branch+0x39c>)
 8002dde:	84a8      	strh	r0, [r5, #36]	; 0x24
 8002de0:	e0ce      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002de2:	2001      	movs	r0, #1
 8002de4:	9000      	str	r0, [sp, #0]
 8002de6:	2397      	movs	r3, #151	; 0x97
 8002de8:	2202      	movs	r2, #2
 8002dea:	0028      	movs	r0, r5
 8002dec:	f7fe fae8 	bl	80013c0 <PE_Send_CtrlMessage>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d000      	beq.n	8002df6 <__iar_annotation$$branch+0x20a>
 8002df4:	e0c4      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002df6:	772c      	strb	r4, [r5, #28]
 8002df8:	2129      	movs	r1, #41	; 0x29
 8002dfa:	0028      	movs	r0, r5
 8002dfc:	f7fe fa44 	bl	8001288 <PE_Notification>
 8002e00:	4862      	ldr	r0, [pc, #392]	; (8002f8c <__iar_annotation$$branch+0x3a0>)
 8002e02:	83e8      	strh	r0, [r5, #30]
 8002e04:	4c62      	ldr	r4, [pc, #392]	; (8002f90 <__iar_annotation$$branch+0x3a4>)
 8002e06:	e0bb      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002e08:	200001e0 	.word	0x200001e0
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	fffdffff 	.word	0xfffdffff
 8002e14:	8be8      	ldrh	r0, [r5, #30]
 8002e16:	03a1      	lsls	r1, r4, #14
 8002e18:	4288      	cmp	r0, r1
 8002e1a:	d000      	beq.n	8002e1e <__iar_annotation$$branch+0x232>
 8002e1c:	e0b0      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002e1e:	212a      	movs	r1, #42	; 0x2a
 8002e20:	0028      	movs	r0, r5
 8002e22:	f7fe fa31 	bl	8001288 <PE_Notification>
 8002e26:	2000      	movs	r0, #0
 8002e28:	9000      	str	r0, [sp, #0]
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	2206      	movs	r2, #6
 8002e2e:	2100      	movs	r1, #0
 8002e30:	0028      	movs	r0, r5
 8002e32:	f7fe fac5 	bl	80013c0 <PE_Send_CtrlMessage>
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d000      	beq.n	8002e3c <__iar_annotation$$branch+0x250>
 8002e3a:	e0a1      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002e3c:	212e      	movs	r1, #46	; 0x2e
 8002e3e:	e2eb      	b.n	8003418 <__iar_annotation$$branch+0x82c>
 8002e40:	2000      	movs	r0, #0
 8002e42:	9000      	str	r0, [sp, #0]
 8002e44:	2307      	movs	r3, #7
 8002e46:	2203      	movs	r2, #3
 8002e48:	e155      	b.n	80030f6 <__iar_annotation$$branch+0x50a>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	9000      	str	r0, [sp, #0]
 8002e4e:	2312      	movs	r3, #18
 8002e50:	220d      	movs	r2, #13
 8002e52:	2031      	movs	r0, #49	; 0x31
 8002e54:	5c29      	ldrb	r1, [r5, r0]
 8002e56:	0028      	movs	r0, r5
 8002e58:	f7fe fab2 	bl	80013c0 <PE_Send_CtrlMessage>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d000      	beq.n	8002e62 <__iar_annotation$$branch+0x276>
 8002e60:	e08e      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002e62:	83ef      	strh	r7, [r5, #30]
 8002e64:	241b      	movs	r4, #27
 8002e66:	2130      	movs	r1, #48	; 0x30
 8002e68:	e2d6      	b.n	8003418 <__iar_annotation$$branch+0x82c>
 8002e6a:	4669      	mov	r1, sp
 8002e6c:	7b09      	ldrb	r1, [r1, #12]
 8002e6e:	2914      	cmp	r1, #20
 8002e70:	d020      	beq.n	8002eb4 <__iar_annotation$$branch+0x2c8>
 8002e72:	2130      	movs	r1, #48	; 0x30
 8002e74:	5c69      	ldrb	r1, [r5, r1]
 8002e76:	2231      	movs	r2, #49	; 0x31
 8002e78:	5caa      	ldrb	r2, [r5, r2]
 8002e7a:	4291      	cmp	r1, r2
 8002e7c:	d11a      	bne.n	8002eb4 <__iar_annotation$$branch+0x2c8>
 8002e7e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8002e80:	4008      	ands	r0, r1
 8002e82:	2803      	cmp	r0, #3
 8002e84:	d116      	bne.n	8002eb4 <__iar_annotation$$branch+0x2c8>
 8002e86:	2131      	movs	r1, #49	; 0x31
 8002e88:	0028      	movs	r0, r5
 8002e8a:	f7fe f9fd 	bl	8001288 <PE_Notification>
 8002e8e:	2030      	movs	r0, #48	; 0x30
 8002e90:	5c28      	ldrb	r0, [r5, r0]
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d101      	bne.n	8002e9a <__iar_annotation$$branch+0x2ae>
 8002e96:	2007      	movs	r0, #7
 8002e98:	e000      	b.n	8002e9c <__iar_annotation$$branch+0x2b0>
 8002e9a:	2003      	movs	r0, #3
 8002e9c:	7468      	strb	r0, [r5, #17]
 8002e9e:	2400      	movs	r4, #0
 8002ea0:	4668      	mov	r0, sp
 8002ea2:	7b00      	ldrb	r0, [r0, #12]
 8002ea4:	2814      	cmp	r0, #20
 8002ea6:	d005      	beq.n	8002eb4 <__iar_annotation$$branch+0x2c8>
 8002ea8:	2014      	movs	r0, #20
 8002eaa:	4669      	mov	r1, sp
 8002eac:	7308      	strb	r0, [r1, #12]
 8002eae:	0028      	movs	r0, r5
 8002eb0:	f7fd fd3d 	bl	800092e <PE_Clear_RxEvent>
 8002eb4:	8be8      	ldrh	r0, [r5, #30]
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	0209      	lsls	r1, r1, #8
 8002eba:	4288      	cmp	r0, r1
 8002ebc:	d160      	bne.n	8002f80 <__iar_annotation$$branch+0x394>
 8002ebe:	e22c      	b.n	800331a <__iar_annotation$$branch+0x72e>
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	0028      	movs	r0, r5
 8002ec4:	f7fd fcd5 	bl	8000872 <PE_Send_RESET>
 8002ec8:	6868      	ldr	r0, [r5, #4]
 8002eca:	6801      	ldr	r1, [r0, #0]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4391      	bics	r1, r2
 8002ed0:	6001      	str	r1, [r0, #0]
 8002ed2:	78b0      	ldrb	r0, [r6, #2]
 8002ed4:	1c40      	adds	r0, r0, #1
 8002ed6:	70b0      	strb	r0, [r6, #2]
 8002ed8:	6969      	ldr	r1, [r5, #20]
 8002eda:	482e      	ldr	r0, [pc, #184]	; (8002f94 <__iar_annotation$$branch+0x3a8>)
 8002edc:	4008      	ands	r0, r1
 8002ede:	6168      	str	r0, [r5, #20]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2232      	movs	r2, #50	; 0x32
 8002ee4:	54a9      	strb	r1, [r5, r2]
 8002ee6:	21e0      	movs	r1, #224	; 0xe0
 8002ee8:	4388      	bics	r0, r1
 8002eea:	6168      	str	r0, [r5, #20]
 8002eec:	2202      	movs	r2, #2
 8002eee:	2101      	movs	r1, #1
 8002ef0:	0028      	movs	r0, r5
 8002ef2:	f7fe f9e5 	bl	80012c0 <PE_CallHardResetCallback>
 8002ef6:	83ef      	strh	r7, [r5, #30]
 8002ef8:	241b      	movs	r4, #27
 8002efa:	2015      	movs	r0, #21
 8002efc:	e03f      	b.n	8002f7e <__iar_annotation$$branch+0x392>
 8002efe:	8be8      	ldrh	r0, [r5, #30]
 8002f00:	03a1      	lsls	r1, r4, #14
 8002f02:	4288      	cmp	r0, r1
 8002f04:	d13c      	bne.n	8002f80 <__iar_annotation$$branch+0x394>
 8002f06:	6968      	ldr	r0, [r5, #20]
 8002f08:	78b1      	ldrb	r1, [r6, #2]
 8002f0a:	2903      	cmp	r1, #3
 8002f0c:	d303      	bcc.n	8002f16 <__iar_annotation$$branch+0x32a>
 8002f0e:	0781      	lsls	r1, r0, #30
 8002f10:	0fc9      	lsrs	r1, r1, #31
 8002f12:	d12f      	bne.n	8002f74 <__iar_annotation$$branch+0x388>
 8002f14:	e032      	b.n	8002f7c <__iar_annotation$$branch+0x390>
 8002f16:	4920      	ldr	r1, [pc, #128]	; (8002f98 <__iar_annotation$$branch+0x3ac>)
 8002f18:	83e9      	strh	r1, [r5, #30]
 8002f1a:	2117      	movs	r1, #23
 8002f1c:	7469      	strb	r1, [r5, #17]
 8002f1e:	2400      	movs	r4, #0
 8002f20:	0580      	lsls	r0, r0, #22
 8002f22:	0f80      	lsrs	r0, r0, #30
 8002f24:	1e42      	subs	r2, r0, #1
 8002f26:	4192      	sbcs	r2, r2
 8002f28:	0fd2      	lsrs	r2, r2, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	0028      	movs	r0, r5
 8002f2e:	f7fe f9c7 	bl	80012c0 <PE_CallHardResetCallback>
 8002f32:	2203      	movs	r2, #3
 8002f34:	2101      	movs	r1, #1
 8002f36:	0028      	movs	r0, r5
 8002f38:	f7fe f9c2 	bl	80012c0 <PE_CallHardResetCallback>
 8002f3c:	e020      	b.n	8002f80 <__iar_annotation$$branch+0x394>
 8002f3e:	4668      	mov	r0, sp
 8002f40:	7b40      	ldrb	r0, [r0, #13]
 8002f42:	68aa      	ldr	r2, [r5, #8]
 8002f44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f46:	4790      	blx	r2
 8002f48:	2801      	cmp	r0, #1
 8002f4a:	d105      	bne.n	8002f58 <__iar_annotation$$branch+0x36c>
 8002f4c:	4813      	ldr	r0, [pc, #76]	; (8002f9c <__iar_annotation$$branch+0x3b0>)
 8002f4e:	83e8      	strh	r0, [r5, #30]
 8002f50:	24c8      	movs	r4, #200	; 0xc8
 8002f52:	00a4      	lsls	r4, r4, #2
 8002f54:	2013      	movs	r0, #19
 8002f56:	7468      	strb	r0, [r5, #17]
 8002f58:	8be8      	ldrh	r0, [r5, #30]
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	0209      	lsls	r1, r1, #8
 8002f5e:	4288      	cmp	r0, r1
 8002f60:	d10e      	bne.n	8002f80 <__iar_annotation$$branch+0x394>
 8002f62:	2206      	movs	r2, #6
 8002f64:	2101      	movs	r1, #1
 8002f66:	0028      	movs	r0, r5
 8002f68:	f7fe f9aa 	bl	80012c0 <PE_CallHardResetCallback>
 8002f6c:	6968      	ldr	r0, [r5, #20]
 8002f6e:	0781      	lsls	r1, r0, #30
 8002f70:	0fc9      	lsrs	r1, r1, #31
 8002f72:	d003      	beq.n	8002f7c <__iar_annotation$$branch+0x390>
 8002f74:	68a8      	ldr	r0, [r5, #8]
 8002f76:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d133      	bne.n	8002fe4 <__iar_annotation$$branch+0x3f8>
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	7468      	strb	r0, [r5, #17]
 8002f80:	e3c0      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 8002f82:	bf00      	nop
 8002f84:	00008014 	.word	0x00008014
 8002f88:	0000b6b0 	.word	0x0000b6b0
 8002f8c:	00008226 	.word	0x00008226
 8002f90:	00000226 	.word	0x00000226
 8002f94:	fffffcff 	.word	0xfffffcff
 8002f98:	0000828a 	.word	0x0000828a
 8002f9c:	00008320 	.word	0x00008320
 8002fa0:	8be8      	ldrh	r0, [r5, #30]
 8002fa2:	03a1      	lsls	r1, r4, #14
 8002fa4:	4288      	cmp	r0, r1
 8002fa6:	d1eb      	bne.n	8002f80 <__iar_annotation$$branch+0x394>
 8002fa8:	2204      	movs	r2, #4
 8002faa:	2101      	movs	r1, #1
 8002fac:	0028      	movs	r0, r5
 8002fae:	f7fe f987 	bl	80012c0 <PE_CallHardResetCallback>
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4668      	mov	r0, sp
 8002fb6:	7b40      	ldrb	r0, [r0, #13]
 8002fb8:	68aa      	ldr	r2, [r5, #8]
 8002fba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fbc:	4790      	blx	r2
 8002fbe:	2801      	cmp	r0, #1
 8002fc0:	d108      	bne.n	8002fd4 <__iar_annotation$$branch+0x3e8>
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	0028      	movs	r0, r5
 8002fc8:	f7fe f97a 	bl	80012c0 <PE_CallHardResetCallback>
 8002fcc:	0028      	movs	r0, r5
 8002fce:	f7fd fd54 	bl	8000a7a <PE_Reset_HardReset>
 8002fd2:	e00a      	b.n	8002fea <__iar_annotation$$branch+0x3fe>
 8002fd4:	2206      	movs	r2, #6
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	0028      	movs	r0, r5
 8002fda:	f7fe f971 	bl	80012c0 <PE_CallHardResetCallback>
 8002fde:	68a8      	ldr	r0, [r5, #8]
 8002fe0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d000      	beq.n	8002fe8 <__iar_annotation$$branch+0x3fc>
 8002fe6:	e255      	b.n	8003494 <__iar_annotation$$branch+0x8a8>
 8002fe8:	2400      	movs	r4, #0
 8002fea:	746c      	strb	r4, [r5, #17]
 8002fec:	e38a      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 8002fee:	2001      	movs	r0, #1
 8002ff0:	9000      	str	r0, [sp, #0]
 8002ff2:	231b      	movs	r3, #27
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	0028      	movs	r0, r5
 8002ff8:	f7fe f9e2 	bl	80013c0 <PE_Send_CtrlMessage>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d1f5      	bne.n	8002fec <__iar_annotation$$branch+0x400>
 8003000:	2006      	movs	r0, #6
 8003002:	7728      	strb	r0, [r5, #28]
 8003004:	83ef      	strh	r7, [r5, #30]
 8003006:	241b      	movs	r4, #27
 8003008:	210b      	movs	r1, #11
 800300a:	e205      	b.n	8003418 <__iar_annotation$$branch+0x82c>
 800300c:	4668      	mov	r0, sp
 800300e:	7b00      	ldrb	r0, [r0, #12]
 8003010:	2811      	cmp	r0, #17
 8003012:	d140      	bne.n	8003096 <__iar_annotation$$branch+0x4aa>
 8003014:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8003016:	0bc1      	lsrs	r1, r0, #15
 8003018:	d121      	bne.n	800305e <__iar_annotation$$branch+0x472>
 800301a:	0b01      	lsrs	r1, r0, #12
 800301c:	2207      	movs	r2, #7
 800301e:	4211      	tst	r1, r2
 8003020:	d01d      	beq.n	800305e <__iar_annotation$$branch+0x472>
 8003022:	06c0      	lsls	r0, r0, #27
 8003024:	0ec0      	lsrs	r0, r0, #27
 8003026:	2801      	cmp	r0, #1
 8003028:	d119      	bne.n	800305e <__iar_annotation$$branch+0x472>
 800302a:	400a      	ands	r2, r1
 800302c:	0093      	lsls	r3, r2, #2
 800302e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003030:	1c82      	adds	r2, r0, #2
 8003032:	2104      	movs	r1, #4
 8003034:	7c28      	ldrb	r0, [r5, #16]
 8003036:	68ac      	ldr	r4, [r5, #8]
 8003038:	69a4      	ldr	r4, [r4, #24]
 800303a:	47a0      	blx	r4
 800303c:	2003      	movs	r0, #3
 800303e:	7468      	strb	r0, [r5, #17]
 8003040:	2400      	movs	r4, #0
 8003042:	4668      	mov	r0, sp
 8003044:	7b00      	ldrb	r0, [r0, #12]
 8003046:	2814      	cmp	r0, #20
 8003048:	d005      	beq.n	8003056 <__iar_annotation$$branch+0x46a>
 800304a:	2014      	movs	r0, #20
 800304c:	4669      	mov	r1, sp
 800304e:	7308      	strb	r0, [r1, #12]
 8003050:	0028      	movs	r0, r5
 8003052:	f7fd fc6c 	bl	800092e <PE_Clear_RxEvent>
 8003056:	210d      	movs	r1, #13
 8003058:	0028      	movs	r0, r5
 800305a:	f7fe f915 	bl	8001288 <PE_Notification>
 800305e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8003060:	21f0      	movs	r1, #240	; 0xf0
 8003062:	0209      	lsls	r1, r1, #8
 8003064:	4001      	ands	r1, r0
 8003066:	d116      	bne.n	8003096 <__iar_annotation$$branch+0x4aa>
 8003068:	06c0      	lsls	r0, r0, #27
 800306a:	0ec0      	lsrs	r0, r0, #27
 800306c:	2804      	cmp	r0, #4
 800306e:	d001      	beq.n	8003074 <__iar_annotation$$branch+0x488>
 8003070:	2810      	cmp	r0, #16
 8003072:	d110      	bne.n	8003096 <__iar_annotation$$branch+0x4aa>
 8003074:	2003      	movs	r0, #3
 8003076:	7468      	strb	r0, [r5, #17]
 8003078:	2400      	movs	r4, #0
 800307a:	4668      	mov	r0, sp
 800307c:	7b00      	ldrb	r0, [r0, #12]
 800307e:	2814      	cmp	r0, #20
 8003080:	d005      	beq.n	800308e <__iar_annotation$$branch+0x4a2>
 8003082:	2014      	movs	r0, #20
 8003084:	4669      	mov	r1, sp
 8003086:	7308      	strb	r0, [r1, #12]
 8003088:	0028      	movs	r0, r5
 800308a:	f7fd fc50 	bl	800092e <PE_Clear_RxEvent>
 800308e:	210e      	movs	r1, #14
 8003090:	0028      	movs	r0, r5
 8003092:	f7fe f8f9 	bl	8001288 <PE_Notification>
 8003096:	8be8      	ldrh	r0, [r5, #30]
 8003098:	2180      	movs	r1, #128	; 0x80
 800309a:	0209      	lsls	r1, r1, #8
 800309c:	4288      	cmp	r0, r1
 800309e:	d11f      	bne.n	80030e0 <__iar_annotation$$branch+0x4f4>
 80030a0:	2003      	movs	r0, #3
 80030a2:	e1f8      	b.n	8003496 <__iar_annotation$$branch+0x8aa>
 80030a4:	68a8      	ldr	r0, [r5, #8]
 80030a6:	6881      	ldr	r1, [r0, #8]
 80030a8:	2900      	cmp	r1, #0
 80030aa:	d01f      	beq.n	80030ec <__iar_annotation$$branch+0x500>
 80030ac:	7c28      	ldrb	r0, [r5, #16]
 80030ae:	4788      	blx	r1
 80030b0:	280a      	cmp	r0, #10
 80030b2:	d002      	beq.n	80030ba <__iar_annotation$$branch+0x4ce>
 80030b4:	280d      	cmp	r0, #13
 80030b6:	d014      	beq.n	80030e2 <__iar_annotation$$branch+0x4f6>
 80030b8:	e018      	b.n	80030ec <__iar_annotation$$branch+0x500>
 80030ba:	1cf8      	adds	r0, r7, #3
 80030bc:	83e8      	strh	r0, [r5, #30]
 80030be:	241e      	movs	r4, #30
 80030c0:	2000      	movs	r0, #0
 80030c2:	9000      	str	r0, [sp, #0]
 80030c4:	2324      	movs	r3, #36	; 0x24
 80030c6:	2203      	movs	r2, #3
 80030c8:	2100      	movs	r1, #0
 80030ca:	0028      	movs	r0, r5
 80030cc:	f7fe f978 	bl	80013c0 <PE_Send_CtrlMessage>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d105      	bne.n	80030e0 <__iar_annotation$$branch+0x4f4>
 80030d4:	2201      	movs	r2, #1
 80030d6:	2101      	movs	r1, #1
 80030d8:	7c28      	ldrb	r0, [r5, #16]
 80030da:	68ab      	ldr	r3, [r5, #8]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	4798      	blx	r3
 80030e0:	e310      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 80030e2:	2000      	movs	r0, #0
 80030e4:	9000      	str	r0, [sp, #0]
 80030e6:	2303      	movs	r3, #3
 80030e8:	220c      	movs	r2, #12
 80030ea:	e003      	b.n	80030f4 <__iar_annotation$$branch+0x508>
 80030ec:	2000      	movs	r0, #0
 80030ee:	9000      	str	r0, [sp, #0]
 80030f0:	2303      	movs	r3, #3
 80030f2:	2204      	movs	r2, #4
 80030f4:	2100      	movs	r1, #0
 80030f6:	0028      	movs	r0, r5
 80030f8:	f7fe f962 	bl	80013c0 <PE_Send_CtrlMessage>
 80030fc:	e302      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 80030fe:	8be8      	ldrh	r0, [r5, #30]
 8003100:	03a1      	lsls	r1, r4, #14
 8003102:	4288      	cmp	r0, r1
 8003104:	d1fa      	bne.n	80030fc <__iar_annotation$$branch+0x510>
 8003106:	2104      	movs	r1, #4
 8003108:	0028      	movs	r0, r5
 800310a:	f7fe f8e2 	bl	80012d2 <PE_SetPowerNegotiation>
 800310e:	6868      	ldr	r0, [r5, #4]
 8003110:	6801      	ldr	r1, [r0, #0]
 8003112:	2210      	movs	r2, #16
 8003114:	430a      	orrs	r2, r1
 8003116:	6002      	str	r2, [r0, #0]
 8003118:	2206      	movs	r2, #6
 800311a:	2101      	movs	r1, #1
 800311c:	7c28      	ldrb	r0, [r5, #16]
 800311e:	68ab      	ldr	r3, [r5, #8]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	4798      	blx	r3
 8003124:	2207      	movs	r2, #7
 8003126:	2101      	movs	r1, #1
 8003128:	7c28      	ldrb	r0, [r5, #16]
 800312a:	68ab      	ldr	r3, [r5, #8]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	4798      	blx	r3
 8003130:	2100      	movs	r1, #0
 8003132:	7c28      	ldrb	r0, [r5, #16]
 8003134:	f002 fa89 	bl	800564a <USBPD_PRL_SetHeaderPowerRole>
 8003138:	2000      	movs	r0, #0
 800313a:	9000      	str	r0, [sp, #0]
 800313c:	2325      	movs	r3, #37	; 0x25
 800313e:	2206      	movs	r2, #6
 8003140:	2100      	movs	r1, #0
 8003142:	0028      	movs	r0, r5
 8003144:	f7fe f93c 	bl	80013c0 <PE_Send_CtrlMessage>
 8003148:	2800      	cmp	r0, #0
 800314a:	d1d7      	bne.n	80030fc <__iar_annotation$$branch+0x510>
 800314c:	e0c5      	b.n	80032da <__iar_annotation$$branch+0x6ee>
 800314e:	4669      	mov	r1, sp
 8003150:	7b09      	ldrb	r1, [r1, #12]
 8003152:	2911      	cmp	r1, #17
 8003154:	d10b      	bne.n	800316e <__iar_annotation$$branch+0x582>
 8003156:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8003158:	4008      	ands	r0, r1
 800315a:	2806      	cmp	r0, #6
 800315c:	d107      	bne.n	800316e <__iar_annotation$$branch+0x582>
 800315e:	2014      	movs	r0, #20
 8003160:	4669      	mov	r1, sp
 8003162:	7308      	strb	r0, [r1, #12]
 8003164:	0028      	movs	r0, r5
 8003166:	f7fd fbe2 	bl	800092e <PE_Clear_RxEvent>
 800316a:	2026      	movs	r0, #38	; 0x26
 800316c:	7468      	strb	r0, [r5, #17]
 800316e:	8be8      	ldrh	r0, [r5, #30]
 8003170:	03a1      	lsls	r1, r4, #14
 8003172:	4288      	cmp	r0, r1
 8003174:	d1c2      	bne.n	80030fc <__iar_annotation$$branch+0x510>
 8003176:	68ab      	ldr	r3, [r5, #8]
 8003178:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800317a:	2800      	cmp	r0, #0
 800317c:	d000      	beq.n	8003180 <__iar_annotation$$branch+0x594>
 800317e:	e189      	b.n	8003494 <__iar_annotation$$branch+0x8a8>
 8003180:	220a      	movs	r2, #10
 8003182:	2101      	movs	r1, #1
 8003184:	7c28      	ldrb	r0, [r5, #16]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	4798      	blx	r3
 800318a:	e0c6      	b.n	800331a <__iar_annotation$$branch+0x72e>
 800318c:	0028      	movs	r0, r5
 800318e:	f7fd fb89 	bl	80008a4 <PE_ChangePowerRole>
 8003192:	220d      	movs	r2, #13
 8003194:	2100      	movs	r1, #0
 8003196:	7c28      	ldrb	r0, [r5, #16]
 8003198:	68ab      	ldr	r3, [r5, #8]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	4798      	blx	r3
 800319e:	2114      	movs	r1, #20
 80031a0:	0028      	movs	r0, r5
 80031a2:	f7fe f871 	bl	8001288 <PE_Notification>
 80031a6:	220e      	movs	r2, #14
 80031a8:	2100      	movs	r1, #0
 80031aa:	7c28      	ldrb	r0, [r5, #16]
 80031ac:	68ab      	ldr	r3, [r5, #8]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	4798      	blx	r3
 80031b2:	6868      	ldr	r0, [r5, #4]
 80031b4:	7800      	ldrb	r0, [r0, #0]
 80031b6:	0780      	lsls	r0, r0, #30
 80031b8:	0f80      	lsrs	r0, r0, #30
 80031ba:	2801      	cmp	r0, #1
 80031bc:	d104      	bne.n	80031c8 <__iar_annotation$$branch+0x5dc>
 80031be:	2101      	movs	r1, #1
 80031c0:	4668      	mov	r0, sp
 80031c2:	7b40      	ldrb	r0, [r0, #13]
 80031c4:	f002 fa96 	bl	80056f4 <USBPD_PRL_SOPCapability>
 80031c8:	0028      	movs	r0, r5
 80031ca:	f7fd fccd 	bl	8000b68 <PE_Reset_StateMachine>
 80031ce:	e163      	b.n	8003498 <__iar_annotation$$branch+0x8ac>
 80031d0:	2001      	movs	r0, #1
 80031d2:	9000      	str	r0, [sp, #0]
 80031d4:	231f      	movs	r3, #31
 80031d6:	220a      	movs	r2, #10
 80031d8:	0028      	movs	r0, r5
 80031da:	f7fe f8f1 	bl	80013c0 <PE_Send_CtrlMessage>
 80031de:	2800      	cmp	r0, #0
 80031e0:	d18c      	bne.n	80030fc <__iar_annotation$$branch+0x510>
 80031e2:	2008      	movs	r0, #8
 80031e4:	7728      	strb	r0, [r5, #28]
 80031e6:	83ef      	strh	r7, [r5, #30]
 80031e8:	241b      	movs	r4, #27
 80031ea:	2202      	movs	r2, #2
 80031ec:	2101      	movs	r1, #1
 80031ee:	7c28      	ldrb	r0, [r5, #16]
 80031f0:	68ab      	ldr	r3, [r5, #8]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	4798      	blx	r3
 80031f6:	2139      	movs	r1, #57	; 0x39
 80031f8:	e10e      	b.n	8003418 <__iar_annotation$$branch+0x82c>
 80031fa:	4668      	mov	r0, sp
 80031fc:	7b00      	ldrb	r0, [r0, #12]
 80031fe:	2811      	cmp	r0, #17
 8003200:	d146      	bne.n	8003290 <__iar_annotation$$branch+0x6a4>
 8003202:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8003204:	21f0      	movs	r1, #240	; 0xf0
 8003206:	0209      	lsls	r1, r1, #8
 8003208:	4001      	ands	r1, r0
 800320a:	d141      	bne.n	8003290 <__iar_annotation$$branch+0x6a4>
 800320c:	06c0      	lsls	r0, r0, #27
 800320e:	0ec0      	lsrs	r0, r0, #27
 8003210:	2803      	cmp	r0, #3
 8003212:	d006      	beq.n	8003222 <__iar_annotation$$branch+0x636>
 8003214:	2804      	cmp	r0, #4
 8003216:	d012      	beq.n	800323e <__iar_annotation$$branch+0x652>
 8003218:	280c      	cmp	r0, #12
 800321a:	d008      	beq.n	800322e <__iar_annotation$$branch+0x642>
 800321c:	2810      	cmp	r0, #16
 800321e:	d020      	beq.n	8003262 <__iar_annotation$$branch+0x676>
 8003220:	e036      	b.n	8003290 <__iar_annotation$$branch+0x6a4>
 8003222:	213a      	movs	r1, #58	; 0x3a
 8003224:	0028      	movs	r0, r5
 8003226:	f7fe f82f 	bl	8001288 <PE_Notification>
 800322a:	2020      	movs	r0, #32
 800322c:	e012      	b.n	8003254 <__iar_annotation$$branch+0x668>
 800322e:	2205      	movs	r2, #5
 8003230:	2101      	movs	r1, #1
 8003232:	7c28      	ldrb	r0, [r5, #16]
 8003234:	68ab      	ldr	r3, [r5, #8]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	4798      	blx	r3
 800323a:	213b      	movs	r1, #59	; 0x3b
 800323c:	e006      	b.n	800324c <__iar_annotation$$branch+0x660>
 800323e:	2204      	movs	r2, #4
 8003240:	2101      	movs	r1, #1
 8003242:	7c28      	ldrb	r0, [r5, #16]
 8003244:	68ab      	ldr	r3, [r5, #8]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	4798      	blx	r3
 800324a:	2116      	movs	r1, #22
 800324c:	0028      	movs	r0, r5
 800324e:	f7fe f81b 	bl	8001288 <PE_Notification>
 8003252:	2003      	movs	r0, #3
 8003254:	7468      	strb	r0, [r5, #17]
 8003256:	2400      	movs	r4, #0
 8003258:	4668      	mov	r0, sp
 800325a:	7b00      	ldrb	r0, [r0, #12]
 800325c:	2814      	cmp	r0, #20
 800325e:	d111      	bne.n	8003284 <__iar_annotation$$branch+0x698>
 8003260:	e016      	b.n	8003290 <__iar_annotation$$branch+0x6a4>
 8003262:	2204      	movs	r2, #4
 8003264:	2101      	movs	r1, #1
 8003266:	7c28      	ldrb	r0, [r5, #16]
 8003268:	68ab      	ldr	r3, [r5, #8]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	4798      	blx	r3
 800326e:	2117      	movs	r1, #23
 8003270:	0028      	movs	r0, r5
 8003272:	f7fe f809 	bl	8001288 <PE_Notification>
 8003276:	2003      	movs	r0, #3
 8003278:	7468      	strb	r0, [r5, #17]
 800327a:	2400      	movs	r4, #0
 800327c:	4668      	mov	r0, sp
 800327e:	7b00      	ldrb	r0, [r0, #12]
 8003280:	2814      	cmp	r0, #20
 8003282:	d005      	beq.n	8003290 <__iar_annotation$$branch+0x6a4>
 8003284:	2014      	movs	r0, #20
 8003286:	4669      	mov	r1, sp
 8003288:	7308      	strb	r0, [r1, #12]
 800328a:	0028      	movs	r0, r5
 800328c:	f7fd fb4f 	bl	800092e <PE_Clear_RxEvent>
 8003290:	8be8      	ldrh	r0, [r5, #30]
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	0209      	lsls	r1, r1, #8
 8003296:	4288      	cmp	r0, r1
 8003298:	d129      	bne.n	80032ee <__iar_annotation$$branch+0x702>
 800329a:	e701      	b.n	80030a0 <__iar_annotation$$branch+0x4b4>
 800329c:	6868      	ldr	r0, [r5, #4]
 800329e:	6801      	ldr	r1, [r0, #0]
 80032a0:	2210      	movs	r2, #16
 80032a2:	430a      	orrs	r2, r1
 80032a4:	6002      	str	r2, [r0, #0]
 80032a6:	2206      	movs	r2, #6
 80032a8:	2101      	movs	r1, #1
 80032aa:	7c28      	ldrb	r0, [r5, #16]
 80032ac:	68ab      	ldr	r3, [r5, #8]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	4798      	blx	r3
 80032b2:	2207      	movs	r2, #7
 80032b4:	2101      	movs	r1, #1
 80032b6:	7c28      	ldrb	r0, [r5, #16]
 80032b8:	68ab      	ldr	r3, [r5, #8]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	4798      	blx	r3
 80032be:	2100      	movs	r1, #0
 80032c0:	7c28      	ldrb	r0, [r5, #16]
 80032c2:	f002 f9c2 	bl	800564a <USBPD_PRL_SetHeaderPowerRole>
 80032c6:	2000      	movs	r0, #0
 80032c8:	9000      	str	r0, [sp, #0]
 80032ca:	2321      	movs	r3, #33	; 0x21
 80032cc:	2206      	movs	r2, #6
 80032ce:	2100      	movs	r1, #0
 80032d0:	0028      	movs	r0, r5
 80032d2:	f7fe f875 	bl	80013c0 <PE_Send_CtrlMessage>
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d109      	bne.n	80032ee <__iar_annotation$$branch+0x702>
 80032da:	2208      	movs	r2, #8
 80032dc:	2101      	movs	r1, #1
 80032de:	7c28      	ldrb	r0, [r5, #16]
 80032e0:	68ab      	ldr	r3, [r5, #8]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	4798      	blx	r3
 80032e6:	4880      	ldr	r0, [pc, #512]	; (80034e8 <__iar_annotation$$branch+0x8fc>)
 80032e8:	83e8      	strh	r0, [r5, #30]
 80032ea:	24eb      	movs	r4, #235	; 0xeb
 80032ec:	0064      	lsls	r4, r4, #1
 80032ee:	e209      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 80032f0:	4668      	mov	r0, sp
 80032f2:	7b00      	ldrb	r0, [r0, #12]
 80032f4:	2811      	cmp	r0, #17
 80032f6:	d107      	bne.n	8003308 <__iar_annotation$$branch+0x71c>
 80032f8:	2026      	movs	r0, #38	; 0x26
 80032fa:	7468      	strb	r0, [r5, #17]
 80032fc:	2014      	movs	r0, #20
 80032fe:	4669      	mov	r1, sp
 8003300:	7308      	strb	r0, [r1, #12]
 8003302:	0028      	movs	r0, r5
 8003304:	f7fd fb13 	bl	800092e <PE_Clear_RxEvent>
 8003308:	8be8      	ldrh	r0, [r5, #30]
 800330a:	03a1      	lsls	r1, r4, #14
 800330c:	4288      	cmp	r0, r1
 800330e:	d1ee      	bne.n	80032ee <__iar_annotation$$branch+0x702>
 8003310:	68a8      	ldr	r0, [r5, #8]
 8003312:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003314:	2800      	cmp	r0, #0
 8003316:	d000      	beq.n	800331a <__iar_annotation$$branch+0x72e>
 8003318:	e0bc      	b.n	8003494 <__iar_annotation$$branch+0x8a8>
 800331a:	200f      	movs	r0, #15
 800331c:	e0bb      	b.n	8003496 <__iar_annotation$$branch+0x8aa>
 800331e:	a903      	add	r1, sp, #12
 8003320:	0028      	movs	r0, r5
 8003322:	f000 fa51 	bl	80037c8 <PE_StateMachine_SRC_ReadyWait>
 8003326:	e1ec      	b.n	8003702 <__iar_annotation$$branch+0x1a>
 8003328:	2000      	movs	r0, #0
 800332a:	9002      	str	r0, [sp, #8]
 800332c:	2003      	movs	r0, #3
 800332e:	9001      	str	r0, [sp, #4]
 8003330:	2001      	movs	r0, #1
 8003332:	9000      	str	r0, [sp, #0]
 8003334:	002b      	movs	r3, r5
 8003336:	332c      	adds	r3, #44	; 0x2c
 8003338:	2206      	movs	r2, #6
 800333a:	0028      	movs	r0, r5
 800333c:	f7fe f86d 	bl	800141a <PE_Send_DataMessage>
 8003340:	2800      	cmp	r0, #0
 8003342:	d1d4      	bne.n	80032ee <__iar_annotation$$branch+0x702>
 8003344:	215d      	movs	r1, #93	; 0x5d
 8003346:	e067      	b.n	8003418 <__iar_annotation$$branch+0x82c>
 8003348:	ab06      	add	r3, sp, #24
 800334a:	aa05      	add	r2, sp, #20
 800334c:	210a      	movs	r1, #10
 800334e:	4668      	mov	r0, sp
 8003350:	7b40      	ldrb	r0, [r0, #13]
 8003352:	68af      	ldr	r7, [r5, #8]
 8003354:	697f      	ldr	r7, [r7, #20]
 8003356:	47b8      	blx	r7
 8003358:	2000      	movs	r0, #0
 800335a:	71f0      	strb	r0, [r6, #7]
 800335c:	7230      	strb	r0, [r6, #8]
 800335e:	7c28      	ldrb	r0, [r5, #16]
 8003360:	f7fd fcc8 	bl	8000cf4 <PE_Get_UnchunkedSupport>
 8003364:	2800      	cmp	r0, #0
 8003366:	d103      	bne.n	8003370 <__iar_annotation$$branch+0x784>
 8003368:	7a30      	ldrb	r0, [r6, #8]
 800336a:	2180      	movs	r1, #128	; 0x80
 800336c:	4301      	orrs	r1, r0
 800336e:	7231      	strb	r1, [r6, #8]
 8003370:	9a06      	ldr	r2, [sp, #24]
 8003372:	a905      	add	r1, sp, #20
 8003374:	485d      	ldr	r0, [pc, #372]	; (80034ec <__iar_annotation$$branch+0x900>)
 8003376:	1828      	adds	r0, r5, r0
 8003378:	f011 fef9 	bl	801516e <__aeabi_memcpy>
 800337c:	2000      	movs	r0, #0
 800337e:	9002      	str	r0, [sp, #8]
 8003380:	2003      	movs	r0, #3
 8003382:	9001      	str	r0, [sp, #4]
 8003384:	2008      	movs	r0, #8
 8003386:	9000      	str	r0, [sp, #0]
 8003388:	4859      	ldr	r0, [pc, #356]	; (80034f0 <__iar_annotation$$branch+0x904>)
 800338a:	182b      	adds	r3, r5, r0
 800338c:	220c      	movs	r2, #12
 800338e:	2100      	movs	r1, #0
 8003390:	0028      	movs	r0, r5
 8003392:	f7fe faeb 	bl	800196c <PE_Send_ExtendedMessage>
 8003396:	214c      	movs	r1, #76	; 0x4c
 8003398:	e03e      	b.n	8003418 <__iar_annotation$$branch+0x82c>
 800339a:	2001      	movs	r0, #1
 800339c:	9000      	str	r0, [sp, #0]
 800339e:	2339      	movs	r3, #57	; 0x39
 80033a0:	7832      	ldrb	r2, [r6, #0]
 80033a2:	2033      	movs	r0, #51	; 0x33
 80033a4:	5c29      	ldrb	r1, [r5, r0]
 80033a6:	0028      	movs	r0, r5
 80033a8:	f7fe f80a 	bl	80013c0 <PE_Send_CtrlMessage>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d122      	bne.n	80033f6 <__iar_annotation$$branch+0x80a>
 80033b0:	7870      	ldrb	r0, [r6, #1]
 80033b2:	7728      	strb	r0, [r5, #28]
 80033b4:	83ef      	strh	r7, [r5, #30]
 80033b6:	241b      	movs	r4, #27
 80033b8:	2144      	movs	r1, #68	; 0x44
 80033ba:	e02d      	b.n	8003418 <__iar_annotation$$branch+0x82c>
 80033bc:	8be8      	ldrh	r0, [r5, #30]
 80033be:	03a1      	lsls	r1, r4, #14
 80033c0:	4288      	cmp	r0, r1
 80033c2:	d104      	bne.n	80033ce <__iar_annotation$$branch+0x7e2>
 80033c4:	4668      	mov	r0, sp
 80033c6:	7b00      	ldrb	r0, [r0, #12]
 80033c8:	2814      	cmp	r0, #20
 80033ca:	d100      	bne.n	80033ce <__iar_annotation$$branch+0x7e2>
 80033cc:	e668      	b.n	80030a0 <__iar_annotation$$branch+0x4b4>
 80033ce:	4668      	mov	r0, sp
 80033d0:	7b00      	ldrb	r0, [r0, #12]
 80033d2:	2814      	cmp	r0, #20
 80033d4:	d00f      	beq.n	80033f6 <__iar_annotation$$branch+0x80a>
 80033d6:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80033d8:	0bc1      	lsrs	r1, r0, #15
 80033da:	d00d      	beq.n	80033f8 <__iar_annotation$$branch+0x80c>
 80033dc:	0028      	movs	r0, r5
 80033de:	f7fe f9cf 	bl	8001780 <PE_Check_ExtendedMessage>
 80033e2:	4668      	mov	r0, sp
 80033e4:	7b00      	ldrb	r0, [r0, #12]
 80033e6:	2814      	cmp	r0, #20
 80033e8:	d005      	beq.n	80033f6 <__iar_annotation$$branch+0x80a>
 80033ea:	2014      	movs	r0, #20
 80033ec:	4669      	mov	r1, sp
 80033ee:	7308      	strb	r0, [r1, #12]
 80033f0:	0028      	movs	r0, r5
 80033f2:	f7fd fa9c 	bl	800092e <PE_Clear_RxEvent>
 80033f6:	e185      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 80033f8:	06c0      	lsls	r0, r0, #27
 80033fa:	0ec0      	lsrs	r0, r0, #27
 80033fc:	2810      	cmp	r0, #16
 80033fe:	d000      	beq.n	8003402 <__iar_annotation$$branch+0x816>
 8003400:	e64e      	b.n	80030a0 <__iar_annotation$$branch+0x4b4>
 8003402:	2014      	movs	r0, #20
 8003404:	4669      	mov	r1, sp
 8003406:	7308      	strb	r0, [r1, #12]
 8003408:	0028      	movs	r0, r5
 800340a:	f7fd fa90 	bl	800092e <PE_Clear_RxEvent>
 800340e:	2400      	movs	r4, #0
 8003410:	83ec      	strh	r4, [r5, #30]
 8003412:	2003      	movs	r0, #3
 8003414:	7468      	strb	r0, [r5, #17]
 8003416:	2159      	movs	r1, #89	; 0x59
 8003418:	0028      	movs	r0, r5
 800341a:	f7fd ff35 	bl	8001288 <PE_Notification>
 800341e:	e171      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 8003420:	0028      	movs	r0, r5
 8003422:	f7fe fb03 	bl	8001a2c <PE_SubStateMachine_ExtendedMessages>
 8003426:	e16c      	b.n	8003702 <__iar_annotation$$branch+0x1a>
 8003428:	a903      	add	r1, sp, #12
 800342a:	0028      	movs	r0, r5
 800342c:	f7fd fc72 	bl	8000d14 <PE_SubStateMachine_Generic>
 8003430:	e167      	b.n	8003702 <__iar_annotation$$branch+0x1a>
 8003432:	a903      	add	r1, sp, #12
 8003434:	0028      	movs	r0, r5
 8003436:	f000 fc77 	bl	8003d28 <PE_SubStateMachine_VconnSwap>
 800343a:	0004      	movs	r4, r0
 800343c:	6868      	ldr	r0, [r5, #4]
 800343e:	6800      	ldr	r0, [r0, #0]
 8003440:	0401      	lsls	r1, r0, #16
 8003442:	0fc9      	lsrs	r1, r1, #31
 8003444:	d002      	beq.n	800344c <__iar_annotation$$branch+0x860>
 8003446:	6828      	ldr	r0, [r5, #0]
 8003448:	6801      	ldr	r1, [r0, #0]
 800344a:	e000      	b.n	800344e <__iar_annotation$$branch+0x862>
 800344c:	2101      	movs	r1, #1
 800344e:	4668      	mov	r0, sp
 8003450:	7b40      	ldrb	r0, [r0, #13]
 8003452:	f002 f94f 	bl	80056f4 <USBPD_PRL_SOPCapability>
 8003456:	e155      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 8003458:	4669      	mov	r1, sp
 800345a:	7b09      	ldrb	r1, [r1, #12]
 800345c:	2911      	cmp	r1, #17
 800345e:	d115      	bne.n	800348c <__iar_annotation$$branch+0x8a0>
 8003460:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8003462:	4008      	ands	r0, r1
 8003464:	2813      	cmp	r0, #19
 8003466:	d111      	bne.n	800348c <__iar_annotation$$branch+0x8a0>
 8003468:	2000      	movs	r0, #0
 800346a:	9000      	str	r0, [sp, #0]
 800346c:	2320      	movs	r3, #32
 800346e:	2203      	movs	r2, #3
 8003470:	2100      	movs	r1, #0
 8003472:	0028      	movs	r0, r5
 8003474:	f7fd ffa4 	bl	80013c0 <PE_Send_CtrlMessage>
 8003478:	4668      	mov	r0, sp
 800347a:	7b00      	ldrb	r0, [r0, #12]
 800347c:	2814      	cmp	r0, #20
 800347e:	d005      	beq.n	800348c <__iar_annotation$$branch+0x8a0>
 8003480:	2014      	movs	r0, #20
 8003482:	4669      	mov	r1, sp
 8003484:	7308      	strb	r0, [r1, #12]
 8003486:	0028      	movs	r0, r5
 8003488:	f7fd fa51 	bl	800092e <PE_Clear_RxEvent>
 800348c:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 800348e:	03a1      	lsls	r1, r4, #14
 8003490:	4288      	cmp	r0, r1
 8003492:	d102      	bne.n	800349a <__iar_annotation$$branch+0x8ae>
 8003494:	2092      	movs	r0, #146	; 0x92
 8003496:	7468      	strb	r0, [r5, #17]
 8003498:	2400      	movs	r4, #0
 800349a:	e133      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 800349c:	4668      	mov	r0, sp
 800349e:	7b01      	ldrb	r1, [r0, #12]
 80034a0:	0028      	movs	r0, r5
 80034a2:	f001 fe87 	bl	80051b4 <PE_StateMachine_UVDM>
 80034a6:	e12d      	b.n	8003704 <__iar_annotation$$branch+0x1c>
 80034a8:	6968      	ldr	r0, [r5, #20]
 80034aa:	2701      	movs	r7, #1
 80034ac:	0b01      	lsrs	r1, r0, #12
 80034ae:	4039      	ands	r1, r7
 80034b0:	d019      	beq.n	80034e6 <__iar_annotation$$branch+0x8fa>
 80034b2:	0b40      	lsrs	r0, r0, #13
 80034b4:	4038      	ands	r0, r7
 80034b6:	d007      	beq.n	80034c8 <__iar_annotation$$branch+0x8dc>
 80034b8:	215b      	movs	r1, #91	; 0x5b
 80034ba:	0028      	movs	r0, r5
 80034bc:	f7fd fee4 	bl	8001288 <PE_Notification>
 80034c0:	6968      	ldr	r0, [r5, #20]
 80034c2:	49ba      	ldr	r1, [pc, #744]	; (80037ac <.text_3>)
 80034c4:	4001      	ands	r1, r0
 80034c6:	6169      	str	r1, [r5, #20]
 80034c8:	2003      	movs	r0, #3
 80034ca:	7468      	strb	r0, [r5, #17]
 80034cc:	7ca9      	ldrb	r1, [r5, #18]
 80034ce:	2903      	cmp	r1, #3
 80034d0:	d008      	beq.n	80034e4 <__iar_annotation$$branch+0x8f8>
 80034d2:	74a8      	strb	r0, [r5, #18]
 80034d4:	2000      	movs	r0, #0
 80034d6:	9000      	str	r0, [sp, #0]
 80034d8:	2300      	movs	r3, #0
 80034da:	2203      	movs	r2, #3
 80034dc:	7c29      	ldrb	r1, [r5, #16]
 80034de:	2004      	movs	r0, #4
 80034e0:	6834      	ldr	r4, [r6, #0]
 80034e2:	47a0      	blx	r4
 80034e4:	2401      	movs	r4, #1
 80034e6:	e13b      	b.n	8003760 <__iar_annotation$$branch+0x78>
 80034e8:	000081d6 	.word	0x000081d6
 80034ec:	00000267 	.word	0x00000267
 80034f0:	00000263 	.word	0x00000263
 80034f4:	4668      	mov	r0, sp
 80034f6:	7344      	strb	r4, [r0, #13]
 80034f8:	9607      	str	r6, [sp, #28]
 80034fa:	6868      	ldr	r0, [r5, #4]
 80034fc:	6800      	ldr	r0, [r0, #0]
 80034fe:	04c1      	lsls	r1, r0, #19
 8003500:	0fc9      	lsrs	r1, r1, #31
 8003502:	d101      	bne.n	8003508 <__iar_annotation$$branch+0x4>

08003504 <__iar_annotation$$branch>:
 8003504:	f7ff fb4d 	bl	8002ba2 <__iar_annotation$$branch+0x8>
 8003508:	6968      	ldr	r0, [r5, #20]
 800350a:	03c1      	lsls	r1, r0, #15
 800350c:	0fc9      	lsrs	r1, r1, #31
 800350e:	d101      	bne.n	8003514 <__iar_annotation$$branch+0x4>

08003510 <__iar_annotation$$branch>:
 8003510:	f7ff fb54 	bl	8002bbc <__iar_annotation$$branch+0x18>
 8003514:	4668      	mov	r0, sp
 8003516:	7b40      	ldrb	r0, [r0, #13]
 8003518:	f002 f8e4 	bl	80056e4 <USBPD_PRL_FastRoleSwapSignalling>
 800351c:	20a6      	movs	r0, #166	; 0xa6
 800351e:	7468      	strb	r0, [r5, #17]
 8003520:	2109      	movs	r1, #9
 8003522:	7729      	strb	r1, [r5, #28]
 8003524:	2100      	movs	r1, #0
 8003526:	2232      	movs	r2, #50	; 0x32
 8003528:	54a9      	strb	r1, [r5, r2]
 800352a:	6969      	ldr	r1, [r5, #20]
 800352c:	4aa0      	ldr	r2, [pc, #640]	; (80037b0 <.text_4>)
 800352e:	400a      	ands	r2, r1
 8003530:	616a      	str	r2, [r5, #20]
 8003532:	49a0      	ldr	r1, [pc, #640]	; (80037b4 <.text_5>)
 8003534:	84e9      	strh	r1, [r5, #38]	; 0x26
 8003536:	7ca9      	ldrb	r1, [r5, #18]
 8003538:	29a6      	cmp	r1, #166	; 0xa6
 800353a:	d001      	beq.n	8003540 <__iar_annotation$$branch+0x4>

0800353c <__iar_annotation$$branch>:
 800353c:	f7ff fb34 	bl	8002ba8 <__iar_annotation$$branch+0x4>
 8003540:	2402      	movs	r4, #2
 8003542:	4668      	mov	r0, sp
 8003544:	7b00      	ldrb	r0, [r0, #12]
 8003546:	2801      	cmp	r0, #1
 8003548:	d118      	bne.n	800357c <__iar_annotation$$branch+0x40>
 800354a:	6868      	ldr	r0, [r5, #4]
 800354c:	6800      	ldr	r0, [r0, #0]
 800354e:	0701      	lsls	r1, r0, #28
 8003550:	0fc9      	lsrs	r1, r1, #31
 8003552:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8003554:	0680      	lsls	r0, r0, #26
 8003556:	0fc2      	lsrs	r2, r0, #31
 8003558:	4291      	cmp	r1, r2
 800355a:	d10f      	bne.n	800357c <__iar_annotation$$branch+0x40>
 800355c:	2092      	movs	r0, #146	; 0x92
 800355e:	7468      	strb	r0, [r5, #17]
 8003560:	7ca8      	ldrb	r0, [r5, #18]
 8003562:	2892      	cmp	r0, #146	; 0x92
 8003564:	d00a      	beq.n	800357c <__iar_annotation$$branch+0x40>
 8003566:	2092      	movs	r0, #146	; 0x92
 8003568:	74a8      	strb	r0, [r5, #18]
 800356a:	2000      	movs	r0, #0
 800356c:	9000      	str	r0, [sp, #0]
 800356e:	2300      	movs	r3, #0
 8003570:	2292      	movs	r2, #146	; 0x92
 8003572:	7c29      	ldrb	r1, [r5, #16]
 8003574:	2004      	movs	r0, #4
 8003576:	4e90      	ldr	r6, [pc, #576]	; (80037b8 <.text_6>)
 8003578:	6836      	ldr	r6, [r6, #0]
 800357a:	47b0      	blx	r6
 800357c:	9807      	ldr	r0, [sp, #28]
 800357e:	2800      	cmp	r0, #0
 8003580:	d001      	beq.n	8003586 <__iar_annotation$$branch+0x4a>
 8003582:	2001      	movs	r0, #1
 8003584:	9004      	str	r0, [sp, #16]
 8003586:	488d      	ldr	r0, [pc, #564]	; (80037bc <.text_7>)
 8003588:	182e      	adds	r6, r5, r0
 800358a:	4f8d      	ldr	r7, [pc, #564]	; (80037c0 <.text_8>)
 800358c:	488d      	ldr	r0, [pc, #564]	; (80037c4 <.text_9>)
 800358e:	7c69      	ldrb	r1, [r5, #17]
 8003590:	2900      	cmp	r1, #0
 8003592:	d101      	bne.n	8003598 <__iar_annotation$$branch+0x4>

08003594 <__iar_annotation$$branch>:
 8003594:	f7ff fb2c 	bl	8002bf0 <__iar_annotation$$branch+0x4>
 8003598:	1e49      	subs	r1, r1, #1
 800359a:	d067      	beq.n	800366c <__iar_annotation$$branch+0x54>
 800359c:	1e49      	subs	r1, r1, #1
 800359e:	d101      	bne.n	80035a4 <__iar_annotation$$branch+0x4>

080035a0 <__iar_annotation$$branch>:
 80035a0:	f7ff fb3e 	bl	8002c20 <__iar_annotation$$branch+0x34>
 80035a4:	1e49      	subs	r1, r1, #1
 80035a6:	2901      	cmp	r1, #1
 80035a8:	d800      	bhi.n	80035ac <__iar_annotation$$branch+0xc>
 80035aa:	e6b8      	b.n	800331e <__iar_annotation$$branch+0x732>
 80035ac:	1e89      	subs	r1, r1, #2
 80035ae:	d100      	bne.n	80035b2 <__iar_annotation$$branch+0x12>
 80035b0:	e099      	b.n	80036e6 <__iar_annotation$$branch+0xa>
 80035b2:	1e49      	subs	r1, r1, #1
 80035b4:	d101      	bne.n	80035ba <__iar_annotation$$branch+0x4>

080035b6 <__iar_annotation$$branch>:
 80035b6:	f7ff fb7b 	bl	8002cb0 <__iar_annotation$$branch+0xc4>
 80035ba:	1e49      	subs	r1, r1, #1
 80035bc:	d101      	bne.n	80035c2 <__iar_annotation$$branch+0x4>

080035be <__iar_annotation$$branch>:
 80035be:	f7ff fb7e 	bl	8002cbe <__iar_annotation$$branch+0xd2>
 80035c2:	1e49      	subs	r1, r1, #1
 80035c4:	d101      	bne.n	80035ca <__iar_annotation$$branch+0x4>

080035c6 <__iar_annotation$$branch>:
 80035c6:	f7ff fb92 	bl	8002cee <__iar_annotation$$branch+0x102>
 80035ca:	1e49      	subs	r1, r1, #1
 80035cc:	d101      	bne.n	80035d2 <__iar_annotation$$branch+0x4>

080035ce <__iar_annotation$$branch>:
 80035ce:	f7ff fbd2 	bl	8002d76 <__iar_annotation$$branch+0x18a>
 80035d2:	1ec9      	subs	r1, r1, #3
 80035d4:	d101      	bne.n	80035da <__iar_annotation$$branch+0x4>

080035d6 <__iar_annotation$$branch>:
 80035d6:	f7ff fbd2 	bl	8002d7e <__iar_annotation$$branch+0x192>
 80035da:	1e49      	subs	r1, r1, #1
 80035dc:	d101      	bne.n	80035e2 <__iar_annotation$$branch+0x4>

080035de <__iar_annotation$$branch>:
 80035de:	f7ff fbe3 	bl	8002da8 <__iar_annotation$$branch+0x1bc>
 80035e2:	1e49      	subs	r1, r1, #1
 80035e4:	d101      	bne.n	80035ea <__iar_annotation$$branch+0x4>

080035e6 <__iar_annotation$$branch>:
 80035e6:	f7ff fb0c 	bl	8002c02 <__iar_annotation$$branch+0x16>
 80035ea:	1e49      	subs	r1, r1, #1
 80035ec:	d100      	bne.n	80035f0 <__iar_annotation$$branch+0xa>
 80035ee:	e467      	b.n	8002ec0 <__iar_annotation$$branch+0x2d4>
 80035f0:	1e49      	subs	r1, r1, #1
 80035f2:	d100      	bne.n	80035f6 <__iar_annotation$$branch+0x10>
 80035f4:	e424      	b.n	8002e40 <__iar_annotation$$branch+0x254>
 80035f6:	1e49      	subs	r1, r1, #1
 80035f8:	d100      	bne.n	80035fc <__iar_annotation$$branch+0x16>
 80035fa:	e426      	b.n	8002e4a <__iar_annotation$$branch+0x25e>
 80035fc:	1e49      	subs	r1, r1, #1
 80035fe:	d100      	bne.n	8003602 <__iar_annotation$$branch+0x1c>
 8003600:	e433      	b.n	8002e6a <__iar_annotation$$branch+0x27e>
 8003602:	1e49      	subs	r1, r1, #1
 8003604:	d100      	bne.n	8003608 <__iar_annotation$$branch+0x22>
 8003606:	e4cb      	b.n	8002fa0 <__iar_annotation$$branch+0x3b4>
 8003608:	1e49      	subs	r1, r1, #1
 800360a:	d100      	bne.n	800360e <__iar_annotation$$branch+0x28>
 800360c:	e473      	b.n	8002ef6 <__iar_annotation$$branch+0x30a>
 800360e:	1e49      	subs	r1, r1, #1
 8003610:	d100      	bne.n	8003614 <__iar_annotation$$branch+0x2e>
 8003612:	e474      	b.n	8002efe <__iar_annotation$$branch+0x312>
 8003614:	1e49      	subs	r1, r1, #1
 8003616:	d101      	bne.n	800361c <__iar_annotation$$branch+0x4>

08003618 <__iar_annotation$$branch>:
 8003618:	f7ff fb82 	bl	8002d20 <__iar_annotation$$branch+0x134>
 800361c:	1e49      	subs	r1, r1, #1
 800361e:	d100      	bne.n	8003622 <__iar_annotation$$branch+0xa>
 8003620:	e48d      	b.n	8002f3e <__iar_annotation$$branch+0x352>
 8003622:	1e49      	subs	r1, r1, #1
 8003624:	2901      	cmp	r1, #1
 8003626:	d921      	bls.n	800366c <__iar_annotation$$branch+0x54>
 8003628:	1e89      	subs	r1, r1, #2
 800362a:	d100      	bne.n	800362e <__iar_annotation$$branch+0x16>
 800362c:	e4df      	b.n	8002fee <__iar_annotation$$branch+0x402>
 800362e:	1e49      	subs	r1, r1, #1
 8003630:	d100      	bne.n	8003634 <__iar_annotation$$branch+0x1c>
 8003632:	e4eb      	b.n	800300c <__iar_annotation$$branch+0x420>
 8003634:	1e89      	subs	r1, r1, #2
 8003636:	d019      	beq.n	800366c <__iar_annotation$$branch+0x54>
 8003638:	1e49      	subs	r1, r1, #1
 800363a:	d100      	bne.n	800363e <__iar_annotation$$branch+0x26>
 800363c:	e5c8      	b.n	80031d0 <__iar_annotation$$branch+0x5e4>
 800363e:	1e49      	subs	r1, r1, #1
 8003640:	d100      	bne.n	8003644 <__iar_annotation$$branch+0x2c>
 8003642:	e5da      	b.n	80031fa <__iar_annotation$$branch+0x60e>
 8003644:	1e49      	subs	r1, r1, #1
 8003646:	d100      	bne.n	800364a <__iar_annotation$$branch+0x32>
 8003648:	e628      	b.n	800329c <__iar_annotation$$branch+0x6b0>
 800364a:	1e49      	subs	r1, r1, #1
 800364c:	d100      	bne.n	8003650 <__iar_annotation$$branch+0x38>
 800364e:	e64f      	b.n	80032f0 <__iar_annotation$$branch+0x704>
 8003650:	1e49      	subs	r1, r1, #1
 8003652:	d100      	bne.n	8003656 <__iar_annotation$$branch+0x3e>
 8003654:	e526      	b.n	80030a4 <__iar_annotation$$branch+0x4b8>
 8003656:	1e89      	subs	r1, r1, #2
 8003658:	d100      	bne.n	800365c <__iar_annotation$$branch+0x44>
 800365a:	e550      	b.n	80030fe <__iar_annotation$$branch+0x512>
 800365c:	1e49      	subs	r1, r1, #1
 800365e:	d100      	bne.n	8003662 <__iar_annotation$$branch+0x4a>
 8003660:	e575      	b.n	800314e <__iar_annotation$$branch+0x562>
 8003662:	1e49      	subs	r1, r1, #1
 8003664:	d100      	bne.n	8003668 <__iar_annotation$$branch+0x50>
 8003666:	e591      	b.n	800318c <__iar_annotation$$branch+0x5a0>
 8003668:	1e49      	subs	r1, r1, #1
 800366a:	2902      	cmp	r1, #2
 800366c:	d800      	bhi.n	8003670 <__iar_annotation$$branch+0x58>
 800366e:	e6db      	b.n	8003428 <__iar_annotation$$branch+0x83c>
 8003670:	1ec9      	subs	r1, r1, #3
 8003672:	d100      	bne.n	8003676 <__iar_annotation$$branch+0x5e>
 8003674:	e53a      	b.n	80030ec <__iar_annotation$$branch+0x500>
 8003676:	1e49      	subs	r1, r1, #1
 8003678:	d100      	bne.n	800367c <__iar_annotation$$branch+0x64>
 800367a:	e655      	b.n	8003328 <__iar_annotation$$branch+0x73c>
 800367c:	1e49      	subs	r1, r1, #1
 800367e:	d0f5      	beq.n	800366c <__iar_annotation$$branch+0x54>
 8003680:	1e49      	subs	r1, r1, #1
 8003682:	d100      	bne.n	8003686 <__iar_annotation$$branch+0x6e>
 8003684:	e660      	b.n	8003348 <__iar_annotation$$branch+0x75c>
 8003686:	1e49      	subs	r1, r1, #1
 8003688:	d100      	bne.n	800368c <__iar_annotation$$branch+0x74>
 800368a:	e686      	b.n	800339a <__iar_annotation$$branch+0x7ae>
 800368c:	1e49      	subs	r1, r1, #1
 800368e:	2901      	cmp	r1, #1
 8003690:	d9ec      	bls.n	800366c <__iar_annotation$$branch+0x54>
 8003692:	1e89      	subs	r1, r1, #2
 8003694:	d001      	beq.n	800369a <__iar_annotation$$branch+0x82>
 8003696:	1e89      	subs	r1, r1, #2
 8003698:	2905      	cmp	r1, #5
 800369a:	d800      	bhi.n	800369e <__iar_annotation$$branch+0x86>
 800369c:	e6c0      	b.n	8003420 <__iar_annotation$$branch+0x834>
 800369e:	1f89      	subs	r1, r1, #6
 80036a0:	d100      	bne.n	80036a4 <__iar_annotation$$branch+0x8c>
 80036a2:	e68b      	b.n	80033bc <__iar_annotation$$branch+0x7d0>
 80036a4:	1e49      	subs	r1, r1, #1
 80036a6:	2903      	cmp	r1, #3
 80036a8:	d9e0      	bls.n	800366c <__iar_annotation$$branch+0x54>
 80036aa:	3912      	subs	r1, #18
 80036ac:	d101      	bne.n	80036b2 <__iar_annotation$$branch+0x4>

080036ae <__iar_annotation$$branch>:
 80036ae:	f7ff fb0a 	bl	8002cc6 <__iar_annotation$$branch+0xda>
 80036b2:	3916      	subs	r1, #22
 80036b4:	2901      	cmp	r1, #1
 80036b6:	d9d9      	bls.n	800366c <__iar_annotation$$branch+0x54>
 80036b8:	3912      	subs	r1, #18
 80036ba:	d0d7      	beq.n	800366c <__iar_annotation$$branch+0x54>
 80036bc:	3912      	subs	r1, #18
 80036be:	d100      	bne.n	80036c2 <__iar_annotation$$branch+0x14>
 80036c0:	e6ec      	b.n	800349c <__iar_annotation$$branch+0x8b0>
 80036c2:	390c      	subs	r1, #12
 80036c4:	d101      	bne.n	80036ca <__iar_annotation$$branch+0x4>

080036c6 <__iar_annotation$$branch>:
 80036c6:	f7ff fa9f 	bl	8002c08 <__iar_annotation$$branch+0x1c>
 80036ca:	1e49      	subs	r1, r1, #1
 80036cc:	2902      	cmp	r1, #2
 80036ce:	d9cd      	bls.n	800366c <__iar_annotation$$branch+0x54>
 80036d0:	1ec9      	subs	r1, r1, #3
 80036d2:	d101      	bne.n	80036d8 <__iar_annotation$$branch+0x4>

080036d4 <__iar_annotation$$branch>:
 80036d4:	f7ff fb85 	bl	8002de2 <__iar_annotation$$branch+0x1f6>
 80036d8:	1e49      	subs	r1, r1, #1
 80036da:	d101      	bne.n	80036e0 <__iar_annotation$$branch+0x4>

080036dc <__iar_annotation$$branch>:
 80036dc:	f7ff fb9a 	bl	8002e14 <__iar_annotation$$branch+0x228>
 80036e0:	1e89      	subs	r1, r1, #2
 80036e2:	d0c3      	beq.n	800366c <__iar_annotation$$branch+0x54>
 80036e4:	1e49      	subs	r1, r1, #1
 80036e6:	d101      	bne.n	80036ec <__iar_annotation$$branch+0x4>

080036e8 <__iar_annotation$$branch>:
 80036e8:	f7ff fadd 	bl	8002ca6 <__iar_annotation$$branch+0xba>
 80036ec:	1e89      	subs	r1, r1, #2
 80036ee:	2908      	cmp	r1, #8
 80036f0:	d800      	bhi.n	80036f4 <__iar_annotation$$branch+0xc>
 80036f2:	e69e      	b.n	8003432 <__iar_annotation$$branch+0x846>
 80036f4:	390a      	subs	r1, #10
 80036f6:	d100      	bne.n	80036fa <__iar_annotation$$branch+0x12>
 80036f8:	e6ae      	b.n	8003458 <__iar_annotation$$branch+0x86c>
 80036fa:	a903      	add	r1, sp, #12
 80036fc:	0028      	movs	r0, r5
 80036fe:	f000 fe85 	bl	800440c <PE_StateMachine_VDM>
 8003702:	0004      	movs	r4, r0
 8003704:	7c6a      	ldrb	r2, [r5, #17]
 8003706:	4e2c      	ldr	r6, [pc, #176]	; (80037b8 <.text_6>)
 8003708:	7ca8      	ldrb	r0, [r5, #18]
 800370a:	4290      	cmp	r0, r2
 800370c:	d007      	beq.n	800371e <__iar_annotation$$branch+0x36>
 800370e:	74aa      	strb	r2, [r5, #18]
 8003710:	2000      	movs	r0, #0
 8003712:	9000      	str	r0, [sp, #0]
 8003714:	2300      	movs	r3, #0
 8003716:	7c29      	ldrb	r1, [r5, #16]
 8003718:	2004      	movs	r0, #4
 800371a:	6837      	ldr	r7, [r6, #0]
 800371c:	47b8      	blx	r7
 800371e:	4668      	mov	r0, sp
 8003720:	7b00      	ldrb	r0, [r0, #12]
 8003722:	2814      	cmp	r0, #20
 8003724:	d100      	bne.n	8003728 <__iar_annotation$$branch+0x40>
 8003726:	e6bf      	b.n	80034a8 <__iar_annotation$$branch+0x8bc>
 8003728:	0028      	movs	r0, r5
 800372a:	f7fd f945 	bl	80009b8 <PE_Check_AMSConflict>
 800372e:	2815      	cmp	r0, #21
 8003730:	d109      	bne.n	8003746 <__iar_annotation$$branch+0x5e>
 8003732:	4668      	mov	r0, sp
 8003734:	7b00      	ldrb	r0, [r0, #12]
 8003736:	2814      	cmp	r0, #20
 8003738:	d005      	beq.n	8003746 <__iar_annotation$$branch+0x5e>
 800373a:	2014      	movs	r0, #20
 800373c:	4669      	mov	r1, sp
 800373e:	7308      	strb	r0, [r1, #12]
 8003740:	0028      	movs	r0, r5
 8003742:	f7fd f8f4 	bl	800092e <PE_Clear_RxEvent>
 8003746:	7c6a      	ldrb	r2, [r5, #17]
 8003748:	7ca8      	ldrb	r0, [r5, #18]
 800374a:	4290      	cmp	r0, r2
 800374c:	d007      	beq.n	800375e <__iar_annotation$$branch+0x76>
 800374e:	74aa      	strb	r2, [r5, #18]
 8003750:	2000      	movs	r0, #0
 8003752:	9000      	str	r0, [sp, #0]
 8003754:	2300      	movs	r3, #0
 8003756:	7c29      	ldrb	r1, [r5, #16]
 8003758:	2004      	movs	r0, #4
 800375a:	6834      	ldr	r4, [r6, #0]
 800375c:	47a0      	blx	r4
 800375e:	2400      	movs	r4, #0
 8003760:	6968      	ldr	r0, [r5, #20]
 8003762:	49ab      	ldr	r1, [pc, #684]	; (8003a10 <.text_13>)
 8003764:	4001      	ands	r1, r0
 8003766:	6169      	str	r1, [r5, #20]
 8003768:	9804      	ldr	r0, [sp, #16]
 800376a:	2800      	cmp	r0, #0
 800376c:	d017      	beq.n	800379e <__iar_annotation$$branch+0xb6>
 800376e:	48bb      	ldr	r0, [pc, #748]	; (8003a5c <.text_15>)
 8003770:	6800      	ldr	r0, [r0, #0]
 8003772:	49bb      	ldr	r1, [pc, #748]	; (8003a60 <.text_16>)
 8003774:	4288      	cmp	r0, r1
 8003776:	d012      	beq.n	800379e <__iar_annotation$$branch+0xb6>
 8003778:	48ba      	ldr	r0, [pc, #744]	; (8003a64 <.text_17>)
 800377a:	7c29      	ldrb	r1, [r5, #16]
 800377c:	0089      	lsls	r1, r1, #2
 800377e:	5841      	ldr	r1, [r0, r1]
 8003780:	694a      	ldr	r2, [r1, #20]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	02db      	lsls	r3, r3, #11
 8003786:	18d2      	adds	r2, r2, r3
 8003788:	614a      	str	r2, [r1, #20]
 800378a:	7c29      	ldrb	r1, [r5, #16]
 800378c:	0089      	lsls	r1, r1, #2
 800378e:	5840      	ldr	r0, [r0, r1]
 8003790:	6941      	ldr	r1, [r0, #20]
 8003792:	0c8a      	lsrs	r2, r1, #18
 8003794:	2a08      	cmp	r2, #8
 8003796:	d302      	bcc.n	800379e <__iar_annotation$$branch+0xb6>
 8003798:	0389      	lsls	r1, r1, #14
 800379a:	0b89      	lsrs	r1, r1, #14
 800379c:	6141      	str	r1, [r0, #20]
 800379e:	2c00      	cmp	r4, #0
 80037a0:	d100      	bne.n	80037a4 <__iar_annotation$$branch+0xbc>
 80037a2:	e6aa      	b.n	80034fa <__iar_annotation$$branch+0x90e>
 80037a4:	0020      	movs	r0, r4
 80037a6:	b009      	add	sp, #36	; 0x24
 80037a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037ac <.text_3>:
 80037ac:	ffffdfff 	.word	0xffffdfff

080037b0 <.text_4>:
 80037b0:	fffeffff 	.word	0xfffeffff

080037b4 <.text_5>:
 80037b4:	00008011 	.word	0x00008011

080037b8 <.text_6>:
 80037b8:	20000000 	.word	0x20000000

080037bc <.text_7>:
 80037bc:	0000025e 	.word	0x0000025e

080037c0 <.text_8>:
 80037c0:	0000801b 	.word	0x0000801b

080037c4 <.text_9>:
 80037c4:	0000f01f 	.word	0x0000f01f

080037c8 <PE_StateMachine_SRC_ReadyWait>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	0004      	movs	r4, r0
 80037cc:	000d      	movs	r5, r1
 80037ce:	2602      	movs	r6, #2
 80037d0:	2700      	movs	r7, #0
 80037d2:	7c60      	ldrb	r0, [r4, #17]
 80037d4:	2803      	cmp	r0, #3
 80037d6:	d10b      	bne.n	80037f0 <PE_StateMachine_SRC_ReadyWait+0x28>
 80037d8:	7727      	strb	r7, [r4, #28]
 80037da:	6860      	ldr	r0, [r4, #4]
 80037dc:	7800      	ldrb	r0, [r0, #0]
 80037de:	0780      	lsls	r0, r0, #30
 80037e0:	0f80      	lsrs	r0, r0, #30
 80037e2:	2802      	cmp	r0, #2
 80037e4:	d102      	bne.n	80037ec <PE_StateMachine_SRC_ReadyWait+0x24>
 80037e6:	7c20      	ldrb	r0, [r4, #16]
 80037e8:	f001 ff65 	bl	80056b6 <USBPD_PRL_SRCReleaseSinkNG>
 80037ec:	2004      	movs	r0, #4
 80037ee:	7460      	strb	r0, [r4, #17]
 80037f0:	7828      	ldrb	r0, [r5, #0]
 80037f2:	2814      	cmp	r0, #20
 80037f4:	d00b      	beq.n	800380e <PE_StateMachine_SRC_ReadyWait+0x46>
 80037f6:	0020      	movs	r0, r4
 80037f8:	f7fe fa40 	bl	8001c7c <PE_ManageRXEvent>
 80037fc:	7828      	ldrb	r0, [r5, #0]
 80037fe:	2814      	cmp	r0, #20
 8003800:	d056      	beq.n	80038b0 <PE_StateMachine_SRC_ReadyWait+0xe8>
 8003802:	2014      	movs	r0, #20
 8003804:	7028      	strb	r0, [r5, #0]
 8003806:	0020      	movs	r0, r4
 8003808:	f7fd f891 	bl	800092e <PE_Clear_RxEvent>
 800380c:	e050      	b.n	80038b0 <PE_StateMachine_SRC_ReadyWait+0xe8>
 800380e:	6960      	ldr	r0, [r4, #20]
 8003810:	0c80      	lsrs	r0, r0, #18
 8003812:	2198      	movs	r1, #152	; 0x98
 8003814:	0089      	lsls	r1, r1, #2
 8003816:	1865      	adds	r5, r4, r1
 8003818:	210f      	movs	r1, #15
 800381a:	03b6      	lsls	r6, r6, #14
 800381c:	2800      	cmp	r0, #0
 800381e:	d01c      	beq.n	800385a <PE_StateMachine_SRC_ReadyWait+0x92>
 8003820:	8c22      	ldrh	r2, [r4, #32]
 8003822:	42b2      	cmp	r2, r6
 8003824:	d10c      	bne.n	8003840 <PE_StateMachine_SRC_ReadyWait+0x78>
 8003826:	7461      	strb	r1, [r4, #17]
 8003828:	9700      	str	r7, [sp, #0]
 800382a:	2300      	movs	r3, #0
 800382c:	2265      	movs	r2, #101	; 0x65
 800382e:	7c21      	ldrb	r1, [r4, #16]
 8003830:	2009      	movs	r0, #9
 8003832:	4c8d      	ldr	r4, [pc, #564]	; (8003a68 <.text_18>)
 8003834:	6824      	ldr	r4, [r4, #0]
 8003836:	47a0      	blx	r4
 8003838:	7828      	ldrb	r0, [r5, #0]
 800383a:	1c40      	adds	r0, r0, #1
 800383c:	7028      	strb	r0, [r5, #0]
 800383e:	e031      	b.n	80038a4 <PE_StateMachine_SRC_ReadyWait+0xdc>
 8003840:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003842:	0509      	lsls	r1, r1, #20
 8003844:	0f49      	lsrs	r1, r1, #29
 8003846:	180a      	adds	r2, r1, r0
 8003848:	2333      	movs	r3, #51	; 0x33
 800384a:	435a      	muls	r2, r3
 800384c:	4316      	orrs	r6, r2
 800384e:	8426      	strh	r6, [r4, #32]
 8003850:	180e      	adds	r6, r1, r0
 8003852:	2033      	movs	r0, #51	; 0x33
 8003854:	4346      	muls	r6, r0
 8003856:	b2b6      	uxth	r6, r6
 8003858:	e02a      	b.n	80038b0 <PE_StateMachine_SRC_ReadyWait+0xe8>
 800385a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800385c:	42b0      	cmp	r0, r6
 800385e:	d101      	bne.n	8003864 <PE_StateMachine_SRC_ReadyWait+0x9c>
 8003860:	7461      	strb	r1, [r4, #17]
 8003862:	e01f      	b.n	80038a4 <PE_StateMachine_SRC_ReadyWait+0xdc>
 8003864:	7c20      	ldrb	r0, [r4, #16]
 8003866:	f7fd f884 	bl	8000972 <PE_PRL_Control_RxEvent>
 800386a:	2800      	cmp	r0, #0
 800386c:	d111      	bne.n	8003892 <PE_StateMachine_SRC_ReadyWait+0xca>
 800386e:	2032      	movs	r0, #50	; 0x32
 8003870:	5c20      	ldrb	r0, [r4, r0]
 8003872:	2800      	cmp	r0, #0
 8003874:	d00d      	beq.n	8003892 <PE_StateMachine_SRC_ReadyWait+0xca>
 8003876:	2133      	movs	r1, #51	; 0x33
 8003878:	5c61      	ldrb	r1, [r4, r1]
 800387a:	2231      	movs	r2, #49	; 0x31
 800387c:	54a1      	strb	r1, [r4, r2]
 800387e:	7460      	strb	r0, [r4, #17]
 8003880:	2132      	movs	r1, #50	; 0x32
 8003882:	5467      	strb	r7, [r4, r1]
 8003884:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003886:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003888:	6960      	ldr	r0, [r4, #20]
 800388a:	08b1      	lsrs	r1, r6, #2
 800388c:	4301      	orrs	r1, r0
 800388e:	6161      	str	r1, [r4, #20]
 8003890:	e008      	b.n	80038a4 <PE_StateMachine_SRC_ReadyWait+0xdc>
 8003892:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8003894:	42b0      	cmp	r0, r6
 8003896:	d107      	bne.n	80038a8 <PE_StateMachine_SRC_ReadyWait+0xe0>
 8003898:	8467      	strh	r7, [r4, #34]	; 0x22
 800389a:	78a8      	ldrb	r0, [r5, #2]
 800389c:	1c40      	adds	r0, r0, #1
 800389e:	70a8      	strb	r0, [r5, #2]
 80038a0:	2005      	movs	r0, #5
 80038a2:	7460      	strb	r0, [r4, #17]
 80038a4:	2600      	movs	r6, #0
 80038a6:	e003      	b.n	80038b0 <PE_StateMachine_SRC_ReadyWait+0xe8>
 80038a8:	0020      	movs	r0, r4
 80038aa:	f7fd fd37 	bl	800131c <PE_CalculateMinTiming>
 80038ae:	0006      	movs	r6, r0
 80038b0:	0030      	movs	r0, r6
 80038b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080038b4 <PE_StateMachine_SRC_SendCapa>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	0004      	movs	r4, r0
 80038b8:	2502      	movs	r5, #2
 80038ba:	2600      	movs	r6, #0
 80038bc:	2701      	movs	r7, #1
 80038be:	6960      	ldr	r0, [r4, #20]
 80038c0:	0780      	lsls	r0, r0, #30
 80038c2:	0fc1      	lsrs	r1, r0, #31
 80038c4:	0020      	movs	r0, r4
 80038c6:	f000 f8a5 	bl	8003a14 <PE_Send_SRCCapabilities>
 80038ca:	2805      	cmp	r0, #5
 80038cc:	d002      	beq.n	80038d4 <PE_StateMachine_SRC_SendCapa+0x20>
 80038ce:	2809      	cmp	r0, #9
 80038d0:	d03c      	beq.n	800394c <PE_StateMachine_SRC_SendCapa+0x98>
 80038d2:	e012      	b.n	80038fa <PE_StateMachine_SRC_SendCapa+0x46>
 80038d4:	7727      	strb	r7, [r4, #28]
 80038d6:	6960      	ldr	r0, [r4, #20]
 80038d8:	4305      	orrs	r5, r0
 80038da:	6165      	str	r5, [r4, #20]
 80038dc:	2098      	movs	r0, #152	; 0x98
 80038de:	0080      	lsls	r0, r0, #2
 80038e0:	1820      	adds	r0, r4, r0
 80038e2:	7046      	strb	r6, [r0, #1]
 80038e4:	7006      	strb	r6, [r0, #0]
 80038e6:	4861      	ldr	r0, [pc, #388]	; (8003a6c <.text_19>)
 80038e8:	83e0      	strh	r0, [r4, #30]
 80038ea:	251b      	movs	r5, #27
 80038ec:	2016      	movs	r0, #22
 80038ee:	7460      	strb	r0, [r4, #17]
 80038f0:	210f      	movs	r1, #15
 80038f2:	0020      	movs	r0, r4
 80038f4:	f7fd fcc8 	bl	8001288 <PE_Notification>
 80038f8:	e028      	b.n	800394c <PE_StateMachine_SRC_SendCapa+0x98>
 80038fa:	6960      	ldr	r0, [r4, #20]
 80038fc:	0840      	lsrs	r0, r0, #1
 80038fe:	4007      	ands	r7, r0
 8003900:	d112      	bne.n	8003928 <PE_StateMachine_SRC_SendCapa+0x74>
 8003902:	2098      	movs	r0, #152	; 0x98
 8003904:	0080      	lsls	r0, r0, #2
 8003906:	1820      	adds	r0, r4, r0
 8003908:	7840      	ldrb	r0, [r0, #1]
 800390a:	2833      	cmp	r0, #51	; 0x33
 800390c:	d219      	bcs.n	8003942 <PE_StateMachine_SRC_SendCapa+0x8e>
 800390e:	4858      	ldr	r0, [pc, #352]	; (8003a70 <.text_20>)
 8003910:	83e0      	strh	r0, [r4, #30]
 8003912:	2596      	movs	r5, #150	; 0x96
 8003914:	2008      	movs	r0, #8
 8003916:	7460      	strb	r0, [r4, #17]
 8003918:	4856      	ldr	r0, [pc, #344]	; (8003a74 <.text_21>)
 800391a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800391c:	4201      	tst	r1, r0
 800391e:	d015      	beq.n	800394c <PE_StateMachine_SRC_SendCapa+0x98>
 8003920:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003922:	0005      	movs	r5, r0
 8003924:	400d      	ands	r5, r1
 8003926:	e011      	b.n	800394c <PE_StateMachine_SRC_SendCapa+0x98>
 8003928:	6860      	ldr	r0, [r4, #4]
 800392a:	7800      	ldrb	r0, [r0, #0]
 800392c:	0780      	lsls	r0, r0, #30
 800392e:	0f80      	lsrs	r0, r0, #30
 8003930:	2802      	cmp	r0, #2
 8003932:	d102      	bne.n	800393a <PE_StateMachine_SRC_SendCapa+0x86>
 8003934:	7c20      	ldrb	r0, [r4, #16]
 8003936:	f001 febe 	bl	80056b6 <USBPD_PRL_SRCReleaseSinkNG>
 800393a:	200f      	movs	r0, #15
 800393c:	7460      	strb	r0, [r4, #17]
 800393e:	2500      	movs	r5, #0
 8003940:	e004      	b.n	800394c <PE_StateMachine_SRC_SendCapa+0x98>
 8003942:	2121      	movs	r1, #33	; 0x21
 8003944:	0020      	movs	r0, r4
 8003946:	f7fd fc9f 	bl	8001288 <PE_Notification>
 800394a:	7466      	strb	r6, [r4, #17]
 800394c:	0028      	movs	r0, r5
 800394e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003950 <PE_StateMachine_SRC_NegocCapa>:
 8003950:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003952:	0006      	movs	r6, r0
 8003954:	2002      	movs	r0, #2
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	2403      	movs	r4, #3
 800395a:	2507      	movs	r5, #7
 800395c:	a901      	add	r1, sp, #4
 800395e:	7c30      	ldrb	r0, [r6, #16]
 8003960:	68b2      	ldr	r2, [r6, #8]
 8003962:	69d2      	ldr	r2, [r2, #28]
 8003964:	4790      	blx	r2
 8003966:	280a      	cmp	r0, #10
 8003968:	d009      	beq.n	800397e <PE_StateMachine_SRC_NegocCapa+0x2e>
 800396a:	280b      	cmp	r0, #11
 800396c:	d002      	beq.n	8003974 <PE_StateMachine_SRC_NegocCapa+0x24>
 800396e:	280d      	cmp	r0, #13
 8003970:	d02e      	beq.n	80039d0 <PE_StateMachine_SRC_NegocCapa+0x80>
 8003972:	e03a      	b.n	80039ea <PE_StateMachine_SRC_NegocCapa+0x9a>
 8003974:	2000      	movs	r0, #0
 8003976:	9000      	str	r0, [sp, #0]
 8003978:	230c      	movs	r3, #12
 800397a:	2202      	movs	r2, #2
 800397c:	e041      	b.n	8003a02 <PE_StateMachine_SRC_NegocCapa+0xb2>
 800397e:	483e      	ldr	r0, [pc, #248]	; (8003a78 <.text_22>)
 8003980:	83f0      	strh	r0, [r6, #30]
 8003982:	201e      	movs	r0, #30
 8003984:	9002      	str	r0, [sp, #8]
 8003986:	6870      	ldr	r0, [r6, #4]
 8003988:	6800      	ldr	r0, [r0, #0]
 800398a:	0a00      	lsrs	r0, r0, #8
 800398c:	4005      	ands	r5, r0
 800398e:	2d01      	cmp	r5, #1
 8003990:	d00c      	beq.n	80039ac <PE_StateMachine_SRC_NegocCapa+0x5c>
 8003992:	9801      	ldr	r0, [sp, #4]
 8003994:	2803      	cmp	r0, #3
 8003996:	d109      	bne.n	80039ac <PE_StateMachine_SRC_NegocCapa+0x5c>
 8003998:	6970      	ldr	r0, [r6, #20]
 800399a:	0880      	lsrs	r0, r0, #2
 800399c:	4004      	ands	r4, r0
 800399e:	2c03      	cmp	r4, #3
 80039a0:	d104      	bne.n	80039ac <PE_StateMachine_SRC_NegocCapa+0x5c>
 80039a2:	2080      	movs	r0, #128	; 0x80
 80039a4:	0200      	lsls	r0, r0, #8
 80039a6:	83f0      	strh	r0, [r6, #30]
 80039a8:	2000      	movs	r0, #0
 80039aa:	9002      	str	r0, [sp, #8]
 80039ac:	2000      	movs	r0, #0
 80039ae:	9000      	str	r0, [sp, #0]
 80039b0:	230c      	movs	r3, #12
 80039b2:	2203      	movs	r2, #3
 80039b4:	2100      	movs	r1, #0
 80039b6:	0030      	movs	r0, r6
 80039b8:	f7fd fd02 	bl	80013c0 <PE_Send_CtrlMessage>
 80039bc:	6970      	ldr	r0, [r6, #20]
 80039be:	210c      	movs	r1, #12
 80039c0:	4388      	bics	r0, r1
 80039c2:	9901      	ldr	r1, [sp, #4]
 80039c4:	0089      	lsls	r1, r1, #2
 80039c6:	220c      	movs	r2, #12
 80039c8:	400a      	ands	r2, r1
 80039ca:	4302      	orrs	r2, r0
 80039cc:	6172      	str	r2, [r6, #20]
 80039ce:	e01c      	b.n	8003a0a <PE_StateMachine_SRC_NegocCapa+0xba>
 80039d0:	6870      	ldr	r0, [r6, #4]
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	0a00      	lsrs	r0, r0, #8
 80039d6:	4005      	ands	r5, r0
 80039d8:	2d03      	cmp	r5, #3
 80039da:	d101      	bne.n	80039e0 <PE_StateMachine_SRC_NegocCapa+0x90>
 80039dc:	2303      	movs	r3, #3
 80039de:	e000      	b.n	80039e2 <PE_StateMachine_SRC_NegocCapa+0x92>
 80039e0:	230e      	movs	r3, #14
 80039e2:	2000      	movs	r0, #0
 80039e4:	9000      	str	r0, [sp, #0]
 80039e6:	220c      	movs	r2, #12
 80039e8:	e00b      	b.n	8003a02 <PE_StateMachine_SRC_NegocCapa+0xb2>
 80039ea:	6870      	ldr	r0, [r6, #4]
 80039ec:	6800      	ldr	r0, [r0, #0]
 80039ee:	0a00      	lsrs	r0, r0, #8
 80039f0:	4005      	ands	r5, r0
 80039f2:	2d03      	cmp	r5, #3
 80039f4:	d101      	bne.n	80039fa <PE_StateMachine_SRC_NegocCapa+0xaa>
 80039f6:	2303      	movs	r3, #3
 80039f8:	e000      	b.n	80039fc <PE_StateMachine_SRC_NegocCapa+0xac>
 80039fa:	230e      	movs	r3, #14
 80039fc:	2000      	movs	r0, #0
 80039fe:	9000      	str	r0, [sp, #0]
 8003a00:	2204      	movs	r2, #4
 8003a02:	2100      	movs	r1, #0
 8003a04:	0030      	movs	r0, r6
 8003a06:	f7fd fcdb 	bl	80013c0 <PE_Send_CtrlMessage>
 8003a0a:	9802      	ldr	r0, [sp, #8]
 8003a0c:	b004      	add	sp, #16
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}

08003a10 <.text_13>:
 8003a10:	ffffefff 	.word	0xffffefff

08003a14 <PE_Send_SRCCapabilities>:
 8003a14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003a16:	0004      	movs	r4, r0
 8003a18:	000d      	movs	r5, r1
 8003a1a:	ab02      	add	r3, sp, #8
 8003a1c:	4817      	ldr	r0, [pc, #92]	; (8003a7c <.text_23>)
 8003a1e:	1822      	adds	r2, r4, r0
 8003a20:	2100      	movs	r1, #0
 8003a22:	7c20      	ldrb	r0, [r4, #16]
 8003a24:	68a6      	ldr	r6, [r4, #8]
 8003a26:	6976      	ldr	r6, [r6, #20]
 8003a28:	47b0      	blx	r6
 8003a2a:	9802      	ldr	r0, [sp, #8]
 8003a2c:	1c80      	adds	r0, r0, #2
 8003a2e:	9002      	str	r0, [sp, #8]
 8003a30:	6860      	ldr	r0, [r4, #4]
 8003a32:	6800      	ldr	r0, [r0, #0]
 8003a34:	04c1      	lsls	r1, r0, #19
 8003a36:	0fc9      	lsrs	r1, r1, #31
 8003a38:	d00e      	beq.n	8003a58 <PE_Send_SRCCapabilities+0x44>
 8003a3a:	9501      	str	r5, [sp, #4]
 8003a3c:	9802      	ldr	r0, [sp, #8]
 8003a3e:	b280      	uxth	r0, r0
 8003a40:	9000      	str	r0, [sp, #0]
 8003a42:	480f      	ldr	r0, [pc, #60]	; (8003a80 <.text_24>)
 8003a44:	1823      	adds	r3, r4, r0
 8003a46:	2201      	movs	r2, #1
 8003a48:	2100      	movs	r1, #0
 8003a4a:	7c20      	ldrb	r0, [r4, #16]
 8003a4c:	f001 fe56 	bl	80056fc <USBPD_PRL_SendMessage>
 8003a50:	2803      	cmp	r0, #3
 8003a52:	d0ed      	beq.n	8003a30 <PE_Send_SRCCapabilities+0x1c>
 8003a54:	b004      	add	sp, #16
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
 8003a58:	2010      	movs	r0, #16
 8003a5a:	e7fb      	b.n	8003a54 <PE_Send_SRCCapabilities+0x40>

08003a5c <.text_15>:
 8003a5c:	200001dc 	.word	0x200001dc

08003a60 <.text_16>:
 8003a60:	b5e8b5cd 	.word	0xb5e8b5cd

08003a64 <.text_17>:
 8003a64:	200001e0 	.word	0x200001e0

08003a68 <.text_18>:
 8003a68:	20000000 	.word	0x20000000

08003a6c <.text_19>:
 8003a6c:	0000801b 	.word	0x0000801b

08003a70 <.text_20>:
 8003a70:	00008096 	.word	0x00008096

08003a74 <.text_21>:
 8003a74:	00007fff 	.word	0x00007fff

08003a78 <.text_22>:
 8003a78:	0000801e 	.word	0x0000801e

08003a7c <.text_23>:
 8003a7c:	00000265 	.word	0x00000265

08003a80 <.text_24>:
 8003a80:	00000263 	.word	0x00000263

08003a84 <PE_StateMachine_VDMCable>:
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	b08d      	sub	sp, #52	; 0x34
 8003a88:	0004      	movs	r4, r0
 8003a8a:	2502      	movs	r5, #2
 8003a8c:	2607      	movs	r6, #7
 8003a8e:	7c60      	ldrb	r0, [r4, #17]
 8003a90:	2805      	cmp	r0, #5
 8003a92:	d002      	beq.n	8003a9a <PE_StateMachine_VDMCable+0x16>
 8003a94:	289a      	cmp	r0, #154	; 0x9a
 8003a96:	d072      	beq.n	8003b7e <PE_StateMachine_VDMCable+0xfa>
 8003a98:	e11e      	b.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003a9a:	6860      	ldr	r0, [r4, #4]
 8003a9c:	7800      	ldrb	r0, [r0, #0]
 8003a9e:	0781      	lsls	r1, r0, #30
 8003aa0:	0f89      	lsrs	r1, r1, #30
 8003aa2:	7c20      	ldrb	r0, [r4, #16]
 8003aa4:	f000 f91b 	bl	8003cde <PE_ExtRevisionInteroperability_Cable>
 8003aa8:	2094      	movs	r0, #148	; 0x94
 8003aaa:	0080      	lsls	r0, r0, #2
 8003aac:	5821      	ldr	r1, [r4, r0]
 8003aae:	201f      	movs	r0, #31
 8003ab0:	4381      	bics	r1, r0
 8003ab2:	4898      	ldr	r0, [pc, #608]	; (8003d14 <.text_4>)
 8003ab4:	4308      	orrs	r0, r1
 8003ab6:	2194      	movs	r1, #148	; 0x94
 8003ab8:	0089      	lsls	r1, r1, #2
 8003aba:	5060      	str	r0, [r4, r1]
 8003abc:	6861      	ldr	r1, [r4, #4]
 8003abe:	9100      	str	r1, [sp, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	9a00      	ldr	r2, [sp, #0]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	0953      	lsrs	r3, r2, #5
 8003ac8:	400b      	ands	r3, r1
 8003aca:	4a93      	ldr	r2, [pc, #588]	; (8003d18 <.text_5>)
 8003acc:	4002      	ands	r2, r0
 8003ace:	0358      	lsls	r0, r3, #13
 8003ad0:	4310      	orrs	r0, r2
 8003ad2:	22ff      	movs	r2, #255	; 0xff
 8003ad4:	0612      	lsls	r2, r2, #24
 8003ad6:	4302      	orrs	r2, r0
 8003ad8:	2094      	movs	r0, #148	; 0x94
 8003ada:	0080      	lsls	r0, r0, #2
 8003adc:	5022      	str	r2, [r4, r0]
 8003ade:	9800      	ldr	r0, [sp, #0]
 8003ae0:	6800      	ldr	r0, [r0, #0]
 8003ae2:	0880      	lsrs	r0, r0, #2
 8003ae4:	4001      	ands	r1, r0
 8003ae6:	d003      	beq.n	8003af0 <PE_StateMachine_VDMCable+0x6c>
 8003ae8:	6960      	ldr	r0, [r4, #20]
 8003aea:	0781      	lsls	r1, r0, #30
 8003aec:	0fc8      	lsrs	r0, r1, #31
 8003aee:	e000      	b.n	8003af2 <PE_StateMachine_VDMCable+0x6e>
 8003af0:	2002      	movs	r0, #2
 8003af2:	2194      	movs	r1, #148	; 0x94
 8003af4:	0089      	lsls	r1, r1, #2
 8003af6:	1867      	adds	r7, r4, r1
 8003af8:	9002      	str	r0, [sp, #8]
 8003afa:	209a      	movs	r0, #154	; 0x9a
 8003afc:	9001      	str	r0, [sp, #4]
 8003afe:	2001      	movs	r0, #1
 8003b00:	9000      	str	r0, [sp, #0]
 8003b02:	003b      	movs	r3, r7
 8003b04:	220f      	movs	r2, #15
 8003b06:	2101      	movs	r1, #1
 8003b08:	0020      	movs	r0, r4
 8003b0a:	f7fd fc86 	bl	800141a <PE_Send_DataMessage>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d109      	bne.n	8003b26 <PE_StateMachine_VDMCable+0xa2>
 8003b12:	6960      	ldr	r0, [r4, #20]
 8003b14:	03a9      	lsls	r1, r5, #14
 8003b16:	4301      	orrs	r1, r0
 8003b18:	6161      	str	r1, [r4, #20]
 8003b1a:	2071      	movs	r0, #113	; 0x71
 8003b1c:	7720      	strb	r0, [r4, #28]
 8003b1e:	487f      	ldr	r0, [pc, #508]	; (8003d1c <.text_6>)
 8003b20:	8460      	strh	r0, [r4, #34]	; 0x22
 8003b22:	251e      	movs	r5, #30
 8003b24:	e0d8      	b.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003b26:	2809      	cmp	r0, #9
 8003b28:	d0fc      	beq.n	8003b24 <PE_StateMachine_VDMCable+0xa0>
 8003b2a:	7cb8      	ldrb	r0, [r7, #18]
 8003b2c:	2815      	cmp	r0, #21
 8003b2e:	d202      	bcs.n	8003b36 <PE_StateMachine_VDMCable+0xb2>
 8003b30:	487b      	ldr	r0, [pc, #492]	; (8003d20 <.text_7>)
 8003b32:	8460      	strh	r0, [r4, #34]	; 0x22
 8003b34:	e00a      	b.n	8003b4c <PE_StateMachine_VDMCable+0xc8>
 8003b36:	68e0      	ldr	r0, [r4, #12]
 8003b38:	6940      	ldr	r0, [r0, #20]
 8003b3a:	9000      	str	r0, [sp, #0]
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d005      	beq.n	8003b4c <PE_StateMachine_VDMCable+0xc8>
 8003b40:	2300      	movs	r3, #0
 8003b42:	2205      	movs	r2, #5
 8003b44:	2101      	movs	r1, #1
 8003b46:	7c20      	ldrb	r0, [r4, #16]
 8003b48:	9f00      	ldr	r7, [sp, #0]
 8003b4a:	47b8      	blx	r7
 8003b4c:	6860      	ldr	r0, [r4, #4]
 8003b4e:	6800      	ldr	r0, [r0, #0]
 8003b50:	0a00      	lsrs	r0, r0, #8
 8003b52:	4030      	ands	r0, r6
 8003b54:	2803      	cmp	r0, #3
 8003b56:	d100      	bne.n	8003b5a <PE_StateMachine_VDMCable+0xd6>
 8003b58:	e09b      	b.n	8003c92 <PE_StateMachine_VDMCable+0x20e>
 8003b5a:	4872      	ldr	r0, [pc, #456]	; (8003d24 <.text_8>)
 8003b5c:	8be1      	ldrh	r1, [r4, #30]
 8003b5e:	4201      	tst	r1, r0
 8003b60:	d00b      	beq.n	8003b7a <PE_StateMachine_VDMCable+0xf6>
 8003b62:	2108      	movs	r1, #8
 8003b64:	7461      	strb	r1, [r4, #17]
 8003b66:	8be1      	ldrh	r1, [r4, #30]
 8003b68:	4001      	ands	r1, r0
 8003b6a:	292d      	cmp	r1, #45	; 0x2d
 8003b6c:	d203      	bcs.n	8003b76 <PE_StateMachine_VDMCable+0xf2>
 8003b6e:	8be1      	ldrh	r1, [r4, #30]
 8003b70:	0005      	movs	r5, r0
 8003b72:	400d      	ands	r5, r1
 8003b74:	e0b0      	b.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003b76:	252d      	movs	r5, #45	; 0x2d
 8003b78:	e0ae      	b.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003b7a:	7466      	strb	r6, [r4, #17]
 8003b7c:	e0ac      	b.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003b7e:	9101      	str	r1, [sp, #4]
 8003b80:	2001      	movs	r0, #1
 8003b82:	f7fc ff0b 	bl	800099c <PE_Convert_SOPRxEvent>
 8003b86:	4669      	mov	r1, sp
 8003b88:	7008      	strb	r0, [r1, #0]
 8003b8a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003b8c:	2700      	movs	r7, #0
 8003b8e:	211f      	movs	r1, #31
 8003b90:	9a01      	ldr	r2, [sp, #4]
 8003b92:	7812      	ldrb	r2, [r2, #0]
 8003b94:	466b      	mov	r3, sp
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d147      	bne.n	8003c2c <PE_StateMachine_VDMCable+0x1a8>
 8003b9c:	0bc2      	lsrs	r2, r0, #15
 8003b9e:	d145      	bne.n	8003c2c <PE_StateMachine_VDMCable+0x1a8>
 8003ba0:	0b02      	lsrs	r2, r0, #12
 8003ba2:	4232      	tst	r2, r6
 8003ba4:	d042      	beq.n	8003c2c <PE_StateMachine_VDMCable+0x1a8>
 8003ba6:	221f      	movs	r2, #31
 8003ba8:	4002      	ands	r2, r0
 8003baa:	2a0f      	cmp	r2, #15
 8003bac:	d13e      	bne.n	8003c2c <PE_StateMachine_VDMCable+0x1a8>
 8003bae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bb0:	7892      	ldrb	r2, [r2, #2]
 8003bb2:	9200      	str	r2, [sp, #0]
 8003bb4:	4011      	ands	r1, r2
 8003bb6:	2901      	cmp	r1, #1
 8003bb8:	d133      	bne.n	8003c22 <PE_StateMachine_VDMCable+0x19e>
 8003bba:	0991      	lsrs	r1, r2, #6
 8003bbc:	d031      	beq.n	8003c22 <PE_StateMachine_VDMCable+0x19e>
 8003bbe:	0600      	lsls	r0, r0, #24
 8003bc0:	0f81      	lsrs	r1, r0, #30
 8003bc2:	7c20      	ldrb	r0, [r4, #16]
 8003bc4:	f000 f88b 	bl	8003cde <PE_ExtRevisionInteroperability_Cable>
 8003bc8:	68e0      	ldr	r0, [r4, #12]
 8003bca:	6940      	ldr	r0, [r0, #20]
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d01b      	beq.n	8003c08 <PE_StateMachine_VDMCable+0x184>
 8003bd0:	9800      	ldr	r0, [sp, #0]
 8003bd2:	0985      	lsrs	r5, r0, #6
 8003bd4:	07a8      	lsls	r0, r5, #30
 8003bd6:	0f80      	lsrs	r0, r0, #30
 8003bd8:	2801      	cmp	r0, #1
 8003bda:	d115      	bne.n	8003c08 <PE_StateMachine_VDMCable+0x184>
 8003bdc:	aa03      	add	r2, sp, #12
 8003bde:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003be0:	1d81      	adds	r1, r0, #6
 8003be2:	7c20      	ldrb	r0, [r4, #16]
 8003be4:	f001 fb90 	bl	8005308 <PE_SVDM_CheckIdentity>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d109      	bne.n	8003c00 <PE_StateMachine_VDMCable+0x17c>
 8003bec:	ab03      	add	r3, sp, #12
 8003bee:	07aa      	lsls	r2, r5, #30
 8003bf0:	0f92      	lsrs	r2, r2, #30
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	7c20      	ldrb	r0, [r4, #16]
 8003bf6:	68e5      	ldr	r5, [r4, #12]
 8003bf8:	696d      	ldr	r5, [r5, #20]
 8003bfa:	47a8      	blx	r5
 8003bfc:	2152      	movs	r1, #82	; 0x52
 8003bfe:	e000      	b.n	8003c02 <PE_StateMachine_VDMCable+0x17e>
 8003c00:	211b      	movs	r1, #27
 8003c02:	0020      	movs	r0, r4
 8003c04:	f7fd fb40 	bl	8001288 <PE_Notification>
 8003c08:	8467      	strh	r7, [r4, #34]	; 0x22
 8003c0a:	6860      	ldr	r0, [r4, #4]
 8003c0c:	6800      	ldr	r0, [r0, #0]
 8003c0e:	0a00      	lsrs	r0, r0, #8
 8003c10:	4030      	ands	r0, r6
 8003c12:	2803      	cmp	r0, #3
 8003c14:	d102      	bne.n	8003c1c <PE_StateMachine_VDMCable+0x198>
 8003c16:	7460      	strb	r0, [r4, #17]
 8003c18:	2500      	movs	r5, #0
 8003c1a:	e002      	b.n	8003c22 <PE_StateMachine_VDMCable+0x19e>
 8003c1c:	7466      	strb	r6, [r4, #17]
 8003c1e:	2500      	movs	r5, #0
 8003c20:	7727      	strb	r7, [r4, #28]
 8003c22:	9801      	ldr	r0, [sp, #4]
 8003c24:	7800      	ldrb	r0, [r0, #0]
 8003c26:	2814      	cmp	r0, #20
 8003c28:	d118      	bne.n	8003c5c <PE_StateMachine_VDMCable+0x1d8>
 8003c2a:	e055      	b.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003c2c:	4001      	ands	r1, r0
 8003c2e:	2910      	cmp	r1, #16
 8003c30:	d11b      	bne.n	8003c6a <PE_StateMachine_VDMCable+0x1e6>
 8003c32:	8467      	strh	r7, [r4, #34]	; 0x22
 8003c34:	6860      	ldr	r0, [r4, #4]
 8003c36:	6800      	ldr	r0, [r0, #0]
 8003c38:	0a00      	lsrs	r0, r0, #8
 8003c3a:	4030      	ands	r0, r6
 8003c3c:	2803      	cmp	r0, #3
 8003c3e:	d102      	bne.n	8003c46 <PE_StateMachine_VDMCable+0x1c2>
 8003c40:	7460      	strb	r0, [r4, #17]
 8003c42:	2500      	movs	r5, #0
 8003c44:	e002      	b.n	8003c4c <PE_StateMachine_VDMCable+0x1c8>
 8003c46:	7466      	strb	r6, [r4, #17]
 8003c48:	2500      	movs	r5, #0
 8003c4a:	7727      	strb	r7, [r4, #28]
 8003c4c:	2159      	movs	r1, #89	; 0x59
 8003c4e:	0020      	movs	r0, r4
 8003c50:	f7fd fb1a 	bl	8001288 <PE_Notification>
 8003c54:	9801      	ldr	r0, [sp, #4]
 8003c56:	7800      	ldrb	r0, [r0, #0]
 8003c58:	2814      	cmp	r0, #20
 8003c5a:	d03d      	beq.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003c5c:	2014      	movs	r0, #20
 8003c5e:	9901      	ldr	r1, [sp, #4]
 8003c60:	7008      	strb	r0, [r1, #0]
 8003c62:	0020      	movs	r0, r4
 8003c64:	f7fc fe63 	bl	800092e <PE_Clear_RxEvent>
 8003c68:	e036      	b.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003c6a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8003c6c:	03a9      	lsls	r1, r5, #14
 8003c6e:	4288      	cmp	r0, r1
 8003c70:	d132      	bne.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003c72:	8467      	strh	r7, [r4, #34]	; 0x22
 8003c74:	6860      	ldr	r0, [r4, #4]
 8003c76:	6801      	ldr	r1, [r0, #0]
 8003c78:	0a0a      	lsrs	r2, r1, #8
 8003c7a:	4032      	ands	r2, r6
 8003c7c:	2a03      	cmp	r2, #3
 8003c7e:	d10c      	bne.n	8003c9a <PE_StateMachine_VDMCable+0x216>
 8003c80:	68e0      	ldr	r0, [r4, #12]
 8003c82:	6945      	ldr	r5, [r0, #20]
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	d004      	beq.n	8003c92 <PE_StateMachine_VDMCable+0x20e>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	7c20      	ldrb	r0, [r4, #16]
 8003c90:	47a8      	blx	r5
 8003c92:	2003      	movs	r0, #3
 8003c94:	7460      	strb	r0, [r4, #17]
 8003c96:	2500      	movs	r5, #0
 8003c98:	e01e      	b.n	8003cd8 <PE_StateMachine_VDMCable+0x254>
 8003c9a:	010a      	lsls	r2, r1, #4
 8003c9c:	0f92      	lsrs	r2, r2, #30
 8003c9e:	2a02      	cmp	r2, #2
 8003ca0:	d10e      	bne.n	8003cc0 <PE_StateMachine_VDMCable+0x23c>
 8003ca2:	4ab9      	ldr	r2, [pc, #740]	; (8003f88 <.text_10>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	0669      	lsls	r1, r5, #25
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	6001      	str	r1, [r0, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	7c20      	ldrb	r0, [r4, #16]
 8003cb0:	f001 fced 	bl	800568e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003cb4:	481a      	ldr	r0, [pc, #104]	; (8003d20 <.text_7>)
 8003cb6:	8460      	strh	r0, [r4, #34]	; 0x22
 8003cb8:	252d      	movs	r5, #45	; 0x2d
 8003cba:	2008      	movs	r0, #8
 8003cbc:	7460      	strb	r0, [r4, #17]
 8003cbe:	e00a      	b.n	8003cd6 <PE_StateMachine_VDMCable+0x252>
 8003cc0:	68e0      	ldr	r0, [r4, #12]
 8003cc2:	6945      	ldr	r5, [r0, #20]
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	d004      	beq.n	8003cd2 <PE_StateMachine_VDMCable+0x24e>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2204      	movs	r2, #4
 8003ccc:	2101      	movs	r1, #1
 8003cce:	7c20      	ldrb	r0, [r4, #16]
 8003cd0:	47a8      	blx	r5
 8003cd2:	7466      	strb	r6, [r4, #17]
 8003cd4:	2500      	movs	r5, #0
 8003cd6:	7727      	strb	r7, [r4, #28]
 8003cd8:	0028      	movs	r0, r5
 8003cda:	b00d      	add	sp, #52	; 0x34
 8003cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cde <PE_ExtRevisionInteroperability_Cable>:
 8003cde:	b570      	push	{r4, r5, r6, lr}
 8003ce0:	4aaa      	ldr	r2, [pc, #680]	; (8003f8c <.text_11>)
 8003ce2:	0083      	lsls	r3, r0, #2
 8003ce4:	58d3      	ldr	r3, [r2, r3]
 8003ce6:	685c      	ldr	r4, [r3, #4]
 8003ce8:	6825      	ldr	r5, [r4, #0]
 8003cea:	2603      	movs	r6, #3
 8003cec:	402e      	ands	r6, r5
 8003cee:	42b1      	cmp	r1, r6
 8003cf0:	da00      	bge.n	8003cf4 <PE_ExtRevisionInteroperability_Cable+0x16>
 8003cf2:	000e      	movs	r6, r1
 8003cf4:	49a4      	ldr	r1, [pc, #656]	; (8003f88 <.text_10>)
 8003cf6:	4029      	ands	r1, r5
 8003cf8:	06b5      	lsls	r5, r6, #26
 8003cfa:	26c0      	movs	r6, #192	; 0xc0
 8003cfc:	0536      	lsls	r6, r6, #20
 8003cfe:	402e      	ands	r6, r5
 8003d00:	430e      	orrs	r6, r1
 8003d02:	6026      	str	r6, [r4, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	6809      	ldr	r1, [r1, #0]
 8003d08:	0e8b      	lsrs	r3, r1, #26
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	4019      	ands	r1, r3
 8003d0e:	f001 fcbe 	bl	800568e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}

08003d14 <.text_4>:
 8003d14:	00008001 	.word	0x00008001

08003d18 <.text_5>:
 8003d18:	0000983f 	.word	0x0000983f

08003d1c <.text_6>:
 8003d1c:	0000801e 	.word	0x0000801e

08003d20 <.text_7>:
 8003d20:	0000802d 	.word	0x0000802d

08003d24 <.text_8>:
 8003d24:	00007fff 	.word	0x00007fff

08003d28 <PE_SubStateMachine_VconnSwap>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	0004      	movs	r4, r0
 8003d2c:	2502      	movs	r5, #2
 8003d2e:	2703      	movs	r7, #3
 8003d30:	4e97      	ldr	r6, [pc, #604]	; (8003f90 <.text_12>)
 8003d32:	2014      	movs	r0, #20
 8003d34:	7c62      	ldrb	r2, [r4, #17]
 8003d36:	2a9d      	cmp	r2, #157	; 0x9d
 8003d38:	d010      	beq.n	8003d5c <PE_SubStateMachine_VconnSwap+0x34>
 8003d3a:	d30e      	bcc.n	8003d5a <PE_SubStateMachine_VconnSwap+0x32>
 8003d3c:	2a9f      	cmp	r2, #159	; 0x9f
 8003d3e:	d057      	beq.n	8003df0 <PE_SubStateMachine_VconnSwap+0xc8>
 8003d40:	d33d      	bcc.n	8003dbe <PE_SubStateMachine_VconnSwap+0x96>
 8003d42:	2aa1      	cmp	r2, #161	; 0xa1
 8003d44:	d100      	bne.n	8003d48 <PE_SubStateMachine_VconnSwap+0x20>
 8003d46:	e085      	b.n	8003e54 <PE_SubStateMachine_VconnSwap+0x12c>
 8003d48:	d377      	bcc.n	8003e3a <PE_SubStateMachine_VconnSwap+0x112>
 8003d4a:	2aa3      	cmp	r2, #163	; 0xa3
 8003d4c:	d100      	bne.n	8003d50 <PE_SubStateMachine_VconnSwap+0x28>
 8003d4e:	e0a3      	b.n	8003e98 <PE_SubStateMachine_VconnSwap+0x170>
 8003d50:	d200      	bcs.n	8003d54 <PE_SubStateMachine_VconnSwap+0x2c>
 8003d52:	e08e      	b.n	8003e72 <PE_SubStateMachine_VconnSwap+0x14a>
 8003d54:	2aa4      	cmp	r2, #164	; 0xa4
 8003d56:	d100      	bne.n	8003d5a <PE_SubStateMachine_VconnSwap+0x32>
 8003d58:	e106      	b.n	8003f68 <PE_SubStateMachine_VconnSwap+0x240>
 8003d5a:	e113      	b.n	8003f84 <PE_SubStateMachine_VconnSwap+0x25c>
 8003d5c:	6860      	ldr	r0, [r4, #4]
 8003d5e:	6800      	ldr	r0, [r0, #0]
 8003d60:	21b8      	movs	r1, #184	; 0xb8
 8003d62:	0149      	lsls	r1, r1, #5
 8003d64:	4001      	ands	r1, r0
 8003d66:	2098      	movs	r0, #152	; 0x98
 8003d68:	0140      	lsls	r0, r0, #5
 8003d6a:	4281      	cmp	r1, r0
 8003d6c:	d121      	bne.n	8003db2 <PE_SubStateMachine_VconnSwap+0x8a>
 8003d6e:	7c20      	ldrb	r0, [r4, #16]
 8003d70:	68a1      	ldr	r1, [r4, #8]
 8003d72:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003d74:	4788      	blx	r1
 8003d76:	280a      	cmp	r0, #10
 8003d78:	d002      	beq.n	8003d80 <PE_SubStateMachine_VconnSwap+0x58>
 8003d7a:	280d      	cmp	r0, #13
 8003d7c:	d007      	beq.n	8003d8e <PE_SubStateMachine_VconnSwap+0x66>
 8003d7e:	e00f      	b.n	8003da0 <PE_SubStateMachine_VconnSwap+0x78>
 8003d80:	209e      	movs	r0, #158	; 0x9e
 8003d82:	7460      	strb	r0, [r4, #17]
 8003d84:	6960      	ldr	r0, [r4, #20]
 8003d86:	02a9      	lsls	r1, r5, #10
 8003d88:	4301      	orrs	r1, r0
 8003d8a:	6161      	str	r1, [r4, #20]
 8003d8c:	e0fa      	b.n	8003f84 <PE_SubStateMachine_VconnSwap+0x25c>
 8003d8e:	2000      	movs	r0, #0
 8003d90:	9000      	str	r0, [sp, #0]
 8003d92:	2303      	movs	r3, #3
 8003d94:	220c      	movs	r2, #12
 8003d96:	2100      	movs	r1, #0
 8003d98:	0020      	movs	r0, r4
 8003d9a:	f7fd fb11 	bl	80013c0 <PE_Send_CtrlMessage>
 8003d9e:	e0f1      	b.n	8003f84 <PE_SubStateMachine_VconnSwap+0x25c>
 8003da0:	2000      	movs	r0, #0
 8003da2:	9000      	str	r0, [sp, #0]
 8003da4:	2303      	movs	r3, #3
 8003da6:	2204      	movs	r2, #4
 8003da8:	2100      	movs	r1, #0
 8003daa:	0020      	movs	r0, r4
 8003dac:	f7fd fb08 	bl	80013c0 <PE_Send_CtrlMessage>
 8003db0:	e002      	b.n	8003db8 <PE_SubStateMachine_VconnSwap+0x90>
 8003db2:	6960      	ldr	r0, [r4, #20]
 8003db4:	4006      	ands	r6, r0
 8003db6:	6166      	str	r6, [r4, #20]
 8003db8:	7467      	strb	r7, [r4, #17]
 8003dba:	2500      	movs	r5, #0
 8003dbc:	e0e2      	b.n	8003f84 <PE_SubStateMachine_VconnSwap+0x25c>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	9000      	str	r0, [sp, #0]
 8003dc2:	239e      	movs	r3, #158	; 0x9e
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	0020      	movs	r0, r4
 8003dca:	f7fd faf9 	bl	80013c0 <PE_Send_CtrlMessage>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d1f4      	bne.n	8003dbc <PE_SubStateMachine_VconnSwap+0x94>
 8003dd2:	6860      	ldr	r0, [r4, #4]
 8003dd4:	6800      	ldr	r0, [r0, #0]
 8003dd6:	0401      	lsls	r1, r0, #16
 8003dd8:	0fc9      	lsrs	r1, r1, #31
 8003dda:	d005      	beq.n	8003de8 <PE_SubStateMachine_VconnSwap+0xc0>
 8003ddc:	209f      	movs	r0, #159	; 0x9f
 8003dde:	7460      	strb	r0, [r4, #17]
 8003de0:	486c      	ldr	r0, [pc, #432]	; (8003f94 <.text_13>)
 8003de2:	83e0      	strh	r0, [r4, #30]
 8003de4:	2596      	movs	r5, #150	; 0x96
 8003de6:	e001      	b.n	8003dec <PE_SubStateMachine_VconnSwap+0xc4>
 8003de8:	20a0      	movs	r0, #160	; 0xa0
 8003dea:	7460      	strb	r0, [r4, #17]
 8003dec:	213f      	movs	r1, #63	; 0x3f
 8003dee:	e0b7      	b.n	8003f60 <PE_SubStateMachine_VconnSwap+0x238>
 8003df0:	8be2      	ldrh	r2, [r4, #30]
 8003df2:	03ab      	lsls	r3, r5, #14
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d100      	bne.n	8003dfa <PE_SubStateMachine_VconnSwap+0xd2>
 8003df8:	e0ac      	b.n	8003f54 <PE_SubStateMachine_VconnSwap+0x22c>
 8003dfa:	780a      	ldrb	r2, [r1, #0]
 8003dfc:	2a11      	cmp	r2, #17
 8003dfe:	d11b      	bne.n	8003e38 <PE_SubStateMachine_VconnSwap+0x110>
 8003e00:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <.text_14>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d116      	bne.n	8003e38 <PE_SubStateMachine_VconnSwap+0x110>
 8003e0a:	7008      	strb	r0, [r1, #0]
 8003e0c:	0020      	movs	r0, r4
 8003e0e:	f7fc fd8e 	bl	800092e <PE_Clear_RxEvent>
 8003e12:	68a0      	ldr	r0, [r4, #8]
 8003e14:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e16:	2a00      	cmp	r2, #0
 8003e18:	d002      	beq.n	8003e20 <PE_SubStateMachine_VconnSwap+0xf8>
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	7c20      	ldrb	r0, [r4, #16]
 8003e1e:	4790      	blx	r2
 8003e20:	6960      	ldr	r0, [r4, #20]
 8003e22:	4006      	ands	r6, r0
 8003e24:	6166      	str	r6, [r4, #20]
 8003e26:	7467      	strb	r7, [r4, #17]
 8003e28:	2500      	movs	r5, #0
 8003e2a:	2142      	movs	r1, #66	; 0x42
 8003e2c:	0020      	movs	r0, r4
 8003e2e:	f7fd fa2b 	bl	8001288 <PE_Notification>
 8003e32:	8465      	strh	r5, [r4, #34]	; 0x22
 8003e34:	4959      	ldr	r1, [pc, #356]	; (8003f9c <.text_15>)
 8003e36:	5465      	strb	r5, [r4, r1]
 8003e38:	e0a4      	b.n	8003f84 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e3a:	68a0      	ldr	r0, [r4, #8]
 8003e3c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e3e:	2a00      	cmp	r2, #0
 8003e40:	d002      	beq.n	8003e48 <PE_SubStateMachine_VconnSwap+0x120>
 8003e42:	2101      	movs	r1, #1
 8003e44:	7c20      	ldrb	r0, [r4, #16]
 8003e46:	4790      	blx	r2
 8003e48:	20a1      	movs	r0, #161	; 0xa1
 8003e4a:	7460      	strb	r0, [r4, #17]
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	4953      	ldr	r1, [pc, #332]	; (8003f9c <.text_15>)
 8003e50:	5460      	strb	r0, [r4, r1]
 8003e52:	e097      	b.n	8003f84 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e54:	2000      	movs	r0, #0
 8003e56:	9000      	str	r0, [sp, #0]
 8003e58:	2303      	movs	r3, #3
 8003e5a:	2206      	movs	r2, #6
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	0020      	movs	r0, r4
 8003e60:	f7fd faae 	bl	80013c0 <PE_Send_CtrlMessage>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d1f4      	bne.n	8003e52 <PE_SubStateMachine_VconnSwap+0x12a>
 8003e68:	6960      	ldr	r0, [r4, #20]
 8003e6a:	4006      	ands	r6, r0
 8003e6c:	6166      	str	r6, [r4, #20]
 8003e6e:	2142      	movs	r1, #66	; 0x42
 8003e70:	e076      	b.n	8003f60 <PE_SubStateMachine_VconnSwap+0x238>
 8003e72:	2000      	movs	r0, #0
 8003e74:	9000      	str	r0, [sp, #0]
 8003e76:	23a3      	movs	r3, #163	; 0xa3
 8003e78:	220b      	movs	r2, #11
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	0020      	movs	r0, r4
 8003e7e:	f7fd fa9f 	bl	80013c0 <PE_Send_CtrlMessage>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d1e5      	bne.n	8003e52 <PE_SubStateMachine_VconnSwap+0x12a>
 8003e86:	6960      	ldr	r0, [r4, #20]
 8003e88:	02a9      	lsls	r1, r5, #10
 8003e8a:	4301      	orrs	r1, r0
 8003e8c:	6161      	str	r1, [r4, #20]
 8003e8e:	4844      	ldr	r0, [pc, #272]	; (8003fa0 <.text_16>)
 8003e90:	83e0      	strh	r0, [r4, #30]
 8003e92:	251b      	movs	r5, #27
 8003e94:	213e      	movs	r1, #62	; 0x3e
 8003e96:	e063      	b.n	8003f60 <PE_SubStateMachine_VconnSwap+0x238>
 8003e98:	780a      	ldrb	r2, [r1, #0]
 8003e9a:	2a11      	cmp	r2, #17
 8003e9c:	d155      	bne.n	8003f4a <PE_SubStateMachine_VconnSwap+0x222>
 8003e9e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003ea0:	23f0      	movs	r3, #240	; 0xf0
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d150      	bne.n	8003f4a <PE_SubStateMachine_VconnSwap+0x222>
 8003ea8:	06d2      	lsls	r2, r2, #27
 8003eaa:	0ed2      	lsrs	r2, r2, #27
 8003eac:	2a03      	cmp	r2, #3
 8003eae:	d006      	beq.n	8003ebe <PE_SubStateMachine_VconnSwap+0x196>
 8003eb0:	2a04      	cmp	r2, #4
 8003eb2:	d024      	beq.n	8003efe <PE_SubStateMachine_VconnSwap+0x1d6>
 8003eb4:	2a0c      	cmp	r2, #12
 8003eb6:	d014      	beq.n	8003ee2 <PE_SubStateMachine_VconnSwap+0x1ba>
 8003eb8:	2a10      	cmp	r2, #16
 8003eba:	d02e      	beq.n	8003f1a <PE_SubStateMachine_VconnSwap+0x1f2>
 8003ebc:	e045      	b.n	8003f4a <PE_SubStateMachine_VconnSwap+0x222>
 8003ebe:	6862      	ldr	r2, [r4, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	0413      	lsls	r3, r2, #16
 8003ec4:	0fdb      	lsrs	r3, r3, #31
 8003ec6:	d001      	beq.n	8003ecc <PE_SubStateMachine_VconnSwap+0x1a4>
 8003ec8:	229f      	movs	r2, #159	; 0x9f
 8003eca:	e000      	b.n	8003ece <PE_SubStateMachine_VconnSwap+0x1a6>
 8003ecc:	22a0      	movs	r2, #160	; 0xa0
 8003ece:	7462      	strb	r2, [r4, #17]
 8003ed0:	780a      	ldrb	r2, [r1, #0]
 8003ed2:	2a14      	cmp	r2, #20
 8003ed4:	d003      	beq.n	8003ede <PE_SubStateMachine_VconnSwap+0x1b6>
 8003ed6:	7008      	strb	r0, [r1, #0]
 8003ed8:	0020      	movs	r0, r4
 8003eda:	f7fc fd28 	bl	800092e <PE_Clear_RxEvent>
 8003ede:	213f      	movs	r1, #63	; 0x3f
 8003ee0:	e030      	b.n	8003f44 <PE_SubStateMachine_VconnSwap+0x21c>
 8003ee2:	6962      	ldr	r2, [r4, #20]
 8003ee4:	4032      	ands	r2, r6
 8003ee6:	6162      	str	r2, [r4, #20]
 8003ee8:	7467      	strb	r7, [r4, #17]
 8003eea:	2500      	movs	r5, #0
 8003eec:	780a      	ldrb	r2, [r1, #0]
 8003eee:	2a14      	cmp	r2, #20
 8003ef0:	d003      	beq.n	8003efa <PE_SubStateMachine_VconnSwap+0x1d2>
 8003ef2:	7008      	strb	r0, [r1, #0]
 8003ef4:	0020      	movs	r0, r4
 8003ef6:	f7fc fd1a 	bl	800092e <PE_Clear_RxEvent>
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	e022      	b.n	8003f44 <PE_SubStateMachine_VconnSwap+0x21c>
 8003efe:	6962      	ldr	r2, [r4, #20]
 8003f00:	4032      	ands	r2, r6
 8003f02:	6162      	str	r2, [r4, #20]
 8003f04:	7467      	strb	r7, [r4, #17]
 8003f06:	2500      	movs	r5, #0
 8003f08:	780a      	ldrb	r2, [r1, #0]
 8003f0a:	2a14      	cmp	r2, #20
 8003f0c:	d003      	beq.n	8003f16 <PE_SubStateMachine_VconnSwap+0x1ee>
 8003f0e:	7008      	strb	r0, [r1, #0]
 8003f10:	0020      	movs	r0, r4
 8003f12:	f7fc fd0c 	bl	800092e <PE_Clear_RxEvent>
 8003f16:	2141      	movs	r1, #65	; 0x41
 8003f18:	e014      	b.n	8003f44 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f1a:	6862      	ldr	r2, [r4, #4]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	0413      	lsls	r3, r2, #16
 8003f20:	0fdb      	lsrs	r3, r3, #31
 8003f22:	d102      	bne.n	8003f2a <PE_SubStateMachine_VconnSwap+0x202>
 8003f24:	22a4      	movs	r2, #164	; 0xa4
 8003f26:	7462      	strb	r2, [r4, #17]
 8003f28:	e004      	b.n	8003f34 <PE_SubStateMachine_VconnSwap+0x20c>
 8003f2a:	6962      	ldr	r2, [r4, #20]
 8003f2c:	4032      	ands	r2, r6
 8003f2e:	6162      	str	r2, [r4, #20]
 8003f30:	7467      	strb	r7, [r4, #17]
 8003f32:	2500      	movs	r5, #0
 8003f34:	780a      	ldrb	r2, [r1, #0]
 8003f36:	2a14      	cmp	r2, #20
 8003f38:	d003      	beq.n	8003f42 <PE_SubStateMachine_VconnSwap+0x21a>
 8003f3a:	7008      	strb	r0, [r1, #0]
 8003f3c:	0020      	movs	r0, r4
 8003f3e:	f7fc fcf6 	bl	800092e <PE_Clear_RxEvent>
 8003f42:	2143      	movs	r1, #67	; 0x43
 8003f44:	0020      	movs	r0, r4
 8003f46:	f7fd f99f 	bl	8001288 <PE_Notification>
 8003f4a:	8be0      	ldrh	r0, [r4, #30]
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	0209      	lsls	r1, r1, #8
 8003f50:	4288      	cmp	r0, r1
 8003f52:	d117      	bne.n	8003f84 <PE_SubStateMachine_VconnSwap+0x25c>
 8003f54:	6960      	ldr	r0, [r4, #20]
 8003f56:	4006      	ands	r6, r0
 8003f58:	6166      	str	r6, [r4, #20]
 8003f5a:	7467      	strb	r7, [r4, #17]
 8003f5c:	2500      	movs	r5, #0
 8003f5e:	211c      	movs	r1, #28
 8003f60:	0020      	movs	r0, r4
 8003f62:	f7fd f991 	bl	8001288 <PE_Notification>
 8003f66:	e00d      	b.n	8003f84 <PE_SubStateMachine_VconnSwap+0x25c>
 8003f68:	68a0      	ldr	r0, [r4, #8]
 8003f6a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003f6c:	2a00      	cmp	r2, #0
 8003f6e:	d002      	beq.n	8003f76 <PE_SubStateMachine_VconnSwap+0x24e>
 8003f70:	2101      	movs	r1, #1
 8003f72:	7c20      	ldrb	r0, [r4, #16]
 8003f74:	4790      	blx	r2
 8003f76:	6960      	ldr	r0, [r4, #20]
 8003f78:	4006      	ands	r6, r0
 8003f7a:	6166      	str	r6, [r4, #20]
 8003f7c:	7467      	strb	r7, [r4, #17]
 8003f7e:	4809      	ldr	r0, [pc, #36]	; (8003fa4 <.text_17>)
 8003f80:	8460      	strh	r0, [r4, #34]	; 0x22
 8003f82:	252d      	movs	r5, #45	; 0x2d
 8003f84:	0028      	movs	r0, r5
 8003f86:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003f88 <.text_10>:
 8003f88:	f3ffffff 	.word	0xf3ffffff

08003f8c <.text_11>:
 8003f8c:	200001e0 	.word	0x200001e0

08003f90 <.text_12>:
 8003f90:	fffff7ff 	.word	0xfffff7ff

08003f94 <.text_13>:
 8003f94:	00008096 	.word	0x00008096

08003f98 <.text_14>:
 8003f98:	0000f01f 	.word	0x0000f01f

08003f9c <.text_15>:
 8003f9c:	00000262 	.word	0x00000262

08003fa0 <.text_16>:
 8003fa0:	0000801b 	.word	0x0000801b

08003fa4 <.text_17>:
 8003fa4:	0000802d 	.word	0x0000802d

08003fa8 <USBPD_PE_SVDM_RequestIdentity>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	4aa9      	ldr	r2, [pc, #676]	; (8004250 <.text_8>)
 8003fac:	0083      	lsls	r3, r0, #2
 8003fae:	58d2      	ldr	r2, [r2, r3]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	6814      	ldr	r4, [r2, #0]
 8003fb4:	6864      	ldr	r4, [r4, #4]
 8003fb6:	0a64      	lsrs	r4, r4, #9
 8003fb8:	401c      	ands	r4, r3
 8003fba:	d004      	beq.n	8003fc6 <USBPD_PE_SVDM_RequestIdentity+0x1e>
 8003fbc:	68d4      	ldr	r4, [r2, #12]
 8003fbe:	2c00      	cmp	r4, #0
 8003fc0:	d001      	beq.n	8003fc6 <USBPD_PE_SVDM_RequestIdentity+0x1e>
 8003fc2:	2902      	cmp	r1, #2
 8003fc4:	d101      	bne.n	8003fca <USBPD_PE_SVDM_RequestIdentity+0x22>
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	bd70      	pop	{r4, r5, r6, pc}
 8003fca:	2432      	movs	r4, #50	; 0x32
 8003fcc:	5d14      	ldrb	r4, [r2, r4]
 8003fce:	2c00      	cmp	r4, #0
 8003fd0:	d104      	bne.n	8003fdc <USBPD_PE_SVDM_RequestIdentity+0x34>
 8003fd2:	6854      	ldr	r4, [r2, #4]
 8003fd4:	6825      	ldr	r5, [r4, #0]
 8003fd6:	0b2d      	lsrs	r5, r5, #12
 8003fd8:	402b      	ands	r3, r5
 8003fda:	d101      	bne.n	8003fe0 <USBPD_PE_SVDM_RequestIdentity+0x38>
 8003fdc:	2003      	movs	r0, #3
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	2333      	movs	r3, #51	; 0x33
 8003fe2:	54d1      	strb	r1, [r2, r3]
 8003fe4:	0013      	movs	r3, r2
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	2507      	movs	r5, #7
 8003fea:	2900      	cmp	r1, #0
 8003fec:	d002      	beq.n	8003ff4 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 8003fee:	2901      	cmp	r1, #1
 8003ff0:	d007      	beq.n	8004002 <USBPD_PE_SVDM_RequestIdentity+0x5a>
 8003ff2:	e018      	b.n	8004026 <USBPD_PE_SVDM_RequestIdentity+0x7e>
 8003ff4:	6821      	ldr	r1, [r4, #0]
 8003ff6:	0a09      	lsrs	r1, r1, #8
 8003ff8:	400d      	ands	r5, r1
 8003ffa:	2d03      	cmp	r5, #3
 8003ffc:	d113      	bne.n	8004026 <USBPD_PE_SVDM_RequestIdentity+0x7e>
 8003ffe:	217d      	movs	r1, #125	; 0x7d
 8004000:	e00b      	b.n	800401a <USBPD_PE_SVDM_RequestIdentity+0x72>
 8004002:	6821      	ldr	r1, [r4, #0]
 8004004:	4caa      	ldr	r4, [pc, #680]	; (80042b0 <.text_10>)
 8004006:	400c      	ands	r4, r1
 8004008:	2682      	movs	r6, #130	; 0x82
 800400a:	0076      	lsls	r6, r6, #1
 800400c:	42b4      	cmp	r4, r6
 800400e:	d003      	beq.n	8004018 <USBPD_PE_SVDM_RequestIdentity+0x70>
 8004010:	0a09      	lsrs	r1, r1, #8
 8004012:	400d      	ands	r5, r1
 8004014:	2d03      	cmp	r5, #3
 8004016:	d106      	bne.n	8004026 <USBPD_PE_SVDM_RequestIdentity+0x7e>
 8004018:	2105      	movs	r1, #5
 800401a:	7019      	strb	r1, [r3, #0]
 800401c:	6891      	ldr	r1, [r2, #8]
 800401e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004020:	4788      	blx	r1
 8004022:	2000      	movs	r0, #0
 8004024:	bd70      	pop	{r4, r5, r6, pc}
 8004026:	2010      	movs	r0, #16
 8004028:	bd70      	pop	{r4, r5, r6, pc}

0800402a <USBPD_PE_SVDM_RequestSVID>:
 800402a:	b570      	push	{r4, r5, r6, lr}
 800402c:	000a      	movs	r2, r1
 800402e:	4988      	ldr	r1, [pc, #544]	; (8004250 <.text_8>)
 8004030:	0083      	lsls	r3, r0, #2
 8004032:	58cb      	ldr	r3, [r1, r3]
 8004034:	68d9      	ldr	r1, [r3, #12]
 8004036:	2900      	cmp	r1, #0
 8004038:	d001      	beq.n	800403e <USBPD_PE_SVDM_RequestSVID+0x14>
 800403a:	2a02      	cmp	r2, #2
 800403c:	d101      	bne.n	8004042 <USBPD_PE_SVDM_RequestSVID+0x18>
 800403e:	2002      	movs	r0, #2
 8004040:	bd70      	pop	{r4, r5, r6, pc}
 8004042:	2132      	movs	r1, #50	; 0x32
 8004044:	5c59      	ldrb	r1, [r3, r1]
 8004046:	2900      	cmp	r1, #0
 8004048:	d105      	bne.n	8004056 <USBPD_PE_SVDM_RequestSVID+0x2c>
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	680d      	ldr	r5, [r1, #0]
 800404e:	2401      	movs	r4, #1
 8004050:	0b29      	lsrs	r1, r5, #12
 8004052:	4021      	ands	r1, r4
 8004054:	d101      	bne.n	800405a <USBPD_PE_SVDM_RequestSVID+0x30>
 8004056:	2003      	movs	r0, #3
 8004058:	bd70      	pop	{r4, r5, r6, pc}
 800405a:	2110      	movs	r1, #16
 800405c:	056d      	lsls	r5, r5, #21
 800405e:	0f6d      	lsrs	r5, r5, #29
 8004060:	2d03      	cmp	r5, #3
 8004062:	d001      	beq.n	8004068 <USBPD_PE_SVDM_RequestSVID+0x3e>
 8004064:	2010      	movs	r0, #16
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	2533      	movs	r5, #51	; 0x33
 800406a:	555a      	strb	r2, [r3, r5]
 800406c:	257f      	movs	r5, #127	; 0x7f
 800406e:	2632      	movs	r6, #50	; 0x32
 8004070:	559d      	strb	r5, [r3, r6]
 8004072:	2a00      	cmp	r2, #0
 8004074:	d005      	beq.n	8004082 <USBPD_PE_SVDM_RequestSVID+0x58>
 8004076:	2a01      	cmp	r2, #1
 8004078:	d107      	bne.n	800408a <USBPD_PE_SVDM_RequestSVID+0x60>
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	0bd2      	lsrs	r2, r2, #15
 800407e:	4014      	ands	r4, r2
 8004080:	d003      	beq.n	800408a <USBPD_PE_SVDM_RequestSVID+0x60>
 8004082:	6899      	ldr	r1, [r3, #8]
 8004084:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004086:	4788      	blx	r1
 8004088:	2100      	movs	r1, #0
 800408a:	0008      	movs	r0, r1
 800408c:	bd70      	pop	{r4, r5, r6, pc}

0800408e <USBPD_PE_SVDM_RequestMode>:
 800408e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <.text_8>)
 8004092:	0084      	lsls	r4, r0, #2
 8004094:	591c      	ldr	r4, [r3, r4]
 8004096:	68e3      	ldr	r3, [r4, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <USBPD_PE_SVDM_RequestMode+0x14>
 800409c:	000b      	movs	r3, r1
 800409e:	2902      	cmp	r1, #2
 80040a0:	d101      	bne.n	80040a6 <USBPD_PE_SVDM_RequestMode+0x18>
 80040a2:	2002      	movs	r0, #2
 80040a4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80040a6:	2132      	movs	r1, #50	; 0x32
 80040a8:	5c61      	ldrb	r1, [r4, r1]
 80040aa:	2900      	cmp	r1, #0
 80040ac:	d105      	bne.n	80040ba <USBPD_PE_SVDM_RequestMode+0x2c>
 80040ae:	6861      	ldr	r1, [r4, #4]
 80040b0:	680e      	ldr	r6, [r1, #0]
 80040b2:	2501      	movs	r5, #1
 80040b4:	0b31      	lsrs	r1, r6, #12
 80040b6:	4029      	ands	r1, r5
 80040b8:	d101      	bne.n	80040be <USBPD_PE_SVDM_RequestMode+0x30>
 80040ba:	2003      	movs	r0, #3
 80040bc:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80040be:	2110      	movs	r1, #16
 80040c0:	0576      	lsls	r6, r6, #21
 80040c2:	0f76      	lsrs	r6, r6, #29
 80040c4:	2e03      	cmp	r6, #3
 80040c6:	d001      	beq.n	80040cc <USBPD_PE_SVDM_RequestMode+0x3e>
 80040c8:	2010      	movs	r0, #16
 80040ca:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80040cc:	2633      	movs	r6, #51	; 0x33
 80040ce:	55a3      	strb	r3, [r4, r6]
 80040d0:	2681      	movs	r6, #129	; 0x81
 80040d2:	2732      	movs	r7, #50	; 0x32
 80040d4:	55e6      	strb	r6, [r4, r7]
 80040d6:	2696      	movs	r6, #150	; 0x96
 80040d8:	00b6      	lsls	r6, r6, #2
 80040da:	53a2      	strh	r2, [r4, r6]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <USBPD_PE_SVDM_RequestMode+0x5e>
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d107      	bne.n	80040f4 <USBPD_PE_SVDM_RequestMode+0x66>
 80040e4:	6962      	ldr	r2, [r4, #20]
 80040e6:	0bd2      	lsrs	r2, r2, #15
 80040e8:	4015      	ands	r5, r2
 80040ea:	d003      	beq.n	80040f4 <USBPD_PE_SVDM_RequestMode+0x66>
 80040ec:	68a1      	ldr	r1, [r4, #8]
 80040ee:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80040f0:	4788      	blx	r1
 80040f2:	2100      	movs	r1, #0
 80040f4:	0008      	movs	r0, r1
 80040f6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080040f8 <USBPD_PE_SVDM_RequestModeEnter>:
 80040f8:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80040fa:	4855      	ldr	r0, [pc, #340]	; (8004250 <.text_8>)
 80040fc:	466c      	mov	r4, sp
 80040fe:	7824      	ldrb	r4, [r4, #0]
 8004100:	00a4      	lsls	r4, r4, #2
 8004102:	5904      	ldr	r4, [r0, r4]
 8004104:	68e0      	ldr	r0, [r4, #12]
 8004106:	2800      	cmp	r0, #0
 8004108:	d101      	bne.n	800410e <USBPD_PE_SVDM_RequestModeEnter+0x16>
 800410a:	2002      	movs	r0, #2
 800410c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800410e:	2032      	movs	r0, #50	; 0x32
 8004110:	5c20      	ldrb	r0, [r4, r0]
 8004112:	2800      	cmp	r0, #0
 8004114:	d105      	bne.n	8004122 <USBPD_PE_SVDM_RequestModeEnter+0x2a>
 8004116:	6860      	ldr	r0, [r4, #4]
 8004118:	6806      	ldr	r6, [r0, #0]
 800411a:	2501      	movs	r5, #1
 800411c:	0b30      	lsrs	r0, r6, #12
 800411e:	4028      	ands	r0, r5
 8004120:	d101      	bne.n	8004126 <USBPD_PE_SVDM_RequestModeEnter+0x2e>
 8004122:	2003      	movs	r0, #3
 8004124:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004126:	2010      	movs	r0, #16
 8004128:	27e1      	movs	r7, #225	; 0xe1
 800412a:	00ff      	lsls	r7, r7, #3
 800412c:	4037      	ands	r7, r6
 800412e:	26c2      	movs	r6, #194	; 0xc2
 8004130:	00b6      	lsls	r6, r6, #2
 8004132:	42b7      	cmp	r7, r6
 8004134:	d11d      	bne.n	8004172 <USBPD_PE_SVDM_RequestModeEnter+0x7a>
 8004136:	2633      	movs	r6, #51	; 0x33
 8004138:	55a1      	strb	r1, [r4, r6]
 800413a:	2682      	movs	r6, #130	; 0x82
 800413c:	2732      	movs	r7, #50	; 0x32
 800413e:	55e6      	strb	r6, [r4, r7]
 8004140:	2696      	movs	r6, #150	; 0x96
 8004142:	00b6      	lsls	r6, r6, #2
 8004144:	53a2      	strh	r2, [r4, r6]
 8004146:	6962      	ldr	r2, [r4, #20]
 8004148:	26e0      	movs	r6, #224	; 0xe0
 800414a:	43b2      	bics	r2, r6
 800414c:	015e      	lsls	r6, r3, #5
 800414e:	23e0      	movs	r3, #224	; 0xe0
 8004150:	4033      	ands	r3, r6
 8004152:	4313      	orrs	r3, r2
 8004154:	6163      	str	r3, [r4, #20]
 8004156:	2900      	cmp	r1, #0
 8004158:	d005      	beq.n	8004166 <USBPD_PE_SVDM_RequestModeEnter+0x6e>
 800415a:	2902      	cmp	r1, #2
 800415c:	d000      	beq.n	8004160 <USBPD_PE_SVDM_RequestModeEnter+0x68>
 800415e:	d208      	bcs.n	8004172 <USBPD_PE_SVDM_RequestModeEnter+0x7a>
 8004160:	0bd9      	lsrs	r1, r3, #15
 8004162:	400d      	ands	r5, r1
 8004164:	d005      	beq.n	8004172 <USBPD_PE_SVDM_RequestModeEnter+0x7a>
 8004166:	4668      	mov	r0, sp
 8004168:	7800      	ldrb	r0, [r0, #0]
 800416a:	68a1      	ldr	r1, [r4, #8]
 800416c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800416e:	4788      	blx	r1
 8004170:	2000      	movs	r0, #0
 8004172:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004174 <USBPD_PE_SVDM_RequestModeExit>:
 8004174:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004176:	4836      	ldr	r0, [pc, #216]	; (8004250 <.text_8>)
 8004178:	466c      	mov	r4, sp
 800417a:	7824      	ldrb	r4, [r4, #0]
 800417c:	00a4      	lsls	r4, r4, #2
 800417e:	5904      	ldr	r4, [r0, r4]
 8004180:	68e0      	ldr	r0, [r4, #12]
 8004182:	2800      	cmp	r0, #0
 8004184:	d101      	bne.n	800418a <USBPD_PE_SVDM_RequestModeExit+0x16>
 8004186:	2002      	movs	r0, #2
 8004188:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800418a:	2032      	movs	r0, #50	; 0x32
 800418c:	5c20      	ldrb	r0, [r4, r0]
 800418e:	2800      	cmp	r0, #0
 8004190:	d105      	bne.n	800419e <USBPD_PE_SVDM_RequestModeExit+0x2a>
 8004192:	6860      	ldr	r0, [r4, #4]
 8004194:	6806      	ldr	r6, [r0, #0]
 8004196:	2501      	movs	r5, #1
 8004198:	0b30      	lsrs	r0, r6, #12
 800419a:	4028      	ands	r0, r5
 800419c:	d101      	bne.n	80041a2 <USBPD_PE_SVDM_RequestModeExit+0x2e>
 800419e:	2003      	movs	r0, #3
 80041a0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041a2:	2010      	movs	r0, #16
 80041a4:	27e1      	movs	r7, #225	; 0xe1
 80041a6:	00ff      	lsls	r7, r7, #3
 80041a8:	4037      	ands	r7, r6
 80041aa:	26c2      	movs	r6, #194	; 0xc2
 80041ac:	00b6      	lsls	r6, r6, #2
 80041ae:	42b7      	cmp	r7, r6
 80041b0:	d11d      	bne.n	80041ee <USBPD_PE_SVDM_RequestModeExit+0x7a>
 80041b2:	2633      	movs	r6, #51	; 0x33
 80041b4:	55a1      	strb	r1, [r4, r6]
 80041b6:	2683      	movs	r6, #131	; 0x83
 80041b8:	2732      	movs	r7, #50	; 0x32
 80041ba:	55e6      	strb	r6, [r4, r7]
 80041bc:	2696      	movs	r6, #150	; 0x96
 80041be:	00b6      	lsls	r6, r6, #2
 80041c0:	53a2      	strh	r2, [r4, r6]
 80041c2:	6962      	ldr	r2, [r4, #20]
 80041c4:	26e0      	movs	r6, #224	; 0xe0
 80041c6:	43b2      	bics	r2, r6
 80041c8:	015e      	lsls	r6, r3, #5
 80041ca:	23e0      	movs	r3, #224	; 0xe0
 80041cc:	4033      	ands	r3, r6
 80041ce:	4313      	orrs	r3, r2
 80041d0:	6163      	str	r3, [r4, #20]
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d005      	beq.n	80041e2 <USBPD_PE_SVDM_RequestModeExit+0x6e>
 80041d6:	2902      	cmp	r1, #2
 80041d8:	d000      	beq.n	80041dc <USBPD_PE_SVDM_RequestModeExit+0x68>
 80041da:	d208      	bcs.n	80041ee <USBPD_PE_SVDM_RequestModeExit+0x7a>
 80041dc:	0bd9      	lsrs	r1, r3, #15
 80041de:	400d      	ands	r5, r1
 80041e0:	d005      	beq.n	80041ee <USBPD_PE_SVDM_RequestModeExit+0x7a>
 80041e2:	4668      	mov	r0, sp
 80041e4:	7800      	ldrb	r0, [r0, #0]
 80041e6:	68a1      	ldr	r1, [r4, #8]
 80041e8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80041ea:	4788      	blx	r1
 80041ec:	2000      	movs	r0, #0
 80041ee:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080041f0 <USBPD_PE_SVDM_RequestSpecific>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	4c17      	ldr	r4, [pc, #92]	; (8004250 <.text_8>)
 80041f4:	0085      	lsls	r5, r0, #2
 80041f6:	5964      	ldr	r4, [r4, r5]
 80041f8:	68e5      	ldr	r5, [r4, #12]
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	d101      	bne.n	8004202 <USBPD_PE_SVDM_RequestSpecific+0x12>
 80041fe:	2002      	movs	r0, #2
 8004200:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004202:	2532      	movs	r5, #50	; 0x32
 8004204:	5d65      	ldrb	r5, [r4, r5]
 8004206:	2d00      	cmp	r5, #0
 8004208:	d105      	bne.n	8004216 <USBPD_PE_SVDM_RequestSpecific+0x26>
 800420a:	6865      	ldr	r5, [r4, #4]
 800420c:	682d      	ldr	r5, [r5, #0]
 800420e:	2601      	movs	r6, #1
 8004210:	0b2f      	lsrs	r7, r5, #12
 8004212:	4037      	ands	r7, r6
 8004214:	d101      	bne.n	800421a <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8004216:	2003      	movs	r0, #3
 8004218:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800421a:	6967      	ldr	r7, [r4, #20]
 800421c:	0bff      	lsrs	r7, r7, #15
 800421e:	403e      	ands	r6, r7
 8004220:	d101      	bne.n	8004226 <USBPD_PE_SVDM_RequestSpecific+0x36>
 8004222:	000e      	movs	r6, r1
 8004224:	d112      	bne.n	800424c <USBPD_PE_SVDM_RequestSpecific+0x5c>
 8004226:	056d      	lsls	r5, r5, #21
 8004228:	0f6d      	lsrs	r5, r5, #29
 800422a:	2d03      	cmp	r5, #3
 800422c:	d10e      	bne.n	800424c <USBPD_PE_SVDM_RequestSpecific+0x5c>
 800422e:	2533      	movs	r5, #51	; 0x33
 8004230:	5561      	strb	r1, [r4, r5]
 8004232:	2185      	movs	r1, #133	; 0x85
 8004234:	2532      	movs	r5, #50	; 0x32
 8004236:	5561      	strb	r1, [r4, r5]
 8004238:	2195      	movs	r1, #149	; 0x95
 800423a:	0089      	lsls	r1, r1, #2
 800423c:	1861      	adds	r1, r4, r1
 800423e:	600a      	str	r2, [r1, #0]
 8004240:	808b      	strh	r3, [r1, #4]
 8004242:	68a1      	ldr	r1, [r4, #8]
 8004244:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004246:	4788      	blx	r1
 8004248:	2000      	movs	r0, #0
 800424a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800424c:	2010      	movs	r0, #16
 800424e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004250 <.text_8>:
 8004250:	200001e0 	.word	0x200001e0

08004254 <USBPD_PE_SVDM_RequestAttention>:
 8004254:	b510      	push	{r4, lr}
 8004256:	4b69      	ldr	r3, [pc, #420]	; (80043fc <.text_13>)
 8004258:	0084      	lsls	r4, r0, #2
 800425a:	591b      	ldr	r3, [r3, r4]
 800425c:	68dc      	ldr	r4, [r3, #12]
 800425e:	2c00      	cmp	r4, #0
 8004260:	d001      	beq.n	8004266 <USBPD_PE_SVDM_RequestAttention+0x12>
 8004262:	2900      	cmp	r1, #0
 8004264:	d001      	beq.n	800426a <USBPD_PE_SVDM_RequestAttention+0x16>
 8004266:	2002      	movs	r0, #2
 8004268:	bd10      	pop	{r4, pc}
 800426a:	2132      	movs	r1, #50	; 0x32
 800426c:	5c59      	ldrb	r1, [r3, r1]
 800426e:	2900      	cmp	r1, #0
 8004270:	d104      	bne.n	800427c <USBPD_PE_SVDM_RequestAttention+0x28>
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	6809      	ldr	r1, [r1, #0]
 8004276:	04cc      	lsls	r4, r1, #19
 8004278:	0fe4      	lsrs	r4, r4, #31
 800427a:	d101      	bne.n	8004280 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800427c:	2003      	movs	r0, #3
 800427e:	bd10      	pop	{r4, pc}
 8004280:	0549      	lsls	r1, r1, #21
 8004282:	0f49      	lsrs	r1, r1, #29
 8004284:	2903      	cmp	r1, #3
 8004286:	d110      	bne.n	80042aa <USBPD_PE_SVDM_RequestAttention+0x56>
 8004288:	2100      	movs	r1, #0
 800428a:	2433      	movs	r4, #51	; 0x33
 800428c:	5519      	strb	r1, [r3, r4]
 800428e:	2184      	movs	r1, #132	; 0x84
 8004290:	2432      	movs	r4, #50	; 0x32
 8004292:	5519      	strb	r1, [r3, r4]
 8004294:	2195      	movs	r1, #149	; 0x95
 8004296:	0089      	lsls	r1, r1, #2
 8004298:	1859      	adds	r1, r3, r1
 800429a:	2406      	movs	r4, #6
 800429c:	600c      	str	r4, [r1, #0]
 800429e:	808a      	strh	r2, [r1, #4]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80042a4:	4788      	blx	r1
 80042a6:	2000      	movs	r0, #0
 80042a8:	bd10      	pop	{r4, pc}
 80042aa:	2010      	movs	r0, #16
 80042ac:	bd10      	pop	{r4, pc}
	...

080042b0 <.text_10>:
 80042b0:	00000704 	.word	0x00000704

080042b4 <USBPD_PE_UVDM_RequestMessage>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4a51      	ldr	r2, [pc, #324]	; (80043fc <.text_13>)
 80042b8:	0083      	lsls	r3, r0, #2
 80042ba:	58d2      	ldr	r2, [r2, r3]
 80042bc:	68d3      	ldr	r3, [r2, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <USBPD_PE_UVDM_RequestMessage+0x12>
 80042c2:	2002      	movs	r0, #2
 80042c4:	bd32      	pop	{r1, r4, r5, pc}
 80042c6:	2332      	movs	r3, #50	; 0x32
 80042c8:	5cd3      	ldrb	r3, [r2, r3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <USBPD_PE_UVDM_RequestMessage+0x26>
 80042ce:	6853      	ldr	r3, [r2, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2401      	movs	r4, #1
 80042d4:	0b1d      	lsrs	r5, r3, #12
 80042d6:	4025      	ands	r5, r4
 80042d8:	d101      	bne.n	80042de <USBPD_PE_UVDM_RequestMessage+0x2a>
 80042da:	2003      	movs	r0, #3
 80042dc:	bd32      	pop	{r1, r4, r5, pc}
 80042de:	0bdd      	lsrs	r5, r3, #15
 80042e0:	402c      	ands	r4, r5
 80042e2:	d101      	bne.n	80042e8 <USBPD_PE_UVDM_RequestMessage+0x34>
 80042e4:	000c      	movs	r4, r1
 80042e6:	d10d      	bne.n	8004304 <USBPD_PE_UVDM_RequestMessage+0x50>
 80042e8:	055b      	lsls	r3, r3, #21
 80042ea:	0f5b      	lsrs	r3, r3, #29
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d109      	bne.n	8004304 <USBPD_PE_UVDM_RequestMessage+0x50>
 80042f0:	2333      	movs	r3, #51	; 0x33
 80042f2:	54d1      	strb	r1, [r2, r3]
 80042f4:	2186      	movs	r1, #134	; 0x86
 80042f6:	2332      	movs	r3, #50	; 0x32
 80042f8:	54d1      	strb	r1, [r2, r3]
 80042fa:	6891      	ldr	r1, [r2, #8]
 80042fc:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80042fe:	4788      	blx	r1
 8004300:	2000      	movs	r0, #0
 8004302:	bd32      	pop	{r1, r4, r5, pc}
 8004304:	2010      	movs	r0, #16
 8004306:	bd32      	pop	{r1, r4, r5, pc}

08004308 <PE_Receive_SVDM>:
 8004308:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 800430a:	0449      	lsls	r1, r1, #17
 800430c:	0f49      	lsrs	r1, r1, #29
 800430e:	1e49      	subs	r1, r1, #1
 8004310:	4a3b      	ldr	r2, [pc, #236]	; (8004400 <.text_14>)
 8004312:	1882      	adds	r2, r0, r2
 8004314:	7611      	strb	r1, [r2, #24]
 8004316:	2131      	movs	r1, #49	; 0x31
 8004318:	5c41      	ldrb	r1, [r0, r1]
 800431a:	2900      	cmp	r1, #0
 800431c:	d000      	beq.n	8004320 <PE_Receive_SVDM+0x18>
 800431e:	4770      	bx	lr
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	2200      	movs	r2, #0
 8004324:	4936      	ldr	r1, [pc, #216]	; (8004400 <.text_14>)
 8004326:	1843      	adds	r3, r0, r1
 8004328:	e010      	b.n	800434c <PE_Receive_SVDM+0x44>
 800432a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800432c:	0094      	lsls	r4, r2, #2
 800432e:	1909      	adds	r1, r1, r4
 8004330:	798c      	ldrb	r4, [r1, #6]
 8004332:	79cd      	ldrb	r5, [r1, #7]
 8004334:	022d      	lsls	r5, r5, #8
 8004336:	1964      	adds	r4, r4, r5
 8004338:	7a0d      	ldrb	r5, [r1, #8]
 800433a:	042d      	lsls	r5, r5, #16
 800433c:	1964      	adds	r4, r4, r5
 800433e:	7a49      	ldrb	r1, [r1, #9]
 8004340:	0609      	lsls	r1, r1, #24
 8004342:	1861      	adds	r1, r4, r1
 8004344:	0094      	lsls	r4, r2, #2
 8004346:	5119      	str	r1, [r3, r4]
 8004348:	1c52      	adds	r2, r2, #1
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	7e19      	ldrb	r1, [r3, #24]
 800434e:	428a      	cmp	r2, r1
 8004350:	dbeb      	blt.n	800432a <PE_Receive_SVDM+0x22>
 8004352:	0004      	movs	r4, r0
 8004354:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <.text_15>)
 8004356:	2075      	movs	r0, #117	; 0x75
 8004358:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <.text_16>)
 800435a:	257a      	movs	r5, #122	; 0x7a
 800435c:	2694      	movs	r6, #148	; 0x94
 800435e:	00b6      	lsls	r6, r6, #2
 8004360:	5da6      	ldrb	r6, [r4, r6]
 8004362:	06f6      	lsls	r6, r6, #27
 8004364:	0ef6      	lsrs	r6, r6, #27
 8004366:	1e76      	subs	r6, r6, #1
 8004368:	d00d      	beq.n	8004386 <PE_Receive_SVDM+0x7e>
 800436a:	1e76      	subs	r6, r6, #1
 800436c:	d021      	beq.n	80043b2 <PE_Receive_SVDM+0xaa>
 800436e:	1e76      	subs	r6, r6, #1
 8004370:	d024      	beq.n	80043bc <PE_Receive_SVDM+0xb4>
 8004372:	1e76      	subs	r6, r6, #1
 8004374:	d027      	beq.n	80043c6 <PE_Receive_SVDM+0xbe>
 8004376:	1e76      	subs	r6, r6, #1
 8004378:	d02a      	beq.n	80043d0 <PE_Receive_SVDM+0xc8>
 800437a:	1e76      	subs	r6, r6, #1
 800437c:	d02c      	beq.n	80043d8 <PE_Receive_SVDM+0xd0>
 800437e:	3e0a      	subs	r6, #10
 8004380:	2e0f      	cmp	r6, #15
 8004382:	d936      	bls.n	80043f2 <PE_Receive_SVDM+0xea>
 8004384:	bd70      	pop	{r4, r5, r6, pc}
 8004386:	2170      	movs	r1, #112	; 0x70
 8004388:	7721      	strb	r1, [r4, #28]
 800438a:	6861      	ldr	r1, [r4, #4]
 800438c:	680b      	ldr	r3, [r1, #0]
 800438e:	069d      	lsls	r5, r3, #26
 8004390:	0fed      	lsrs	r5, r5, #31
 8004392:	2694      	movs	r6, #148	; 0x94
 8004394:	00b6      	lsls	r6, r6, #2
 8004396:	59a6      	ldr	r6, [r4, r6]
 8004398:	0476      	lsls	r6, r6, #17
 800439a:	0fb6      	lsrs	r6, r6, #30
 800439c:	42ae      	cmp	r6, r5
 800439e:	da00      	bge.n	80043a2 <PE_Receive_SVDM+0x9a>
 80043a0:	0035      	movs	r5, r6
 80043a2:	2620      	movs	r6, #32
 80043a4:	43b3      	bics	r3, r6
 80043a6:	016d      	lsls	r5, r5, #5
 80043a8:	4035      	ands	r5, r6
 80043aa:	431d      	orrs	r5, r3
 80043ac:	600d      	str	r5, [r1, #0]
 80043ae:	83e2      	strh	r2, [r4, #30]
 80043b0:	e022      	b.n	80043f8 <PE_Receive_SVDM+0xf0>
 80043b2:	2072      	movs	r0, #114	; 0x72
 80043b4:	7720      	strb	r0, [r4, #28]
 80043b6:	83e2      	strh	r2, [r4, #30]
 80043b8:	2076      	movs	r0, #118	; 0x76
 80043ba:	e01d      	b.n	80043f8 <PE_Receive_SVDM+0xf0>
 80043bc:	2073      	movs	r0, #115	; 0x73
 80043be:	7720      	strb	r0, [r4, #28]
 80043c0:	83e2      	strh	r2, [r4, #30]
 80043c2:	2078      	movs	r0, #120	; 0x78
 80043c4:	e018      	b.n	80043f8 <PE_Receive_SVDM+0xf0>
 80043c6:	2074      	movs	r0, #116	; 0x74
 80043c8:	7720      	strb	r0, [r4, #28]
 80043ca:	83e3      	strh	r3, [r4, #30]
 80043cc:	2079      	movs	r0, #121	; 0x79
 80043ce:	e013      	b.n	80043f8 <PE_Receive_SVDM+0xf0>
 80043d0:	7720      	strb	r0, [r4, #28]
 80043d2:	83e3      	strh	r3, [r4, #30]
 80043d4:	7465      	strb	r5, [r4, #17]
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	68e0      	ldr	r0, [r4, #12]
 80043da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <PE_Receive_SVDM+0xe6>
 80043e0:	2900      	cmp	r1, #0
 80043e2:	d000      	beq.n	80043e6 <PE_Receive_SVDM+0xde>
 80043e4:	2101      	movs	r1, #1
 80043e6:	4806      	ldr	r0, [pc, #24]	; (8004400 <.text_14>)
 80043e8:	5822      	ldr	r2, [r4, r0]
 80043ea:	7c20      	ldrb	r0, [r4, #16]
 80043ec:	4798      	blx	r3
 80043ee:	2003      	movs	r0, #3
 80043f0:	e002      	b.n	80043f8 <PE_Receive_SVDM+0xf0>
 80043f2:	7725      	strb	r5, [r4, #28]
 80043f4:	83e2      	strh	r2, [r4, #30]
 80043f6:	207b      	movs	r0, #123	; 0x7b
 80043f8:	7460      	strb	r0, [r4, #17]
 80043fa:	bd70      	pop	{r4, r5, r6, pc}

080043fc <.text_13>:
 80043fc:	200001e0 	.word	0x200001e0

08004400 <.text_14>:
 8004400:	00000494 	.word	0x00000494

08004404 <.text_15>:
 8004404:	00008019 	.word	0x00008019

08004408 <.text_16>:
 8004408:	0000800f 	.word	0x0000800f

0800440c <PE_StateMachine_VDM>:
 800440c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800440e:	b095      	sub	sp, #84	; 0x54
 8004410:	0005      	movs	r5, r0
 8004412:	2002      	movs	r0, #2
 8004414:	9004      	str	r0, [sp, #16]
 8004416:	7c6a      	ldrb	r2, [r5, #17]
 8004418:	0010      	movs	r0, r2
 800441a:	3875      	subs	r0, #117	; 0x75
 800441c:	2807      	cmp	r0, #7
 800441e:	d206      	bcs.n	800442e <__iar_annotation$$branch+0x4>
 8004420:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004422:	7800      	ldrb	r0, [r0, #0]
 8004424:	2814      	cmp	r0, #20
 8004426:	d002      	beq.n	800442e <__iar_annotation$$branch+0x4>
 8004428:	2002      	movs	r0, #2

0800442a <__iar_annotation$$branch>:
 800442a:	f000 fe85 	bl	8005138 <__iar_annotation$$branch+0x7c8>
 800442e:	2094      	movs	r0, #148	; 0x94
 8004430:	0080      	lsls	r0, r0, #2
 8004432:	182c      	adds	r4, r5, r0
 8004434:	210b      	movs	r1, #11
 8004436:	271e      	movs	r7, #30
 8004438:	201f      	movs	r0, #31
 800443a:	43c0      	mvns	r0, r0
 800443c:	26c0      	movs	r6, #192	; 0xc0
 800443e:	43f6      	mvns	r6, r6
 8004440:	2a75      	cmp	r2, #117	; 0x75
 8004442:	d040      	beq.n	80044c6 <__iar_annotation$$branch+0x6>
 8004444:	2a76      	cmp	r2, #118	; 0x76
 8004446:	d100      	bne.n	800444a <__iar_annotation$$branch+0x20>
 8004448:	e0b2      	b.n	80045b0 <__iar_annotation$$branch+0xf0>
 800444a:	2a77      	cmp	r2, #119	; 0x77
 800444c:	d100      	bne.n	8004450 <__iar_annotation$$branch+0x26>
 800444e:	e124      	b.n	800469a <__iar_annotation$$branch+0x64>
 8004450:	2a78      	cmp	r2, #120	; 0x78
 8004452:	d100      	bne.n	8004456 <__iar_annotation$$branch+0x2c>
 8004454:	e17f      	b.n	8004756 <__iar_annotation$$branch+0x52>
 8004456:	2a79      	cmp	r2, #121	; 0x79
 8004458:	d100      	bne.n	800445c <__iar_annotation$$branch+0x32>
 800445a:	e1e0      	b.n	800481e <__iar_annotation$$branch+0x3a>
 800445c:	2a7a      	cmp	r2, #122	; 0x7a
 800445e:	d100      	bne.n	8004462 <__iar_annotation$$branch+0x38>
 8004460:	e215      	b.n	800488e <__iar_annotation$$branch+0xaa>
 8004462:	2a7b      	cmp	r2, #123	; 0x7b
 8004464:	d100      	bne.n	8004468 <__iar_annotation$$branch+0x3e>
 8004466:	e25c      	b.n	8004922 <__iar_annotation$$branch+0x13e>
 8004468:	2a7d      	cmp	r2, #125	; 0x7d
 800446a:	d100      	bne.n	800446e <__iar_annotation$$branch+0x44>
 800446c:	e2ad      	b.n	80049ca <__iar_annotation$$branch+0x5a>
 800446e:	2a7f      	cmp	r2, #127	; 0x7f
 8004470:	d100      	bne.n	8004474 <__iar_annotation$$branch+0x4a>
 8004472:	e31e      	b.n	8004ab2 <__iar_annotation$$branch+0x142>
 8004474:	2a81      	cmp	r2, #129	; 0x81
 8004476:	d100      	bne.n	800447a <__iar_annotation$$branch+0x50>
 8004478:	e388      	b.n	8004b8c <__iar_annotation$$branch+0x21c>
 800447a:	2a82      	cmp	r2, #130	; 0x82
 800447c:	d101      	bne.n	8004482 <__iar_annotation$$branch+0x4>

0800447e <__iar_annotation$$branch>:
 800447e:	f000 fc01 	bl	8004c84 <__iar_annotation$$branch+0x314>
 8004482:	2a83      	cmp	r2, #131	; 0x83
 8004484:	d101      	bne.n	800448a <__iar_annotation$$branch+0x4>

08004486 <__iar_annotation$$branch>:
 8004486:	f000 fc95 	bl	8004db4 <__iar_annotation$$branch+0x444>
 800448a:	2a84      	cmp	r2, #132	; 0x84
 800448c:	d101      	bne.n	8004492 <__iar_annotation$$branch+0x4>

0800448e <__iar_annotation$$branch>:
 800448e:	f000 fdfb 	bl	8005088 <__iar_annotation$$branch+0x718>
 8004492:	2a85      	cmp	r2, #133	; 0x85
 8004494:	d101      	bne.n	800449a <__iar_annotation$$branch+0x4>

08004496 <__iar_annotation$$branch>:
 8004496:	f000 fd23 	bl	8004ee0 <__iar_annotation$$branch+0x570>
 800449a:	2a87      	cmp	r2, #135	; 0x87
 800449c:	d100      	bne.n	80044a0 <__iar_annotation$$branch+0xa>
 800449e:	e2c9      	b.n	8004a34 <__iar_annotation$$branch+0xc4>
 80044a0:	2a89      	cmp	r2, #137	; 0x89
 80044a2:	d100      	bne.n	80044a6 <__iar_annotation$$branch+0x10>
 80044a4:	e339      	b.n	8004b1a <__iar_annotation$$branch+0x1aa>
 80044a6:	2a8b      	cmp	r2, #139	; 0x8b
 80044a8:	d100      	bne.n	80044ac <__iar_annotation$$branch+0x16>
 80044aa:	e3aa      	b.n	8004c02 <__iar_annotation$$branch+0x292>
 80044ac:	2a8c      	cmp	r2, #140	; 0x8c
 80044ae:	d101      	bne.n	80044b4 <__iar_annotation$$branch+0x4>

080044b0 <__iar_annotation$$branch>:
 80044b0:	f000 fc2e 	bl	8004d10 <__iar_annotation$$branch+0x3a0>
 80044b4:	2a8d      	cmp	r2, #141	; 0x8d
 80044b6:	d101      	bne.n	80044bc <__iar_annotation$$branch+0x4>

080044b8 <__iar_annotation$$branch>:
 80044b8:	f000 fcc0 	bl	8004e3c <__iar_annotation$$branch+0x4cc>
 80044bc:	2a8f      	cmp	r2, #143	; 0x8f
 80044be:	d101      	bne.n	80044c4 <__iar_annotation$$branch+0x4>

080044c0 <__iar_annotation$$branch>:
 80044c0:	f000 fd68 	bl	8004f94 <__iar_annotation$$branch+0x624>
 80044c4:	e280      	b.n	80049c8 <__iar_annotation$$branch+0x58>
 80044c6:	2201      	movs	r2, #1
 80044c8:	9203      	str	r2, [sp, #12]
 80044ca:	03d3      	lsls	r3, r2, #15
 80044cc:	8bea      	ldrh	r2, [r5, #30]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d100      	bne.n	80044d4 <__iar_annotation$$branch+0x14>
 80044d2:	e22d      	b.n	8004930 <__iar_annotation$$branch+0x14c>
 80044d4:	2701      	movs	r7, #1
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	4010      	ands	r0, r2
 80044da:	4338      	orrs	r0, r7
 80044dc:	6020      	str	r0, [r4, #0]
 80044de:	4303      	orrs	r3, r0
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	6868      	ldr	r0, [r5, #4]
 80044e4:	6800      	ldr	r0, [r0, #0]
 80044e6:	0942      	lsrs	r2, r0, #5
 80044e8:	403a      	ands	r2, r7
 80044ea:	48b0      	ldr	r0, [pc, #704]	; (80047ac <__iar_annotation$$branch+0xa8>)
 80044ec:	4018      	ands	r0, r3
 80044ee:	0352      	lsls	r2, r2, #13
 80044f0:	4302      	orrs	r2, r0
 80044f2:	6022      	str	r2, [r4, #0]
 80044f4:	6868      	ldr	r0, [r5, #4]
 80044f6:	6800      	ldr	r0, [r0, #0]
 80044f8:	4001      	ands	r1, r0
 80044fa:	2909      	cmp	r1, #9
 80044fc:	d04b      	beq.n	8004596 <__iar_annotation$$branch+0xd6>
 80044fe:	68e8      	ldr	r0, [r5, #12]
 8004500:	2800      	cmp	r0, #0
 8004502:	d048      	beq.n	8004596 <__iar_annotation$$branch+0xd6>
 8004504:	6803      	ldr	r3, [r0, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d045      	beq.n	8004596 <__iar_annotation$$branch+0xd6>
 800450a:	0c10      	lsrs	r0, r2, #16
 800450c:	21ff      	movs	r1, #255	; 0xff
 800450e:	0209      	lsls	r1, r1, #8
 8004510:	4288      	cmp	r0, r1
 8004512:	d140      	bne.n	8004596 <__iar_annotation$$branch+0xd6>
 8004514:	a90b      	add	r1, sp, #44	; 0x2c
 8004516:	7c28      	ldrb	r0, [r5, #16]
 8004518:	4798      	blx	r3
 800451a:	2803      	cmp	r0, #3
 800451c:	d002      	beq.n	8004524 <__iar_annotation$$branch+0x64>
 800451e:	280f      	cmp	r0, #15
 8004520:	d005      	beq.n	800452e <__iar_annotation$$branch+0x6e>
 8004522:	e038      	b.n	8004596 <__iar_annotation$$branch+0xd6>
 8004524:	6820      	ldr	r0, [r4, #0]
 8004526:	21c0      	movs	r1, #192	; 0xc0
 8004528:	4301      	orrs	r1, r0
 800452a:	6021      	str	r1, [r4, #0]
 800452c:	e038      	b.n	80045a0 <__iar_annotation$$branch+0xe0>
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	4006      	ands	r6, r0
 8004532:	2040      	movs	r0, #64	; 0x40
 8004534:	4330      	orrs	r0, r6
 8004536:	6020      	str	r0, [r4, #0]
 8004538:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800453a:	9006      	str	r0, [sp, #24]
 800453c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800453e:	9007      	str	r0, [sp, #28]
 8004540:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004542:	9008      	str	r0, [sp, #32]
 8004544:	2004      	movs	r0, #4
 8004546:	9003      	str	r0, [sp, #12]
 8004548:	a80b      	add	r0, sp, #44	; 0x2c
 800454a:	2124      	movs	r1, #36	; 0x24
 800454c:	5c40      	ldrb	r0, [r0, r1]
 800454e:	0841      	lsrs	r1, r0, #1
 8004550:	4239      	tst	r1, r7
 8004552:	d003      	beq.n	800455c <__iar_annotation$$branch+0x9c>
 8004554:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004556:	9109      	str	r1, [sp, #36]	; 0x24
 8004558:	2105      	movs	r1, #5
 800455a:	9103      	str	r1, [sp, #12]
 800455c:	08c1      	lsrs	r1, r0, #3
 800455e:	4239      	tst	r1, r7
 8004560:	d00d      	beq.n	800457e <__iar_annotation$$branch+0xbe>
 8004562:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004564:	aa05      	add	r2, sp, #20
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	50d1      	str	r1, [r2, r3]
 800456c:	9903      	ldr	r1, [sp, #12]
 800456e:	1c49      	adds	r1, r1, #1
 8004570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004572:	ab05      	add	r3, sp, #20
 8004574:	008e      	lsls	r6, r1, #2
 8004576:	519a      	str	r2, [r3, r6]
 8004578:	1c49      	adds	r1, r1, #1
 800457a:	b2c9      	uxtb	r1, r1
 800457c:	9103      	str	r1, [sp, #12]
 800457e:	0900      	lsrs	r0, r0, #4
 8004580:	4238      	tst	r0, r7
 8004582:	d00d      	beq.n	80045a0 <__iar_annotation$$branch+0xe0>
 8004584:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004586:	a905      	add	r1, sp, #20
 8004588:	9a03      	ldr	r2, [sp, #12]
 800458a:	0092      	lsls	r2, r2, #2
 800458c:	5088      	str	r0, [r1, r2]
 800458e:	9803      	ldr	r0, [sp, #12]
 8004590:	1c40      	adds	r0, r0, #1
 8004592:	9003      	str	r0, [sp, #12]
 8004594:	e004      	b.n	80045a0 <__iar_annotation$$branch+0xe0>
 8004596:	6820      	ldr	r0, [r4, #0]
 8004598:	4006      	ands	r6, r0
 800459a:	2080      	movs	r0, #128	; 0x80
 800459c:	4330      	orrs	r0, r6
 800459e:	6020      	str	r0, [r4, #0]
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	9005      	str	r0, [sp, #20]
 80045a4:	2000      	movs	r0, #0
 80045a6:	9002      	str	r0, [sp, #8]
 80045a8:	2003      	movs	r0, #3
 80045aa:	9001      	str	r0, [sp, #4]
 80045ac:	9803      	ldr	r0, [sp, #12]
 80045ae:	e203      	b.n	80049b8 <__iar_annotation$$branch+0x48>
 80045b0:	2201      	movs	r2, #1
 80045b2:	466b      	mov	r3, sp
 80045b4:	731a      	strb	r2, [r3, #12]
 80045b6:	03d2      	lsls	r2, r2, #15
 80045b8:	8beb      	ldrh	r3, [r5, #30]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d100      	bne.n	80045c0 <__iar_annotation$$branch+0x100>
 80045be:	e1b7      	b.n	8004930 <__iar_annotation$$branch+0x14c>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	4018      	ands	r0, r3
 80045c4:	2302      	movs	r3, #2
 80045c6:	4303      	orrs	r3, r0
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	6022      	str	r2, [r4, #0]
 80045ce:	6868      	ldr	r0, [r5, #4]
 80045d0:	6803      	ldr	r3, [r0, #0]
 80045d2:	0698      	lsls	r0, r3, #26
 80045d4:	0fc0      	lsrs	r0, r0, #31
 80045d6:	4b75      	ldr	r3, [pc, #468]	; (80047ac <__iar_annotation$$branch+0xa8>)
 80045d8:	4013      	ands	r3, r2
 80045da:	0340      	lsls	r0, r0, #13
 80045dc:	4318      	orrs	r0, r3
 80045de:	6020      	str	r0, [r4, #0]
 80045e0:	686a      	ldr	r2, [r5, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	4011      	ands	r1, r2
 80045e6:	2909      	cmp	r1, #9
 80045e8:	d048      	beq.n	800467c <__iar_annotation$$branch+0x46>
 80045ea:	68e9      	ldr	r1, [r5, #12]
 80045ec:	684b      	ldr	r3, [r1, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d044      	beq.n	800467c <__iar_annotation$$branch+0x46>
 80045f2:	0c00      	lsrs	r0, r0, #16
 80045f4:	21ff      	movs	r1, #255	; 0xff
 80045f6:	0209      	lsls	r1, r1, #8
 80045f8:	4288      	cmp	r0, r1
 80045fa:	d13f      	bne.n	800467c <__iar_annotation$$branch+0x46>
 80045fc:	486c      	ldr	r0, [pc, #432]	; (80047b0 <__iar_annotation$$branch+0xac>)
 80045fe:	182a      	adds	r2, r5, r0
 8004600:	a905      	add	r1, sp, #20
 8004602:	7c28      	ldrb	r0, [r5, #16]
 8004604:	4798      	blx	r3
 8004606:	2803      	cmp	r0, #3
 8004608:	d034      	beq.n	8004674 <__iar_annotation$$branch+0x3e>
 800460a:	280f      	cmp	r0, #15
 800460c:	d136      	bne.n	800467c <__iar_annotation$$branch+0x46>
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	4006      	ands	r6, r0
 8004612:	2040      	movs	r0, #64	; 0x40
 8004614:	4330      	orrs	r0, r6
 8004616:	6020      	str	r0, [r4, #0]
 8004618:	211c      	movs	r1, #28
 800461a:	a806      	add	r0, sp, #24
 800461c:	f010 fda2 	bl	8015164 <__aeabi_memclr>
 8004620:	2300      	movs	r3, #0
 8004622:	2200      	movs	r2, #0
 8004624:	a806      	add	r0, sp, #24
 8004626:	9000      	str	r0, [sp, #0]
 8004628:	4862      	ldr	r0, [pc, #392]	; (80047b4 <__iar_annotation$$branch+0xb0>)
 800462a:	1828      	adds	r0, r5, r0
 800462c:	7840      	ldrb	r0, [r0, #1]
 800462e:	4283      	cmp	r3, r0
 8004630:	d200      	bcs.n	8004634 <__iar_annotation$$branch+0x174>
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d301      	bcc.n	800463a <__iar_annotation$$branch+0x4>

08004636 <__iar_annotation$$branch>:
 8004636:	f000 fd81 	bl	800513c <__iar_annotation$$branch+0x7cc>
 800463a:	1c52      	adds	r2, r2, #1
 800463c:	9800      	ldr	r0, [sp, #0]
 800463e:	1d00      	adds	r0, r0, #4
 8004640:	0859      	lsrs	r1, r3, #1
 8004642:	0089      	lsls	r1, r1, #2
 8004644:	1840      	adds	r0, r0, r1
 8004646:	07d9      	lsls	r1, r3, #31
 8004648:	6801      	ldr	r1, [r0, #0]
 800464a:	9e05      	ldr	r6, [sp, #20]
 800464c:	d405      	bmi.n	800465a <__iar_annotation$$branch+0x24>
 800464e:	005f      	lsls	r7, r3, #1
 8004650:	5bf6      	ldrh	r6, [r6, r7]
 8004652:	0436      	lsls	r6, r6, #16
 8004654:	430e      	orrs	r6, r1
 8004656:	6006      	str	r6, [r0, #0]
 8004658:	e003      	b.n	8004662 <__iar_annotation$$branch+0x2c>
 800465a:	005f      	lsls	r7, r3, #1
 800465c:	5bf6      	ldrh	r6, [r6, r7]
 800465e:	4331      	orrs	r1, r6
 8004660:	6001      	str	r1, [r0, #0]
 8004662:	1c5b      	adds	r3, r3, #1
 8004664:	e7e0      	b.n	8004628 <__iar_annotation$$branch+0x168>
 8004666:	0612      	lsls	r2, r2, #24
 8004668:	0e50      	lsrs	r0, r2, #25
 800466a:	1c80      	adds	r0, r0, #2
 800466c:	4669      	mov	r1, sp
 800466e:	7308      	strb	r0, [r1, #12]
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	e008      	b.n	8004686 <__iar_annotation$$branch+0x50>
 8004674:	6821      	ldr	r1, [r4, #0]
 8004676:	20c0      	movs	r0, #192	; 0xc0
 8004678:	4308      	orrs	r0, r1
 800467a:	e003      	b.n	8004684 <__iar_annotation$$branch+0x4e>
 800467c:	6820      	ldr	r0, [r4, #0]
 800467e:	4006      	ands	r6, r0
 8004680:	2080      	movs	r0, #128	; 0x80
 8004682:	4330      	orrs	r0, r6
 8004684:	6020      	str	r0, [r4, #0]
 8004686:	9006      	str	r0, [sp, #24]
 8004688:	2000      	movs	r0, #0
 800468a:	9002      	str	r0, [sp, #8]
 800468c:	2003      	movs	r0, #3
 800468e:	9001      	str	r0, [sp, #4]
 8004690:	4668      	mov	r0, sp
 8004692:	7b00      	ldrb	r0, [r0, #12]
 8004694:	9000      	str	r0, [sp, #0]
 8004696:	ab06      	add	r3, sp, #24
 8004698:	e190      	b.n	80049bc <__iar_annotation$$branch+0x4c>
 800469a:	2180      	movs	r1, #128	; 0x80
 800469c:	0209      	lsls	r1, r1, #8
 800469e:	8bea      	ldrh	r2, [r5, #30]
 80046a0:	428a      	cmp	r2, r1
 80046a2:	d100      	bne.n	80046a6 <__iar_annotation$$branch+0x70>
 80046a4:	e144      	b.n	8004930 <__iar_annotation$$branch+0x14c>
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	4010      	ands	r0, r2
 80046aa:	2202      	movs	r2, #2
 80046ac:	4302      	orrs	r2, r0
 80046ae:	6022      	str	r2, [r4, #0]
 80046b0:	b292      	uxth	r2, r2
 80046b2:	20ff      	movs	r0, #255	; 0xff
 80046b4:	0600      	lsls	r0, r0, #24
 80046b6:	4310      	orrs	r0, r2
 80046b8:	6020      	str	r0, [r4, #0]
 80046ba:	4301      	orrs	r1, r0
 80046bc:	6021      	str	r1, [r4, #0]
 80046be:	2701      	movs	r7, #1
 80046c0:	6868      	ldr	r0, [r5, #4]
 80046c2:	6800      	ldr	r0, [r0, #0]
 80046c4:	0940      	lsrs	r0, r0, #5
 80046c6:	4038      	ands	r0, r7
 80046c8:	4a38      	ldr	r2, [pc, #224]	; (80047ac <__iar_annotation$$branch+0xa8>)
 80046ca:	400a      	ands	r2, r1
 80046cc:	0340      	lsls	r0, r0, #13
 80046ce:	4310      	orrs	r0, r2
 80046d0:	6020      	str	r0, [r4, #0]
 80046d2:	4006      	ands	r6, r0
 80046d4:	2040      	movs	r0, #64	; 0x40
 80046d6:	4330      	orrs	r0, r6
 80046d8:	6020      	str	r0, [r4, #0]
 80046da:	aa03      	add	r2, sp, #12
 80046dc:	a905      	add	r1, sp, #20
 80046de:	7c28      	ldrb	r0, [r5, #16]
 80046e0:	68eb      	ldr	r3, [r5, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4798      	blx	r3
 80046e6:	211c      	movs	r1, #28
 80046e8:	a806      	add	r0, sp, #24
 80046ea:	f010 fd3b 	bl	8015164 <__aeabi_memclr>
 80046ee:	2100      	movs	r1, #0
 80046f0:	2200      	movs	r2, #0
 80046f2:	a806      	add	r0, sp, #24
 80046f4:	002c      	movs	r4, r5
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <__iar_annotation$$branch+0xb0>)
 80046f8:	18e3      	adds	r3, r4, r3
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	4299      	cmp	r1, r3
 80046fe:	d200      	bcs.n	8004702 <__iar_annotation$$branch+0xcc>
 8004700:	290c      	cmp	r1, #12
 8004702:	d301      	bcc.n	8004708 <__iar_annotation$$branch+0x4>

08004704 <__iar_annotation$$branch>:
 8004704:	f000 fd35 	bl	8005172 <__iar_annotation$$branch+0x28>
 8004708:	1c52      	adds	r2, r2, #1
 800470a:	1d03      	adds	r3, r0, #4
 800470c:	084d      	lsrs	r5, r1, #1
 800470e:	00ad      	lsls	r5, r5, #2
 8004710:	195b      	adds	r3, r3, r5
 8004712:	4239      	tst	r1, r7
 8004714:	681e      	ldr	r6, [r3, #0]
 8004716:	46b4      	mov	ip, r6
 8004718:	9e05      	ldr	r6, [sp, #20]
 800471a:	d106      	bne.n	800472a <__iar_annotation$$branch+0x26>
 800471c:	004d      	lsls	r5, r1, #1
 800471e:	5b75      	ldrh	r5, [r6, r5]
 8004720:	042d      	lsls	r5, r5, #16
 8004722:	4666      	mov	r6, ip
 8004724:	4335      	orrs	r5, r6
 8004726:	601d      	str	r5, [r3, #0]
 8004728:	e004      	b.n	8004734 <__iar_annotation$$branch+0x30>
 800472a:	004d      	lsls	r5, r1, #1
 800472c:	5b75      	ldrh	r5, [r6, r5]
 800472e:	4666      	mov	r6, ip
 8004730:	432e      	orrs	r6, r5
 8004732:	601e      	str	r6, [r3, #0]
 8004734:	1c49      	adds	r1, r1, #1
 8004736:	e7de      	b.n	80046f6 <__iar_annotation$$branch+0xc0>
 8004738:	2000      	movs	r0, #0
 800473a:	9002      	str	r0, [sp, #8]
 800473c:	2003      	movs	r0, #3
 800473e:	9001      	str	r0, [sp, #4]
 8004740:	0610      	lsls	r0, r2, #24
 8004742:	0e40      	lsrs	r0, r0, #25
 8004744:	1c80      	adds	r0, r0, #2
 8004746:	b2c0      	uxtb	r0, r0
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	ab06      	add	r3, sp, #24
 800474c:	220f      	movs	r2, #15
 800474e:	2031      	movs	r0, #49	; 0x31
 8004750:	5c21      	ldrb	r1, [r4, r0]
 8004752:	0020      	movs	r0, r4
 8004754:	e136      	b.n	80049c4 <__iar_annotation$$branch+0x54>
 8004756:	2201      	movs	r2, #1
 8004758:	9206      	str	r2, [sp, #24]
 800475a:	03d2      	lsls	r2, r2, #15
 800475c:	8beb      	ldrh	r3, [r5, #30]
 800475e:	4293      	cmp	r3, r2
 8004760:	d100      	bne.n	8004764 <__iar_annotation$$branch+0x60>
 8004762:	e3bc      	b.n	8004ede <__iar_annotation$$branch+0x56e>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	4018      	ands	r0, r3
 8004768:	2303      	movs	r3, #3
 800476a:	4303      	orrs	r3, r0
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	431a      	orrs	r2, r3
 8004770:	6022      	str	r2, [r4, #0]
 8004772:	6868      	ldr	r0, [r5, #4]
 8004774:	6803      	ldr	r3, [r0, #0]
 8004776:	0698      	lsls	r0, r3, #26
 8004778:	0fc0      	lsrs	r0, r0, #31
 800477a:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <__iar_annotation$$branch+0xa8>)
 800477c:	4013      	ands	r3, r2
 800477e:	0340      	lsls	r0, r0, #13
 8004780:	4318      	orrs	r0, r3
 8004782:	6020      	str	r0, [r4, #0]
 8004784:	686a      	ldr	r2, [r5, #4]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	4011      	ands	r1, r2
 800478a:	2909      	cmp	r1, #9
 800478c:	d038      	beq.n	8004800 <__iar_annotation$$branch+0x1c>
 800478e:	68e9      	ldr	r1, [r5, #12]
 8004790:	688f      	ldr	r7, [r1, #8]
 8004792:	2f00      	cmp	r7, #0
 8004794:	d034      	beq.n	8004800 <__iar_annotation$$branch+0x1c>
 8004796:	ab03      	add	r3, sp, #12
 8004798:	aa05      	add	r2, sp, #20
 800479a:	0c01      	lsrs	r1, r0, #16
 800479c:	7c28      	ldrb	r0, [r5, #16]
 800479e:	47b8      	blx	r7
 80047a0:	2803      	cmp	r0, #3
 80047a2:	d009      	beq.n	80047b8 <__iar_annotation$$branch+0xb4>
 80047a4:	280f      	cmp	r0, #15
 80047a6:	d00c      	beq.n	80047c2 <__iar_annotation$$branch+0xbe>
 80047a8:	e02a      	b.n	8004800 <__iar_annotation$$branch+0x1c>
 80047aa:	bf00      	nop
 80047ac:	ffff9fff 	.word	0xffff9fff
 80047b0:	000004ad 	.word	0x000004ad
 80047b4:	000004ac 	.word	0x000004ac
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	21c0      	movs	r1, #192	; 0xc0
 80047bc:	4301      	orrs	r1, r0
 80047be:	6021      	str	r1, [r4, #0]
 80047c0:	e023      	b.n	800480a <__iar_annotation$$branch+0x26>
 80047c2:	4668      	mov	r0, sp
 80047c4:	7b00      	ldrb	r0, [r0, #12]
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d01a      	beq.n	8004800 <__iar_annotation$$branch+0x1c>
 80047ca:	4668      	mov	r0, sp
 80047cc:	7b02      	ldrb	r2, [r0, #12]
 80047ce:	2a07      	cmp	r2, #7
 80047d0:	d216      	bcs.n	8004800 <__iar_annotation$$branch+0x1c>
 80047d2:	6820      	ldr	r0, [r4, #0]
 80047d4:	4006      	ands	r6, r0
 80047d6:	2040      	movs	r0, #64	; 0x40
 80047d8:	4330      	orrs	r0, r6
 80047da:	6020      	str	r0, [r4, #0]
 80047dc:	2300      	movs	r3, #0
 80047de:	9806      	ldr	r0, [sp, #24]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d301      	bcc.n	80047e8 <__iar_annotation$$branch+0x4>

080047e4 <__iar_annotation$$branch>:
 80047e4:	f000 fcde 	bl	80051a4 <__iar_annotation$$branch+0x24>
 80047e8:	9905      	ldr	r1, [sp, #20]
 80047ea:	6809      	ldr	r1, [r1, #0]
 80047ec:	ae07      	add	r6, sp, #28
 80047ee:	1d36      	adds	r6, r6, #4
 80047f0:	009f      	lsls	r7, r3, #2
 80047f2:	51f1      	str	r1, [r6, r7]
 80047f4:	9905      	ldr	r1, [sp, #20]
 80047f6:	1d09      	adds	r1, r1, #4
 80047f8:	9105      	str	r1, [sp, #20]
 80047fa:	1c40      	adds	r0, r0, #1
 80047fc:	1c5b      	adds	r3, r3, #1
 80047fe:	e7ef      	b.n	80047e0 <__iar_annotation$$branch+0xdc>
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	4006      	ands	r6, r0
 8004804:	2080      	movs	r0, #128	; 0x80
 8004806:	4330      	orrs	r0, r6
 8004808:	6020      	str	r0, [r4, #0]
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	9007      	str	r0, [sp, #28]
 800480e:	2000      	movs	r0, #0
 8004810:	9002      	str	r0, [sp, #8]
 8004812:	2003      	movs	r0, #3
 8004814:	9001      	str	r0, [sp, #4]
 8004816:	9806      	ldr	r0, [sp, #24]
 8004818:	9000      	str	r0, [sp, #0]
 800481a:	ab07      	add	r3, sp, #28
 800481c:	e0ce      	b.n	80049bc <__iar_annotation$$branch+0x4c>
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	0209      	lsls	r1, r1, #8
 8004822:	8bea      	ldrh	r2, [r5, #30]
 8004824:	428a      	cmp	r2, r1
 8004826:	d100      	bne.n	800482a <__iar_annotation$$branch+0x46>
 8004828:	e359      	b.n	8004ede <__iar_annotation$$branch+0x56e>
 800482a:	6822      	ldr	r2, [r4, #0]
 800482c:	4010      	ands	r0, r2
 800482e:	2204      	movs	r2, #4
 8004830:	4302      	orrs	r2, r0
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	4311      	orrs	r1, r2
 8004836:	6021      	str	r1, [r4, #0]
 8004838:	2001      	movs	r0, #1
 800483a:	686a      	ldr	r2, [r5, #4]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	0952      	lsrs	r2, r2, #5
 8004840:	4002      	ands	r2, r0
 8004842:	4b51      	ldr	r3, [pc, #324]	; (8004988 <__iar_annotation$$branch+0x18>)
 8004844:	400b      	ands	r3, r1
 8004846:	0351      	lsls	r1, r2, #13
 8004848:	4319      	orrs	r1, r3
 800484a:	6021      	str	r1, [r4, #0]
 800484c:	686a      	ldr	r2, [r5, #4]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	08d2      	lsrs	r2, r2, #3
 8004852:	4010      	ands	r0, r2
 8004854:	d152      	bne.n	80048fc <__iar_annotation$$branch+0x118>
 8004856:	68e8      	ldr	r0, [r5, #12]
 8004858:	68c3      	ldr	r3, [r0, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d04e      	beq.n	80048fc <__iar_annotation$$branch+0x118>
 800485e:	2707      	movs	r7, #7
 8004860:	0a0a      	lsrs	r2, r1, #8
 8004862:	403a      	ands	r2, r7
 8004864:	0c09      	lsrs	r1, r1, #16
 8004866:	7c28      	ldrb	r0, [r5, #16]
 8004868:	4798      	blx	r3
 800486a:	2803      	cmp	r0, #3
 800486c:	d041      	beq.n	80048f2 <__iar_annotation$$branch+0x10e>
 800486e:	280f      	cmp	r0, #15
 8004870:	d144      	bne.n	80048fc <__iar_annotation$$branch+0x118>
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	4006      	ands	r6, r0
 8004876:	2040      	movs	r0, #64	; 0x40
 8004878:	4330      	orrs	r0, r6
 800487a:	6020      	str	r0, [r4, #0]
 800487c:	0a00      	lsrs	r0, r0, #8
 800487e:	4007      	ands	r7, r0
 8004880:	6968      	ldr	r0, [r5, #20]
 8004882:	21e0      	movs	r1, #224	; 0xe0
 8004884:	4388      	bics	r0, r1
 8004886:	0179      	lsls	r1, r7, #5
 8004888:	4301      	orrs	r1, r0
 800488a:	6169      	str	r1, [r5, #20]
 800488c:	e03b      	b.n	8004906 <__iar_annotation$$branch+0x122>
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	0209      	lsls	r1, r1, #8
 8004892:	8bea      	ldrh	r2, [r5, #30]
 8004894:	428a      	cmp	r2, r1
 8004896:	d04b      	beq.n	8004930 <__iar_annotation$$branch+0x14c>
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	4010      	ands	r0, r2
 800489c:	2205      	movs	r2, #5
 800489e:	4302      	orrs	r2, r0
 80048a0:	6022      	str	r2, [r4, #0]
 80048a2:	4311      	orrs	r1, r2
 80048a4:	6021      	str	r1, [r4, #0]
 80048a6:	2001      	movs	r0, #1
 80048a8:	686a      	ldr	r2, [r5, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	0952      	lsrs	r2, r2, #5
 80048ae:	4002      	ands	r2, r0
 80048b0:	4b35      	ldr	r3, [pc, #212]	; (8004988 <__iar_annotation$$branch+0x18>)
 80048b2:	400b      	ands	r3, r1
 80048b4:	0351      	lsls	r1, r2, #13
 80048b6:	4319      	orrs	r1, r3
 80048b8:	6021      	str	r1, [r4, #0]
 80048ba:	686a      	ldr	r2, [r5, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	08d2      	lsrs	r2, r2, #3
 80048c0:	4010      	ands	r0, r2
 80048c2:	d11b      	bne.n	80048fc <__iar_annotation$$branch+0x118>
 80048c4:	68e8      	ldr	r0, [r5, #12]
 80048c6:	6903      	ldr	r3, [r0, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d017      	beq.n	80048fc <__iar_annotation$$branch+0x118>
 80048cc:	0548      	lsls	r0, r1, #21
 80048ce:	0f42      	lsrs	r2, r0, #29
 80048d0:	0c09      	lsrs	r1, r1, #16
 80048d2:	7c28      	ldrb	r0, [r5, #16]
 80048d4:	4798      	blx	r3
 80048d6:	2803      	cmp	r0, #3
 80048d8:	d00b      	beq.n	80048f2 <__iar_annotation$$branch+0x10e>
 80048da:	280f      	cmp	r0, #15
 80048dc:	d10e      	bne.n	80048fc <__iar_annotation$$branch+0x118>
 80048de:	6820      	ldr	r0, [r4, #0]
 80048e0:	4006      	ands	r6, r0
 80048e2:	2040      	movs	r0, #64	; 0x40
 80048e4:	4330      	orrs	r0, r6
 80048e6:	6020      	str	r0, [r4, #0]
 80048e8:	6968      	ldr	r0, [r5, #20]
 80048ea:	21e0      	movs	r1, #224	; 0xe0
 80048ec:	4388      	bics	r0, r1
 80048ee:	6168      	str	r0, [r5, #20]
 80048f0:	e009      	b.n	8004906 <__iar_annotation$$branch+0x122>
 80048f2:	6820      	ldr	r0, [r4, #0]
 80048f4:	21c0      	movs	r1, #192	; 0xc0
 80048f6:	4301      	orrs	r1, r0
 80048f8:	6021      	str	r1, [r4, #0]
 80048fa:	e004      	b.n	8004906 <__iar_annotation$$branch+0x122>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	4006      	ands	r6, r0
 8004900:	2080      	movs	r0, #128	; 0x80
 8004902:	4330      	orrs	r0, r6
 8004904:	6020      	str	r0, [r4, #0]
 8004906:	2000      	movs	r0, #0
 8004908:	9002      	str	r0, [sp, #8]
 800490a:	2003      	movs	r0, #3
 800490c:	9001      	str	r0, [sp, #4]
 800490e:	2001      	movs	r0, #1
 8004910:	9000      	str	r0, [sp, #0]
 8004912:	0023      	movs	r3, r4
 8004914:	220f      	movs	r2, #15
 8004916:	2031      	movs	r0, #49	; 0x31
 8004918:	5c29      	ldrb	r1, [r5, r0]
 800491a:	0028      	movs	r0, r5
 800491c:	f7fc fd7d 	bl	800141a <PE_Send_DataMessage>
 8004920:	e052      	b.n	80049c8 <__iar_annotation$$branch+0x58>
 8004922:	2001      	movs	r0, #1
 8004924:	4669      	mov	r1, sp
 8004926:	7308      	strb	r0, [r1, #12]
 8004928:	8be8      	ldrh	r0, [r5, #30]
 800492a:	2180      	movs	r1, #128	; 0x80
 800492c:	0209      	lsls	r1, r1, #8
 800492e:	4288      	cmp	r0, r1
 8004930:	d100      	bne.n	8004934 <__iar_annotation$$branch+0x150>
 8004932:	e3a4      	b.n	800507e <__iar_annotation$$branch+0x70e>
 8004934:	68e8      	ldr	r0, [r5, #12]
 8004936:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004938:	2f00      	cmp	r7, #0
 800493a:	d030      	beq.n	800499e <__iar_annotation$$branch+0x2e>
 800493c:	4813      	ldr	r0, [pc, #76]	; (800498c <__iar_annotation$$branch+0x1c>)
 800493e:	182b      	adds	r3, r5, r0
 8004940:	3018      	adds	r0, #24
 8004942:	182a      	adds	r2, r5, r0
 8004944:	7820      	ldrb	r0, [r4, #0]
 8004946:	06c1      	lsls	r1, r0, #27
 8004948:	0ec9      	lsrs	r1, r1, #27
 800494a:	7c28      	ldrb	r0, [r5, #16]
 800494c:	47b8      	blx	r7
 800494e:	2803      	cmp	r0, #3
 8004950:	d020      	beq.n	8004994 <__iar_annotation$$branch+0x24>
 8004952:	280f      	cmp	r0, #15
 8004954:	d123      	bne.n	800499e <__iar_annotation$$branch+0x2e>
 8004956:	6820      	ldr	r0, [r4, #0]
 8004958:	4006      	ands	r6, r0
 800495a:	2040      	movs	r0, #64	; 0x40
 800495c:	4330      	orrs	r0, r6
 800495e:	6020      	str	r0, [r4, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	4668      	mov	r0, sp
 8004964:	7b00      	ldrb	r0, [r0, #12]
 8004966:	0029      	movs	r1, r5
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <__iar_annotation$$branch+0x20>)
 800496a:	5c8a      	ldrb	r2, [r1, r2]
 800496c:	4293      	cmp	r3, r2
 800496e:	d301      	bcc.n	8004974 <__iar_annotation$$branch+0x4>

08004970 <__iar_annotation$$branch>:
 8004970:	f000 fc1b 	bl	80051aa <__iar_annotation$$branch+0x4>
 8004974:	009a      	lsls	r2, r3, #2
 8004976:	4d05      	ldr	r5, [pc, #20]	; (800498c <__iar_annotation$$branch+0x1c>)
 8004978:	194d      	adds	r5, r1, r5
 800497a:	58ad      	ldr	r5, [r5, r2]
 800497c:	ae05      	add	r6, sp, #20
 800497e:	1d36      	adds	r6, r6, #4
 8004980:	50b5      	str	r5, [r6, r2]
 8004982:	1c40      	adds	r0, r0, #1
 8004984:	1c5b      	adds	r3, r3, #1
 8004986:	e7ef      	b.n	8004968 <__iar_annotation$$branch+0x184>
 8004988:	ffff9fff 	.word	0xffff9fff
 800498c:	00000494 	.word	0x00000494
 8004990:	000004ac 	.word	0x000004ac
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	21c0      	movs	r1, #192	; 0xc0
 8004998:	4301      	orrs	r1, r0
 800499a:	6021      	str	r1, [r4, #0]
 800499c:	e004      	b.n	80049a8 <__iar_annotation$$branch+0x38>
 800499e:	6820      	ldr	r0, [r4, #0]
 80049a0:	4006      	ands	r6, r0
 80049a2:	2080      	movs	r0, #128	; 0x80
 80049a4:	4330      	orrs	r0, r6
 80049a6:	6020      	str	r0, [r4, #0]
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	9005      	str	r0, [sp, #20]
 80049ac:	2000      	movs	r0, #0
 80049ae:	9002      	str	r0, [sp, #8]
 80049b0:	2003      	movs	r0, #3
 80049b2:	9001      	str	r0, [sp, #4]
 80049b4:	4668      	mov	r0, sp
 80049b6:	7b00      	ldrb	r0, [r0, #12]
 80049b8:	9000      	str	r0, [sp, #0]
 80049ba:	ab05      	add	r3, sp, #20
 80049bc:	220f      	movs	r2, #15
 80049be:	2031      	movs	r0, #49	; 0x31
 80049c0:	5c29      	ldrb	r1, [r5, r0]
 80049c2:	0028      	movs	r0, r5
 80049c4:	f7fc fd29 	bl	800141a <PE_Send_DataMessage>
 80049c8:	e3b5      	b.n	8005136 <__iar_annotation$$branch+0x7c6>
 80049ca:	2101      	movs	r1, #1
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	4010      	ands	r0, r2
 80049d0:	4308      	orrs	r0, r1
 80049d2:	6020      	str	r0, [r4, #0]
 80049d4:	03ca      	lsls	r2, r1, #15
 80049d6:	4302      	orrs	r2, r0
 80049d8:	6022      	str	r2, [r4, #0]
 80049da:	6868      	ldr	r0, [r5, #4]
 80049dc:	6800      	ldr	r0, [r0, #0]
 80049de:	0943      	lsrs	r3, r0, #5
 80049e0:	400b      	ands	r3, r1
 80049e2:	48be      	ldr	r0, [pc, #760]	; (8004cdc <__iar_annotation$$branch+0x36c>)
 80049e4:	4010      	ands	r0, r2
 80049e6:	035a      	lsls	r2, r3, #13
 80049e8:	4302      	orrs	r2, r0
 80049ea:	6022      	str	r2, [r4, #0]
 80049ec:	48bc      	ldr	r0, [pc, #752]	; (8004ce0 <__iar_annotation$$branch+0x370>)
 80049ee:	4010      	ands	r0, r2
 80049f0:	6020      	str	r0, [r4, #0]
 80049f2:	4006      	ands	r6, r0
 80049f4:	6026      	str	r6, [r4, #0]
 80049f6:	b2b0      	uxth	r0, r6
 80049f8:	22ff      	movs	r2, #255	; 0xff
 80049fa:	0612      	lsls	r2, r2, #24
 80049fc:	4302      	orrs	r2, r0
 80049fe:	6022      	str	r2, [r4, #0]
 8004a00:	6868      	ldr	r0, [r5, #4]
 8004a02:	6800      	ldr	r0, [r0, #0]
 8004a04:	0880      	lsrs	r0, r0, #2
 8004a06:	4001      	ands	r1, r0
 8004a08:	d003      	beq.n	8004a12 <__iar_annotation$$branch+0xa2>
 8004a0a:	6968      	ldr	r0, [r5, #20]
 8004a0c:	0781      	lsls	r1, r0, #30
 8004a0e:	0fc8      	lsrs	r0, r1, #31
 8004a10:	e000      	b.n	8004a14 <__iar_annotation$$branch+0xa4>
 8004a12:	2002      	movs	r0, #2
 8004a14:	9002      	str	r0, [sp, #8]
 8004a16:	2087      	movs	r0, #135	; 0x87
 8004a18:	9001      	str	r0, [sp, #4]
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	9000      	str	r0, [sp, #0]
 8004a1e:	0023      	movs	r3, r4
 8004a20:	220f      	movs	r2, #15
 8004a22:	2031      	movs	r0, #49	; 0x31
 8004a24:	5c29      	ldrb	r1, [r5, r0]
 8004a26:	0028      	movs	r0, r5
 8004a28:	f7fc fcf7 	bl	800141a <PE_Send_DataMessage>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d1cb      	bne.n	80049c8 <__iar_annotation$$branch+0x58>
 8004a30:	2070      	movs	r0, #112	; 0x70
 8004a32:	e0e1      	b.n	8004bf8 <__iar_annotation$$branch+0x288>
 8004a34:	2031      	movs	r0, #49	; 0x31
 8004a36:	5c28      	ldrb	r0, [r5, r0]
 8004a38:	f7fb ffb0 	bl	800099c <PE_Convert_SOPRxEvent>
 8004a3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004a3e:	7809      	ldrb	r1, [r1, #0]
 8004a40:	261f      	movs	r6, #31
 8004a42:	4281      	cmp	r1, r0
 8004a44:	d174      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004a46:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004a48:	0bc2      	lsrs	r2, r0, #15
 8004a4a:	d171      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004a4c:	0b02      	lsrs	r2, r0, #12
 8004a4e:	0752      	lsls	r2, r2, #29
 8004a50:	d100      	bne.n	8004a54 <__iar_annotation$$branch+0xe4>
 8004a52:	e239      	b.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004a54:	221f      	movs	r2, #31
 8004a56:	4002      	ands	r2, r0
 8004a58:	2a0f      	cmp	r2, #15
 8004a5a:	d169      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004a5c:	2914      	cmp	r1, #20
 8004a5e:	d005      	beq.n	8004a6c <__iar_annotation$$branch+0xfc>
 8004a60:	2014      	movs	r0, #20
 8004a62:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004a64:	7008      	strb	r0, [r1, #0]
 8004a66:	0028      	movs	r0, r5
 8004a68:	f7fb ff61 	bl	800092e <PE_Clear_RxEvent>
 8004a6c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004a6e:	7881      	ldrb	r1, [r0, #2]
 8004a70:	221f      	movs	r2, #31
 8004a72:	400a      	ands	r2, r1
 8004a74:	2a01      	cmp	r2, #1
 8004a76:	d15b      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004a78:	098c      	lsrs	r4, r1, #6
 8004a7a:	d071      	beq.n	8004b60 <__iar_annotation$$branch+0x1f0>
 8004a7c:	68e9      	ldr	r1, [r5, #12]
 8004a7e:	6949      	ldr	r1, [r1, #20]
 8004a80:	2900      	cmp	r1, #0
 8004a82:	d072      	beq.n	8004b6a <__iar_annotation$$branch+0x1fa>
 8004a84:	2103      	movs	r1, #3
 8004a86:	4021      	ands	r1, r4
 8004a88:	2901      	cmp	r1, #1
 8004a8a:	d000      	beq.n	8004a8e <__iar_annotation$$branch+0x11e>
 8004a8c:	e2d7      	b.n	800503e <__iar_annotation$$branch+0x6ce>
 8004a8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a90:	1d81      	adds	r1, r0, #6
 8004a92:	7c28      	ldrb	r0, [r5, #16]
 8004a94:	f000 fc38 	bl	8005308 <PE_SVDM_CheckIdentity>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d108      	bne.n	8004aae <__iar_annotation$$branch+0x13e>
 8004a9c:	ab0b      	add	r3, sp, #44	; 0x2c
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	7c28      	ldrb	r0, [r5, #16]
 8004aa4:	68ec      	ldr	r4, [r5, #12]
 8004aa6:	6964      	ldr	r4, [r4, #20]
 8004aa8:	47a0      	blx	r4
 8004aaa:	2151      	movs	r1, #81	; 0x51
 8004aac:	e0e6      	b.n	8004c7c <__iar_annotation$$branch+0x30c>
 8004aae:	211b      	movs	r1, #27
 8004ab0:	e0e4      	b.n	8004c7c <__iar_annotation$$branch+0x30c>
 8004ab2:	6821      	ldr	r1, [r4, #0]
 8004ab4:	400e      	ands	r6, r1
 8004ab6:	6026      	str	r6, [r4, #0]
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4030      	ands	r0, r6
 8004abc:	4308      	orrs	r0, r1
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	b280      	uxth	r0, r0
 8004ac2:	22ff      	movs	r2, #255	; 0xff
 8004ac4:	0612      	lsls	r2, r2, #24
 8004ac6:	4302      	orrs	r2, r0
 8004ac8:	6022      	str	r2, [r4, #0]
 8004aca:	0388      	lsls	r0, r1, #14
 8004acc:	4310      	orrs	r0, r2
 8004ace:	6020      	str	r0, [r4, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	686b      	ldr	r3, [r5, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	095e      	lsrs	r6, r3, #5
 8004ad8:	4016      	ands	r6, r2
 8004ada:	4b80      	ldr	r3, [pc, #512]	; (8004cdc <__iar_annotation$$branch+0x36c>)
 8004adc:	4003      	ands	r3, r0
 8004ade:	0370      	lsls	r0, r6, #13
 8004ae0:	4318      	orrs	r0, r3
 8004ae2:	6020      	str	r0, [r4, #0]
 8004ae4:	4b7e      	ldr	r3, [pc, #504]	; (8004ce0 <__iar_annotation$$branch+0x370>)
 8004ae6:	4003      	ands	r3, r0
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	6868      	ldr	r0, [r5, #4]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	0880      	lsrs	r0, r0, #2
 8004af0:	4002      	ands	r2, r0
 8004af2:	d002      	beq.n	8004afa <__iar_annotation$$branch+0x18a>
 8004af4:	6968      	ldr	r0, [r5, #20]
 8004af6:	0780      	lsls	r0, r0, #30
 8004af8:	0fc1      	lsrs	r1, r0, #31
 8004afa:	9102      	str	r1, [sp, #8]
 8004afc:	2089      	movs	r0, #137	; 0x89
 8004afe:	9001      	str	r0, [sp, #4]
 8004b00:	2001      	movs	r0, #1
 8004b02:	9000      	str	r0, [sp, #0]
 8004b04:	0023      	movs	r3, r4
 8004b06:	220f      	movs	r2, #15
 8004b08:	2031      	movs	r0, #49	; 0x31
 8004b0a:	5c29      	ldrb	r1, [r5, r0]
 8004b0c:	0028      	movs	r0, r5
 8004b0e:	f7fc fc84 	bl	800141a <PE_Send_DataMessage>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d174      	bne.n	8004c00 <__iar_annotation$$branch+0x290>
 8004b16:	2072      	movs	r0, #114	; 0x72
 8004b18:	e06e      	b.n	8004bf8 <__iar_annotation$$branch+0x288>
 8004b1a:	2031      	movs	r0, #49	; 0x31
 8004b1c:	5c28      	ldrb	r0, [r5, r0]
 8004b1e:	f7fb ff3d 	bl	800099c <PE_Convert_SOPRxEvent>
 8004b22:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004b24:	7809      	ldrb	r1, [r1, #0]
 8004b26:	261f      	movs	r6, #31
 8004b28:	4281      	cmp	r1, r0
 8004b2a:	d101      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004b2c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004b2e:	0bc2      	lsrs	r2, r0, #15
 8004b30:	d000      	beq.n	8004b34 <__iar_annotation$$branch+0x1c4>
 8004b32:	e1c9      	b.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004b34:	0b02      	lsrs	r2, r0, #12
 8004b36:	0752      	lsls	r2, r2, #29
 8004b38:	d012      	beq.n	8004b60 <__iar_annotation$$branch+0x1f0>
 8004b3a:	221f      	movs	r2, #31
 8004b3c:	4002      	ands	r2, r0
 8004b3e:	2a0f      	cmp	r2, #15
 8004b40:	d1f6      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004b42:	2914      	cmp	r1, #20
 8004b44:	d005      	beq.n	8004b52 <__iar_annotation$$branch+0x1e2>
 8004b46:	2014      	movs	r0, #20
 8004b48:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004b4a:	7008      	strb	r0, [r1, #0]
 8004b4c:	0028      	movs	r0, r5
 8004b4e:	f7fb feee 	bl	800092e <PE_Clear_RxEvent>
 8004b52:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004b54:	7881      	ldrb	r1, [r0, #2]
 8004b56:	221f      	movs	r2, #31
 8004b58:	400a      	ands	r2, r1
 8004b5a:	2a02      	cmp	r2, #2
 8004b5c:	d1e8      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004b5e:	060c      	lsls	r4, r1, #24
 8004b60:	d100      	bne.n	8004b64 <__iar_annotation$$branch+0x1f4>
 8004b62:	e1b1      	b.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004b64:	68e9      	ldr	r1, [r5, #12]
 8004b66:	6989      	ldr	r1, [r1, #24]
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d100      	bne.n	8004b6e <__iar_annotation$$branch+0x1fe>
 8004b6c:	e267      	b.n	800503e <__iar_annotation$$branch+0x6ce>
 8004b6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b70:	1d81      	adds	r1, r0, #6
 8004b72:	7c28      	ldrb	r0, [r5, #16]
 8004b74:	f000 fc8c 	bl	8005490 <PE_SVDM_CheckSVIDs>
 8004b78:	ab0b      	add	r3, sp, #44	; 0x2c
 8004b7a:	0fa2      	lsrs	r2, r4, #30
 8004b7c:	2031      	movs	r0, #49	; 0x31
 8004b7e:	5c29      	ldrb	r1, [r5, r0]
 8004b80:	7c28      	ldrb	r0, [r5, #16]
 8004b82:	68ec      	ldr	r4, [r5, #12]
 8004b84:	69a4      	ldr	r4, [r4, #24]
 8004b86:	47a0      	blx	r4
 8004b88:	2153      	movs	r1, #83	; 0x53
 8004b8a:	e077      	b.n	8004c7c <__iar_annotation$$branch+0x30c>
 8004b8c:	6821      	ldr	r1, [r4, #0]
 8004b8e:	400e      	ands	r6, r1
 8004b90:	6026      	str	r6, [r4, #0]
 8004b92:	4030      	ands	r0, r6
 8004b94:	2103      	movs	r1, #3
 8004b96:	4301      	orrs	r1, r0
 8004b98:	6021      	str	r1, [r4, #0]
 8004b9a:	8920      	ldrh	r0, [r4, #8]
 8004b9c:	b28a      	uxth	r2, r1
 8004b9e:	0401      	lsls	r1, r0, #16
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	6021      	str	r1, [r4, #0]
 8004ba4:	2080      	movs	r0, #128	; 0x80
 8004ba6:	0200      	lsls	r0, r0, #8
 8004ba8:	4308      	orrs	r0, r1
 8004baa:	6020      	str	r0, [r4, #0]
 8004bac:	2101      	movs	r1, #1
 8004bae:	686a      	ldr	r2, [r5, #4]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	0952      	lsrs	r2, r2, #5
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	4b49      	ldr	r3, [pc, #292]	; (8004cdc <__iar_annotation$$branch+0x36c>)
 8004bb8:	4003      	ands	r3, r0
 8004bba:	0350      	lsls	r0, r2, #13
 8004bbc:	4318      	orrs	r0, r3
 8004bbe:	6020      	str	r0, [r4, #0]
 8004bc0:	4a47      	ldr	r2, [pc, #284]	; (8004ce0 <__iar_annotation$$branch+0x370>)
 8004bc2:	4002      	ands	r2, r0
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	6868      	ldr	r0, [r5, #4]
 8004bc8:	6800      	ldr	r0, [r0, #0]
 8004bca:	0880      	lsrs	r0, r0, #2
 8004bcc:	4001      	ands	r1, r0
 8004bce:	d003      	beq.n	8004bd8 <__iar_annotation$$branch+0x268>
 8004bd0:	6968      	ldr	r0, [r5, #20]
 8004bd2:	0781      	lsls	r1, r0, #30
 8004bd4:	0fc8      	lsrs	r0, r1, #31
 8004bd6:	e000      	b.n	8004bda <__iar_annotation$$branch+0x26a>
 8004bd8:	2002      	movs	r0, #2
 8004bda:	9002      	str	r0, [sp, #8]
 8004bdc:	208b      	movs	r0, #139	; 0x8b
 8004bde:	9001      	str	r0, [sp, #4]
 8004be0:	2001      	movs	r0, #1
 8004be2:	9000      	str	r0, [sp, #0]
 8004be4:	0023      	movs	r3, r4
 8004be6:	220f      	movs	r2, #15
 8004be8:	2031      	movs	r0, #49	; 0x31
 8004bea:	5c29      	ldrb	r1, [r5, r0]
 8004bec:	0028      	movs	r0, r5
 8004bee:	f7fc fc14 	bl	800141a <PE_Send_DataMessage>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d104      	bne.n	8004c00 <__iar_annotation$$branch+0x290>
 8004bf6:	2073      	movs	r0, #115	; 0x73
 8004bf8:	7728      	strb	r0, [r5, #28]
 8004bfa:	483a      	ldr	r0, [pc, #232]	; (8004ce4 <__iar_annotation$$branch+0x374>)
 8004bfc:	83e8      	strh	r0, [r5, #30]
 8004bfe:	9704      	str	r7, [sp, #16]
 8004c00:	e299      	b.n	8005136 <__iar_annotation$$branch+0x7c6>
 8004c02:	2031      	movs	r0, #49	; 0x31
 8004c04:	5c28      	ldrb	r0, [r5, r0]
 8004c06:	f7fb fec9 	bl	800099c <PE_Convert_SOPRxEvent>
 8004c0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004c0c:	7809      	ldrb	r1, [r1, #0]
 8004c0e:	261f      	movs	r6, #31
 8004c10:	4281      	cmp	r1, r0
 8004c12:	d18d      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004c14:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004c16:	0bc2      	lsrs	r2, r0, #15
 8004c18:	d18a      	bne.n	8004b30 <__iar_annotation$$branch+0x1c0>
 8004c1a:	0b02      	lsrs	r2, r0, #12
 8004c1c:	0752      	lsls	r2, r2, #29
 8004c1e:	d09f      	beq.n	8004b60 <__iar_annotation$$branch+0x1f0>
 8004c20:	221f      	movs	r2, #31
 8004c22:	4002      	ands	r2, r0
 8004c24:	2a0f      	cmp	r2, #15
 8004c26:	d000      	beq.n	8004c2a <__iar_annotation$$branch+0x2ba>
 8004c28:	e14e      	b.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004c2a:	2914      	cmp	r1, #20
 8004c2c:	d005      	beq.n	8004c3a <__iar_annotation$$branch+0x2ca>
 8004c2e:	2014      	movs	r0, #20
 8004c30:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004c32:	7008      	strb	r0, [r1, #0]
 8004c34:	0028      	movs	r0, r5
 8004c36:	f7fb fe7a 	bl	800092e <PE_Clear_RxEvent>
 8004c3a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004c3c:	7881      	ldrb	r1, [r0, #2]
 8004c3e:	221f      	movs	r2, #31
 8004c40:	400a      	ands	r2, r1
 8004c42:	2a03      	cmp	r2, #3
 8004c44:	d1ef      	bne.n	8004c26 <__iar_annotation$$branch+0x2b6>
 8004c46:	098f      	lsrs	r7, r1, #6
 8004c48:	d08a      	beq.n	8004b60 <__iar_annotation$$branch+0x1f0>
 8004c4a:	68e9      	ldr	r1, [r5, #12]
 8004c4c:	69c9      	ldr	r1, [r1, #28]
 8004c4e:	2900      	cmp	r1, #0
 8004c50:	d017      	beq.n	8004c82 <__iar_annotation$$branch+0x312>
 8004c52:	ab0b      	add	r3, sp, #44	; 0x2c
 8004c54:	1d82      	adds	r2, r0, #6
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	0c01      	lsrs	r1, r0, #16
 8004c5a:	7c28      	ldrb	r0, [r5, #16]
 8004c5c:	f000 fc5a 	bl	8005514 <PE_SVDM_CheckModes>
 8004c60:	2403      	movs	r4, #3
 8004c62:	ab0b      	add	r3, sp, #44	; 0x2c
 8004c64:	2203      	movs	r2, #3
 8004c66:	403a      	ands	r2, r7
 8004c68:	2031      	movs	r0, #49	; 0x31
 8004c6a:	5c29      	ldrb	r1, [r5, r0]
 8004c6c:	7c28      	ldrb	r0, [r5, #16]
 8004c6e:	68ee      	ldr	r6, [r5, #12]
 8004c70:	69f6      	ldr	r6, [r6, #28]
 8004c72:	47b0      	blx	r6
 8004c74:	403c      	ands	r4, r7
 8004c76:	2c01      	cmp	r4, #1
 8004c78:	d103      	bne.n	8004c82 <__iar_annotation$$branch+0x312>
 8004c7a:	2154      	movs	r1, #84	; 0x54
 8004c7c:	0028      	movs	r0, r5
 8004c7e:	f7fc fb03 	bl	8001288 <PE_Notification>
 8004c82:	e1dc      	b.n	800503e <__iar_annotation$$branch+0x6ce>
 8004c84:	6821      	ldr	r1, [r4, #0]
 8004c86:	400e      	ands	r6, r1
 8004c88:	6026      	str	r6, [r4, #0]
 8004c8a:	4030      	ands	r0, r6
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	4301      	orrs	r1, r0
 8004c90:	6021      	str	r1, [r4, #0]
 8004c92:	8920      	ldrh	r0, [r4, #8]
 8004c94:	b289      	uxth	r1, r1
 8004c96:	0400      	lsls	r0, r0, #16
 8004c98:	4308      	orrs	r0, r1
 8004c9a:	6020      	str	r0, [r4, #0]
 8004c9c:	2180      	movs	r1, #128	; 0x80
 8004c9e:	0209      	lsls	r1, r1, #8
 8004ca0:	4301      	orrs	r1, r0
 8004ca2:	6021      	str	r1, [r4, #0]
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	686a      	ldr	r2, [r5, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	0952      	lsrs	r2, r2, #5
 8004cac:	4002      	ands	r2, r0
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <__iar_annotation$$branch+0x36c>)
 8004cb0:	400b      	ands	r3, r1
 8004cb2:	0351      	lsls	r1, r2, #13
 8004cb4:	4319      	orrs	r1, r3
 8004cb6:	6021      	str	r1, [r4, #0]
 8004cb8:	696a      	ldr	r2, [r5, #20]
 8004cba:	0612      	lsls	r2, r2, #24
 8004cbc:	0f52      	lsrs	r2, r2, #29
 8004cbe:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <__iar_annotation$$branch+0x370>)
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	0211      	lsls	r1, r2, #8
 8004cc4:	4319      	orrs	r1, r3
 8004cc6:	6021      	str	r1, [r4, #0]
 8004cc8:	6869      	ldr	r1, [r5, #4]
 8004cca:	6809      	ldr	r1, [r1, #0]
 8004ccc:	0889      	lsrs	r1, r1, #2
 8004cce:	4008      	ands	r0, r1
 8004cd0:	d00a      	beq.n	8004ce8 <__iar_annotation$$branch+0x378>
 8004cd2:	6968      	ldr	r0, [r5, #20]
 8004cd4:	0781      	lsls	r1, r0, #30
 8004cd6:	0fc8      	lsrs	r0, r1, #31
 8004cd8:	e007      	b.n	8004cea <__iar_annotation$$branch+0x37a>
 8004cda:	bf00      	nop
 8004cdc:	ffff9fff 	.word	0xffff9fff
 8004ce0:	fffff8ff 	.word	0xfffff8ff
 8004ce4:	0000801e 	.word	0x0000801e
 8004ce8:	2002      	movs	r0, #2
 8004cea:	9002      	str	r0, [sp, #8]
 8004cec:	208c      	movs	r0, #140	; 0x8c
 8004cee:	9001      	str	r0, [sp, #4]
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	9000      	str	r0, [sp, #0]
 8004cf4:	0023      	movs	r3, r4
 8004cf6:	220f      	movs	r2, #15
 8004cf8:	2031      	movs	r0, #49	; 0x31
 8004cfa:	5c29      	ldrb	r1, [r5, r0]
 8004cfc:	0028      	movs	r0, r5
 8004cfe:	f7fc fb8c 	bl	800141a <PE_Send_DataMessage>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d000      	beq.n	8004d08 <__iar_annotation$$branch+0x398>
 8004d06:	e216      	b.n	8005136 <__iar_annotation$$branch+0x7c6>
 8004d08:	2074      	movs	r0, #116	; 0x74
 8004d0a:	7728      	strb	r0, [r5, #28]
 8004d0c:	2134      	movs	r1, #52	; 0x34
 8004d0e:	e08e      	b.n	8004e2e <__iar_annotation$$branch+0x4be>
 8004d10:	2634      	movs	r6, #52	; 0x34
 8004d12:	2031      	movs	r0, #49	; 0x31
 8004d14:	5c28      	ldrb	r0, [r5, r0]
 8004d16:	f7fb fe41 	bl	800099c <PE_Convert_SOPRxEvent>
 8004d1a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004d1c:	7809      	ldrb	r1, [r1, #0]
 8004d1e:	271f      	movs	r7, #31
 8004d20:	4281      	cmp	r1, r0
 8004d22:	d143      	bne.n	8004dac <__iar_annotation$$branch+0x43c>
 8004d24:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004d26:	0bc2      	lsrs	r2, r0, #15
 8004d28:	d140      	bne.n	8004dac <__iar_annotation$$branch+0x43c>
 8004d2a:	0b02      	lsrs	r2, r0, #12
 8004d2c:	0752      	lsls	r2, r2, #29
 8004d2e:	d03d      	beq.n	8004dac <__iar_annotation$$branch+0x43c>
 8004d30:	221f      	movs	r2, #31
 8004d32:	4002      	ands	r2, r0
 8004d34:	2a0f      	cmp	r2, #15
 8004d36:	d139      	bne.n	8004dac <__iar_annotation$$branch+0x43c>
 8004d38:	2914      	cmp	r1, #20
 8004d3a:	d005      	beq.n	8004d48 <__iar_annotation$$branch+0x3d8>
 8004d3c:	2014      	movs	r0, #20
 8004d3e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004d40:	7008      	strb	r0, [r1, #0]
 8004d42:	0028      	movs	r0, r5
 8004d44:	f7fb fdf3 	bl	800092e <PE_Clear_RxEvent>
 8004d48:	2000      	movs	r0, #0
 8004d4a:	7728      	strb	r0, [r5, #28]
 8004d4c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004d4e:	7880      	ldrb	r0, [r0, #2]
 8004d50:	211f      	movs	r1, #31
 8004d52:	4001      	ands	r1, r0
 8004d54:	2904      	cmp	r1, #4
 8004d56:	d129      	bne.n	8004dac <__iar_annotation$$branch+0x43c>
 8004d58:	0600      	lsls	r0, r0, #24
 8004d5a:	d027      	beq.n	8004dac <__iar_annotation$$branch+0x43c>
 8004d5c:	0f87      	lsrs	r7, r0, #30
 8004d5e:	20e0      	movs	r0, #224	; 0xe0
 8004d60:	43c0      	mvns	r0, r0
 8004d62:	2f01      	cmp	r7, #1
 8004d64:	d004      	beq.n	8004d70 <__iar_annotation$$branch+0x400>
 8004d66:	d30e      	bcc.n	8004d86 <__iar_annotation$$branch+0x416>
 8004d68:	2f03      	cmp	r7, #3
 8004d6a:	d008      	beq.n	8004d7e <__iar_annotation$$branch+0x40e>
 8004d6c:	d302      	bcc.n	8004d74 <__iar_annotation$$branch+0x404>
 8004d6e:	e00a      	b.n	8004d86 <__iar_annotation$$branch+0x416>
 8004d70:	2635      	movs	r6, #53	; 0x35
 8004d72:	e008      	b.n	8004d86 <__iar_annotation$$branch+0x416>
 8004d74:	6969      	ldr	r1, [r5, #20]
 8004d76:	4008      	ands	r0, r1
 8004d78:	6168      	str	r0, [r5, #20]
 8004d7a:	2636      	movs	r6, #54	; 0x36
 8004d7c:	e003      	b.n	8004d86 <__iar_annotation$$branch+0x416>
 8004d7e:	6969      	ldr	r1, [r5, #20]
 8004d80:	4008      	ands	r0, r1
 8004d82:	6168      	str	r0, [r5, #20]
 8004d84:	2637      	movs	r6, #55	; 0x37
 8004d86:	0031      	movs	r1, r6
 8004d88:	0028      	movs	r0, r5
 8004d8a:	f7fc fa7d 	bl	8001288 <PE_Notification>
 8004d8e:	68e8      	ldr	r0, [r5, #12]
 8004d90:	6a06      	ldr	r6, [r0, #32]
 8004d92:	2e00      	cmp	r6, #0
 8004d94:	d009      	beq.n	8004daa <__iar_annotation$$branch+0x43a>
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	0541      	lsls	r1, r0, #21
 8004d9a:	0f49      	lsrs	r1, r1, #29
 8004d9c:	9100      	str	r1, [sp, #0]
 8004d9e:	0c03      	lsrs	r3, r0, #16
 8004da0:	003a      	movs	r2, r7
 8004da2:	2031      	movs	r0, #49	; 0x31
 8004da4:	5c29      	ldrb	r1, [r5, r0]
 8004da6:	7c28      	ldrb	r0, [r5, #16]
 8004da8:	47b0      	blx	r6
 8004daa:	e148      	b.n	800503e <__iar_annotation$$branch+0x6ce>
 8004dac:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004dae:	4007      	ands	r7, r0
 8004db0:	2f10      	cmp	r7, #16
 8004db2:	e08c      	b.n	8004ece <__iar_annotation$$branch+0x55e>
 8004db4:	6821      	ldr	r1, [r4, #0]
 8004db6:	400e      	ands	r6, r1
 8004db8:	6026      	str	r6, [r4, #0]
 8004dba:	4030      	ands	r0, r6
 8004dbc:	2105      	movs	r1, #5
 8004dbe:	4301      	orrs	r1, r0
 8004dc0:	6021      	str	r1, [r4, #0]
 8004dc2:	8920      	ldrh	r0, [r4, #8]
 8004dc4:	b289      	uxth	r1, r1
 8004dc6:	0400      	lsls	r0, r0, #16
 8004dc8:	4308      	orrs	r0, r1
 8004dca:	6020      	str	r0, [r4, #0]
 8004dcc:	2180      	movs	r1, #128	; 0x80
 8004dce:	0209      	lsls	r1, r1, #8
 8004dd0:	4301      	orrs	r1, r0
 8004dd2:	6021      	str	r1, [r4, #0]
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	686a      	ldr	r2, [r5, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	0952      	lsrs	r2, r2, #5
 8004ddc:	4002      	ands	r2, r0
 8004dde:	4bc8      	ldr	r3, [pc, #800]	; (8005100 <__iar_annotation$$branch+0x790>)
 8004de0:	400b      	ands	r3, r1
 8004de2:	0351      	lsls	r1, r2, #13
 8004de4:	4319      	orrs	r1, r3
 8004de6:	6021      	str	r1, [r4, #0]
 8004de8:	696a      	ldr	r2, [r5, #20]
 8004dea:	0612      	lsls	r2, r2, #24
 8004dec:	0f52      	lsrs	r2, r2, #29
 8004dee:	4bc5      	ldr	r3, [pc, #788]	; (8005104 <__iar_annotation$$branch+0x794>)
 8004df0:	400b      	ands	r3, r1
 8004df2:	0211      	lsls	r1, r2, #8
 8004df4:	4319      	orrs	r1, r3
 8004df6:	6021      	str	r1, [r4, #0]
 8004df8:	6869      	ldr	r1, [r5, #4]
 8004dfa:	6809      	ldr	r1, [r1, #0]
 8004dfc:	0889      	lsrs	r1, r1, #2
 8004dfe:	4008      	ands	r0, r1
 8004e00:	d003      	beq.n	8004e0a <__iar_annotation$$branch+0x49a>
 8004e02:	6968      	ldr	r0, [r5, #20]
 8004e04:	0781      	lsls	r1, r0, #30
 8004e06:	0fc8      	lsrs	r0, r1, #31
 8004e08:	e000      	b.n	8004e0c <__iar_annotation$$branch+0x49c>
 8004e0a:	2002      	movs	r0, #2
 8004e0c:	9002      	str	r0, [sp, #8]
 8004e0e:	208d      	movs	r0, #141	; 0x8d
 8004e10:	9001      	str	r0, [sp, #4]
 8004e12:	2001      	movs	r0, #1
 8004e14:	9000      	str	r0, [sp, #0]
 8004e16:	0023      	movs	r3, r4
 8004e18:	220f      	movs	r2, #15
 8004e1a:	2031      	movs	r0, #49	; 0x31
 8004e1c:	5c29      	ldrb	r1, [r5, r0]
 8004e1e:	0028      	movs	r0, r5
 8004e20:	f7fc fafb 	bl	800141a <PE_Send_DataMessage>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d158      	bne.n	8004eda <__iar_annotation$$branch+0x56a>
 8004e28:	2075      	movs	r0, #117	; 0x75
 8004e2a:	7728      	strb	r0, [r5, #28]
 8004e2c:	2155      	movs	r1, #85	; 0x55
 8004e2e:	0028      	movs	r0, r5
 8004e30:	f7fc fa2a 	bl	8001288 <PE_Notification>
 8004e34:	48b4      	ldr	r0, [pc, #720]	; (8005108 <__iar_annotation$$branch+0x798>)
 8004e36:	83e8      	strh	r0, [r5, #30]
 8004e38:	2032      	movs	r0, #50	; 0x32
 8004e3a:	e123      	b.n	8005084 <__iar_annotation$$branch+0x714>
 8004e3c:	2031      	movs	r0, #49	; 0x31
 8004e3e:	5c28      	ldrb	r0, [r5, r0]
 8004e40:	f7fb fdac 	bl	800099c <PE_Convert_SOPRxEvent>
 8004e44:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004e46:	7809      	ldrb	r1, [r1, #0]
 8004e48:	261f      	movs	r6, #31
 8004e4a:	4281      	cmp	r1, r0
 8004e4c:	d13c      	bne.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004e4e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004e50:	0bc2      	lsrs	r2, r0, #15
 8004e52:	d139      	bne.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004e54:	2707      	movs	r7, #7
 8004e56:	0b02      	lsrs	r2, r0, #12
 8004e58:	423a      	tst	r2, r7
 8004e5a:	d035      	beq.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004e5c:	221f      	movs	r2, #31
 8004e5e:	4002      	ands	r2, r0
 8004e60:	2a0f      	cmp	r2, #15
 8004e62:	d131      	bne.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004e64:	2914      	cmp	r1, #20
 8004e66:	d005      	beq.n	8004e74 <__iar_annotation$$branch+0x504>
 8004e68:	2014      	movs	r0, #20
 8004e6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004e6c:	7008      	strb	r0, [r1, #0]
 8004e6e:	0028      	movs	r0, r5
 8004e70:	f7fb fd5d 	bl	800092e <PE_Clear_RxEvent>
 8004e74:	2000      	movs	r0, #0
 8004e76:	7728      	strb	r0, [r5, #28]
 8004e78:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004e7a:	7880      	ldrb	r0, [r0, #2]
 8004e7c:	211f      	movs	r1, #31
 8004e7e:	4001      	ands	r1, r0
 8004e80:	2905      	cmp	r1, #5
 8004e82:	d121      	bne.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004e84:	0980      	lsrs	r0, r0, #6
 8004e86:	d01f      	beq.n	8004ec8 <__iar_annotation$$branch+0x558>
 8004e88:	9001      	str	r0, [sp, #4]
 8004e8a:	2801      	cmp	r0, #1
 8004e8c:	d005      	beq.n	8004e9a <__iar_annotation$$branch+0x52a>
 8004e8e:	d302      	bcc.n	8004e96 <__iar_annotation$$branch+0x526>
 8004e90:	2803      	cmp	r0, #3
 8004e92:	d006      	beq.n	8004ea2 <__iar_annotation$$branch+0x532>
 8004e94:	d303      	bcc.n	8004e9e <__iar_annotation$$branch+0x52e>
 8004e96:	2155      	movs	r1, #85	; 0x55
 8004e98:	e004      	b.n	8004ea4 <__iar_annotation$$branch+0x534>
 8004e9a:	2156      	movs	r1, #86	; 0x56
 8004e9c:	e002      	b.n	8004ea4 <__iar_annotation$$branch+0x534>
 8004e9e:	2157      	movs	r1, #87	; 0x57
 8004ea0:	e000      	b.n	8004ea4 <__iar_annotation$$branch+0x534>
 8004ea2:	2158      	movs	r1, #88	; 0x58
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	f7fc f9ef 	bl	8001288 <PE_Notification>
 8004eaa:	68e8      	ldr	r0, [r5, #12]
 8004eac:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	d009      	beq.n	8004ec6 <__iar_annotation$$branch+0x556>
 8004eb2:	6820      	ldr	r0, [r4, #0]
 8004eb4:	0a01      	lsrs	r1, r0, #8
 8004eb6:	400f      	ands	r7, r1
 8004eb8:	9700      	str	r7, [sp, #0]
 8004eba:	0c03      	lsrs	r3, r0, #16
 8004ebc:	9a01      	ldr	r2, [sp, #4]
 8004ebe:	2031      	movs	r0, #49	; 0x31
 8004ec0:	5c29      	ldrb	r1, [r5, r0]
 8004ec2:	7c28      	ldrb	r0, [r5, #16]
 8004ec4:	47b0      	blx	r6
 8004ec6:	e0ba      	b.n	800503e <__iar_annotation$$branch+0x6ce>
 8004ec8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004eca:	4006      	ands	r6, r0
 8004ecc:	2e10      	cmp	r6, #16
 8004ece:	d100      	bne.n	8004ed2 <__iar_annotation$$branch+0x562>
 8004ed0:	e0bc      	b.n	800504c <__iar_annotation$$branch+0x6dc>
 8004ed2:	8be8      	ldrh	r0, [r5, #30]
 8004ed4:	2180      	movs	r1, #128	; 0x80
 8004ed6:	0209      	lsls	r1, r1, #8
 8004ed8:	4288      	cmp	r0, r1
 8004eda:	d000      	beq.n	8004ede <__iar_annotation$$branch+0x56e>
 8004edc:	e12b      	b.n	8005136 <__iar_annotation$$branch+0x7c6>
 8004ede:	e0ce      	b.n	800507e <__iar_annotation$$branch+0x70e>
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	466a      	mov	r2, sp
 8004ee4:	7311      	strb	r1, [r2, #12]
 8004ee6:	6821      	ldr	r1, [r4, #0]
 8004ee8:	400e      	ands	r6, r1
 8004eea:	6026      	str	r6, [r4, #0]
 8004eec:	6861      	ldr	r1, [r4, #4]
 8004eee:	4030      	ands	r0, r6
 8004ef0:	06c9      	lsls	r1, r1, #27
 8004ef2:	0ec9      	lsrs	r1, r1, #27
 8004ef4:	4301      	orrs	r1, r0
 8004ef6:	6021      	str	r1, [r4, #0]
 8004ef8:	8920      	ldrh	r0, [r4, #8]
 8004efa:	b28a      	uxth	r2, r1
 8004efc:	0401      	lsls	r1, r0, #16
 8004efe:	4311      	orrs	r1, r2
 8004f00:	6021      	str	r1, [r4, #0]
 8004f02:	2080      	movs	r0, #128	; 0x80
 8004f04:	0200      	lsls	r0, r0, #8
 8004f06:	4308      	orrs	r0, r1
 8004f08:	6020      	str	r0, [r4, #0]
 8004f0a:	2601      	movs	r6, #1
 8004f0c:	6869      	ldr	r1, [r5, #4]
 8004f0e:	6809      	ldr	r1, [r1, #0]
 8004f10:	0949      	lsrs	r1, r1, #5
 8004f12:	4031      	ands	r1, r6
 8004f14:	4a7a      	ldr	r2, [pc, #488]	; (8005100 <__iar_annotation$$branch+0x790>)
 8004f16:	4002      	ands	r2, r0
 8004f18:	0348      	lsls	r0, r1, #13
 8004f1a:	4310      	orrs	r0, r2
 8004f1c:	6020      	str	r0, [r4, #0]
 8004f1e:	4979      	ldr	r1, [pc, #484]	; (8005104 <__iar_annotation$$branch+0x794>)
 8004f20:	4001      	ands	r1, r0
 8004f22:	0230      	lsls	r0, r6, #8
 8004f24:	4308      	orrs	r0, r1
 8004f26:	6020      	str	r0, [r4, #0]
 8004f28:	9005      	str	r0, [sp, #20]
 8004f2a:	68e8      	ldr	r0, [r5, #12]
 8004f2c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004f2e:	9001      	str	r0, [sp, #4]
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d00b      	beq.n	8004f4c <__iar_annotation$$branch+0x5dc>
 8004f34:	a805      	add	r0, sp, #20
 8004f36:	1d00      	adds	r0, r0, #4
 8004f38:	9000      	str	r0, [sp, #0]
 8004f3a:	ab03      	add	r3, sp, #12
 8004f3c:	7820      	ldrb	r0, [r4, #0]
 8004f3e:	06c2      	lsls	r2, r0, #27
 8004f40:	0ed2      	lsrs	r2, r2, #27
 8004f42:	2031      	movs	r0, #49	; 0x31
 8004f44:	5c29      	ldrb	r1, [r5, r0]
 8004f46:	7c28      	ldrb	r0, [r5, #16]
 8004f48:	9c01      	ldr	r4, [sp, #4]
 8004f4a:	47a0      	blx	r4
 8004f4c:	4668      	mov	r0, sp
 8004f4e:	7b00      	ldrb	r0, [r0, #12]
 8004f50:	1c40      	adds	r0, r0, #1
 8004f52:	4669      	mov	r1, sp
 8004f54:	7308      	strb	r0, [r1, #12]
 8004f56:	6868      	ldr	r0, [r5, #4]
 8004f58:	6800      	ldr	r0, [r0, #0]
 8004f5a:	0880      	lsrs	r0, r0, #2
 8004f5c:	4006      	ands	r6, r0
 8004f5e:	d003      	beq.n	8004f68 <__iar_annotation$$branch+0x5f8>
 8004f60:	6968      	ldr	r0, [r5, #20]
 8004f62:	0781      	lsls	r1, r0, #30
 8004f64:	0fc8      	lsrs	r0, r1, #31
 8004f66:	e000      	b.n	8004f6a <__iar_annotation$$branch+0x5fa>
 8004f68:	2002      	movs	r0, #2
 8004f6a:	9002      	str	r0, [sp, #8]
 8004f6c:	208f      	movs	r0, #143	; 0x8f
 8004f6e:	9001      	str	r0, [sp, #4]
 8004f70:	4668      	mov	r0, sp
 8004f72:	7b00      	ldrb	r0, [r0, #12]
 8004f74:	9000      	str	r0, [sp, #0]
 8004f76:	ab05      	add	r3, sp, #20
 8004f78:	220f      	movs	r2, #15
 8004f7a:	2031      	movs	r0, #49	; 0x31
 8004f7c:	5c29      	ldrb	r1, [r5, r0]
 8004f7e:	0028      	movs	r0, r5
 8004f80:	f7fc fa4b 	bl	800141a <PE_Send_DataMessage>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d104      	bne.n	8004f92 <__iar_annotation$$branch+0x622>
 8004f88:	207a      	movs	r0, #122	; 0x7a
 8004f8a:	7728      	strb	r0, [r5, #28]
 8004f8c:	48aa      	ldr	r0, [pc, #680]	; (8005238 <.text_19>)
 8004f8e:	83e8      	strh	r0, [r5, #30]
 8004f90:	9704      	str	r7, [sp, #16]
 8004f92:	e0cd      	b.n	8005130 <__iar_annotation$$branch+0x7c0>
 8004f94:	2607      	movs	r6, #7
 8004f96:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004f98:	0b00      	lsrs	r0, r0, #12
 8004f9a:	2107      	movs	r1, #7
 8004f9c:	4001      	ands	r1, r0
 8004f9e:	1e48      	subs	r0, r1, #1
 8004fa0:	4669      	mov	r1, sp
 8004fa2:	7108      	strb	r0, [r1, #4]
 8004fa4:	2031      	movs	r0, #49	; 0x31
 8004fa6:	5c28      	ldrb	r0, [r5, r0]
 8004fa8:	f7fb fcf8 	bl	800099c <PE_Convert_SOPRxEvent>
 8004fac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004fae:	7809      	ldrb	r1, [r1, #0]
 8004fb0:	271f      	movs	r7, #31
 8004fb2:	4281      	cmp	r1, r0
 8004fb4:	d146      	bne.n	8005044 <__iar_annotation$$branch+0x6d4>
 8004fb6:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004fb8:	0bc2      	lsrs	r2, r0, #15
 8004fba:	d143      	bne.n	8005044 <__iar_annotation$$branch+0x6d4>
 8004fbc:	0b02      	lsrs	r2, r0, #12
 8004fbe:	4232      	tst	r2, r6
 8004fc0:	d040      	beq.n	8005044 <__iar_annotation$$branch+0x6d4>
 8004fc2:	221f      	movs	r2, #31
 8004fc4:	4002      	ands	r2, r0
 8004fc6:	2a0f      	cmp	r2, #15
 8004fc8:	d13c      	bne.n	8005044 <__iar_annotation$$branch+0x6d4>
 8004fca:	2914      	cmp	r1, #20
 8004fcc:	d005      	beq.n	8004fda <__iar_annotation$$branch+0x66a>
 8004fce:	2014      	movs	r0, #20
 8004fd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004fd2:	7008      	strb	r0, [r1, #0]
 8004fd4:	0028      	movs	r0, r5
 8004fd6:	f7fb fcaa 	bl	800092e <PE_Clear_RxEvent>
 8004fda:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004fdc:	7880      	ldrb	r0, [r0, #2]
 8004fde:	9002      	str	r0, [sp, #8]
 8004fe0:	4038      	ands	r0, r7
 8004fe2:	6861      	ldr	r1, [r4, #4]
 8004fe4:	4288      	cmp	r0, r1
 8004fe6:	d12d      	bne.n	8005044 <__iar_annotation$$branch+0x6d4>
 8004fe8:	9802      	ldr	r0, [sp, #8]
 8004fea:	0980      	lsrs	r0, r0, #6
 8004fec:	d02a      	beq.n	8005044 <__iar_annotation$$branch+0x6d4>
 8004fee:	68e8      	ldr	r0, [r5, #12]
 8004ff0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d023      	beq.n	800503e <__iar_annotation$$branch+0x6ce>
 8004ff6:	2400      	movs	r4, #0
 8004ff8:	e011      	b.n	800501e <__iar_annotation$$branch+0x6ae>
 8004ffa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004ffc:	00a1      	lsls	r1, r4, #2
 8004ffe:	1842      	adds	r2, r0, r1
 8005000:	7993      	ldrb	r3, [r2, #6]
 8005002:	79d6      	ldrb	r6, [r2, #7]
 8005004:	0236      	lsls	r6, r6, #8
 8005006:	199b      	adds	r3, r3, r6
 8005008:	3008      	adds	r0, #8
 800500a:	5c40      	ldrb	r0, [r0, r1]
 800500c:	0400      	lsls	r0, r0, #16
 800500e:	1818      	adds	r0, r3, r0
 8005010:	7a51      	ldrb	r1, [r2, #9]
 8005012:	0609      	lsls	r1, r1, #24
 8005014:	1840      	adds	r0, r0, r1
 8005016:	a905      	add	r1, sp, #20
 8005018:	00a2      	lsls	r2, r4, #2
 800501a:	5088      	str	r0, [r1, r2]
 800501c:	1c64      	adds	r4, r4, #1
 800501e:	4668      	mov	r0, sp
 8005020:	7900      	ldrb	r0, [r0, #4]
 8005022:	4284      	cmp	r4, r0
 8005024:	d3e9      	bcc.n	8004ffa <__iar_annotation$$branch+0x68a>
 8005026:	a805      	add	r0, sp, #20
 8005028:	9000      	str	r0, [sp, #0]
 800502a:	ab01      	add	r3, sp, #4
 800502c:	9802      	ldr	r0, [sp, #8]
 800502e:	221f      	movs	r2, #31
 8005030:	4002      	ands	r2, r0
 8005032:	2031      	movs	r0, #49	; 0x31
 8005034:	5c29      	ldrb	r1, [r5, r0]
 8005036:	7c28      	ldrb	r0, [r5, #16]
 8005038:	68ec      	ldr	r4, [r5, #12]
 800503a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800503c:	47a0      	blx	r4
 800503e:	2000      	movs	r0, #0
 8005040:	83e8      	strh	r0, [r5, #30]
 8005042:	e01c      	b.n	800507e <__iar_annotation$$branch+0x70e>
 8005044:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8005046:	4007      	ands	r7, r0
 8005048:	2f10      	cmp	r7, #16
 800504a:	d113      	bne.n	8005074 <__iar_annotation$$branch+0x704>
 800504c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800504e:	7800      	ldrb	r0, [r0, #0]
 8005050:	2814      	cmp	r0, #20
 8005052:	d005      	beq.n	8005060 <__iar_annotation$$branch+0x6f0>
 8005054:	2014      	movs	r0, #20
 8005056:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005058:	7008      	strb	r0, [r1, #0]
 800505a:	0028      	movs	r0, r5
 800505c:	f7fb fc67 	bl	800092e <PE_Clear_RxEvent>
 8005060:	2000      	movs	r0, #0
 8005062:	83e8      	strh	r0, [r5, #30]
 8005064:	2103      	movs	r1, #3
 8005066:	7469      	strb	r1, [r5, #17]
 8005068:	9004      	str	r0, [sp, #16]
 800506a:	2159      	movs	r1, #89	; 0x59
 800506c:	0028      	movs	r0, r5
 800506e:	f7fc f90b 	bl	8001288 <PE_Notification>
 8005072:	e060      	b.n	8005136 <__iar_annotation$$branch+0x7c6>
 8005074:	8be8      	ldrh	r0, [r5, #30]
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	0209      	lsls	r1, r1, #8
 800507a:	4288      	cmp	r0, r1
 800507c:	d15b      	bne.n	8005136 <__iar_annotation$$branch+0x7c6>
 800507e:	2003      	movs	r0, #3
 8005080:	7468      	strb	r0, [r5, #17]
 8005082:	2000      	movs	r0, #0
 8005084:	9004      	str	r0, [sp, #16]
 8005086:	e056      	b.n	8005136 <__iar_annotation$$branch+0x7c6>
 8005088:	2100      	movs	r1, #0
 800508a:	466a      	mov	r2, sp
 800508c:	7311      	strb	r1, [r2, #12]
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	400e      	ands	r6, r1
 8005092:	6026      	str	r6, [r4, #0]
 8005094:	6861      	ldr	r1, [r4, #4]
 8005096:	4030      	ands	r0, r6
 8005098:	06c9      	lsls	r1, r1, #27
 800509a:	0ec9      	lsrs	r1, r1, #27
 800509c:	4301      	orrs	r1, r0
 800509e:	6021      	str	r1, [r4, #0]
 80050a0:	8920      	ldrh	r0, [r4, #8]
 80050a2:	b28a      	uxth	r2, r1
 80050a4:	0401      	lsls	r1, r0, #16
 80050a6:	4311      	orrs	r1, r2
 80050a8:	6021      	str	r1, [r4, #0]
 80050aa:	2080      	movs	r0, #128	; 0x80
 80050ac:	0200      	lsls	r0, r0, #8
 80050ae:	4308      	orrs	r0, r1
 80050b0:	6020      	str	r0, [r4, #0]
 80050b2:	2601      	movs	r6, #1
 80050b4:	6869      	ldr	r1, [r5, #4]
 80050b6:	6809      	ldr	r1, [r1, #0]
 80050b8:	0949      	lsrs	r1, r1, #5
 80050ba:	4031      	ands	r1, r6
 80050bc:	4a10      	ldr	r2, [pc, #64]	; (8005100 <__iar_annotation$$branch+0x790>)
 80050be:	4002      	ands	r2, r0
 80050c0:	0348      	lsls	r0, r1, #13
 80050c2:	4310      	orrs	r0, r2
 80050c4:	6020      	str	r0, [r4, #0]
 80050c6:	490f      	ldr	r1, [pc, #60]	; (8005104 <__iar_annotation$$branch+0x794>)
 80050c8:	4001      	ands	r1, r0
 80050ca:	0230      	lsls	r0, r6, #8
 80050cc:	4308      	orrs	r0, r1
 80050ce:	6020      	str	r0, [r4, #0]
 80050d0:	9005      	str	r0, [sp, #20]
 80050d2:	68e8      	ldr	r0, [r5, #12]
 80050d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d004      	beq.n	80050e4 <__iar_annotation$$branch+0x774>
 80050da:	a805      	add	r0, sp, #20
 80050dc:	1d02      	adds	r2, r0, #4
 80050de:	a903      	add	r1, sp, #12
 80050e0:	7c28      	ldrb	r0, [r5, #16]
 80050e2:	4798      	blx	r3
 80050e4:	4668      	mov	r0, sp
 80050e6:	7b00      	ldrb	r0, [r0, #12]
 80050e8:	1c40      	adds	r0, r0, #1
 80050ea:	4669      	mov	r1, sp
 80050ec:	7308      	strb	r0, [r1, #12]
 80050ee:	6868      	ldr	r0, [r5, #4]
 80050f0:	6800      	ldr	r0, [r0, #0]
 80050f2:	0880      	lsrs	r0, r0, #2
 80050f4:	4006      	ands	r6, r0
 80050f6:	d009      	beq.n	800510c <__iar_annotation$$branch+0x79c>
 80050f8:	6968      	ldr	r0, [r5, #20]
 80050fa:	0781      	lsls	r1, r0, #30
 80050fc:	0fc8      	lsrs	r0, r1, #31
 80050fe:	e006      	b.n	800510e <__iar_annotation$$branch+0x79e>
 8005100:	ffff9fff 	.word	0xffff9fff
 8005104:	fffff8ff 	.word	0xfffff8ff
 8005108:	00008032 	.word	0x00008032
 800510c:	2002      	movs	r0, #2
 800510e:	9002      	str	r0, [sp, #8]
 8005110:	2003      	movs	r0, #3
 8005112:	9001      	str	r0, [sp, #4]
 8005114:	4668      	mov	r0, sp
 8005116:	7b00      	ldrb	r0, [r0, #12]
 8005118:	9000      	str	r0, [sp, #0]
 800511a:	ab05      	add	r3, sp, #20
 800511c:	220f      	movs	r2, #15
 800511e:	2031      	movs	r0, #49	; 0x31
 8005120:	5c29      	ldrb	r1, [r5, r0]
 8005122:	0028      	movs	r0, r5
 8005124:	f7fc f979 	bl	800141a <PE_Send_DataMessage>
 8005128:	2800      	cmp	r0, #0
 800512a:	d101      	bne.n	8005130 <__iar_annotation$$branch+0x7c0>
 800512c:	207a      	movs	r0, #122	; 0x7a
 800512e:	7728      	strb	r0, [r5, #28]
 8005130:	2000      	movs	r0, #0
 8005132:	2132      	movs	r1, #50	; 0x32
 8005134:	5468      	strb	r0, [r5, r1]
 8005136:	9804      	ldr	r0, [sp, #16]
 8005138:	b017      	add	sp, #92	; 0x5c
 800513a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513c:	1a80      	subs	r0, r0, r2
 800513e:	4971      	ldr	r1, [pc, #452]	; (8005304 <.text_21>)
 8005140:	1869      	adds	r1, r5, r1
 8005142:	7048      	strb	r0, [r1, #1]
 8005144:	b2d0      	uxtb	r0, r2
 8005146:	280c      	cmp	r0, #12
 8005148:	d001      	beq.n	800514e <__iar_annotation$$branch+0x4>

0800514a <__iar_annotation$$branch>:
 800514a:	f7ff fa8c 	bl	8004666 <__iar_annotation$$branch+0x30>
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	9006      	str	r0, [sp, #24]
 8005152:	2000      	movs	r0, #0
 8005154:	9002      	str	r0, [sp, #8]
 8005156:	2077      	movs	r0, #119	; 0x77
 8005158:	9001      	str	r0, [sp, #4]
 800515a:	2007      	movs	r0, #7
 800515c:	9000      	str	r0, [sp, #0]
 800515e:	ab06      	add	r3, sp, #24
 8005160:	220f      	movs	r2, #15
 8005162:	2031      	movs	r0, #49	; 0x31
 8005164:	5c29      	ldrb	r1, [r5, r0]
 8005166:	0028      	movs	r0, r5
 8005168:	f7fc f957 	bl	800141a <PE_Send_DataMessage>
 800516c:	48c7      	ldr	r0, [pc, #796]	; (800548c <.text_23>)
 800516e:	83e8      	strh	r0, [r5, #30]
 8005170:	e7e1      	b.n	8005136 <__iar_annotation$$branch+0x7c6>
 8005172:	1a98      	subs	r0, r3, r2
 8005174:	4963      	ldr	r1, [pc, #396]	; (8005304 <.text_21>)
 8005176:	1861      	adds	r1, r4, r1
 8005178:	7048      	strb	r0, [r1, #1]
 800517a:	b2d0      	uxtb	r0, r2
 800517c:	280c      	cmp	r0, #12
 800517e:	d001      	beq.n	8005184 <__iar_annotation$$branch+0x4>

08005180 <__iar_annotation$$branch>:
 8005180:	f7ff fada 	bl	8004738 <__iar_annotation$$branch+0x34>
 8005184:	2000      	movs	r0, #0
 8005186:	9002      	str	r0, [sp, #8]
 8005188:	2077      	movs	r0, #119	; 0x77
 800518a:	9001      	str	r0, [sp, #4]
 800518c:	2007      	movs	r0, #7
 800518e:	9000      	str	r0, [sp, #0]
 8005190:	ab06      	add	r3, sp, #24
 8005192:	220f      	movs	r2, #15
 8005194:	2031      	movs	r0, #49	; 0x31
 8005196:	5c21      	ldrb	r1, [r4, r0]
 8005198:	0020      	movs	r0, r4
 800519a:	f7fc f93e 	bl	800141a <PE_Send_DataMessage>
 800519e:	48bb      	ldr	r0, [pc, #748]	; (800548c <.text_23>)
 80051a0:	83e0      	strh	r0, [r4, #30]
 80051a2:	e7c8      	b.n	8005136 <__iar_annotation$$branch+0x7c6>
 80051a4:	9006      	str	r0, [sp, #24]

080051a6 <__iar_annotation$$branch>:
 80051a6:	f7ff fb30 	bl	800480a <__iar_annotation$$branch+0x26>
 80051aa:	466a      	mov	r2, sp
 80051ac:	7310      	strb	r0, [r2, #12]
 80051ae:	000d      	movs	r5, r1

080051b0 <__iar_annotation$$branch>:
 80051b0:	f7ff fbfa 	bl	80049a8 <__iar_annotation$$branch+0x38>

080051b4 <PE_StateMachine_UVDM>:
 80051b4:	2914      	cmp	r1, #20
 80051b6:	d000      	beq.n	80051ba <PE_StateMachine_UVDM+0x6>
 80051b8:	4770      	bx	lr
 80051ba:	b570      	push	{r4, r5, r6, lr}
 80051bc:	b08c      	sub	sp, #48	; 0x30
 80051be:	0004      	movs	r4, r0
 80051c0:	68e0      	ldr	r0, [r4, #12]
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d035      	beq.n	8005232 <PE_StateMachine_UVDM+0x7e>
 80051c6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d032      	beq.n	8005232 <PE_StateMachine_UVDM+0x7e>
 80051cc:	2500      	movs	r5, #0
 80051ce:	4669      	mov	r1, sp
 80051d0:	730d      	strb	r5, [r1, #12]
 80051d2:	a805      	add	r0, sp, #20
 80051d4:	1d03      	adds	r3, r0, #4
 80051d6:	aa03      	add	r2, sp, #12
 80051d8:	a904      	add	r1, sp, #16
 80051da:	7c20      	ldrb	r0, [r4, #16]
 80051dc:	68e6      	ldr	r6, [r4, #12]
 80051de:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 80051e0:	47b0      	blx	r6
 80051e2:	9804      	ldr	r0, [sp, #16]
 80051e4:	49ca      	ldr	r1, [pc, #808]	; (8005510 <.text_25>)
 80051e6:	4001      	ands	r1, r0
 80051e8:	9104      	str	r1, [sp, #16]
 80051ea:	4668      	mov	r0, sp
 80051ec:	7b00      	ldrb	r0, [r0, #12]
 80051ee:	1c40      	adds	r0, r0, #1
 80051f0:	4669      	mov	r1, sp
 80051f2:	7308      	strb	r0, [r1, #12]
 80051f4:	9804      	ldr	r0, [sp, #16]
 80051f6:	9005      	str	r0, [sp, #20]
 80051f8:	6860      	ldr	r0, [r4, #4]
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	0741      	lsls	r1, r0, #29
 80051fe:	0fc9      	lsrs	r1, r1, #31
 8005200:	d003      	beq.n	800520a <PE_StateMachine_UVDM+0x56>
 8005202:	6960      	ldr	r0, [r4, #20]
 8005204:	0781      	lsls	r1, r0, #30
 8005206:	0fc8      	lsrs	r0, r1, #31
 8005208:	e000      	b.n	800520c <PE_StateMachine_UVDM+0x58>
 800520a:	2002      	movs	r0, #2
 800520c:	9002      	str	r0, [sp, #8]
 800520e:	2003      	movs	r0, #3
 8005210:	9001      	str	r0, [sp, #4]
 8005212:	4668      	mov	r0, sp
 8005214:	7b00      	ldrb	r0, [r0, #12]
 8005216:	9000      	str	r0, [sp, #0]
 8005218:	ab05      	add	r3, sp, #20
 800521a:	220f      	movs	r2, #15
 800521c:	2031      	movs	r0, #49	; 0x31
 800521e:	5c21      	ldrb	r1, [r4, r0]
 8005220:	0020      	movs	r0, r4
 8005222:	f7fc f8fa 	bl	800141a <PE_Send_DataMessage>
 8005226:	2800      	cmp	r0, #0
 8005228:	d101      	bne.n	800522e <PE_StateMachine_UVDM+0x7a>
 800522a:	2079      	movs	r0, #121	; 0x79
 800522c:	7720      	strb	r0, [r4, #28]
 800522e:	2032      	movs	r0, #50	; 0x32
 8005230:	5425      	strb	r5, [r4, r0]
 8005232:	b00c      	add	sp, #48	; 0x30
 8005234:	bd70      	pop	{r4, r5, r6, pc}
	...

08005238 <.text_19>:
 8005238:	0000801e 	.word	0x0000801e

0800523c <PE_Check_DataMessageVDM>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	2403      	movs	r4, #3
 8005240:	2501      	movs	r5, #1
 8005242:	6801      	ldr	r1, [r0, #0]
 8005244:	6849      	ldr	r1, [r1, #4]
 8005246:	0949      	lsrs	r1, r1, #5
 8005248:	4029      	ands	r1, r5
 800524a:	d102      	bne.n	8005252 <PE_Check_DataMessageVDM+0x16>
 800524c:	68c1      	ldr	r1, [r0, #12]
 800524e:	2900      	cmp	r1, #0
 8005250:	d01c      	beq.n	800528c <PE_Check_DataMessageVDM+0x50>
 8005252:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005254:	788a      	ldrb	r2, [r1, #2]
 8005256:	78cb      	ldrb	r3, [r1, #3]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	18d2      	adds	r2, r2, r3
 800525c:	790b      	ldrb	r3, [r1, #4]
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	18d2      	adds	r2, r2, r3
 8005262:	7949      	ldrb	r1, [r1, #5]
 8005264:	0609      	lsls	r1, r1, #24
 8005266:	1851      	adds	r1, r2, r1
 8005268:	9100      	str	r1, [sp, #0]
 800526a:	0bca      	lsrs	r2, r1, #15
 800526c:	402a      	ands	r2, r5
 800526e:	d014      	beq.n	800529a <PE_Check_DataMessageVDM+0x5e>
 8005270:	2394      	movs	r3, #148	; 0x94
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	50c1      	str	r1, [r0, r3]
 8005276:	0989      	lsrs	r1, r1, #6
 8005278:	4021      	ands	r1, r4
 800527a:	d107      	bne.n	800528c <PE_Check_DataMessageVDM+0x50>
 800527c:	6801      	ldr	r1, [r0, #0]
 800527e:	6849      	ldr	r1, [r1, #4]
 8005280:	0a09      	lsrs	r1, r1, #8
 8005282:	4029      	ands	r1, r5
 8005284:	d002      	beq.n	800528c <PE_Check_DataMessageVDM+0x50>
 8005286:	f7ff f83f 	bl	8004308 <PE_Receive_SVDM>
 800528a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800528c:	6841      	ldr	r1, [r0, #4]
 800528e:	6809      	ldr	r1, [r1, #0]
 8005290:	400c      	ands	r4, r1
 8005292:	2c02      	cmp	r4, #2
 8005294:	d134      	bne.n	8005300 <PE_Check_DataMessageVDM+0xc4>
 8005296:	7445      	strb	r5, [r0, #17]
 8005298:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800529a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 800529c:	0449      	lsls	r1, r1, #17
 800529e:	0f49      	lsrs	r1, r1, #29
 80052a0:	1e49      	subs	r1, r1, #1
 80052a2:	4a18      	ldr	r2, [pc, #96]	; (8005304 <.text_21>)
 80052a4:	5481      	strb	r1, [r0, r2]
 80052a6:	0006      	movs	r6, r0
 80052a8:	2000      	movs	r0, #0
 80052aa:	e00f      	b.n	80052cc <PE_Check_DataMessageVDM+0x90>
 80052ac:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80052ae:	0082      	lsls	r2, r0, #2
 80052b0:	1889      	adds	r1, r1, r2
 80052b2:	798a      	ldrb	r2, [r1, #6]
 80052b4:	79cf      	ldrb	r7, [r1, #7]
 80052b6:	023f      	lsls	r7, r7, #8
 80052b8:	19d2      	adds	r2, r2, r7
 80052ba:	7a0f      	ldrb	r7, [r1, #8]
 80052bc:	043f      	lsls	r7, r7, #16
 80052be:	19d2      	adds	r2, r2, r7
 80052c0:	7a49      	ldrb	r1, [r1, #9]
 80052c2:	0609      	lsls	r1, r1, #24
 80052c4:	1851      	adds	r1, r2, r1
 80052c6:	0082      	lsls	r2, r0, #2
 80052c8:	5099      	str	r1, [r3, r2]
 80052ca:	1c40      	adds	r0, r0, #1
 80052cc:	49a3      	ldr	r1, [pc, #652]	; (800555c <.text_27>)
 80052ce:	1873      	adds	r3, r6, r1
 80052d0:	3118      	adds	r1, #24
 80052d2:	1872      	adds	r2, r6, r1
 80052d4:	7811      	ldrb	r1, [r2, #0]
 80052d6:	4288      	cmp	r0, r1
 80052d8:	d3e8      	bcc.n	80052ac <PE_Check_DataMessageVDM+0x70>
 80052da:	9900      	ldr	r1, [sp, #0]
 80052dc:	68f0      	ldr	r0, [r6, #12]
 80052de:	2800      	cmp	r0, #0
 80052e0:	d008      	beq.n	80052f4 <PE_Check_DataMessageVDM+0xb8>
 80052e2:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80052e4:	2f00      	cmp	r7, #0
 80052e6:	d005      	beq.n	80052f4 <PE_Check_DataMessageVDM+0xb8>
 80052e8:	7c30      	ldrb	r0, [r6, #16]
 80052ea:	47b8      	blx	r7
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d101      	bne.n	80052f4 <PE_Check_DataMessageVDM+0xb8>
 80052f0:	7474      	strb	r4, [r6, #17]
 80052f2:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80052f4:	6870      	ldr	r0, [r6, #4]
 80052f6:	6800      	ldr	r0, [r0, #0]
 80052f8:	4004      	ands	r4, r0
 80052fa:	2c02      	cmp	r4, #2
 80052fc:	d100      	bne.n	8005300 <PE_Check_DataMessageVDM+0xc4>
 80052fe:	7475      	strb	r5, [r6, #17]
 8005300:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08005304 <.text_21>:
 8005304:	000004ac 	.word	0x000004ac

08005308 <PE_SVDM_CheckIdentity>:
 8005308:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800530a:	0003      	movs	r3, r0
 800530c:	2000      	movs	r0, #0
 800530e:	4c94      	ldr	r4, [pc, #592]	; (8005560 <.text_28>)
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	58e3      	ldr	r3, [r4, r3]
 8005314:	9302      	str	r3, [sp, #8]
 8005316:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005318:	045b      	lsls	r3, r3, #17
 800531a:	0f5b      	lsrs	r3, r3, #29
 800531c:	1e5c      	subs	r4, r3, #1
 800531e:	b2e3      	uxtb	r3, r4
 8005320:	2b03      	cmp	r3, #3
 8005322:	d200      	bcs.n	8005326 <PE_SVDM_CheckIdentity+0x1e>
 8005324:	e0b0      	b.n	8005488 <PE_SVDM_CheckIdentity+0x180>
 8005326:	780b      	ldrb	r3, [r1, #0]
 8005328:	784d      	ldrb	r5, [r1, #1]
 800532a:	022d      	lsls	r5, r5, #8
 800532c:	195b      	adds	r3, r3, r5
 800532e:	788d      	ldrb	r5, [r1, #2]
 8005330:	042d      	lsls	r5, r5, #16
 8005332:	195b      	adds	r3, r3, r5
 8005334:	78cd      	ldrb	r5, [r1, #3]
 8005336:	062d      	lsls	r5, r5, #24
 8005338:	195b      	adds	r3, r3, r5
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	790d      	ldrb	r5, [r1, #4]
 800533e:	794e      	ldrb	r6, [r1, #5]
 8005340:	0236      	lsls	r6, r6, #8
 8005342:	19ad      	adds	r5, r5, r6
 8005344:	798e      	ldrb	r6, [r1, #6]
 8005346:	0436      	lsls	r6, r6, #16
 8005348:	19ad      	adds	r5, r5, r6
 800534a:	79ce      	ldrb	r6, [r1, #7]
 800534c:	0636      	lsls	r6, r6, #24
 800534e:	19ad      	adds	r5, r5, r6
 8005350:	6055      	str	r5, [r2, #4]
 8005352:	7a0d      	ldrb	r5, [r1, #8]
 8005354:	7a4e      	ldrb	r6, [r1, #9]
 8005356:	0236      	lsls	r6, r6, #8
 8005358:	19ad      	adds	r5, r5, r6
 800535a:	7a8e      	ldrb	r6, [r1, #10]
 800535c:	0436      	lsls	r6, r6, #16
 800535e:	19ad      	adds	r5, r5, r6
 8005360:	7ace      	ldrb	r6, [r1, #11]
 8005362:	0636      	lsls	r6, r6, #24
 8005364:	19ad      	adds	r5, r5, r6
 8005366:	6095      	str	r5, [r2, #8]
 8005368:	1ee4      	subs	r4, r4, #3
 800536a:	0625      	lsls	r5, r4, #24
 800536c:	d068      	beq.n	8005440 <PE_SVDM_CheckIdentity+0x138>
 800536e:	250c      	movs	r5, #12
 8005370:	9501      	str	r5, [sp, #4]
 8005372:	2524      	movs	r5, #36	; 0x24
 8005374:	5d56      	ldrb	r6, [r2, r5]
 8005376:	25f0      	movs	r5, #240	; 0xf0
 8005378:	4035      	ands	r5, r6
 800537a:	2624      	movs	r6, #36	; 0x24
 800537c:	5595      	strb	r5, [r2, r6]
 800537e:	1e64      	subs	r4, r4, #1
 8005380:	466e      	mov	r6, sp
 8005382:	7034      	strb	r4, [r6, #0]
 8005384:	2410      	movs	r4, #16
 8005386:	009e      	lsls	r6, r3, #2
 8005388:	0f76      	lsrs	r6, r6, #29
 800538a:	2e05      	cmp	r6, #5
 800538c:	d869      	bhi.n	8005462 <PE_SVDM_CheckIdentity+0x15a>
 800538e:	a701      	add	r7, pc, #4	; (adr r7, 8005394 <PE_SVDM_CheckIdentity+0x8c>)
 8005390:	5dbf      	ldrb	r7, [r7, r6]
 8005392:	44bf      	add	pc, r7
 8005394:	460404ac 	.word	0x460404ac
 8005398:	8666      	.short	0x8666
 800539a:	2608      	movs	r6, #8
 800539c:	432e      	orrs	r6, r5
 800539e:	2524      	movs	r5, #36	; 0x24
 80053a0:	5556      	strb	r6, [r2, r5]
 80053a2:	7b0d      	ldrb	r5, [r1, #12]
 80053a4:	7b4e      	ldrb	r6, [r1, #13]
 80053a6:	0236      	lsls	r6, r6, #8
 80053a8:	19ad      	adds	r5, r5, r6
 80053aa:	7b8e      	ldrb	r6, [r1, #14]
 80053ac:	0436      	lsls	r6, r6, #16
 80053ae:	19ad      	adds	r5, r5, r6
 80053b0:	7bce      	ldrb	r6, [r1, #15]
 80053b2:	0636      	lsls	r6, r6, #24
 80053b4:	19ad      	adds	r5, r5, r6
 80053b6:	6195      	str	r5, [r2, #24]
 80053b8:	9401      	str	r4, [sp, #4]
 80053ba:	466d      	mov	r5, sp
 80053bc:	782d      	ldrb	r5, [r5, #0]
 80053be:	002e      	movs	r6, r5
 80053c0:	d062      	beq.n	8005488 <PE_SVDM_CheckIdentity+0x180>
 80053c2:	7c0e      	ldrb	r6, [r1, #16]
 80053c4:	7c4f      	ldrb	r7, [r1, #17]
 80053c6:	023f      	lsls	r7, r7, #8
 80053c8:	19f6      	adds	r6, r6, r7
 80053ca:	7c8f      	ldrb	r7, [r1, #18]
 80053cc:	043f      	lsls	r7, r7, #16
 80053ce:	19f6      	adds	r6, r6, r7
 80053d0:	7ccf      	ldrb	r7, [r1, #19]
 80053d2:	063f      	lsls	r7, r7, #24
 80053d4:	19f6      	adds	r6, r6, r7
 80053d6:	61d6      	str	r6, [r2, #28]
 80053d8:	1e6d      	subs	r5, r5, #1
 80053da:	e030      	b.n	800543e <PE_SVDM_CheckIdentity+0x136>
 80053dc:	2601      	movs	r6, #1
 80053de:	432e      	orrs	r6, r5
 80053e0:	2524      	movs	r5, #36	; 0x24
 80053e2:	5556      	strb	r6, [r2, r5]
 80053e4:	7b0d      	ldrb	r5, [r1, #12]
 80053e6:	7b4e      	ldrb	r6, [r1, #13]
 80053e8:	0236      	lsls	r6, r6, #8
 80053ea:	19ad      	adds	r5, r5, r6
 80053ec:	7b8e      	ldrb	r6, [r1, #14]
 80053ee:	0436      	lsls	r6, r6, #16
 80053f0:	19ad      	adds	r5, r5, r6
 80053f2:	7bce      	ldrb	r6, [r1, #15]
 80053f4:	0636      	lsls	r6, r6, #24
 80053f6:	19ad      	adds	r5, r5, r6
 80053f8:	60d5      	str	r5, [r2, #12]
 80053fa:	e01e      	b.n	800543a <PE_SVDM_CheckIdentity+0x132>
 80053fc:	2604      	movs	r6, #4
 80053fe:	432e      	orrs	r6, r5
 8005400:	2524      	movs	r5, #36	; 0x24
 8005402:	5556      	strb	r6, [r2, r5]
 8005404:	7b0d      	ldrb	r5, [r1, #12]
 8005406:	7b4e      	ldrb	r6, [r1, #13]
 8005408:	0236      	lsls	r6, r6, #8
 800540a:	19ad      	adds	r5, r5, r6
 800540c:	7b8e      	ldrb	r6, [r1, #14]
 800540e:	0436      	lsls	r6, r6, #16
 8005410:	19ad      	adds	r5, r5, r6
 8005412:	7bce      	ldrb	r6, [r1, #15]
 8005414:	0636      	lsls	r6, r6, #24
 8005416:	19ad      	adds	r5, r5, r6
 8005418:	6155      	str	r5, [r2, #20]
 800541a:	e00e      	b.n	800543a <PE_SVDM_CheckIdentity+0x132>
 800541c:	2602      	movs	r6, #2
 800541e:	432e      	orrs	r6, r5
 8005420:	2524      	movs	r5, #36	; 0x24
 8005422:	5556      	strb	r6, [r2, r5]
 8005424:	7b0d      	ldrb	r5, [r1, #12]
 8005426:	7b4e      	ldrb	r6, [r1, #13]
 8005428:	0236      	lsls	r6, r6, #8
 800542a:	19ad      	adds	r5, r5, r6
 800542c:	7b8e      	ldrb	r6, [r1, #14]
 800542e:	0436      	lsls	r6, r6, #16
 8005430:	19ad      	adds	r5, r5, r6
 8005432:	7bce      	ldrb	r6, [r1, #15]
 8005434:	0636      	lsls	r6, r6, #24
 8005436:	19ad      	adds	r5, r5, r6
 8005438:	6115      	str	r5, [r2, #16]
 800543a:	466d      	mov	r5, sp
 800543c:	782d      	ldrb	r5, [r5, #0]
 800543e:	062d      	lsls	r5, r5, #24
 8005440:	d023      	beq.n	800548a <PE_SVDM_CheckIdentity+0x182>
 8005442:	9d02      	ldr	r5, [sp, #8]
 8005444:	8ead      	ldrh	r5, [r5, #52]	; 0x34
 8005446:	062d      	lsls	r5, r5, #24
 8005448:	0fad      	lsrs	r5, r5, #30
 800544a:	2d02      	cmp	r5, #2
 800544c:	d31d      	bcc.n	800548a <PE_SVDM_CheckIdentity+0x182>
 800544e:	9d01      	ldr	r5, [sp, #4]
 8005450:	1d2d      	adds	r5, r5, #4
 8005452:	019b      	lsls	r3, r3, #6
 8005454:	0f5b      	lsrs	r3, r3, #29
 8005456:	d018      	beq.n	800548a <PE_SVDM_CheckIdentity+0x182>
 8005458:	1e5b      	subs	r3, r3, #1
 800545a:	2b02      	cmp	r3, #2
 800545c:	d902      	bls.n	8005464 <PE_SVDM_CheckIdentity+0x15c>
 800545e:	1edb      	subs	r3, r3, #3
 8005460:	d013      	beq.n	800548a <PE_SVDM_CheckIdentity+0x182>
 8005462:	e011      	b.n	8005488 <PE_SVDM_CheckIdentity+0x180>
 8005464:	2324      	movs	r3, #36	; 0x24
 8005466:	5cd3      	ldrb	r3, [r2, r3]
 8005468:	431c      	orrs	r4, r3
 800546a:	2324      	movs	r3, #36	; 0x24
 800546c:	54d4      	strb	r4, [r2, r3]
 800546e:	1949      	adds	r1, r1, r5
 8005470:	780b      	ldrb	r3, [r1, #0]
 8005472:	784c      	ldrb	r4, [r1, #1]
 8005474:	0224      	lsls	r4, r4, #8
 8005476:	191b      	adds	r3, r3, r4
 8005478:	788c      	ldrb	r4, [r1, #2]
 800547a:	0424      	lsls	r4, r4, #16
 800547c:	191b      	adds	r3, r3, r4
 800547e:	78c9      	ldrb	r1, [r1, #3]
 8005480:	0609      	lsls	r1, r1, #24
 8005482:	1859      	adds	r1, r3, r1
 8005484:	6211      	str	r1, [r2, #32]
 8005486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005488:	2002      	movs	r0, #2
 800548a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800548c <.text_23>:
 800548c:	0000800f 	.word	0x0000800f

08005490 <PE_SVDM_CheckSVIDs>:
 8005490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005492:	4b33      	ldr	r3, [pc, #204]	; (8005560 <.text_28>)
 8005494:	0080      	lsls	r0, r0, #2
 8005496:	5818      	ldr	r0, [r3, r0]
 8005498:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 800549a:	0440      	lsls	r0, r0, #17
 800549c:	0f40      	lsrs	r0, r0, #29
 800549e:	1e46      	subs	r6, r0, #1
 80054a0:	b2f6      	uxtb	r6, r6
 80054a2:	2000      	movs	r0, #0
 80054a4:	2500      	movs	r5, #0
 80054a6:	7610      	strb	r0, [r2, #24]
 80054a8:	7650      	strb	r0, [r2, #25]
 80054aa:	000b      	movs	r3, r1
 80054ac:	0014      	movs	r4, r2
 80054ae:	0031      	movs	r1, r6
 80054b0:	5c1a      	ldrb	r2, [r3, r0]
 80054b2:	1c5e      	adds	r6, r3, #1
 80054b4:	5c36      	ldrb	r6, [r6, r0]
 80054b6:	0236      	lsls	r6, r6, #8
 80054b8:	1992      	adds	r2, r2, r6
 80054ba:	7e26      	ldrb	r6, [r4, #24]
 80054bc:	0076      	lsls	r6, r6, #1
 80054be:	53a2      	strh	r2, [r4, r6]
 80054c0:	7e26      	ldrb	r6, [r4, #24]
 80054c2:	2201      	movs	r2, #1
 80054c4:	0077      	lsls	r7, r6, #1
 80054c6:	5be7      	ldrh	r7, [r4, r7]
 80054c8:	2f00      	cmp	r7, #0
 80054ca:	d002      	beq.n	80054d2 <PE_SVDM_CheckSVIDs+0x42>
 80054cc:	1c76      	adds	r6, r6, #1
 80054ce:	7626      	strb	r6, [r4, #24]
 80054d0:	e001      	b.n	80054d6 <PE_SVDM_CheckSVIDs+0x46>
 80054d2:	2501      	movs	r5, #1
 80054d4:	7662      	strb	r2, [r4, #25]
 80054d6:	1c80      	adds	r0, r0, #2
 80054d8:	b2c0      	uxtb	r0, r0
 80054da:	5c1e      	ldrb	r6, [r3, r0]
 80054dc:	1c5f      	adds	r7, r3, #1
 80054de:	5c3f      	ldrb	r7, [r7, r0]
 80054e0:	023f      	lsls	r7, r7, #8
 80054e2:	19f6      	adds	r6, r6, r7
 80054e4:	7e27      	ldrb	r7, [r4, #24]
 80054e6:	007f      	lsls	r7, r7, #1
 80054e8:	53e6      	strh	r6, [r4, r7]
 80054ea:	7e26      	ldrb	r6, [r4, #24]
 80054ec:	0077      	lsls	r7, r6, #1
 80054ee:	5be7      	ldrh	r7, [r4, r7]
 80054f0:	2f00      	cmp	r7, #0
 80054f2:	d002      	beq.n	80054fa <PE_SVDM_CheckSVIDs+0x6a>
 80054f4:	1c76      	adds	r6, r6, #1
 80054f6:	7626      	strb	r6, [r4, #24]
 80054f8:	e001      	b.n	80054fe <PE_SVDM_CheckSVIDs+0x6e>
 80054fa:	2501      	movs	r5, #1
 80054fc:	7662      	strb	r2, [r4, #25]
 80054fe:	1c80      	adds	r0, r0, #2
 8005500:	b2c0      	uxtb	r0, r0
 8005502:	008a      	lsls	r2, r1, #2
 8005504:	4290      	cmp	r0, r2
 8005506:	d201      	bcs.n	800550c <PE_SVDM_CheckSVIDs+0x7c>
 8005508:	002a      	movs	r2, r5
 800550a:	d0d1      	beq.n	80054b0 <PE_SVDM_CheckSVIDs+0x20>
 800550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005510 <.text_25>:
 8005510:	ffff7fff 	.word	0xffff7fff

08005514 <PE_SVDM_CheckModes>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	4c12      	ldr	r4, [pc, #72]	; (8005560 <.text_28>)
 8005518:	0080      	lsls	r0, r0, #2
 800551a:	5820      	ldr	r0, [r4, r0]
 800551c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 800551e:	0440      	lsls	r0, r0, #17
 8005520:	0f40      	lsrs	r0, r0, #29
 8005522:	1e40      	subs	r0, r0, #1
 8005524:	b2c0      	uxtb	r0, r0
 8005526:	2400      	movs	r4, #0
 8005528:	8399      	strh	r1, [r3, #28]
 800552a:	601c      	str	r4, [r3, #0]
 800552c:	1911      	adds	r1, r2, r4
 800552e:	780d      	ldrb	r5, [r1, #0]
 8005530:	784e      	ldrb	r6, [r1, #1]
 8005532:	0236      	lsls	r6, r6, #8
 8005534:	19ad      	adds	r5, r5, r6
 8005536:	788e      	ldrb	r6, [r1, #2]
 8005538:	0436      	lsls	r6, r6, #16
 800553a:	19ad      	adds	r5, r5, r6
 800553c:	78c9      	ldrb	r1, [r1, #3]
 800553e:	0609      	lsls	r1, r1, #24
 8005540:	1869      	adds	r1, r5, r1
 8005542:	681d      	ldr	r5, [r3, #0]
 8005544:	00ad      	lsls	r5, r5, #2
 8005546:	195d      	adds	r5, r3, r5
 8005548:	6069      	str	r1, [r5, #4]
 800554a:	6819      	ldr	r1, [r3, #0]
 800554c:	1c49      	adds	r1, r1, #1
 800554e:	6019      	str	r1, [r3, #0]
 8005550:	1d24      	adds	r4, r4, #4
 8005552:	b2e4      	uxtb	r4, r4
 8005554:	0081      	lsls	r1, r0, #2
 8005556:	428c      	cmp	r4, r1
 8005558:	d3e8      	bcc.n	800552c <PE_SVDM_CheckModes+0x18>
 800555a:	bd70      	pop	{r4, r5, r6, pc}

0800555c <.text_27>:
 800555c:	00000494 	.word	0x00000494

08005560 <.text_28>:
 8005560:	200001e0 	.word	0x200001e0

08005564 <USBPD_PRL_TimerCounter>:
 8005564:	4959      	ldr	r1, [pc, #356]	; (80056cc <.text_15>)
 8005566:	0080      	lsls	r0, r0, #2
 8005568:	1808      	adds	r0, r1, r0
 800556a:	6801      	ldr	r1, [r0, #0]
 800556c:	790a      	ldrb	r2, [r1, #4]
 800556e:	2a00      	cmp	r2, #0
 8005570:	d002      	beq.n	8005578 <USBPD_PRL_TimerCounter+0x14>
 8005572:	790a      	ldrb	r2, [r1, #4]
 8005574:	1e52      	subs	r2, r2, #1
 8005576:	710a      	strb	r2, [r1, #4]
 8005578:	6800      	ldr	r0, [r0, #0]
 800557a:	7841      	ldrb	r1, [r0, #1]
 800557c:	2900      	cmp	r1, #0
 800557e:	d001      	beq.n	8005584 <USBPD_PRL_TimerCounter+0x20>
 8005580:	1e49      	subs	r1, r1, #1
 8005582:	7041      	strb	r1, [r0, #1]
 8005584:	4770      	bx	lr
	...

08005588 <USBPD_PRL_Init>:
 8005588:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	000c      	movs	r4, r1
 800558e:	0015      	movs	r5, r2
 8005590:	001e      	movs	r6, r3
 8005592:	279c      	movs	r7, #156	; 0x9c
 8005594:	007f      	lsls	r7, r7, #1
 8005596:	0038      	movs	r0, r7
 8005598:	f00f fe1e 	bl	80151d8 <malloc>
 800559c:	494b      	ldr	r1, [pc, #300]	; (80056cc <.text_15>)
 800559e:	466a      	mov	r2, sp
 80055a0:	7a12      	ldrb	r2, [r2, #8]
 80055a2:	0092      	lsls	r2, r2, #2
 80055a4:	1889      	adds	r1, r1, r2
 80055a6:	9100      	str	r1, [sp, #0]
 80055a8:	6008      	str	r0, [r1, #0]
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d101      	bne.n	80055b2 <USBPD_PRL_Init+0x2a>
 80055ae:	2016      	movs	r0, #22
 80055b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055b2:	0039      	movs	r1, r7
 80055b4:	f00f fdd6 	bl	8015164 <__aeabi_memclr>
 80055b8:	0039      	movs	r1, r7
 80055ba:	9800      	ldr	r0, [sp, #0]
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f00f fdd1 	bl	8015164 <__aeabi_memclr>
 80055c2:	220f      	movs	r2, #15
 80055c4:	2103      	movs	r1, #3
 80055c6:	9800      	ldr	r0, [sp, #0]
 80055c8:	6800      	ldr	r0, [r0, #0]
 80055ca:	1d80      	adds	r0, r0, #6
 80055cc:	f00f fdd3 	bl	8015176 <__aeabi_memset>
 80055d0:	9800      	ldr	r0, [sp, #0]
 80055d2:	6800      	ldr	r0, [r0, #0]
 80055d4:	6285      	str	r5, [r0, #40]	; 0x28
 80055d6:	62c6      	str	r6, [r0, #44]	; 0x2c
 80055d8:	2101      	movs	r1, #1
 80055da:	9100      	str	r1, [sp, #0]
 80055dc:	6861      	ldr	r1, [r4, #4]
 80055de:	074b      	lsls	r3, r1, #29
 80055e0:	0fdb      	lsrs	r3, r3, #31
 80055e2:	0002      	movs	r2, r0
 80055e4:	3230      	adds	r2, #48	; 0x30
 80055e6:	bf00      	nop
 80055e8:	a102      	add	r1, pc, #8	; (adr r1, 80055f4 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 80055ea:	4668      	mov	r0, sp
 80055ec:	7a00      	ldrb	r0, [r0, #8]
 80055ee:	f007 fcf1 	bl	800cfd4 <USBPD_PHY_Init>
 80055f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080055f4 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80055f4:	5c45 0800 5fa9 0800 5ff9 0800 6015 0800     E\..._..._...`..
 8005604:	601d 0800 56ed 0800                         .`...V..

0800560c <USBPD_PRL_GetMemoryConsumption>:
 800560c:	209c      	movs	r0, #156	; 0x9c
 800560e:	0080      	lsls	r0, r0, #2
 8005610:	4770      	bx	lr

08005612 <USBPD_PRL_SetHeader>:
 8005612:	b530      	push	{r4, r5, lr}
 8005614:	4c2d      	ldr	r4, [pc, #180]	; (80056cc <.text_15>)
 8005616:	0080      	lsls	r0, r0, #2
 8005618:	5820      	ldr	r0, [r4, r0]
 800561a:	8a44      	ldrh	r4, [r0, #18]
 800561c:	4d2c      	ldr	r5, [pc, #176]	; (80056d0 <.text_16>)
 800561e:	4025      	ands	r5, r4
 8005620:	0209      	lsls	r1, r1, #8
 8005622:	2480      	movs	r4, #128	; 0x80
 8005624:	0064      	lsls	r4, r4, #1
 8005626:	4021      	ands	r1, r4
 8005628:	4329      	orrs	r1, r5
 800562a:	8241      	strh	r1, [r0, #18]
 800562c:	4c29      	ldr	r4, [pc, #164]	; (80056d4 <.text_17>)
 800562e:	400c      	ands	r4, r1
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	2220      	movs	r2, #32
 8005634:	4011      	ands	r1, r2
 8005636:	4321      	orrs	r1, r4
 8005638:	8241      	strh	r1, [r0, #18]
 800563a:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <.text_18>)
 800563c:	400a      	ands	r2, r1
 800563e:	0199      	lsls	r1, r3, #6
 8005640:	23c0      	movs	r3, #192	; 0xc0
 8005642:	400b      	ands	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	8243      	strh	r3, [r0, #18]
 8005648:	bd30      	pop	{r4, r5, pc}

0800564a <USBPD_PRL_SetHeaderPowerRole>:
 800564a:	4a20      	ldr	r2, [pc, #128]	; (80056cc <.text_15>)
 800564c:	0080      	lsls	r0, r0, #2
 800564e:	5810      	ldr	r0, [r2, r0]
 8005650:	8a42      	ldrh	r2, [r0, #18]
 8005652:	4b1f      	ldr	r3, [pc, #124]	; (80056d0 <.text_16>)
 8005654:	4013      	ands	r3, r2
 8005656:	0209      	lsls	r1, r1, #8
 8005658:	2280      	movs	r2, #128	; 0x80
 800565a:	0052      	lsls	r2, r2, #1
 800565c:	e007      	b.n	800566e <.text_10>

0800565e <USBPD_PRL_SetHeaderDataRole>:
 800565e:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <.text_15>)
 8005660:	0080      	lsls	r0, r0, #2
 8005662:	5810      	ldr	r0, [r2, r0]
 8005664:	8a42      	ldrh	r2, [r0, #18]
 8005666:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <.text_17>)
 8005668:	4013      	ands	r3, r2
 800566a:	0149      	lsls	r1, r1, #5
 800566c:	2220      	movs	r2, #32

0800566e <.text_10>:
 800566e:	4011      	ands	r1, r2
 8005670:	4319      	orrs	r1, r3
 8005672:	8241      	strh	r1, [r0, #18]
 8005674:	4770      	bx	lr

08005676 <USBPD_PRL_SetHeaderSpecification>:
 8005676:	4a15      	ldr	r2, [pc, #84]	; (80056cc <.text_15>)
 8005678:	0080      	lsls	r0, r0, #2
 800567a:	5810      	ldr	r0, [r2, r0]
 800567c:	8a42      	ldrh	r2, [r0, #18]
 800567e:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <.text_18>)
 8005680:	4013      	ands	r3, r2
 8005682:	0189      	lsls	r1, r1, #6
 8005684:	22c0      	movs	r2, #192	; 0xc0
 8005686:	400a      	ands	r2, r1
 8005688:	431a      	orrs	r2, r3
 800568a:	8242      	strh	r2, [r0, #18]
 800568c:	4770      	bx	lr

0800568e <USBPD_PRL_CBL_SetHeaderSpecification>:
 800568e:	4a0f      	ldr	r2, [pc, #60]	; (80056cc <.text_15>)
 8005690:	0080      	lsls	r0, r0, #2
 8005692:	5810      	ldr	r0, [r2, r0]
 8005694:	018a      	lsls	r2, r1, #6
 8005696:	21c0      	movs	r1, #192	; 0xc0
 8005698:	4011      	ands	r1, r2
 800569a:	4a0f      	ldr	r2, [pc, #60]	; (80056d8 <.text_18>)
 800569c:	8a83      	ldrh	r3, [r0, #20]
 800569e:	4013      	ands	r3, r2
 80056a0:	430b      	orrs	r3, r1
 80056a2:	8283      	strh	r3, [r0, #20]
 80056a4:	8ac3      	ldrh	r3, [r0, #22]
 80056a6:	401a      	ands	r2, r3
 80056a8:	4311      	orrs	r1, r2
 80056aa:	82c1      	strh	r1, [r0, #22]
 80056ac:	4770      	bx	lr

080056ae <USBPD_PRL_SRCSetSinkNG>:
 80056ae:	b580      	push	{r7, lr}
 80056b0:	f007 fd85 	bl	800d1be <USBPD_PHY_SetResistor_SinkTxNG>
 80056b4:	bd01      	pop	{r0, pc}

080056b6 <USBPD_PRL_SRCReleaseSinkNG>:
 80056b6:	b510      	push	{r4, lr}
 80056b8:	0004      	movs	r4, r0
 80056ba:	f007 fd8f 	bl	800d1dc <USBPD_PHY_SetResistor_SinkTxOK>
 80056be:	2000      	movs	r0, #0
 80056c0:	49c1      	ldr	r1, [pc, #772]	; (80059c8 <.text_24>)
 80056c2:	00a2      	lsls	r2, r4, #2
 80056c4:	5889      	ldr	r1, [r1, r2]
 80056c6:	7148      	strb	r0, [r1, #5]
 80056c8:	bd10      	pop	{r4, pc}
	...

080056cc <.text_15>:
 80056cc:	200001e8 	.word	0x200001e8

080056d0 <.text_16>:
 80056d0:	0000feff 	.word	0x0000feff

080056d4 <.text_17>:
 80056d4:	0000ffdf 	.word	0x0000ffdf

080056d8 <.text_18>:
 80056d8:	0000ff3f 	.word	0x0000ff3f

080056dc <USBPD_PRL_IsResistor_SinkTxOK>:
 80056dc:	b580      	push	{r7, lr}
 80056de:	f007 fda3 	bl	800d228 <USBPD_PHY_IsResistor_SinkTxOk>
 80056e2:	bd02      	pop	{r1, pc}

080056e4 <USBPD_PRL_FastRoleSwapSignalling>:
 80056e4:	b580      	push	{r7, lr}
 80056e6:	f007 fdaf 	bl	800d248 <USBPD_PHY_FastRoleSwapSignalling>
 80056ea:	bd01      	pop	{r0, pc}

080056ec <PRL_FastRoleSwapReception>:
 80056ec:	b580      	push	{r7, lr}
 80056ee:	f7fb fa8a 	bl	8000c06 <PE_PRL_FastRoleSwapReception>
 80056f2:	bd01      	pop	{r0, pc}

080056f4 <USBPD_PRL_SOPCapability>:
 80056f4:	b580      	push	{r7, lr}
 80056f6:	f007 fd81 	bl	800d1fc <USBPD_PHY_SOPSupported>
 80056fa:	bd01      	pop	{r0, pc}

080056fc <USBPD_PRL_SendMessage>:
 80056fc:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 80056fe:	b085      	sub	sp, #20
 8005700:	2003      	movs	r0, #3
 8005702:	2403      	movs	r4, #3
 8005704:	4ab0      	ldr	r2, [pc, #704]	; (80059c8 <.text_24>)
 8005706:	466d      	mov	r5, sp
 8005708:	7d2d      	ldrb	r5, [r5, #20]
 800570a:	00ad      	lsls	r5, r5, #2
 800570c:	1952      	adds	r2, r2, r5
 800570e:	9200      	str	r2, [sp, #0]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	7955      	ldrb	r5, [r2, #5]
 8005714:	2d00      	cmp	r5, #0
 8005716:	d004      	beq.n	8005722 <USBPD_PRL_SendMessage+0x26>
 8005718:	7a55      	ldrb	r5, [r2, #9]
 800571a:	2d00      	cmp	r5, #0
 800571c:	d101      	bne.n	8005722 <USBPD_PRL_SendMessage+0x26>
 800571e:	250f      	movs	r5, #15
 8005720:	7155      	strb	r5, [r2, #5]
 8005722:	466d      	mov	r5, sp
 8005724:	7129      	strb	r1, [r5, #4]
 8005726:	4669      	mov	r1, sp
 8005728:	7909      	ldrb	r1, [r1, #4]
 800572a:	9104      	str	r1, [sp, #16]
 800572c:	0049      	lsls	r1, r1, #1
 800572e:	9103      	str	r1, [sp, #12]
 8005730:	2701      	movs	r7, #1
 8005732:	2500      	movs	r5, #0
 8005734:	9302      	str	r3, [sp, #8]
 8005736:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005738:	7953      	ldrb	r3, [r2, #5]
 800573a:	2b10      	cmp	r3, #16
 800573c:	d900      	bls.n	8005740 <USBPD_PRL_SendMessage+0x44>
 800573e:	e13d      	b.n	80059bc <USBPD_PRL_SendMessage+0x2c0>
 8005740:	a601      	add	r6, pc, #4	; (adr r6, 8005748 <USBPD_PRL_SendMessage+0x4c>)
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	5af6      	ldrh	r6, [r6, r3]
 8005746:	44b7      	add	pc, r6
 8005748:	00500020 	.word	0x00500020
 800574c:	02720066 	.word	0x02720066
 8005750:	00aa0074 	.word	0x00aa0074
 8005754:	016e0088 	.word	0x016e0088
 8005758:	02720272 	.word	0x02720272
 800575c:	019a0180 	.word	0x019a0180
 8005760:	01e801c2 	.word	0x01e801c2
 8005764:	026c0272 	.word	0x026c0272
 8005768:	022a      	.short	0x022a
 800576a:	f3ef 8610 	mrs	r6, PRIMASK
 800576e:	b672      	cpsid	i
 8005770:	4668      	mov	r0, sp
 8005772:	7d00      	ldrb	r0, [r0, #20]
 8005774:	f7fb f8fd 	bl	8000972 <PE_PRL_Control_RxEvent>
 8005778:	2800      	cmp	r0, #0
 800577a:	d107      	bne.n	800578c <USBPD_PRL_SendMessage+0x90>
 800577c:	9800      	ldr	r0, [sp, #0]
 800577e:	6800      	ldr	r0, [r0, #0]
 8005780:	7a81      	ldrb	r1, [r0, #10]
 8005782:	2900      	cmp	r1, #0
 8005784:	d102      	bne.n	800578c <USBPD_PRL_SendMessage+0x90>
 8005786:	21ff      	movs	r1, #255	; 0xff
 8005788:	7241      	strb	r1, [r0, #9]
 800578a:	e002      	b.n	8005792 <USBPD_PRL_SendMessage+0x96>
 800578c:	9800      	ldr	r0, [sp, #0]
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	7245      	strb	r5, [r0, #9]
 8005792:	f386 8810 	msr	PRIMASK, r6
 8005796:	2006      	movs	r0, #6
 8005798:	e0a1      	b.n	80058de <USBPD_PRL_SendMessage+0x1e2>
 800579a:	4668      	mov	r0, sp
 800579c:	7d00      	ldrb	r0, [r0, #20]
 800579e:	f007 fd0e 	bl	800d1be <USBPD_PHY_SetResistor_SinkTxNG>
 80057a2:	9800      	ldr	r0, [sp, #0]
 80057a4:	6800      	ldr	r0, [r0, #0]
 80057a6:	2102      	movs	r1, #2
 80057a8:	7141      	strb	r1, [r0, #5]
 80057aa:	2111      	movs	r1, #17
 80057ac:	7041      	strb	r1, [r0, #1]
 80057ae:	e107      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 80057b0:	2901      	cmp	r1, #1
 80057b2:	d1f0      	bne.n	8005796 <USBPD_PRL_SendMessage+0x9a>
 80057b4:	7850      	ldrb	r0, [r2, #1]
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d109      	bne.n	80057ce <USBPD_PRL_SendMessage+0xd2>
 80057ba:	2005      	movs	r0, #5
 80057bc:	e08f      	b.n	80058de <USBPD_PRL_SendMessage+0x1e2>
 80057be:	2902      	cmp	r1, #2
 80057c0:	d1e9      	bne.n	8005796 <USBPD_PRL_SendMessage+0x9a>
 80057c2:	4668      	mov	r0, sp
 80057c4:	7d00      	ldrb	r0, [r0, #20]
 80057c6:	f007 fd2f 	bl	800d228 <USBPD_PHY_IsResistor_SinkTxOk>
 80057ca:	2801      	cmp	r0, #1
 80057cc:	d0f5      	beq.n	80057ba <USBPD_PRL_SendMessage+0xbe>
 80057ce:	2009      	movs	r0, #9
 80057d0:	e0f7      	b.n	80059c2 <USBPD_PRL_SendMessage+0x2c6>
 80057d2:	0013      	movs	r3, r2
 80057d4:	3312      	adds	r3, #18
 80057d6:	9d03      	ldr	r5, [sp, #12]
 80057d8:	5b5b      	ldrh	r3, [r3, r5]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	4018      	ands	r0, r3
 80057de:	2802      	cmp	r0, #2
 80057e0:	d1eb      	bne.n	80057ba <USBPD_PRL_SendMessage+0xbe>
 80057e2:	2901      	cmp	r1, #1
 80057e4:	d101      	bne.n	80057ea <USBPD_PRL_SendMessage+0xee>
 80057e6:	7157      	strb	r7, [r2, #5]
 80057e8:	e0ea      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 80057ea:	2902      	cmp	r1, #2
 80057ec:	d1e5      	bne.n	80057ba <USBPD_PRL_SendMessage+0xbe>
 80057ee:	2004      	movs	r0, #4
 80057f0:	7150      	strb	r0, [r2, #5]
 80057f2:	e0e5      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 80057f4:	0010      	movs	r0, r2
 80057f6:	3012      	adds	r0, #18
 80057f8:	9903      	ldr	r1, [sp, #12]
 80057fa:	1840      	adds	r0, r0, r1
 80057fc:	8803      	ldrh	r3, [r0, #0]
 80057fe:	49a3      	ldr	r1, [pc, #652]	; (8005a8c <.text_29>)
 8005800:	4019      	ands	r1, r3
 8005802:	466b      	mov	r3, sp
 8005804:	7e1b      	ldrb	r3, [r3, #24]
 8005806:	06db      	lsls	r3, r3, #27
 8005808:	0edb      	lsrs	r3, r3, #27
 800580a:	430b      	orrs	r3, r1
 800580c:	8003      	strh	r3, [r0, #0]
 800580e:	0459      	lsls	r1, r3, #17
 8005810:	0c49      	lsrs	r1, r1, #17
 8005812:	466b      	mov	r3, sp
 8005814:	7e1b      	ldrb	r3, [r3, #24]
 8005816:	09db      	lsrs	r3, r3, #7
 8005818:	03db      	lsls	r3, r3, #15
 800581a:	430b      	orrs	r3, r1
 800581c:	8003      	strh	r3, [r0, #0]
 800581e:	7095      	strb	r5, [r2, #2]
 8005820:	9800      	ldr	r0, [sp, #0]
 8005822:	6801      	ldr	r1, [r0, #0]
 8005824:	9803      	ldr	r0, [sp, #12]
 8005826:	180a      	adds	r2, r1, r0
 8005828:	8a50      	ldrh	r0, [r2, #18]
 800582a:	4b99      	ldr	r3, [pc, #612]	; (8005a90 <.text_30>)
 800582c:	0bc6      	lsrs	r6, r0, #15
 800582e:	d021      	beq.n	8005874 <USBPD_PRL_SendMessage+0x178>
 8005830:	9802      	ldr	r0, [sp, #8]
 8005832:	7880      	ldrb	r0, [r0, #2]
 8005834:	9e02      	ldr	r6, [sp, #8]
 8005836:	78f6      	ldrb	r6, [r6, #3]
 8005838:	0236      	lsls	r6, r6, #8
 800583a:	1980      	adds	r0, r0, r6
 800583c:	8388      	strh	r0, [r1, #28]
 800583e:	8b8e      	ldrh	r6, [r1, #28]
 8005840:	0ab0      	lsrs	r0, r6, #10
 8005842:	4238      	tst	r0, r7
 8005844:	d10f      	bne.n	8005866 <USBPD_PRL_SendMessage+0x16a>
 8005846:	0af0      	lsrs	r0, r6, #11
 8005848:	0700      	lsls	r0, r0, #28
 800584a:	d11f      	bne.n	800588c <USBPD_PRL_SendMessage+0x190>
 800584c:	4668      	mov	r0, sp
 800584e:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8005850:	1f00      	subs	r0, r0, #4
 8005852:	8448      	strh	r0, [r1, #34]	; 0x22
 8005854:	05c0      	lsls	r0, r0, #23
 8005856:	0dc0      	lsrs	r0, r0, #23
 8005858:	8b8b      	ldrh	r3, [r1, #28]
 800585a:	26fe      	movs	r6, #254	; 0xfe
 800585c:	0236      	lsls	r6, r6, #8
 800585e:	401e      	ands	r6, r3
 8005860:	4330      	orrs	r0, r6
 8005862:	8388      	strh	r0, [r1, #28]
 8005864:	e012      	b.n	800588c <USBPD_PRL_SendMessage+0x190>
 8005866:	844d      	strh	r5, [r1, #34]	; 0x22
 8005868:	8a50      	ldrh	r0, [r2, #18]
 800586a:	4003      	ands	r3, r0
 800586c:	0338      	lsls	r0, r7, #12
 800586e:	4318      	orrs	r0, r3
 8005870:	8250      	strh	r0, [r2, #18]
 8005872:	e00b      	b.n	800588c <USBPD_PRL_SendMessage+0x190>
 8005874:	4003      	ands	r3, r0
 8005876:	4668      	mov	r0, sp
 8005878:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800587a:	1e80      	subs	r0, r0, #2
 800587c:	0880      	lsrs	r0, r0, #2
 800587e:	0300      	lsls	r0, r0, #12
 8005880:	26e0      	movs	r6, #224	; 0xe0
 8005882:	01f6      	lsls	r6, r6, #7
 8005884:	4006      	ands	r6, r0
 8005886:	431e      	orrs	r6, r3
 8005888:	8256      	strh	r6, [r2, #18]
 800588a:	844d      	strh	r5, [r1, #34]	; 0x22
 800588c:	4668      	mov	r0, sp
 800588e:	7e00      	ldrb	r0, [r0, #24]
 8005890:	280d      	cmp	r0, #13
 8005892:	d10f      	bne.n	80058b4 <USBPD_PRL_SendMessage+0x1b8>
 8005894:	8a50      	ldrh	r0, [r2, #18]
 8005896:	22f0      	movs	r2, #240	; 0xf0
 8005898:	0212      	lsls	r2, r2, #8
 800589a:	4002      	ands	r2, r0
 800589c:	d10a      	bne.n	80058b4 <USBPD_PRL_SendMessage+0x1b8>
 800589e:	0008      	movs	r0, r1
 80058a0:	300b      	adds	r0, #11
 80058a2:	9904      	ldr	r1, [sp, #16]
 80058a4:	5445      	strb	r5, [r0, r1]
 80058a6:	220f      	movs	r2, #15
 80058a8:	2103      	movs	r1, #3
 80058aa:	9800      	ldr	r0, [sp, #0]
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	1d80      	adds	r0, r0, #6
 80058b0:	f00f fc61 	bl	8015176 <__aeabi_memset>
 80058b4:	2007      	movs	r0, #7
 80058b6:	e012      	b.n	80058de <USBPD_PRL_SendMessage+0x1e2>
 80058b8:	4668      	mov	r0, sp
 80058ba:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80058bc:	9a02      	ldr	r2, [sp, #8]
 80058be:	7901      	ldrb	r1, [r0, #4]
 80058c0:	7d00      	ldrb	r0, [r0, #20]
 80058c2:	f000 f8ec 	bl	8005a9e <PRL_StateTXConstructMessage>
 80058c6:	0004      	movs	r4, r0
 80058c8:	e07a      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 80058ca:	4669      	mov	r1, sp
 80058cc:	7d09      	ldrb	r1, [r1, #20]
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d100      	bne.n	80058d4 <USBPD_PRL_SendMessage+0x1d8>
 80058d2:	2001      	movs	r0, #1
 80058d4:	f008 fff2 	bl	800e8bc <USBPD_TIM_IsExpired>
 80058d8:	2801      	cmp	r0, #1
 80058da:	d171      	bne.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 80058dc:	200d      	movs	r0, #13
 80058de:	9900      	ldr	r1, [sp, #0]
 80058e0:	6809      	ldr	r1, [r1, #0]
 80058e2:	e042      	b.n	800596a <USBPD_PRL_SendMessage+0x26e>
 80058e4:	9804      	ldr	r0, [sp, #16]
 80058e6:	1810      	adds	r0, r2, r0
 80058e8:	7ac1      	ldrb	r1, [r0, #11]
 80058ea:	8b53      	ldrh	r3, [r2, #26]
 80058ec:	2207      	movs	r2, #7
 80058ee:	0a5f      	lsrs	r7, r3, #9
 80058f0:	4017      	ands	r7, r2
 80058f2:	42b9      	cmp	r1, r7
 80058f4:	d1f2      	bne.n	80058dc <USBPD_PRL_SendMessage+0x1e0>
 80058f6:	06db      	lsls	r3, r3, #27
 80058f8:	0edb      	lsrs	r3, r3, #27
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d1ee      	bne.n	80058dc <USBPD_PRL_SendMessage+0x1e0>
 80058fe:	1c49      	adds	r1, r1, #1
 8005900:	400a      	ands	r2, r1
 8005902:	72c2      	strb	r2, [r0, #11]
 8005904:	9800      	ldr	r0, [sp, #0]
 8005906:	6800      	ldr	r0, [r0, #0]
 8005908:	7145      	strb	r5, [r0, #5]
 800590a:	e010      	b.n	800592e <USBPD_PRL_SendMessage+0x232>
 800590c:	9804      	ldr	r0, [sp, #16]
 800590e:	1810      	adds	r0, r2, r0
 8005910:	7ac1      	ldrb	r1, [r0, #11]
 8005912:	1c49      	adds	r1, r1, #1
 8005914:	0749      	lsls	r1, r1, #29
 8005916:	0f49      	lsrs	r1, r1, #29
 8005918:	72c1      	strb	r1, [r0, #11]
 800591a:	9800      	ldr	r0, [sp, #0]
 800591c:	6800      	ldr	r0, [r0, #0]
 800591e:	7145      	strb	r5, [r0, #5]
 8005920:	8b82      	ldrh	r2, [r0, #28]
 8005922:	49c1      	ldr	r1, [pc, #772]	; (8005c28 <.text_34>)
 8005924:	4011      	ands	r1, r2
 8005926:	8381      	strh	r1, [r0, #28]
 8005928:	4ac0      	ldr	r2, [pc, #768]	; (8005c2c <.text_35>)
 800592a:	400a      	ands	r2, r1
 800592c:	8382      	strh	r2, [r0, #28]
 800592e:	2405      	movs	r4, #5
 8005930:	e046      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 8005932:	7891      	ldrb	r1, [r2, #2]
 8005934:	1c49      	adds	r1, r1, #1
 8005936:	7091      	strb	r1, [r2, #2]
 8005938:	9900      	ldr	r1, [sp, #0]
 800593a:	6809      	ldr	r1, [r1, #0]
 800593c:	000a      	movs	r2, r1
 800593e:	3212      	adds	r2, #18
 8005940:	9b03      	ldr	r3, [sp, #12]
 8005942:	5ad2      	ldrh	r2, [r2, r3]
 8005944:	0993      	lsrs	r3, r2, #6
 8005946:	2603      	movs	r6, #3
 8005948:	401e      	ands	r6, r3
 800594a:	2e01      	cmp	r6, #1
 800594c:	d000      	beq.n	8005950 <USBPD_PRL_SendMessage+0x254>
 800594e:	2002      	movs	r0, #2
 8005950:	0bd2      	lsrs	r2, r2, #15
 8005952:	d006      	beq.n	8005962 <USBPD_PRL_SendMessage+0x266>
 8005954:	8b8a      	ldrh	r2, [r1, #28]
 8005956:	0bd3      	lsrs	r3, r2, #15
 8005958:	d103      	bne.n	8005962 <USBPD_PRL_SendMessage+0x266>
 800595a:	05d2      	lsls	r2, r2, #23
 800595c:	0dd2      	lsrs	r2, r2, #23
 800595e:	2a1b      	cmp	r2, #27
 8005960:	d205      	bcs.n	800596e <USBPD_PRL_SendMessage+0x272>
 8005962:	788a      	ldrb	r2, [r1, #2]
 8005964:	4290      	cmp	r0, r2
 8005966:	d302      	bcc.n	800596e <USBPD_PRL_SendMessage+0x272>
 8005968:	2010      	movs	r0, #16
 800596a:	7148      	strb	r0, [r1, #5]
 800596c:	e028      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 800596e:	714d      	strb	r5, [r1, #5]
 8005970:	2407      	movs	r4, #7
 8005972:	e025      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 8005974:	210a      	movs	r1, #10
 8005976:	7151      	strb	r1, [r2, #5]
 8005978:	2102      	movs	r1, #2
 800597a:	7411      	strb	r1, [r2, #16]
 800597c:	4669      	mov	r1, sp
 800597e:	7d09      	ldrb	r1, [r1, #20]
 8005980:	2900      	cmp	r1, #0
 8005982:	d100      	bne.n	8005986 <USBPD_PRL_SendMessage+0x28a>
 8005984:	2001      	movs	r0, #1
 8005986:	49aa      	ldr	r1, [pc, #680]	; (8005c30 <.text_36>)
 8005988:	f008 ff2a 	bl	800e7e0 <USBPD_TIM_Start>
 800598c:	9800      	ldr	r0, [sp, #0]
 800598e:	6800      	ldr	r0, [r0, #0]
 8005990:	89c3      	ldrh	r3, [r0, #14]
 8005992:	9a02      	ldr	r2, [sp, #8]
 8005994:	4668      	mov	r0, sp
 8005996:	7901      	ldrb	r1, [r0, #4]
 8005998:	7d00      	ldrb	r0, [r0, #20]
 800599a:	f007 fbca 	bl	800d132 <USBPD_PHY_SendMessage>
 800599e:	4668      	mov	r0, sp
 80059a0:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 80059a2:	9000      	str	r0, [sp, #0]
 80059a4:	9b02      	ldr	r3, [sp, #8]
 80059a6:	4668      	mov	r0, sp
 80059a8:	7902      	ldrb	r2, [r0, #4]
 80059aa:	7d01      	ldrb	r1, [r0, #20]
 80059ac:	2002      	movs	r0, #2
 80059ae:	4da1      	ldr	r5, [pc, #644]	; (8005c34 <.text_37>)
 80059b0:	682d      	ldr	r5, [r5, #0]
 80059b2:	47a8      	blx	r5
 80059b4:	e004      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 80059b6:	7155      	strb	r5, [r2, #5]
 80059b8:	2406      	movs	r4, #6
 80059ba:	e001      	b.n	80059c0 <USBPD_PRL_SendMessage+0x2c4>
 80059bc:	7155      	strb	r5, [r2, #5]
 80059be:	2410      	movs	r4, #16
 80059c0:	0020      	movs	r0, r4
 80059c2:	b007      	add	sp, #28
 80059c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080059c8 <.text_24>:
 80059c8:	200001e8 	.word	0x200001e8

080059cc <USBPD_PRL_ResetRequestProcess>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	0005      	movs	r5, r0
 80059d0:	000e      	movs	r6, r1
 80059d2:	4899      	ldr	r0, [pc, #612]	; (8005c38 <.text_38>)
 80059d4:	00a9      	lsls	r1, r5, #2
 80059d6:	1840      	adds	r0, r0, r1
 80059d8:	9000      	str	r0, [sp, #0]
 80059da:	6804      	ldr	r4, [r0, #0]
 80059dc:	2700      	movs	r7, #0
 80059de:	70e7      	strb	r7, [r4, #3]
 80059e0:	72e7      	strb	r7, [r4, #11]
 80059e2:	7327      	strb	r7, [r4, #12]
 80059e4:	7367      	strb	r7, [r4, #13]
 80059e6:	220f      	movs	r2, #15
 80059e8:	2103      	movs	r1, #3
 80059ea:	1da0      	adds	r0, r4, #6
 80059ec:	f00f fbc3 	bl	8015176 <__aeabi_memset>
 80059f0:	9800      	ldr	r0, [sp, #0]
 80059f2:	6800      	ldr	r0, [r0, #0]
 80059f4:	7147      	strb	r7, [r0, #5]
 80059f6:	9700      	str	r7, [sp, #0]
 80059f8:	2300      	movs	r3, #0
 80059fa:	0032      	movs	r2, r6
 80059fc:	0029      	movs	r1, r5
 80059fe:	2002      	movs	r0, #2
 8005a00:	4f8c      	ldr	r7, [pc, #560]	; (8005c34 <.text_37>)
 8005a02:	683f      	ldr	r7, [r7, #0]
 8005a04:	47b8      	blx	r7
 8005a06:	0028      	movs	r0, r5
 8005a08:	f000 f845 	bl	8005a96 <PRL_DisableRX>
 8005a0c:	0031      	movs	r1, r6
 8005a0e:	0028      	movs	r0, r5
 8005a10:	f007 fb79 	bl	800d106 <USBPD_PHY_ResetRequest>
 8005a14:	2005      	movs	r0, #5
 8005a16:	7120      	strb	r0, [r4, #4]
 8005a18:	78e0      	ldrb	r0, [r4, #3]
 8005a1a:	2801      	cmp	r0, #1
 8005a1c:	d002      	beq.n	8005a24 <USBPD_PRL_ResetRequestProcess+0x58>
 8005a1e:	7920      	ldrb	r0, [r4, #4]
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d1f9      	bne.n	8005a18 <USBPD_PRL_ResetRequestProcess+0x4c>
 8005a24:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005a26 <USBDPD_PRL_BistCarrierEyeMode>:
 8005a26:	b580      	push	{r7, lr}
 8005a28:	2905      	cmp	r1, #5
 8005a2a:	d102      	bne.n	8005a32 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005a2c:	f007 fba0 	bl	800d170 <USBPD_PHY_Send_BIST_Pattern>
 8005a30:	bd02      	pop	{r1, pc}
 8005a32:	2010      	movs	r0, #16
 8005a34:	bd02      	pop	{r1, pc}

08005a36 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005a36:	b580      	push	{r7, lr}
 8005a38:	2905      	cmp	r1, #5
 8005a3a:	d103      	bne.n	8005a44 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005a3c:	2107      	movs	r1, #7
 8005a3e:	f007 fba7 	bl	800d190 <USBPD_PHY_ExitTransmit>
 8005a42:	bd02      	pop	{r1, pc}
 8005a44:	2010      	movs	r0, #16
 8005a46:	bd02      	pop	{r1, pc}

08005a48 <USBPD_PRL_Reset>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	0004      	movs	r4, r0
 8005a4c:	487a      	ldr	r0, [pc, #488]	; (8005c38 <.text_38>)
 8005a4e:	00a1      	lsls	r1, r4, #2
 8005a50:	1845      	adds	r5, r0, r1
 8005a52:	6828      	ldr	r0, [r5, #0]
 8005a54:	2600      	movs	r6, #0
 8005a56:	7146      	strb	r6, [r0, #5]
 8005a58:	7006      	strb	r6, [r0, #0]
 8005a5a:	6828      	ldr	r0, [r5, #0]
 8005a5c:	7106      	strb	r6, [r0, #4]
 8005a5e:	6828      	ldr	r0, [r5, #0]
 8005a60:	72c6      	strb	r6, [r0, #11]
 8005a62:	6828      	ldr	r0, [r5, #0]
 8005a64:	7306      	strb	r6, [r0, #12]
 8005a66:	6828      	ldr	r0, [r5, #0]
 8005a68:	7346      	strb	r6, [r0, #13]
 8005a6a:	220f      	movs	r2, #15
 8005a6c:	2103      	movs	r1, #3
 8005a6e:	6828      	ldr	r0, [r5, #0]
 8005a70:	1d80      	adds	r0, r0, #6
 8005a72:	f00f fb80 	bl	8015176 <__aeabi_memset>
 8005a76:	6828      	ldr	r0, [r5, #0]
 8005a78:	2125      	movs	r1, #37	; 0x25
 8005a7a:	5446      	strb	r6, [r0, r1]
 8005a7c:	0020      	movs	r0, r4
 8005a7e:	f007 fb38 	bl	800d0f2 <USBPD_PHY_Reset>
 8005a82:	0020      	movs	r0, r4
 8005a84:	f007 fbef 	bl	800d266 <USBPD_PHY_EnableRX>
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a8c <.text_29>:
 8005a8c:	0000ffe0 	.word	0x0000ffe0

08005a90 <.text_30>:
 8005a90:	00008fff 	.word	0x00008fff

08005a94 <USBPD_PRL_DeInit>:
 8005a94:	4770      	bx	lr

08005a96 <PRL_DisableRX>:
 8005a96:	b580      	push	{r7, lr}
 8005a98:	f007 fbf4 	bl	800d284 <USBPD_PHY_DisableRX>
 8005a9c:	bd01      	pop	{r0, pc}

08005a9e <PRL_StateTXConstructMessage>:
 8005a9e:	b5db      	push	{r0, r1, r3, r4, r6, r7, lr}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	0016      	movs	r6, r2
 8005aa4:	001c      	movs	r4, r3
 8005aa6:	4864      	ldr	r0, [pc, #400]	; (8005c38 <.text_38>)
 8005aa8:	4669      	mov	r1, sp
 8005aaa:	7d09      	ldrb	r1, [r1, #20]
 8005aac:	0089      	lsls	r1, r1, #2
 8005aae:	1840      	adds	r0, r0, r1
 8005ab0:	9000      	str	r0, [sp, #0]
 8005ab2:	6800      	ldr	r0, [r0, #0]
 8005ab4:	4669      	mov	r1, sp
 8005ab6:	7e09      	ldrb	r1, [r1, #24]
 8005ab8:	9103      	str	r1, [sp, #12]
 8005aba:	0049      	lsls	r1, r1, #1
 8005abc:	9102      	str	r1, [sp, #8]
 8005abe:	0001      	movs	r1, r0
 8005ac0:	3112      	adds	r1, #18
 8005ac2:	9a02      	ldr	r2, [sp, #8]
 8005ac4:	1889      	adds	r1, r1, r2
 8005ac6:	9101      	str	r1, [sp, #4]
 8005ac8:	8809      	ldrh	r1, [r1, #0]
 8005aca:	0bca      	lsrs	r2, r1, #15
 8005acc:	d06d      	beq.n	8005baa <PRL_StateTXConstructMessage+0x10c>
 8005ace:	8b82      	ldrh	r2, [r0, #28]
 8005ad0:	0a93      	lsrs	r3, r2, #10
 8005ad2:	07db      	lsls	r3, r3, #31
 8005ad4:	d460      	bmi.n	8005b98 <PRL_StateTXConstructMessage+0xfa>
 8005ad6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005ad8:	2b1b      	cmp	r3, #27
 8005ada:	d301      	bcc.n	8005ae0 <PRL_StateTXConstructMessage+0x42>
 8005adc:	0bd7      	lsrs	r7, r2, #15
 8005ade:	d152      	bne.n	8005b86 <PRL_StateTXConstructMessage+0xe8>
 8005ae0:	0451      	lsls	r1, r2, #17
 8005ae2:	0f09      	lsrs	r1, r1, #28
 8005ae4:	d106      	bne.n	8005af4 <PRL_StateTXConstructMessage+0x56>
 8005ae6:	21fe      	movs	r1, #254	; 0xfe
 8005ae8:	0209      	lsls	r1, r1, #8
 8005aea:	4011      	ands	r1, r2
 8005aec:	05da      	lsls	r2, r3, #23
 8005aee:	0dd2      	lsrs	r2, r2, #23
 8005af0:	430a      	orrs	r2, r1
 8005af2:	8382      	strh	r2, [r0, #28]
 8005af4:	9901      	ldr	r1, [sp, #4]
 8005af6:	8809      	ldrh	r1, [r1, #0]
 8005af8:	4a50      	ldr	r2, [pc, #320]	; (8005c3c <.text_39>)
 8005afa:	400a      	ands	r2, r1
 8005afc:	9901      	ldr	r1, [sp, #4]
 8005afe:	800a      	strh	r2, [r1, #0]
 8005b00:	2100      	movs	r1, #0
 8005b02:	8b83      	ldrh	r3, [r0, #28]
 8005b04:	0bdb      	lsrs	r3, r3, #15
 8005b06:	d03a      	beq.n	8005b7e <PRL_StateTXConstructMessage+0xe0>
 8005b08:	4b4b      	ldr	r3, [pc, #300]	; (8005c38 <.text_38>)
 8005b0a:	466c      	mov	r4, sp
 8005b0c:	7d24      	ldrb	r4, [r4, #20]
 8005b0e:	00a4      	lsls	r4, r4, #2
 8005b10:	191b      	adds	r3, r3, r4
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005b16:	1c9b      	adds	r3, r3, #2
 8005b18:	089b      	lsrs	r3, r3, #2
 8005b1a:	031b      	lsls	r3, r3, #12
 8005b1c:	24e0      	movs	r4, #224	; 0xe0
 8005b1e:	01e4      	lsls	r4, r4, #7
 8005b20:	401c      	ands	r4, r3
 8005b22:	4314      	orrs	r4, r2
 8005b24:	9a01      	ldr	r2, [sp, #4]
 8005b26:	8014      	strh	r4, [r2, #0]
 8005b28:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8005b2a:	1c80      	adds	r0, r0, #2
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	4002      	ands	r2, r0
 8005b30:	d01c      	beq.n	8005b6c <PRL_StateTXConstructMessage+0xce>
 8005b32:	2300      	movs	r3, #0
 8005b34:	e004      	b.n	8005b40 <PRL_StateTXConstructMessage+0xa2>
 8005b36:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 8005b38:	1820      	adds	r0, r4, r0
 8005b3a:	1830      	adds	r0, r6, r0
 8005b3c:	7101      	strb	r1, [r0, #4]
 8005b3e:	1c5b      	adds	r3, r3, #1
 8005b40:	9800      	ldr	r0, [sp, #0]
 8005b42:	6804      	ldr	r4, [r0, #0]
 8005b44:	b2d8      	uxtb	r0, r3
 8005b46:	2704      	movs	r7, #4
 8005b48:	1abf      	subs	r7, r7, r2
 8005b4a:	42b8      	cmp	r0, r7
 8005b4c:	d3f3      	bcc.n	8005b36 <PRL_StateTXConstructMessage+0x98>
 8005b4e:	0020      	movs	r0, r4
 8005b50:	3012      	adds	r0, #18
 8005b52:	9a02      	ldr	r2, [sp, #8]
 8005b54:	1880      	adds	r0, r0, r2
 8005b56:	8803      	ldrh	r3, [r0, #0]
 8005b58:	4a38      	ldr	r2, [pc, #224]	; (8005c3c <.text_39>)
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	0b1b      	lsrs	r3, r3, #12
 8005b5e:	1c5b      	adds	r3, r3, #1
 8005b60:	031b      	lsls	r3, r3, #12
 8005b62:	24e0      	movs	r4, #224	; 0xe0
 8005b64:	01e4      	lsls	r4, r4, #7
 8005b66:	401c      	ands	r4, r3
 8005b68:	4314      	orrs	r4, r2
 8005b6a:	8004      	strh	r4, [r0, #0]
 8005b6c:	9800      	ldr	r0, [sp, #0]
 8005b6e:	6800      	ldr	r0, [r0, #0]
 8005b70:	3012      	adds	r0, #18
 8005b72:	9a02      	ldr	r2, [sp, #8]
 8005b74:	5a80      	ldrh	r0, [r0, r2]
 8005b76:	0440      	lsls	r0, r0, #17
 8005b78:	0f40      	lsrs	r0, r0, #29
 8005b7a:	0084      	lsls	r4, r0, #2
 8005b7c:	1ca4      	adds	r4, r4, #2
 8005b7e:	9800      	ldr	r0, [sp, #0]
 8005b80:	6800      	ldr	r0, [r0, #0]
 8005b82:	8441      	strh	r1, [r0, #34]	; 0x22
 8005b84:	e008      	b.n	8005b98 <PRL_StateTXConstructMessage+0xfa>
 8005b86:	22e0      	movs	r2, #224	; 0xe0
 8005b88:	01d2      	lsls	r2, r2, #7
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	9901      	ldr	r1, [sp, #4]
 8005b8e:	800a      	strh	r2, [r1, #0]
 8005b90:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 8005b92:	391a      	subs	r1, #26
 8005b94:	8441      	strh	r1, [r0, #34]	; 0x22
 8005b96:	241e      	movs	r4, #30
 8005b98:	9800      	ldr	r0, [sp, #0]
 8005b9a:	6800      	ldr	r0, [r0, #0]
 8005b9c:	8b80      	ldrh	r0, [r0, #28]
 8005b9e:	70b0      	strb	r0, [r6, #2]
 8005ba0:	9800      	ldr	r0, [sp, #0]
 8005ba2:	6800      	ldr	r0, [r0, #0]
 8005ba4:	8b80      	ldrh	r0, [r0, #28]
 8005ba6:	0a00      	lsrs	r0, r0, #8
 8005ba8:	70f0      	strb	r0, [r6, #3]
 8005baa:	9800      	ldr	r0, [sp, #0]
 8005bac:	6801      	ldr	r1, [r0, #0]
 8005bae:	9803      	ldr	r0, [sp, #12]
 8005bb0:	1808      	adds	r0, r1, r0
 8005bb2:	7ac0      	ldrb	r0, [r0, #11]
 8005bb4:	3112      	adds	r1, #18
 8005bb6:	9a02      	ldr	r2, [sp, #8]
 8005bb8:	1889      	adds	r1, r1, r2
 8005bba:	880b      	ldrh	r3, [r1, #0]
 8005bbc:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <.text_40>)
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	0243      	lsls	r3, r0, #9
 8005bc2:	20e0      	movs	r0, #224	; 0xe0
 8005bc4:	0100      	lsls	r0, r0, #4
 8005bc6:	4018      	ands	r0, r3
 8005bc8:	4310      	orrs	r0, r2
 8005bca:	8008      	strh	r0, [r1, #0]
 8005bcc:	7030      	strb	r0, [r6, #0]
 8005bce:	9800      	ldr	r0, [sp, #0]
 8005bd0:	6800      	ldr	r0, [r0, #0]
 8005bd2:	3012      	adds	r0, #18
 8005bd4:	9902      	ldr	r1, [sp, #8]
 8005bd6:	5a40      	ldrh	r0, [r0, r1]
 8005bd8:	0a00      	lsrs	r0, r0, #8
 8005bda:	7070      	strb	r0, [r6, #1]
 8005bdc:	9800      	ldr	r0, [sp, #0]
 8005bde:	6800      	ldr	r0, [r0, #0]
 8005be0:	81c4      	strh	r4, [r0, #14]
 8005be2:	210a      	movs	r1, #10
 8005be4:	7141      	strb	r1, [r0, #5]
 8005be6:	2102      	movs	r1, #2
 8005be8:	7401      	strb	r1, [r0, #16]
 8005bea:	b2a0      	uxth	r0, r4
 8005bec:	9000      	str	r0, [sp, #0]
 8005bee:	0033      	movs	r3, r6
 8005bf0:	4668      	mov	r0, sp
 8005bf2:	7e02      	ldrb	r2, [r0, #24]
 8005bf4:	7d01      	ldrb	r1, [r0, #20]
 8005bf6:	2002      	movs	r0, #2
 8005bf8:	4f0e      	ldr	r7, [pc, #56]	; (8005c34 <.text_37>)
 8005bfa:	683f      	ldr	r7, [r7, #0]
 8005bfc:	47b8      	blx	r7
 8005bfe:	4668      	mov	r0, sp
 8005c00:	7d00      	ldrb	r0, [r0, #20]
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d101      	bne.n	8005c0a <PRL_StateTXConstructMessage+0x16c>
 8005c06:	2001      	movs	r0, #1
 8005c08:	e000      	b.n	8005c0c <PRL_StateTXConstructMessage+0x16e>
 8005c0a:	2003      	movs	r0, #3
 8005c0c:	4908      	ldr	r1, [pc, #32]	; (8005c30 <.text_36>)
 8005c0e:	f008 fde7 	bl	800e7e0 <USBPD_TIM_Start>
 8005c12:	b2a3      	uxth	r3, r4
 8005c14:	0032      	movs	r2, r6
 8005c16:	4668      	mov	r0, sp
 8005c18:	7e01      	ldrb	r1, [r0, #24]
 8005c1a:	7d00      	ldrb	r0, [r0, #20]
 8005c1c:	f007 fa89 	bl	800d132 <USBPD_PHY_SendMessage>
 8005c20:	2003      	movs	r0, #3
 8005c22:	b008      	add	sp, #32
 8005c24:	bdd0      	pop	{r4, r6, r7, pc}
	...

08005c28 <.text_34>:
 8005c28:	000087ff 	.word	0x000087ff

08005c2c <.text_35>:
 8005c2c:	0000fbff 	.word	0x0000fbff

08005c30 <.text_36>:
 8005c30:	00002710 	.word	0x00002710

08005c34 <.text_37>:
 8005c34:	20000000 	.word	0x20000000

08005c38 <.text_38>:
 8005c38:	200001e8 	.word	0x200001e8

08005c3c <.text_39>:
 8005c3c:	00008fff 	.word	0x00008fff

08005c40 <.text_40>:
 8005c40:	0000f1ff 	.word	0x0000f1ff

08005c44 <PRL_Received>:
 8005c44:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	000e      	movs	r6, r1
 8005c4a:	4864      	ldr	r0, [pc, #400]	; (8005ddc <PRL_Received+0x198>)
 8005c4c:	a908      	add	r1, sp, #32
 8005c4e:	7809      	ldrb	r1, [r1, #0]
 8005c50:	0089      	lsls	r1, r1, #2
 8005c52:	1847      	adds	r7, r0, r1
 8005c54:	683c      	ldr	r4, [r7, #0]
 8005c56:	a808      	add	r0, sp, #32
 8005c58:	7800      	ldrb	r0, [r0, #0]
 8005c5a:	f007 fa3f 	bl	800d0dc <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005c5e:	2500      	movs	r5, #0
 8005c60:	a908      	add	r1, sp, #32
 8005c62:	7809      	ldrb	r1, [r1, #0]
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d102      	bne.n	8005c6e <PRL_Received+0x2a>
 8005c68:	466a      	mov	r2, sp
 8005c6a:	7015      	strb	r5, [r2, #0]
 8005c6c:	e002      	b.n	8005c74 <PRL_Received+0x30>
 8005c6e:	2102      	movs	r1, #2
 8005c70:	466a      	mov	r2, sp
 8005c72:	7011      	strb	r1, [r2, #0]
 8005c74:	0001      	movs	r1, r0
 8005c76:	4668      	mov	r0, sp
 8005c78:	7800      	ldrb	r0, [r0, #0]
 8005c7a:	f008 fdb1 	bl	800e7e0 <USBPD_TIM_Start>
 8005c7e:	2030      	movs	r0, #48	; 0x30
 8005c80:	5c20      	ldrb	r0, [r4, r0]
 8005c82:	2131      	movs	r1, #49	; 0x31
 8005c84:	5c61      	ldrb	r1, [r4, r1]
 8005c86:	0209      	lsls	r1, r1, #8
 8005c88:	1840      	adds	r0, r0, r1
 8005c8a:	4669      	mov	r1, sp
 8005c8c:	80c8      	strh	r0, [r1, #6]
 8005c8e:	4668      	mov	r0, sp
 8005c90:	88c0      	ldrh	r0, [r0, #6]
 8005c92:	0440      	lsls	r0, r0, #17
 8005c94:	0f40      	lsrs	r0, r0, #29
 8005c96:	8048      	strh	r0, [r1, #2]
 8005c98:	4668      	mov	r0, sp
 8005c9a:	8840      	ldrh	r0, [r0, #2]
 8005c9c:	0080      	lsls	r0, r0, #2
 8005c9e:	9005      	str	r0, [sp, #20]
 8005ca0:	1c80      	adds	r0, r0, #2
 8005ca2:	9006      	str	r0, [sp, #24]
 8005ca4:	48bf      	ldr	r0, [pc, #764]	; (8005fa4 <.text_42>)
 8005ca6:	710e      	strb	r6, [r1, #4]
 8005ca8:	88c9      	ldrh	r1, [r1, #6]
 8005caa:	4001      	ands	r1, r0
 8005cac:	2901      	cmp	r1, #1
 8005cae:	d112      	bne.n	8005cd6 <PRL_Received+0x92>
 8005cb0:	200b      	movs	r0, #11
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	7148      	strb	r0, [r1, #5]
 8005cb6:	4668      	mov	r0, sp
 8005cb8:	88c0      	ldrh	r0, [r0, #6]
 8005cba:	8360      	strh	r0, [r4, #26]
 8005cbc:	9806      	ldr	r0, [sp, #24]
 8005cbe:	9000      	str	r0, [sp, #0]
 8005cc0:	0023      	movs	r3, r4
 8005cc2:	3330      	adds	r3, #48	; 0x30
 8005cc4:	4668      	mov	r0, sp
 8005cc6:	7902      	ldrb	r2, [r0, #4]
 8005cc8:	a808      	add	r0, sp, #32
 8005cca:	7801      	ldrb	r1, [r0, #0]
 8005ccc:	2001      	movs	r0, #1
 8005cce:	4ccd      	ldr	r4, [pc, #820]	; (8006004 <.text_46>)
 8005cd0:	6824      	ldr	r4, [r4, #0]
 8005cd2:	47a0      	blx	r4
 8005cd4:	e163      	b.n	8005f9e <PRL_Received+0x35a>
 8005cd6:	49c7      	ldr	r1, [pc, #796]	; (8005ff4 <.text_44>)
 8005cd8:	880e      	ldrh	r6, [r1, #0]
 8005cda:	2701      	movs	r7, #1
 8005cdc:	72a7      	strb	r7, [r4, #10]
 8005cde:	4669      	mov	r1, sp
 8005ce0:	7909      	ldrb	r1, [r1, #4]
 8005ce2:	1861      	adds	r1, r4, r1
 8005ce4:	9104      	str	r1, [sp, #16]
 8005ce6:	4669      	mov	r1, sp
 8005ce8:	88c9      	ldrh	r1, [r1, #6]
 8005cea:	4008      	ands	r0, r1
 8005cec:	280d      	cmp	r0, #13
 8005cee:	d106      	bne.n	8005cfe <PRL_Received+0xba>
 8005cf0:	9904      	ldr	r1, [sp, #16]
 8005cf2:	72cd      	strb	r5, [r1, #11]
 8005cf4:	220f      	movs	r2, #15
 8005cf6:	2103      	movs	r1, #3
 8005cf8:	1da0      	adds	r0, r4, #6
 8005cfa:	f00f fa3c 	bl	8015176 <__aeabi_memset>
 8005cfe:	4668      	mov	r0, sp
 8005d00:	7900      	ldrb	r0, [r0, #4]
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d10d      	bne.n	8005d22 <PRL_Received+0xde>
 8005d06:	8a61      	ldrh	r1, [r4, #18]
 8005d08:	094a      	lsrs	r2, r1, #5
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	4010      	ands	r0, r2
 8005d0e:	0a0a      	lsrs	r2, r1, #8
 8005d10:	2101      	movs	r1, #1
 8005d12:	4011      	ands	r1, r2
 8005d14:	4abc      	ldr	r2, [pc, #752]	; (8006008 <.text_47>)
 8005d16:	4032      	ands	r2, r6
 8005d18:	0140      	lsls	r0, r0, #5
 8005d1a:	4310      	orrs	r0, r2
 8005d1c:	0209      	lsls	r1, r1, #8
 8005d1e:	4301      	orrs	r1, r0
 8005d20:	e001      	b.n	8005d26 <PRL_Received+0xe2>
 8005d22:	49ba      	ldr	r1, [pc, #744]	; (800600c <.text_48>)
 8005d24:	4031      	ands	r1, r6
 8005d26:	48ba      	ldr	r0, [pc, #744]	; (8006010 <.text_49>)
 8005d28:	4008      	ands	r0, r1
 8005d2a:	4669      	mov	r1, sp
 8005d2c:	88c9      	ldrh	r1, [r1, #6]
 8005d2e:	0609      	lsls	r1, r1, #24
 8005d30:	0f89      	lsrs	r1, r1, #30
 8005d32:	2902      	cmp	r1, #2
 8005d34:	d202      	bcs.n	8005d3c <PRL_Received+0xf8>
 8005d36:	0001      	movs	r1, r0
 8005d38:	2040      	movs	r0, #64	; 0x40
 8005d3a:	4308      	orrs	r0, r1
 8005d3c:	49ca      	ldr	r1, [pc, #808]	; (8006068 <.text_52>)
 8005d3e:	4001      	ands	r1, r0
 8005d40:	4668      	mov	r0, sp
 8005d42:	88c2      	ldrh	r2, [r0, #6]
 8005d44:	20e0      	movs	r0, #224	; 0xe0
 8005d46:	0100      	lsls	r0, r0, #4
 8005d48:	4010      	ands	r0, r2
 8005d4a:	4308      	orrs	r0, r1
 8005d4c:	7620      	strb	r0, [r4, #24]
 8005d4e:	0a00      	lsrs	r0, r0, #8
 8005d50:	7660      	strb	r0, [r4, #25]
 8005d52:	0022      	movs	r2, r4
 8005d54:	3230      	adds	r2, #48	; 0x30
 8005d56:	4668      	mov	r0, sp
 8005d58:	7901      	ldrb	r1, [r0, #4]
 8005d5a:	a808      	add	r0, sp, #32
 8005d5c:	7800      	ldrb	r0, [r0, #0]
 8005d5e:	f7fa ff5b 	bl	8000c18 <PE_PRL_PostReceiveEvent>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d0b6      	beq.n	8005cd4 <PRL_Received+0x90>
 8005d66:	7427      	strb	r7, [r4, #16]
 8005d68:	4668      	mov	r0, sp
 8005d6a:	7806      	ldrb	r6, [r0, #0]
 8005d6c:	0030      	movs	r0, r6
 8005d6e:	f008 fda5 	bl	800e8bc <USBPD_TIM_IsExpired>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d0fa      	beq.n	8005d6c <PRL_Received+0x128>
 8005d76:	2302      	movs	r3, #2
 8005d78:	0022      	movs	r2, r4
 8005d7a:	3218      	adds	r2, #24
 8005d7c:	4668      	mov	r0, sp
 8005d7e:	7901      	ldrb	r1, [r0, #4]
 8005d80:	a808      	add	r0, sp, #32
 8005d82:	7800      	ldrb	r0, [r0, #0]
 8005d84:	f007 f9d5 	bl	800d132 <USBPD_PHY_SendMessage>
 8005d88:	4669      	mov	r1, sp
 8005d8a:	7148      	strb	r0, [r1, #5]
 8005d8c:	4668      	mov	r0, sp
 8005d8e:	7900      	ldrb	r0, [r0, #4]
 8005d90:	7260      	strb	r0, [r4, #9]
 8005d92:	0021      	movs	r1, r4
 8005d94:	3130      	adds	r1, #48	; 0x30
 8005d96:	a808      	add	r0, sp, #32
 8005d98:	7800      	ldrb	r0, [r0, #0]
 8005d9a:	f7fa ff6f 	bl	8000c7c <PE_PRL_PostReceiveEventCopy>
 8005d9e:	2033      	movs	r0, #51	; 0x33
 8005da0:	5c20      	ldrb	r0, [r4, r0]
 8005da2:	2132      	movs	r1, #50	; 0x32
 8005da4:	5c61      	ldrb	r1, [r4, r1]
 8005da6:	0203      	lsls	r3, r0, #8
 8005da8:	18ca      	adds	r2, r1, r3
 8005daa:	466b      	mov	r3, sp
 8005dac:	811a      	strh	r2, [r3, #8]
 8005dae:	466a      	mov	r2, sp
 8005db0:	8912      	ldrh	r2, [r2, #8]
 8005db2:	05d2      	lsls	r2, r2, #23
 8005db4:	0dd2      	lsrs	r2, r2, #23
 8005db6:	815a      	strh	r2, [r3, #10]
 8005db8:	466a      	mov	r2, sp
 8005dba:	8912      	ldrh	r2, [r2, #8]
 8005dbc:	0bd2      	lsrs	r2, r2, #15
 8005dbe:	81da      	strh	r2, [r3, #14]
 8005dc0:	466a      	mov	r2, sp
 8005dc2:	88d2      	ldrh	r2, [r2, #6]
 8005dc4:	0bd2      	lsrs	r2, r2, #15
 8005dc6:	819a      	strh	r2, [r3, #12]
 8005dc8:	d00a      	beq.n	8005de0 <PRL_Received+0x19c>
 8005dca:	466a      	mov	r2, sp
 8005dcc:	89d2      	ldrh	r2, [r2, #14]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d106      	bne.n	8005de0 <PRL_Received+0x19c>
 8005dd2:	4668      	mov	r0, sp
 8005dd4:	8940      	ldrh	r0, [r0, #10]
 8005dd6:	1d00      	adds	r0, r0, #4
 8005dd8:	e020      	b.n	8005e1c <PRL_Received+0x1d8>
 8005dda:	bf00      	nop
 8005ddc:	200001e8 	.word	0x200001e8
 8005de0:	7822      	ldrb	r2, [r4, #0]
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	d119      	bne.n	8005e1a <PRL_Received+0x1d6>
 8005de6:	466a      	mov	r2, sp
 8005de8:	8852      	ldrh	r2, [r2, #2]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d015      	beq.n	8005e1a <PRL_Received+0x1d6>
 8005dee:	466a      	mov	r2, sp
 8005df0:	88d2      	ldrh	r2, [r2, #6]
 8005df2:	06d2      	lsls	r2, r2, #27
 8005df4:	0ed2      	lsrs	r2, r2, #27
 8005df6:	2a03      	cmp	r2, #3
 8005df8:	d10f      	bne.n	8005e1a <PRL_Received+0x1d6>
 8005dfa:	0200      	lsls	r0, r0, #8
 8005dfc:	1808      	adds	r0, r1, r0
 8005dfe:	2134      	movs	r1, #52	; 0x34
 8005e00:	5c61      	ldrb	r1, [r4, r1]
 8005e02:	0409      	lsls	r1, r1, #16
 8005e04:	1840      	adds	r0, r0, r1
 8005e06:	2135      	movs	r1, #53	; 0x35
 8005e08:	5c61      	ldrb	r1, [r4, r1]
 8005e0a:	0609      	lsls	r1, r1, #24
 8005e0c:	1840      	adds	r0, r0, r1
 8005e0e:	0f00      	lsrs	r0, r0, #28
 8005e10:	2808      	cmp	r0, #8
 8005e12:	d001      	beq.n	8005e18 <PRL_Received+0x1d4>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d100      	bne.n	8005e1a <PRL_Received+0x1d6>
 8005e18:	7027      	strb	r7, [r4, #0]
 8005e1a:	9806      	ldr	r0, [sp, #24]
 8005e1c:	9000      	str	r0, [sp, #0]
 8005e1e:	0023      	movs	r3, r4
 8005e20:	3330      	adds	r3, #48	; 0x30
 8005e22:	4668      	mov	r0, sp
 8005e24:	7902      	ldrb	r2, [r0, #4]
 8005e26:	a808      	add	r0, sp, #32
 8005e28:	7801      	ldrb	r1, [r0, #0]
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	4e75      	ldr	r6, [pc, #468]	; (8006004 <.text_46>)
 8005e2e:	6836      	ldr	r6, [r6, #0]
 8005e30:	47b0      	blx	r6
 8005e32:	4668      	mov	r0, sp
 8005e34:	7940      	ldrb	r0, [r0, #5]
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d16b      	bne.n	8005f12 <PRL_Received+0x2ce>
 8005e3a:	2002      	movs	r0, #2
 8005e3c:	9000      	str	r0, [sp, #0]
 8005e3e:	0023      	movs	r3, r4
 8005e40:	3318      	adds	r3, #24
 8005e42:	4668      	mov	r0, sp
 8005e44:	7902      	ldrb	r2, [r0, #4]
 8005e46:	a808      	add	r0, sp, #32
 8005e48:	7801      	ldrb	r1, [r0, #0]
 8005e4a:	2002      	movs	r0, #2
 8005e4c:	4e6d      	ldr	r6, [pc, #436]	; (8006004 <.text_46>)
 8005e4e:	6836      	ldr	r6, [r6, #0]
 8005e50:	47b0      	blx	r6
 8005e52:	4668      	mov	r0, sp
 8005e54:	88c0      	ldrh	r0, [r0, #6]
 8005e56:	0a40      	lsrs	r0, r0, #9
 8005e58:	9904      	ldr	r1, [sp, #16]
 8005e5a:	7989      	ldrb	r1, [r1, #6]
 8005e5c:	0742      	lsls	r2, r0, #29
 8005e5e:	0f52      	lsrs	r2, r2, #29
 8005e60:	4291      	cmp	r1, r2
 8005e62:	d100      	bne.n	8005e66 <PRL_Received+0x222>
 8005e64:	e095      	b.n	8005f92 <PRL_Received+0x34e>
 8005e66:	2207      	movs	r2, #7
 8005e68:	2107      	movs	r1, #7
 8005e6a:	4001      	ands	r1, r0
 8005e6c:	9804      	ldr	r0, [sp, #16]
 8005e6e:	7181      	strb	r1, [r0, #6]
 8005e70:	4668      	mov	r0, sp
 8005e72:	88c0      	ldrh	r0, [r0, #6]
 8005e74:	8420      	strh	r0, [r4, #32]
 8005e76:	4668      	mov	r0, sp
 8005e78:	8980      	ldrh	r0, [r0, #12]
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d049      	beq.n	8005f12 <PRL_Received+0x2ce>
 8005e7e:	4668      	mov	r0, sp
 8005e80:	89c0      	ldrh	r0, [r0, #14]
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d045      	beq.n	8005f12 <PRL_Received+0x2ce>
 8005e86:	4668      	mov	r0, sp
 8005e88:	8900      	ldrh	r0, [r0, #8]
 8005e8a:	83e0      	strh	r0, [r4, #30]
 8005e8c:	9805      	ldr	r0, [sp, #20]
 8005e8e:	1e80      	subs	r0, r0, #2
 8005e90:	4669      	mov	r1, sp
 8005e92:	8909      	ldrh	r1, [r1, #8]
 8005e94:	0449      	lsls	r1, r1, #17
 8005e96:	0f09      	lsrs	r1, r1, #28
 8005e98:	231a      	movs	r3, #26
 8005e9a:	434b      	muls	r3, r1
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4669      	mov	r1, sp
 8005ea0:	8909      	ldrh	r1, [r1, #8]
 8005ea2:	05c9      	lsls	r1, r1, #23
 8005ea4:	0dc9      	lsrs	r1, r1, #23
 8005ea6:	466b      	mov	r3, sp
 8005ea8:	891b      	ldrh	r3, [r3, #8]
 8005eaa:	26f8      	movs	r6, #248	; 0xf8
 8005eac:	01f6      	lsls	r6, r6, #7
 8005eae:	401e      	ands	r6, r3
 8005eb0:	d130      	bne.n	8005f14 <PRL_Received+0x2d0>
 8005eb2:	466b      	mov	r3, sp
 8005eb4:	88db      	ldrh	r3, [r3, #6]
 8005eb6:	0b1b      	lsrs	r3, r3, #12
 8005eb8:	401a      	ands	r2, r3
 8005eba:	2a07      	cmp	r2, #7
 8005ebc:	d30b      	bcc.n	8005ed6 <PRL_Received+0x292>
 8005ebe:	291a      	cmp	r1, #26
 8005ec0:	d812      	bhi.n	8005ee8 <PRL_Received+0x2a4>
 8005ec2:	e008      	b.n	8005ed6 <PRL_Received+0x292>
 8005ec4:	0022      	movs	r2, r4
 8005ec6:	3234      	adds	r2, #52	; 0x34
 8005ec8:	5d52      	ldrb	r2, [r2, r5]
 8005eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ecc:	9e00      	ldr	r6, [sp, #0]
 8005ece:	19ae      	adds	r6, r5, r6
 8005ed0:	559a      	strb	r2, [r3, r6]
 8005ed2:	1c6d      	adds	r5, r5, #1
 8005ed4:	b2ad      	uxth	r5, r5
 8005ed6:	4285      	cmp	r5, r0
 8005ed8:	d3f4      	bcc.n	8005ec4 <PRL_Received+0x280>
 8005eda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005edc:	4288      	cmp	r0, r1
 8005ede:	d301      	bcc.n	8005ee4 <PRL_Received+0x2a0>
 8005ee0:	4668      	mov	r0, sp
 8005ee2:	8940      	ldrh	r0, [r0, #10]
 8005ee4:	8010      	strh	r0, [r2, #0]
 8005ee6:	e00c      	b.n	8005f02 <PRL_Received+0x2be>
 8005ee8:	2025      	movs	r0, #37	; 0x25
 8005eea:	5427      	strb	r7, [r4, r0]
 8005eec:	0020      	movs	r0, r4
 8005eee:	3034      	adds	r0, #52	; 0x34
 8005ef0:	5d40      	ldrb	r0, [r0, r5]
 8005ef2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ef4:	5548      	strb	r0, [r1, r5]
 8005ef6:	1c6d      	adds	r5, r5, #1
 8005ef8:	2d1a      	cmp	r5, #26
 8005efa:	d3f7      	bcc.n	8005eec <PRL_Received+0x2a8>
 8005efc:	201a      	movs	r0, #26
 8005efe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f00:	8008      	strh	r0, [r1, #0]
 8005f02:	0022      	movs	r2, r4
 8005f04:	3230      	adds	r2, #48	; 0x30
 8005f06:	4668      	mov	r0, sp
 8005f08:	7901      	ldrb	r1, [r0, #4]
 8005f0a:	a808      	add	r0, sp, #32
 8005f0c:	7800      	ldrb	r0, [r0, #0]
 8005f0e:	f7fa fe83 	bl	8000c18 <PE_PRL_PostReceiveEvent>
 8005f12:	e044      	b.n	8005f9e <PRL_Received+0x35a>
 8005f14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f16:	8812      	ldrh	r2, [r2, #0]
 8005f18:	9b05      	ldr	r3, [sp, #20]
 8005f1a:	18d3      	adds	r3, r2, r3
 8005f1c:	1e9b      	subs	r3, r3, #2
 8005f1e:	26ff      	movs	r6, #255	; 0xff
 8005f20:	1db6      	adds	r6, r6, #6
 8005f22:	321a      	adds	r2, #26
 8005f24:	42b2      	cmp	r2, r6
 8005f26:	d21a      	bcs.n	8005f5e <PRL_Received+0x31a>
 8005f28:	428b      	cmp	r3, r1
 8005f2a:	d218      	bcs.n	8005f5e <PRL_Received+0x31a>
 8005f2c:	2125      	movs	r1, #37	; 0x25
 8005f2e:	5467      	strb	r7, [r4, r1]
 8005f30:	e008      	b.n	8005f44 <PRL_Received+0x300>
 8005f32:	0021      	movs	r1, r4
 8005f34:	3134      	adds	r1, #52	; 0x34
 8005f36:	5d49      	ldrb	r1, [r1, r5]
 8005f38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005f3a:	9b00      	ldr	r3, [sp, #0]
 8005f3c:	18eb      	adds	r3, r5, r3
 8005f3e:	54d1      	strb	r1, [r2, r3]
 8005f40:	1c6d      	adds	r5, r5, #1
 8005f42:	b2ad      	uxth	r5, r5
 8005f44:	4285      	cmp	r5, r0
 8005f46:	d3f4      	bcc.n	8005f32 <PRL_Received+0x2ee>
 8005f48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005f4a:	8801      	ldrh	r1, [r0, #0]
 8005f4c:	466a      	mov	r2, sp
 8005f4e:	88d2      	ldrh	r2, [r2, #6]
 8005f50:	0a92      	lsrs	r2, r2, #10
 8005f52:	231c      	movs	r3, #28
 8005f54:	4013      	ands	r3, r2
 8005f56:	1e9a      	subs	r2, r3, #2
 8005f58:	1889      	adds	r1, r1, r2
 8005f5a:	8001      	strh	r1, [r0, #0]
 8005f5c:	e01f      	b.n	8005f9e <PRL_Received+0x35a>
 8005f5e:	42b3      	cmp	r3, r6
 8005f60:	d214      	bcs.n	8005f8c <PRL_Received+0x348>
 8005f62:	428b      	cmp	r3, r1
 8005f64:	d312      	bcc.n	8005f8c <PRL_Received+0x348>
 8005f66:	2125      	movs	r1, #37	; 0x25
 8005f68:	5467      	strb	r7, [r4, r1]
 8005f6a:	e008      	b.n	8005f7e <PRL_Received+0x33a>
 8005f6c:	0021      	movs	r1, r4
 8005f6e:	3134      	adds	r1, #52	; 0x34
 8005f70:	5d49      	ldrb	r1, [r1, r5]
 8005f72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	18eb      	adds	r3, r5, r3
 8005f78:	54d1      	strb	r1, [r2, r3]
 8005f7a:	1c6d      	adds	r5, r5, #1
 8005f7c:	b2ad      	uxth	r5, r5
 8005f7e:	4285      	cmp	r5, r0
 8005f80:	d3f4      	bcc.n	8005f6c <PRL_Received+0x328>
 8005f82:	4668      	mov	r0, sp
 8005f84:	8940      	ldrh	r0, [r0, #10]
 8005f86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f88:	8008      	strh	r0, [r1, #0]
 8005f8a:	e008      	b.n	8005f9e <PRL_Received+0x35a>
 8005f8c:	2025      	movs	r0, #37	; 0x25
 8005f8e:	5425      	strb	r5, [r4, r0]
 8005f90:	e005      	b.n	8005f9e <PRL_Received+0x35a>
 8005f92:	7425      	strb	r5, [r4, #16]
 8005f94:	a808      	add	r0, sp, #32
 8005f96:	7800      	ldrb	r0, [r0, #0]
 8005f98:	f7fa fe5a 	bl	8000c50 <PE_PRL_PostReceiveEventError>
 8005f9c:	72a5      	strb	r5, [r4, #10]
 8005f9e:	b009      	add	sp, #36	; 0x24
 8005fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005fa4 <.text_42>:
 8005fa4:	0000f01f 	.word	0x0000f01f

08005fa8 <PRL_ResetIndicate>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	0004      	movs	r4, r0
 8005fac:	000d      	movs	r5, r1
 8005fae:	2d05      	cmp	r5, #5
 8005fb0:	d111      	bne.n	8005fd6 <PRL_ResetIndicate+0x2e>
 8005fb2:	485c      	ldr	r0, [pc, #368]	; (8006124 <.text_55>)
 8005fb4:	00a1      	lsls	r1, r4, #2
 8005fb6:	1847      	adds	r7, r0, r1
 8005fb8:	2600      	movs	r6, #0
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	740e      	strb	r6, [r1, #16]
 8005fbe:	220f      	movs	r2, #15
 8005fc0:	2103      	movs	r1, #3
 8005fc2:	6838      	ldr	r0, [r7, #0]
 8005fc4:	1d80      	adds	r0, r0, #6
 8005fc6:	f00f f8d6 	bl	8015176 <__aeabi_memset>
 8005fca:	6838      	ldr	r0, [r7, #0]
 8005fcc:	7146      	strb	r6, [r0, #5]
 8005fce:	7006      	strb	r6, [r0, #0]
 8005fd0:	0020      	movs	r0, r4
 8005fd2:	f7ff fd60 	bl	8005a96 <PRL_DisableRX>
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	9000      	str	r0, [sp, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	002a      	movs	r2, r5
 8005fde:	0021      	movs	r1, r4
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	4e08      	ldr	r6, [pc, #32]	; (8006004 <.text_46>)
 8005fe4:	6836      	ldr	r6, [r6, #0]
 8005fe6:	47b0      	blx	r6
 8005fe8:	0029      	movs	r1, r5
 8005fea:	0020      	movs	r0, r4
 8005fec:	f7fa fd1a 	bl	8000a24 <PE_PRL_ResetReceived>
 8005ff0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08005ff4 <.text_44>:
 8005ff4:	080167a4 	.word	0x080167a4

08005ff8 <PRL_ResetCompleted>:
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	4a4a      	ldr	r2, [pc, #296]	; (8006124 <.text_55>)
 8005ffc:	0080      	lsls	r0, r0, #2
 8005ffe:	5810      	ldr	r0, [r2, r0]
 8006000:	70c1      	strb	r1, [r0, #3]
 8006002:	4770      	bx	lr

08006004 <.text_46>:
 8006004:	20000000 	.word	0x20000000

08006008 <.text_47>:
 8006008:	0000fedf 	.word	0x0000fedf

0800600c <.text_48>:
 800600c:	0000feff 	.word	0x0000feff

08006010 <.text_49>:
 8006010:	0000ff3f 	.word	0x0000ff3f

08006014 <PRL_BistCompleted>:
 8006014:	b580      	push	{r7, lr}
 8006016:	f7fa fd2f 	bl	8000a78 <PE_PRL_BistCompleted>
 800601a:	bd01      	pop	{r0, pc}

0800601c <PRL_TxCompleted>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	0004      	movs	r4, r0
 8006020:	4840      	ldr	r0, [pc, #256]	; (8006124 <.text_55>)
 8006022:	00a2      	lsls	r2, r4, #2
 8006024:	5886      	ldr	r6, [r0, r2]
 8006026:	2500      	movs	r5, #0
 8006028:	7c30      	ldrb	r0, [r6, #16]
 800602a:	2801      	cmp	r0, #1
 800602c:	d002      	beq.n	8006034 <PRL_TxCompleted+0x18>
 800602e:	2802      	cmp	r0, #2
 8006030:	d00b      	beq.n	800604a <PRL_TxCompleted+0x2e>
 8006032:	e016      	b.n	8006062 <PRL_TxCompleted+0x46>
 8006034:	2900      	cmp	r1, #0
 8006036:	d103      	bne.n	8006040 <PRL_TxCompleted+0x24>
 8006038:	0020      	movs	r0, r4
 800603a:	f7fa fe3b 	bl	8000cb4 <PE_PRL_PostReceiveEventComplete>
 800603e:	e002      	b.n	8006046 <PRL_TxCompleted+0x2a>
 8006040:	0020      	movs	r0, r4
 8006042:	f7fa fe05 	bl	8000c50 <PE_PRL_PostReceiveEventError>
 8006046:	72b5      	strb	r5, [r6, #10]
 8006048:	e00b      	b.n	8006062 <PRL_TxCompleted+0x46>
 800604a:	0020      	movs	r0, r4
 800604c:	f007 f838 	bl	800d0c0 <USBPD_PHY_GetRetryTimerValue>
 8006050:	2c00      	cmp	r4, #0
 8006052:	d101      	bne.n	8006058 <PRL_TxCompleted+0x3c>
 8006054:	2201      	movs	r2, #1
 8006056:	e000      	b.n	800605a <PRL_TxCompleted+0x3e>
 8006058:	2203      	movs	r2, #3
 800605a:	0001      	movs	r1, r0
 800605c:	0010      	movs	r0, r2
 800605e:	f008 fbbf 	bl	800e7e0 <USBPD_TIM_Start>
 8006062:	7435      	strb	r5, [r6, #16]
 8006064:	bd70      	pop	{r4, r5, r6, pc}
	...

08006068 <.text_52>:
 8006068:	0000f1ff 	.word	0x0000f1ff

0800606c <USBPD_PRL_PrepareExtendedTxChunkSending>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	4c2d      	ldr	r4, [pc, #180]	; (8006124 <.text_55>)
 8006070:	0080      	lsls	r0, r0, #2
 8006072:	5820      	ldr	r0, [r4, r0]
 8006074:	2480      	movs	r4, #128	; 0x80
 8006076:	0224      	lsls	r4, r4, #8
 8006078:	8b85      	ldrh	r5, [r0, #28]
 800607a:	4e2b      	ldr	r6, [pc, #172]	; (8006128 <.text_56>)
 800607c:	402e      	ands	r6, r5
 800607e:	02c9      	lsls	r1, r1, #11
 8006080:	4331      	orrs	r1, r6
 8006082:	25fe      	movs	r5, #254	; 0xfe
 8006084:	022d      	lsls	r5, r5, #8
 8006086:	400d      	ands	r5, r1
 8006088:	05d1      	lsls	r1, r2, #23
 800608a:	0dc9      	lsrs	r1, r1, #23
 800608c:	4329      	orrs	r1, r5
 800608e:	4321      	orrs	r1, r4
 8006090:	8381      	strh	r1, [r0, #28]
 8006092:	8a41      	ldrh	r1, [r0, #18]
 8006094:	430c      	orrs	r4, r1
 8006096:	8244      	strh	r4, [r0, #18]
 8006098:	4a24      	ldr	r2, [pc, #144]	; (800612c <.text_57>)
 800609a:	4022      	ands	r2, r4
 800609c:	2120      	movs	r1, #32
 800609e:	5c41      	ldrb	r1, [r0, r1]
 80060a0:	06c9      	lsls	r1, r1, #27
 80060a2:	0ec9      	lsrs	r1, r1, #27
 80060a4:	4311      	orrs	r1, r2
 80060a6:	8241      	strh	r1, [r0, #18]
 80060a8:	7019      	strb	r1, [r3, #0]
 80060aa:	8a41      	ldrh	r1, [r0, #18]
 80060ac:	0a09      	lsrs	r1, r1, #8
 80060ae:	7059      	strb	r1, [r3, #1]
 80060b0:	8b81      	ldrh	r1, [r0, #28]
 80060b2:	7099      	strb	r1, [r3, #2]
 80060b4:	8b80      	ldrh	r0, [r0, #28]
 80060b6:	0a00      	lsrs	r0, r0, #8
 80060b8:	70d8      	strb	r0, [r3, #3]
 80060ba:	bd70      	pop	{r4, r5, r6, pc}

080060bc <USBPD_PRL_PrepareChunkRequest>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	4a19      	ldr	r2, [pc, #100]	; (8006124 <.text_55>)
 80060c0:	0080      	lsls	r0, r0, #2
 80060c2:	5810      	ldr	r0, [r2, r0]
 80060c4:	8b83      	ldrh	r3, [r0, #28]
 80060c6:	2284      	movs	r2, #132	; 0x84
 80060c8:	0212      	lsls	r2, r2, #8
 80060ca:	431a      	orrs	r2, r3
 80060cc:	8382      	strh	r2, [r0, #28]
 80060ce:	2386      	movs	r3, #134	; 0x86
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	4013      	ands	r3, r2
 80060d4:	8bc2      	ldrh	r2, [r0, #30]
 80060d6:	0ad2      	lsrs	r2, r2, #11
 80060d8:	1c52      	adds	r2, r2, #1
 80060da:	02d2      	lsls	r2, r2, #11
 80060dc:	24f0      	movs	r4, #240	; 0xf0
 80060de:	01e4      	lsls	r4, r4, #7
 80060e0:	4014      	ands	r4, r2
 80060e2:	431c      	orrs	r4, r3
 80060e4:	8384      	strh	r4, [r0, #28]
 80060e6:	8a43      	ldrh	r3, [r0, #18]
 80060e8:	2280      	movs	r2, #128	; 0x80
 80060ea:	0212      	lsls	r2, r2, #8
 80060ec:	431a      	orrs	r2, r3
 80060ee:	0003      	movs	r3, r0
 80060f0:	3312      	adds	r3, #18
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	4c0d      	ldr	r4, [pc, #52]	; (800612c <.text_57>)
 80060f6:	4014      	ands	r4, r2
 80060f8:	2220      	movs	r2, #32
 80060fa:	5c82      	ldrb	r2, [r0, r2]
 80060fc:	06d2      	lsls	r2, r2, #27
 80060fe:	0ed2      	lsrs	r2, r2, #27
 8006100:	4322      	orrs	r2, r4
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	2200      	movs	r2, #0
 8006106:	7142      	strb	r2, [r0, #5]
 8006108:	8a43      	ldrh	r3, [r0, #18]
 800610a:	700b      	strb	r3, [r1, #0]
 800610c:	8a43      	ldrh	r3, [r0, #18]
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	704b      	strb	r3, [r1, #1]
 8006112:	8b83      	ldrh	r3, [r0, #28]
 8006114:	708b      	strb	r3, [r1, #2]
 8006116:	8b80      	ldrh	r0, [r0, #28]
 8006118:	0a00      	lsrs	r0, r0, #8
 800611a:	70c8      	strb	r0, [r1, #3]
 800611c:	710a      	strb	r2, [r1, #4]
 800611e:	714a      	strb	r2, [r1, #5]
 8006120:	bd10      	pop	{r4, pc}
	...

08006124 <.text_55>:
 8006124:	200001e8 	.word	0x200001e8

08006128 <.text_56>:
 8006128:	000083ff 	.word	0x000083ff

0800612c <.text_57>:
 800612c:	0000ffe0 	.word	0x0000ffe0

08006130 <strlen>:
 8006130:	2300      	movs	r3, #0
 8006132:	5cc2      	ldrb	r2, [r0, r3]
 8006134:	3301      	adds	r3, #1
 8006136:	2a00      	cmp	r2, #0
 8006138:	d1fb      	bne.n	8006132 <strlen+0x2>
 800613a:	1e58      	subs	r0, r3, #1
 800613c:	4770      	bx	lr
	...

08006140 <__gnu_thumb1_case_shi>:
 8006140:	b403      	push	{r0, r1}
 8006142:	4671      	mov	r1, lr
 8006144:	0849      	lsrs	r1, r1, #1
 8006146:	0040      	lsls	r0, r0, #1
 8006148:	0049      	lsls	r1, r1, #1
 800614a:	5e09      	ldrsh	r1, [r1, r0]
 800614c:	0049      	lsls	r1, r1, #1
 800614e:	448e      	add	lr, r1
 8006150:	bc03      	pop	{r0, r1}
 8006152:	4770      	bx	lr

08006154 <__udivsi3>:
 8006154:	2200      	movs	r2, #0
 8006156:	0843      	lsrs	r3, r0, #1
 8006158:	428b      	cmp	r3, r1
 800615a:	d374      	bcc.n	8006246 <__udivsi3+0xf2>
 800615c:	0903      	lsrs	r3, r0, #4
 800615e:	428b      	cmp	r3, r1
 8006160:	d35f      	bcc.n	8006222 <__udivsi3+0xce>
 8006162:	0a03      	lsrs	r3, r0, #8
 8006164:	428b      	cmp	r3, r1
 8006166:	d344      	bcc.n	80061f2 <__udivsi3+0x9e>
 8006168:	0b03      	lsrs	r3, r0, #12
 800616a:	428b      	cmp	r3, r1
 800616c:	d328      	bcc.n	80061c0 <__udivsi3+0x6c>
 800616e:	0c03      	lsrs	r3, r0, #16
 8006170:	428b      	cmp	r3, r1
 8006172:	d30d      	bcc.n	8006190 <__udivsi3+0x3c>
 8006174:	22ff      	movs	r2, #255	; 0xff
 8006176:	0209      	lsls	r1, r1, #8
 8006178:	ba12      	rev	r2, r2
 800617a:	0c03      	lsrs	r3, r0, #16
 800617c:	428b      	cmp	r3, r1
 800617e:	d302      	bcc.n	8006186 <__udivsi3+0x32>
 8006180:	1212      	asrs	r2, r2, #8
 8006182:	0209      	lsls	r1, r1, #8
 8006184:	d065      	beq.n	8006252 <__udivsi3+0xfe>
 8006186:	0b03      	lsrs	r3, r0, #12
 8006188:	428b      	cmp	r3, r1
 800618a:	d319      	bcc.n	80061c0 <__udivsi3+0x6c>
 800618c:	e000      	b.n	8006190 <__udivsi3+0x3c>
 800618e:	0a09      	lsrs	r1, r1, #8
 8006190:	0bc3      	lsrs	r3, r0, #15
 8006192:	428b      	cmp	r3, r1
 8006194:	d301      	bcc.n	800619a <__udivsi3+0x46>
 8006196:	03cb      	lsls	r3, r1, #15
 8006198:	1ac0      	subs	r0, r0, r3
 800619a:	4152      	adcs	r2, r2
 800619c:	0b83      	lsrs	r3, r0, #14
 800619e:	428b      	cmp	r3, r1
 80061a0:	d301      	bcc.n	80061a6 <__udivsi3+0x52>
 80061a2:	038b      	lsls	r3, r1, #14
 80061a4:	1ac0      	subs	r0, r0, r3
 80061a6:	4152      	adcs	r2, r2
 80061a8:	0b43      	lsrs	r3, r0, #13
 80061aa:	428b      	cmp	r3, r1
 80061ac:	d301      	bcc.n	80061b2 <__udivsi3+0x5e>
 80061ae:	034b      	lsls	r3, r1, #13
 80061b0:	1ac0      	subs	r0, r0, r3
 80061b2:	4152      	adcs	r2, r2
 80061b4:	0b03      	lsrs	r3, r0, #12
 80061b6:	428b      	cmp	r3, r1
 80061b8:	d301      	bcc.n	80061be <__udivsi3+0x6a>
 80061ba:	030b      	lsls	r3, r1, #12
 80061bc:	1ac0      	subs	r0, r0, r3
 80061be:	4152      	adcs	r2, r2
 80061c0:	0ac3      	lsrs	r3, r0, #11
 80061c2:	428b      	cmp	r3, r1
 80061c4:	d301      	bcc.n	80061ca <__udivsi3+0x76>
 80061c6:	02cb      	lsls	r3, r1, #11
 80061c8:	1ac0      	subs	r0, r0, r3
 80061ca:	4152      	adcs	r2, r2
 80061cc:	0a83      	lsrs	r3, r0, #10
 80061ce:	428b      	cmp	r3, r1
 80061d0:	d301      	bcc.n	80061d6 <__udivsi3+0x82>
 80061d2:	028b      	lsls	r3, r1, #10
 80061d4:	1ac0      	subs	r0, r0, r3
 80061d6:	4152      	adcs	r2, r2
 80061d8:	0a43      	lsrs	r3, r0, #9
 80061da:	428b      	cmp	r3, r1
 80061dc:	d301      	bcc.n	80061e2 <__udivsi3+0x8e>
 80061de:	024b      	lsls	r3, r1, #9
 80061e0:	1ac0      	subs	r0, r0, r3
 80061e2:	4152      	adcs	r2, r2
 80061e4:	0a03      	lsrs	r3, r0, #8
 80061e6:	428b      	cmp	r3, r1
 80061e8:	d301      	bcc.n	80061ee <__udivsi3+0x9a>
 80061ea:	020b      	lsls	r3, r1, #8
 80061ec:	1ac0      	subs	r0, r0, r3
 80061ee:	4152      	adcs	r2, r2
 80061f0:	d2cd      	bcs.n	800618e <__udivsi3+0x3a>
 80061f2:	09c3      	lsrs	r3, r0, #7
 80061f4:	428b      	cmp	r3, r1
 80061f6:	d301      	bcc.n	80061fc <__udivsi3+0xa8>
 80061f8:	01cb      	lsls	r3, r1, #7
 80061fa:	1ac0      	subs	r0, r0, r3
 80061fc:	4152      	adcs	r2, r2
 80061fe:	0983      	lsrs	r3, r0, #6
 8006200:	428b      	cmp	r3, r1
 8006202:	d301      	bcc.n	8006208 <__udivsi3+0xb4>
 8006204:	018b      	lsls	r3, r1, #6
 8006206:	1ac0      	subs	r0, r0, r3
 8006208:	4152      	adcs	r2, r2
 800620a:	0943      	lsrs	r3, r0, #5
 800620c:	428b      	cmp	r3, r1
 800620e:	d301      	bcc.n	8006214 <__udivsi3+0xc0>
 8006210:	014b      	lsls	r3, r1, #5
 8006212:	1ac0      	subs	r0, r0, r3
 8006214:	4152      	adcs	r2, r2
 8006216:	0903      	lsrs	r3, r0, #4
 8006218:	428b      	cmp	r3, r1
 800621a:	d301      	bcc.n	8006220 <__udivsi3+0xcc>
 800621c:	010b      	lsls	r3, r1, #4
 800621e:	1ac0      	subs	r0, r0, r3
 8006220:	4152      	adcs	r2, r2
 8006222:	08c3      	lsrs	r3, r0, #3
 8006224:	428b      	cmp	r3, r1
 8006226:	d301      	bcc.n	800622c <__udivsi3+0xd8>
 8006228:	00cb      	lsls	r3, r1, #3
 800622a:	1ac0      	subs	r0, r0, r3
 800622c:	4152      	adcs	r2, r2
 800622e:	0883      	lsrs	r3, r0, #2
 8006230:	428b      	cmp	r3, r1
 8006232:	d301      	bcc.n	8006238 <__udivsi3+0xe4>
 8006234:	008b      	lsls	r3, r1, #2
 8006236:	1ac0      	subs	r0, r0, r3
 8006238:	4152      	adcs	r2, r2
 800623a:	0843      	lsrs	r3, r0, #1
 800623c:	428b      	cmp	r3, r1
 800623e:	d301      	bcc.n	8006244 <__udivsi3+0xf0>
 8006240:	004b      	lsls	r3, r1, #1
 8006242:	1ac0      	subs	r0, r0, r3
 8006244:	4152      	adcs	r2, r2
 8006246:	1a41      	subs	r1, r0, r1
 8006248:	d200      	bcs.n	800624c <__udivsi3+0xf8>
 800624a:	4601      	mov	r1, r0
 800624c:	4152      	adcs	r2, r2
 800624e:	4610      	mov	r0, r2
 8006250:	4770      	bx	lr
 8006252:	e7ff      	b.n	8006254 <__udivsi3+0x100>
 8006254:	b501      	push	{r0, lr}
 8006256:	2000      	movs	r0, #0
 8006258:	f000 f8f0 	bl	800643c <__aeabi_idiv0>
 800625c:	bd02      	pop	{r1, pc}
 800625e:	46c0      	nop			; (mov r8, r8)

08006260 <__aeabi_uidivmod>:
 8006260:	2900      	cmp	r1, #0
 8006262:	d0f7      	beq.n	8006254 <__udivsi3+0x100>
 8006264:	e776      	b.n	8006154 <__udivsi3>
 8006266:	4770      	bx	lr

08006268 <__divsi3>:
 8006268:	4603      	mov	r3, r0
 800626a:	430b      	orrs	r3, r1
 800626c:	d47f      	bmi.n	800636e <__divsi3+0x106>
 800626e:	2200      	movs	r2, #0
 8006270:	0843      	lsrs	r3, r0, #1
 8006272:	428b      	cmp	r3, r1
 8006274:	d374      	bcc.n	8006360 <__divsi3+0xf8>
 8006276:	0903      	lsrs	r3, r0, #4
 8006278:	428b      	cmp	r3, r1
 800627a:	d35f      	bcc.n	800633c <__divsi3+0xd4>
 800627c:	0a03      	lsrs	r3, r0, #8
 800627e:	428b      	cmp	r3, r1
 8006280:	d344      	bcc.n	800630c <__divsi3+0xa4>
 8006282:	0b03      	lsrs	r3, r0, #12
 8006284:	428b      	cmp	r3, r1
 8006286:	d328      	bcc.n	80062da <__divsi3+0x72>
 8006288:	0c03      	lsrs	r3, r0, #16
 800628a:	428b      	cmp	r3, r1
 800628c:	d30d      	bcc.n	80062aa <__divsi3+0x42>
 800628e:	22ff      	movs	r2, #255	; 0xff
 8006290:	0209      	lsls	r1, r1, #8
 8006292:	ba12      	rev	r2, r2
 8006294:	0c03      	lsrs	r3, r0, #16
 8006296:	428b      	cmp	r3, r1
 8006298:	d302      	bcc.n	80062a0 <__divsi3+0x38>
 800629a:	1212      	asrs	r2, r2, #8
 800629c:	0209      	lsls	r1, r1, #8
 800629e:	d065      	beq.n	800636c <__divsi3+0x104>
 80062a0:	0b03      	lsrs	r3, r0, #12
 80062a2:	428b      	cmp	r3, r1
 80062a4:	d319      	bcc.n	80062da <__divsi3+0x72>
 80062a6:	e000      	b.n	80062aa <__divsi3+0x42>
 80062a8:	0a09      	lsrs	r1, r1, #8
 80062aa:	0bc3      	lsrs	r3, r0, #15
 80062ac:	428b      	cmp	r3, r1
 80062ae:	d301      	bcc.n	80062b4 <__divsi3+0x4c>
 80062b0:	03cb      	lsls	r3, r1, #15
 80062b2:	1ac0      	subs	r0, r0, r3
 80062b4:	4152      	adcs	r2, r2
 80062b6:	0b83      	lsrs	r3, r0, #14
 80062b8:	428b      	cmp	r3, r1
 80062ba:	d301      	bcc.n	80062c0 <__divsi3+0x58>
 80062bc:	038b      	lsls	r3, r1, #14
 80062be:	1ac0      	subs	r0, r0, r3
 80062c0:	4152      	adcs	r2, r2
 80062c2:	0b43      	lsrs	r3, r0, #13
 80062c4:	428b      	cmp	r3, r1
 80062c6:	d301      	bcc.n	80062cc <__divsi3+0x64>
 80062c8:	034b      	lsls	r3, r1, #13
 80062ca:	1ac0      	subs	r0, r0, r3
 80062cc:	4152      	adcs	r2, r2
 80062ce:	0b03      	lsrs	r3, r0, #12
 80062d0:	428b      	cmp	r3, r1
 80062d2:	d301      	bcc.n	80062d8 <__divsi3+0x70>
 80062d4:	030b      	lsls	r3, r1, #12
 80062d6:	1ac0      	subs	r0, r0, r3
 80062d8:	4152      	adcs	r2, r2
 80062da:	0ac3      	lsrs	r3, r0, #11
 80062dc:	428b      	cmp	r3, r1
 80062de:	d301      	bcc.n	80062e4 <__divsi3+0x7c>
 80062e0:	02cb      	lsls	r3, r1, #11
 80062e2:	1ac0      	subs	r0, r0, r3
 80062e4:	4152      	adcs	r2, r2
 80062e6:	0a83      	lsrs	r3, r0, #10
 80062e8:	428b      	cmp	r3, r1
 80062ea:	d301      	bcc.n	80062f0 <__divsi3+0x88>
 80062ec:	028b      	lsls	r3, r1, #10
 80062ee:	1ac0      	subs	r0, r0, r3
 80062f0:	4152      	adcs	r2, r2
 80062f2:	0a43      	lsrs	r3, r0, #9
 80062f4:	428b      	cmp	r3, r1
 80062f6:	d301      	bcc.n	80062fc <__divsi3+0x94>
 80062f8:	024b      	lsls	r3, r1, #9
 80062fa:	1ac0      	subs	r0, r0, r3
 80062fc:	4152      	adcs	r2, r2
 80062fe:	0a03      	lsrs	r3, r0, #8
 8006300:	428b      	cmp	r3, r1
 8006302:	d301      	bcc.n	8006308 <__divsi3+0xa0>
 8006304:	020b      	lsls	r3, r1, #8
 8006306:	1ac0      	subs	r0, r0, r3
 8006308:	4152      	adcs	r2, r2
 800630a:	d2cd      	bcs.n	80062a8 <__divsi3+0x40>
 800630c:	09c3      	lsrs	r3, r0, #7
 800630e:	428b      	cmp	r3, r1
 8006310:	d301      	bcc.n	8006316 <__divsi3+0xae>
 8006312:	01cb      	lsls	r3, r1, #7
 8006314:	1ac0      	subs	r0, r0, r3
 8006316:	4152      	adcs	r2, r2
 8006318:	0983      	lsrs	r3, r0, #6
 800631a:	428b      	cmp	r3, r1
 800631c:	d301      	bcc.n	8006322 <__divsi3+0xba>
 800631e:	018b      	lsls	r3, r1, #6
 8006320:	1ac0      	subs	r0, r0, r3
 8006322:	4152      	adcs	r2, r2
 8006324:	0943      	lsrs	r3, r0, #5
 8006326:	428b      	cmp	r3, r1
 8006328:	d301      	bcc.n	800632e <__divsi3+0xc6>
 800632a:	014b      	lsls	r3, r1, #5
 800632c:	1ac0      	subs	r0, r0, r3
 800632e:	4152      	adcs	r2, r2
 8006330:	0903      	lsrs	r3, r0, #4
 8006332:	428b      	cmp	r3, r1
 8006334:	d301      	bcc.n	800633a <__divsi3+0xd2>
 8006336:	010b      	lsls	r3, r1, #4
 8006338:	1ac0      	subs	r0, r0, r3
 800633a:	4152      	adcs	r2, r2
 800633c:	08c3      	lsrs	r3, r0, #3
 800633e:	428b      	cmp	r3, r1
 8006340:	d301      	bcc.n	8006346 <__divsi3+0xde>
 8006342:	00cb      	lsls	r3, r1, #3
 8006344:	1ac0      	subs	r0, r0, r3
 8006346:	4152      	adcs	r2, r2
 8006348:	0883      	lsrs	r3, r0, #2
 800634a:	428b      	cmp	r3, r1
 800634c:	d301      	bcc.n	8006352 <__divsi3+0xea>
 800634e:	008b      	lsls	r3, r1, #2
 8006350:	1ac0      	subs	r0, r0, r3
 8006352:	4152      	adcs	r2, r2
 8006354:	0843      	lsrs	r3, r0, #1
 8006356:	428b      	cmp	r3, r1
 8006358:	d301      	bcc.n	800635e <__divsi3+0xf6>
 800635a:	004b      	lsls	r3, r1, #1
 800635c:	1ac0      	subs	r0, r0, r3
 800635e:	4152      	adcs	r2, r2
 8006360:	1a41      	subs	r1, r0, r1
 8006362:	d200      	bcs.n	8006366 <__divsi3+0xfe>
 8006364:	4601      	mov	r1, r0
 8006366:	4152      	adcs	r2, r2
 8006368:	4610      	mov	r0, r2
 800636a:	4770      	bx	lr
 800636c:	e05d      	b.n	800642a <__divsi3+0x1c2>
 800636e:	0fca      	lsrs	r2, r1, #31
 8006370:	d000      	beq.n	8006374 <__divsi3+0x10c>
 8006372:	4249      	negs	r1, r1
 8006374:	1003      	asrs	r3, r0, #32
 8006376:	d300      	bcc.n	800637a <__divsi3+0x112>
 8006378:	4240      	negs	r0, r0
 800637a:	4053      	eors	r3, r2
 800637c:	2200      	movs	r2, #0
 800637e:	469c      	mov	ip, r3
 8006380:	0903      	lsrs	r3, r0, #4
 8006382:	428b      	cmp	r3, r1
 8006384:	d32d      	bcc.n	80063e2 <__divsi3+0x17a>
 8006386:	0a03      	lsrs	r3, r0, #8
 8006388:	428b      	cmp	r3, r1
 800638a:	d312      	bcc.n	80063b2 <__divsi3+0x14a>
 800638c:	22fc      	movs	r2, #252	; 0xfc
 800638e:	0189      	lsls	r1, r1, #6
 8006390:	ba12      	rev	r2, r2
 8006392:	0a03      	lsrs	r3, r0, #8
 8006394:	428b      	cmp	r3, r1
 8006396:	d30c      	bcc.n	80063b2 <__divsi3+0x14a>
 8006398:	0189      	lsls	r1, r1, #6
 800639a:	1192      	asrs	r2, r2, #6
 800639c:	428b      	cmp	r3, r1
 800639e:	d308      	bcc.n	80063b2 <__divsi3+0x14a>
 80063a0:	0189      	lsls	r1, r1, #6
 80063a2:	1192      	asrs	r2, r2, #6
 80063a4:	428b      	cmp	r3, r1
 80063a6:	d304      	bcc.n	80063b2 <__divsi3+0x14a>
 80063a8:	0189      	lsls	r1, r1, #6
 80063aa:	d03a      	beq.n	8006422 <__divsi3+0x1ba>
 80063ac:	1192      	asrs	r2, r2, #6
 80063ae:	e000      	b.n	80063b2 <__divsi3+0x14a>
 80063b0:	0989      	lsrs	r1, r1, #6
 80063b2:	09c3      	lsrs	r3, r0, #7
 80063b4:	428b      	cmp	r3, r1
 80063b6:	d301      	bcc.n	80063bc <__divsi3+0x154>
 80063b8:	01cb      	lsls	r3, r1, #7
 80063ba:	1ac0      	subs	r0, r0, r3
 80063bc:	4152      	adcs	r2, r2
 80063be:	0983      	lsrs	r3, r0, #6
 80063c0:	428b      	cmp	r3, r1
 80063c2:	d301      	bcc.n	80063c8 <__divsi3+0x160>
 80063c4:	018b      	lsls	r3, r1, #6
 80063c6:	1ac0      	subs	r0, r0, r3
 80063c8:	4152      	adcs	r2, r2
 80063ca:	0943      	lsrs	r3, r0, #5
 80063cc:	428b      	cmp	r3, r1
 80063ce:	d301      	bcc.n	80063d4 <__divsi3+0x16c>
 80063d0:	014b      	lsls	r3, r1, #5
 80063d2:	1ac0      	subs	r0, r0, r3
 80063d4:	4152      	adcs	r2, r2
 80063d6:	0903      	lsrs	r3, r0, #4
 80063d8:	428b      	cmp	r3, r1
 80063da:	d301      	bcc.n	80063e0 <__divsi3+0x178>
 80063dc:	010b      	lsls	r3, r1, #4
 80063de:	1ac0      	subs	r0, r0, r3
 80063e0:	4152      	adcs	r2, r2
 80063e2:	08c3      	lsrs	r3, r0, #3
 80063e4:	428b      	cmp	r3, r1
 80063e6:	d301      	bcc.n	80063ec <__divsi3+0x184>
 80063e8:	00cb      	lsls	r3, r1, #3
 80063ea:	1ac0      	subs	r0, r0, r3
 80063ec:	4152      	adcs	r2, r2
 80063ee:	0883      	lsrs	r3, r0, #2
 80063f0:	428b      	cmp	r3, r1
 80063f2:	d301      	bcc.n	80063f8 <__divsi3+0x190>
 80063f4:	008b      	lsls	r3, r1, #2
 80063f6:	1ac0      	subs	r0, r0, r3
 80063f8:	4152      	adcs	r2, r2
 80063fa:	d2d9      	bcs.n	80063b0 <__divsi3+0x148>
 80063fc:	0843      	lsrs	r3, r0, #1
 80063fe:	428b      	cmp	r3, r1
 8006400:	d301      	bcc.n	8006406 <__divsi3+0x19e>
 8006402:	004b      	lsls	r3, r1, #1
 8006404:	1ac0      	subs	r0, r0, r3
 8006406:	4152      	adcs	r2, r2
 8006408:	1a41      	subs	r1, r0, r1
 800640a:	d200      	bcs.n	800640e <__divsi3+0x1a6>
 800640c:	4601      	mov	r1, r0
 800640e:	4663      	mov	r3, ip
 8006410:	4152      	adcs	r2, r2
 8006412:	105b      	asrs	r3, r3, #1
 8006414:	4610      	mov	r0, r2
 8006416:	d301      	bcc.n	800641c <__divsi3+0x1b4>
 8006418:	4240      	negs	r0, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d500      	bpl.n	8006420 <__divsi3+0x1b8>
 800641e:	4249      	negs	r1, r1
 8006420:	4770      	bx	lr
 8006422:	4663      	mov	r3, ip
 8006424:	105b      	asrs	r3, r3, #1
 8006426:	d300      	bcc.n	800642a <__divsi3+0x1c2>
 8006428:	4240      	negs	r0, r0
 800642a:	b501      	push	{r0, lr}
 800642c:	2000      	movs	r0, #0
 800642e:	f000 f805 	bl	800643c <__aeabi_idiv0>
 8006432:	bd02      	pop	{r1, pc}

08006434 <__aeabi_idivmod>:
 8006434:	2900      	cmp	r1, #0
 8006436:	d0f8      	beq.n	800642a <__divsi3+0x1c2>
 8006438:	e716      	b.n	8006268 <__divsi3>
 800643a:	4770      	bx	lr

0800643c <__aeabi_idiv0>:
 800643c:	4770      	bx	lr
 800643e:	46c0      	nop			; (mov r8, r8)

08006440 <__aeabi_uldivmod>:
 8006440:	2b00      	cmp	r3, #0
 8006442:	d111      	bne.n	8006468 <__aeabi_uldivmod+0x28>
 8006444:	2a00      	cmp	r2, #0
 8006446:	d10f      	bne.n	8006468 <__aeabi_uldivmod+0x28>
 8006448:	2900      	cmp	r1, #0
 800644a:	d100      	bne.n	800644e <__aeabi_uldivmod+0xe>
 800644c:	2800      	cmp	r0, #0
 800644e:	d002      	beq.n	8006456 <__aeabi_uldivmod+0x16>
 8006450:	2100      	movs	r1, #0
 8006452:	43c9      	mvns	r1, r1
 8006454:	1c08      	adds	r0, r1, #0
 8006456:	b407      	push	{r0, r1, r2}
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <__aeabi_uldivmod+0x24>)
 800645a:	a102      	add	r1, pc, #8	; (adr r1, 8006464 <__aeabi_uldivmod+0x24>)
 800645c:	1840      	adds	r0, r0, r1
 800645e:	9002      	str	r0, [sp, #8]
 8006460:	bd03      	pop	{r0, r1, pc}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	ffffffd9 	.word	0xffffffd9
 8006468:	b403      	push	{r0, r1}
 800646a:	4668      	mov	r0, sp
 800646c:	b501      	push	{r0, lr}
 800646e:	9802      	ldr	r0, [sp, #8]
 8006470:	f000 f806 	bl	8006480 <__udivmoddi4>
 8006474:	9b01      	ldr	r3, [sp, #4]
 8006476:	469e      	mov	lr, r3
 8006478:	b002      	add	sp, #8
 800647a:	bc0c      	pop	{r2, r3}
 800647c:	4770      	bx	lr
 800647e:	46c0      	nop			; (mov r8, r8)

08006480 <__udivmoddi4>:
 8006480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006482:	4657      	mov	r7, sl
 8006484:	464e      	mov	r6, r9
 8006486:	4645      	mov	r5, r8
 8006488:	46de      	mov	lr, fp
 800648a:	b5e0      	push	{r5, r6, r7, lr}
 800648c:	0004      	movs	r4, r0
 800648e:	000d      	movs	r5, r1
 8006490:	4692      	mov	sl, r2
 8006492:	4699      	mov	r9, r3
 8006494:	b083      	sub	sp, #12
 8006496:	428b      	cmp	r3, r1
 8006498:	d830      	bhi.n	80064fc <__udivmoddi4+0x7c>
 800649a:	d02d      	beq.n	80064f8 <__udivmoddi4+0x78>
 800649c:	4649      	mov	r1, r9
 800649e:	4650      	mov	r0, sl
 80064a0:	f000 f8ba 	bl	8006618 <__clzdi2>
 80064a4:	0029      	movs	r1, r5
 80064a6:	0006      	movs	r6, r0
 80064a8:	0020      	movs	r0, r4
 80064aa:	f000 f8b5 	bl	8006618 <__clzdi2>
 80064ae:	1a33      	subs	r3, r6, r0
 80064b0:	4698      	mov	r8, r3
 80064b2:	3b20      	subs	r3, #32
 80064b4:	469b      	mov	fp, r3
 80064b6:	d433      	bmi.n	8006520 <__udivmoddi4+0xa0>
 80064b8:	465a      	mov	r2, fp
 80064ba:	4653      	mov	r3, sl
 80064bc:	4093      	lsls	r3, r2
 80064be:	4642      	mov	r2, r8
 80064c0:	001f      	movs	r7, r3
 80064c2:	4653      	mov	r3, sl
 80064c4:	4093      	lsls	r3, r2
 80064c6:	001e      	movs	r6, r3
 80064c8:	42af      	cmp	r7, r5
 80064ca:	d83a      	bhi.n	8006542 <__udivmoddi4+0xc2>
 80064cc:	42af      	cmp	r7, r5
 80064ce:	d100      	bne.n	80064d2 <__udivmoddi4+0x52>
 80064d0:	e078      	b.n	80065c4 <__udivmoddi4+0x144>
 80064d2:	465b      	mov	r3, fp
 80064d4:	1ba4      	subs	r4, r4, r6
 80064d6:	41bd      	sbcs	r5, r7
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da00      	bge.n	80064de <__udivmoddi4+0x5e>
 80064dc:	e075      	b.n	80065ca <__udivmoddi4+0x14a>
 80064de:	2200      	movs	r2, #0
 80064e0:	2300      	movs	r3, #0
 80064e2:	9200      	str	r2, [sp, #0]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	2301      	movs	r3, #1
 80064e8:	465a      	mov	r2, fp
 80064ea:	4093      	lsls	r3, r2
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	2301      	movs	r3, #1
 80064f0:	4642      	mov	r2, r8
 80064f2:	4093      	lsls	r3, r2
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	e028      	b.n	800654a <__udivmoddi4+0xca>
 80064f8:	4282      	cmp	r2, r0
 80064fa:	d9cf      	bls.n	800649c <__udivmoddi4+0x1c>
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	9200      	str	r2, [sp, #0]
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <__udivmoddi4+0x8e>
 800650a:	601c      	str	r4, [r3, #0]
 800650c:	605d      	str	r5, [r3, #4]
 800650e:	9800      	ldr	r0, [sp, #0]
 8006510:	9901      	ldr	r1, [sp, #4]
 8006512:	b003      	add	sp, #12
 8006514:	bcf0      	pop	{r4, r5, r6, r7}
 8006516:	46bb      	mov	fp, r7
 8006518:	46b2      	mov	sl, r6
 800651a:	46a9      	mov	r9, r5
 800651c:	46a0      	mov	r8, r4
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006520:	4642      	mov	r2, r8
 8006522:	2320      	movs	r3, #32
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	4652      	mov	r2, sl
 8006528:	40da      	lsrs	r2, r3
 800652a:	4641      	mov	r1, r8
 800652c:	0013      	movs	r3, r2
 800652e:	464a      	mov	r2, r9
 8006530:	408a      	lsls	r2, r1
 8006532:	0017      	movs	r7, r2
 8006534:	4642      	mov	r2, r8
 8006536:	431f      	orrs	r7, r3
 8006538:	4653      	mov	r3, sl
 800653a:	4093      	lsls	r3, r2
 800653c:	001e      	movs	r6, r3
 800653e:	42af      	cmp	r7, r5
 8006540:	d9c4      	bls.n	80064cc <__udivmoddi4+0x4c>
 8006542:	2200      	movs	r2, #0
 8006544:	2300      	movs	r3, #0
 8006546:	9200      	str	r2, [sp, #0]
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	4643      	mov	r3, r8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0d9      	beq.n	8006504 <__udivmoddi4+0x84>
 8006550:	07fb      	lsls	r3, r7, #31
 8006552:	0872      	lsrs	r2, r6, #1
 8006554:	431a      	orrs	r2, r3
 8006556:	4646      	mov	r6, r8
 8006558:	087b      	lsrs	r3, r7, #1
 800655a:	e00e      	b.n	800657a <__udivmoddi4+0xfa>
 800655c:	42ab      	cmp	r3, r5
 800655e:	d101      	bne.n	8006564 <__udivmoddi4+0xe4>
 8006560:	42a2      	cmp	r2, r4
 8006562:	d80c      	bhi.n	800657e <__udivmoddi4+0xfe>
 8006564:	1aa4      	subs	r4, r4, r2
 8006566:	419d      	sbcs	r5, r3
 8006568:	2001      	movs	r0, #1
 800656a:	1924      	adds	r4, r4, r4
 800656c:	416d      	adcs	r5, r5
 800656e:	2100      	movs	r1, #0
 8006570:	3e01      	subs	r6, #1
 8006572:	1824      	adds	r4, r4, r0
 8006574:	414d      	adcs	r5, r1
 8006576:	2e00      	cmp	r6, #0
 8006578:	d006      	beq.n	8006588 <__udivmoddi4+0x108>
 800657a:	42ab      	cmp	r3, r5
 800657c:	d9ee      	bls.n	800655c <__udivmoddi4+0xdc>
 800657e:	3e01      	subs	r6, #1
 8006580:	1924      	adds	r4, r4, r4
 8006582:	416d      	adcs	r5, r5
 8006584:	2e00      	cmp	r6, #0
 8006586:	d1f8      	bne.n	800657a <__udivmoddi4+0xfa>
 8006588:	9800      	ldr	r0, [sp, #0]
 800658a:	9901      	ldr	r1, [sp, #4]
 800658c:	465b      	mov	r3, fp
 800658e:	1900      	adds	r0, r0, r4
 8006590:	4169      	adcs	r1, r5
 8006592:	2b00      	cmp	r3, #0
 8006594:	db24      	blt.n	80065e0 <__udivmoddi4+0x160>
 8006596:	002b      	movs	r3, r5
 8006598:	465a      	mov	r2, fp
 800659a:	4644      	mov	r4, r8
 800659c:	40d3      	lsrs	r3, r2
 800659e:	002a      	movs	r2, r5
 80065a0:	40e2      	lsrs	r2, r4
 80065a2:	001c      	movs	r4, r3
 80065a4:	465b      	mov	r3, fp
 80065a6:	0015      	movs	r5, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	db2a      	blt.n	8006602 <__udivmoddi4+0x182>
 80065ac:	0026      	movs	r6, r4
 80065ae:	409e      	lsls	r6, r3
 80065b0:	0033      	movs	r3, r6
 80065b2:	0026      	movs	r6, r4
 80065b4:	4647      	mov	r7, r8
 80065b6:	40be      	lsls	r6, r7
 80065b8:	0032      	movs	r2, r6
 80065ba:	1a80      	subs	r0, r0, r2
 80065bc:	4199      	sbcs	r1, r3
 80065be:	9000      	str	r0, [sp, #0]
 80065c0:	9101      	str	r1, [sp, #4]
 80065c2:	e79f      	b.n	8006504 <__udivmoddi4+0x84>
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d8bc      	bhi.n	8006542 <__udivmoddi4+0xc2>
 80065c8:	e783      	b.n	80064d2 <__udivmoddi4+0x52>
 80065ca:	4642      	mov	r2, r8
 80065cc:	2320      	movs	r3, #32
 80065ce:	2100      	movs	r1, #0
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	2200      	movs	r2, #0
 80065d4:	9100      	str	r1, [sp, #0]
 80065d6:	9201      	str	r2, [sp, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	40da      	lsrs	r2, r3
 80065dc:	9201      	str	r2, [sp, #4]
 80065de:	e786      	b.n	80064ee <__udivmoddi4+0x6e>
 80065e0:	4642      	mov	r2, r8
 80065e2:	2320      	movs	r3, #32
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	002a      	movs	r2, r5
 80065e8:	4646      	mov	r6, r8
 80065ea:	409a      	lsls	r2, r3
 80065ec:	0023      	movs	r3, r4
 80065ee:	40f3      	lsrs	r3, r6
 80065f0:	4644      	mov	r4, r8
 80065f2:	4313      	orrs	r3, r2
 80065f4:	002a      	movs	r2, r5
 80065f6:	40e2      	lsrs	r2, r4
 80065f8:	001c      	movs	r4, r3
 80065fa:	465b      	mov	r3, fp
 80065fc:	0015      	movs	r5, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dad4      	bge.n	80065ac <__udivmoddi4+0x12c>
 8006602:	4642      	mov	r2, r8
 8006604:	002f      	movs	r7, r5
 8006606:	2320      	movs	r3, #32
 8006608:	0026      	movs	r6, r4
 800660a:	4097      	lsls	r7, r2
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	40de      	lsrs	r6, r3
 8006610:	003b      	movs	r3, r7
 8006612:	4333      	orrs	r3, r6
 8006614:	e7cd      	b.n	80065b2 <__udivmoddi4+0x132>
 8006616:	46c0      	nop			; (mov r8, r8)

08006618 <__clzdi2>:
 8006618:	b510      	push	{r4, lr}
 800661a:	2900      	cmp	r1, #0
 800661c:	d103      	bne.n	8006626 <__clzdi2+0xe>
 800661e:	f000 f807 	bl	8006630 <__clzsi2>
 8006622:	3020      	adds	r0, #32
 8006624:	e002      	b.n	800662c <__clzdi2+0x14>
 8006626:	1c08      	adds	r0, r1, #0
 8006628:	f000 f802 	bl	8006630 <__clzsi2>
 800662c:	bd10      	pop	{r4, pc}
 800662e:	46c0      	nop			; (mov r8, r8)

08006630 <__clzsi2>:
 8006630:	211c      	movs	r1, #28
 8006632:	2301      	movs	r3, #1
 8006634:	041b      	lsls	r3, r3, #16
 8006636:	4298      	cmp	r0, r3
 8006638:	d301      	bcc.n	800663e <__clzsi2+0xe>
 800663a:	0c00      	lsrs	r0, r0, #16
 800663c:	3910      	subs	r1, #16
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	4298      	cmp	r0, r3
 8006642:	d301      	bcc.n	8006648 <__clzsi2+0x18>
 8006644:	0a00      	lsrs	r0, r0, #8
 8006646:	3908      	subs	r1, #8
 8006648:	091b      	lsrs	r3, r3, #4
 800664a:	4298      	cmp	r0, r3
 800664c:	d301      	bcc.n	8006652 <__clzsi2+0x22>
 800664e:	0900      	lsrs	r0, r0, #4
 8006650:	3904      	subs	r1, #4
 8006652:	a202      	add	r2, pc, #8	; (adr r2, 800665c <__clzsi2+0x2c>)
 8006654:	5c10      	ldrb	r0, [r2, r0]
 8006656:	1840      	adds	r0, r0, r1
 8006658:	4770      	bx	lr
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	02020304 	.word	0x02020304
 8006660:	01010101 	.word	0x01010101
	...

0800666c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	0002      	movs	r2, r0
 8006674:	1dfb      	adds	r3, r7, #7
 8006676:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006678:	1dfb      	adds	r3, r7, #7
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b7f      	cmp	r3, #127	; 0x7f
 800667e:	d809      	bhi.n	8006694 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006680:	1dfb      	adds	r3, r7, #7
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	001a      	movs	r2, r3
 8006686:	231f      	movs	r3, #31
 8006688:	401a      	ands	r2, r3
 800668a:	4b04      	ldr	r3, [pc, #16]	; (800669c <__NVIC_EnableIRQ+0x30>)
 800668c:	2101      	movs	r1, #1
 800668e:	4091      	lsls	r1, r2
 8006690:	000a      	movs	r2, r1
 8006692:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}
 800669c:	e000e100 	.word	0xe000e100

080066a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066a0:	b590      	push	{r4, r7, lr}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	0002      	movs	r2, r0
 80066a8:	6039      	str	r1, [r7, #0]
 80066aa:	1dfb      	adds	r3, r7, #7
 80066ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066ae:	1dfb      	adds	r3, r7, #7
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b7f      	cmp	r3, #127	; 0x7f
 80066b4:	d828      	bhi.n	8006708 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066b6:	4a2f      	ldr	r2, [pc, #188]	; (8006774 <__NVIC_SetPriority+0xd4>)
 80066b8:	1dfb      	adds	r3, r7, #7
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	b25b      	sxtb	r3, r3
 80066be:	089b      	lsrs	r3, r3, #2
 80066c0:	33c0      	adds	r3, #192	; 0xc0
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	589b      	ldr	r3, [r3, r2]
 80066c6:	1dfa      	adds	r2, r7, #7
 80066c8:	7812      	ldrb	r2, [r2, #0]
 80066ca:	0011      	movs	r1, r2
 80066cc:	2203      	movs	r2, #3
 80066ce:	400a      	ands	r2, r1
 80066d0:	00d2      	lsls	r2, r2, #3
 80066d2:	21ff      	movs	r1, #255	; 0xff
 80066d4:	4091      	lsls	r1, r2
 80066d6:	000a      	movs	r2, r1
 80066d8:	43d2      	mvns	r2, r2
 80066da:	401a      	ands	r2, r3
 80066dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	22ff      	movs	r2, #255	; 0xff
 80066e4:	401a      	ands	r2, r3
 80066e6:	1dfb      	adds	r3, r7, #7
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	0018      	movs	r0, r3
 80066ec:	2303      	movs	r3, #3
 80066ee:	4003      	ands	r3, r0
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066f4:	481f      	ldr	r0, [pc, #124]	; (8006774 <__NVIC_SetPriority+0xd4>)
 80066f6:	1dfb      	adds	r3, r7, #7
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	b25b      	sxtb	r3, r3
 80066fc:	089b      	lsrs	r3, r3, #2
 80066fe:	430a      	orrs	r2, r1
 8006700:	33c0      	adds	r3, #192	; 0xc0
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006706:	e031      	b.n	800676c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006708:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <__NVIC_SetPriority+0xd8>)
 800670a:	1dfb      	adds	r3, r7, #7
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	0019      	movs	r1, r3
 8006710:	230f      	movs	r3, #15
 8006712:	400b      	ands	r3, r1
 8006714:	3b08      	subs	r3, #8
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	3306      	adds	r3, #6
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	18d3      	adds	r3, r2, r3
 800671e:	3304      	adds	r3, #4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	1dfa      	adds	r2, r7, #7
 8006724:	7812      	ldrb	r2, [r2, #0]
 8006726:	0011      	movs	r1, r2
 8006728:	2203      	movs	r2, #3
 800672a:	400a      	ands	r2, r1
 800672c:	00d2      	lsls	r2, r2, #3
 800672e:	21ff      	movs	r1, #255	; 0xff
 8006730:	4091      	lsls	r1, r2
 8006732:	000a      	movs	r2, r1
 8006734:	43d2      	mvns	r2, r2
 8006736:	401a      	ands	r2, r3
 8006738:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	019b      	lsls	r3, r3, #6
 800673e:	22ff      	movs	r2, #255	; 0xff
 8006740:	401a      	ands	r2, r3
 8006742:	1dfb      	adds	r3, r7, #7
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	0018      	movs	r0, r3
 8006748:	2303      	movs	r3, #3
 800674a:	4003      	ands	r3, r0
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006750:	4809      	ldr	r0, [pc, #36]	; (8006778 <__NVIC_SetPriority+0xd8>)
 8006752:	1dfb      	adds	r3, r7, #7
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	001c      	movs	r4, r3
 8006758:	230f      	movs	r3, #15
 800675a:	4023      	ands	r3, r4
 800675c:	3b08      	subs	r3, #8
 800675e:	089b      	lsrs	r3, r3, #2
 8006760:	430a      	orrs	r2, r1
 8006762:	3306      	adds	r3, #6
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	18c3      	adds	r3, r0, r3
 8006768:	3304      	adds	r3, #4
 800676a:	601a      	str	r2, [r3, #0]
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	46bd      	mov	sp, r7
 8006770:	b003      	add	sp, #12
 8006772:	bd90      	pop	{r4, r7, pc}
 8006774:	e000e100 	.word	0xe000e100
 8006778:	e000ed00 	.word	0xe000ed00

0800677c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800678c:	4a0c      	ldr	r2, [pc, #48]	; (80067c0 <LL_DMA_SetDataTransferDirection+0x44>)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	18d3      	adds	r3, r2, r3
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	001a      	movs	r2, r3
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	18d3      	adds	r3, r2, r3
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a09      	ldr	r2, [pc, #36]	; (80067c4 <LL_DMA_SetDataTransferDirection+0x48>)
 800679e:	4013      	ands	r3, r2
 80067a0:	0019      	movs	r1, r3
 80067a2:	4a07      	ldr	r2, [pc, #28]	; (80067c0 <LL_DMA_SetDataTransferDirection+0x44>)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	18d3      	adds	r3, r2, r3
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	001a      	movs	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	18d3      	adds	r3, r2, r3
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b006      	add	sp, #24
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	080167a8 	.word	0x080167a8
 80067c4:	ffffbfef 	.word	0xffffbfef

080067c8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80067d8:	4a0c      	ldr	r2, [pc, #48]	; (800680c <LL_DMA_SetMode+0x44>)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	18d3      	adds	r3, r2, r3
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	001a      	movs	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	18d3      	adds	r3, r2, r3
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2220      	movs	r2, #32
 80067ea:	4393      	bics	r3, r2
 80067ec:	0019      	movs	r1, r3
 80067ee:	4a07      	ldr	r2, [pc, #28]	; (800680c <LL_DMA_SetMode+0x44>)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	18d3      	adds	r3, r2, r3
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	001a      	movs	r2, r3
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	18d3      	adds	r3, r2, r3
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	430a      	orrs	r2, r1
 8006800:	601a      	str	r2, [r3, #0]
             Mode);
}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	46bd      	mov	sp, r7
 8006806:	b006      	add	sp, #24
 8006808:	bd80      	pop	{r7, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	080167a8 	.word	0x080167a8

08006810 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8006820:	4a0c      	ldr	r2, [pc, #48]	; (8006854 <LL_DMA_SetPeriphIncMode+0x44>)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	18d3      	adds	r3, r2, r3
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	001a      	movs	r2, r3
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	18d3      	adds	r3, r2, r3
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2240      	movs	r2, #64	; 0x40
 8006832:	4393      	bics	r3, r2
 8006834:	0019      	movs	r1, r3
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <LL_DMA_SetPeriphIncMode+0x44>)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	18d3      	adds	r3, r2, r3
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	001a      	movs	r2, r3
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	18d3      	adds	r3, r2, r3
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b006      	add	sp, #24
 8006850:	bd80      	pop	{r7, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	080167a8 	.word	0x080167a8

08006858 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8006868:	4a0c      	ldr	r2, [pc, #48]	; (800689c <LL_DMA_SetMemoryIncMode+0x44>)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	18d3      	adds	r3, r2, r3
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	001a      	movs	r2, r3
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	18d3      	adds	r3, r2, r3
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2280      	movs	r2, #128	; 0x80
 800687a:	4393      	bics	r3, r2
 800687c:	0019      	movs	r1, r3
 800687e:	4a07      	ldr	r2, [pc, #28]	; (800689c <LL_DMA_SetMemoryIncMode+0x44>)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	18d3      	adds	r3, r2, r3
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	001a      	movs	r2, r3
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	18d3      	adds	r3, r2, r3
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	430a      	orrs	r2, r1
 8006890:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	46bd      	mov	sp, r7
 8006896:	b006      	add	sp, #24
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	080167a8 	.word	0x080167a8

080068a0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80068b0:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <LL_DMA_SetPeriphSize+0x44>)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	18d3      	adds	r3, r2, r3
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	001a      	movs	r2, r3
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	18d3      	adds	r3, r2, r3
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <LL_DMA_SetPeriphSize+0x48>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	0019      	movs	r1, r3
 80068c6:	4a07      	ldr	r2, [pc, #28]	; (80068e4 <LL_DMA_SetPeriphSize+0x44>)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	18d3      	adds	r3, r2, r3
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	001a      	movs	r2, r3
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	18d3      	adds	r3, r2, r3
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	46bd      	mov	sp, r7
 80068de:	b006      	add	sp, #24
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	080167a8 	.word	0x080167a8
 80068e8:	fffffcff 	.word	0xfffffcff

080068ec <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80068fc:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <LL_DMA_SetMemorySize+0x44>)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	18d3      	adds	r3, r2, r3
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	001a      	movs	r2, r3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	18d3      	adds	r3, r2, r3
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a09      	ldr	r2, [pc, #36]	; (8006934 <LL_DMA_SetMemorySize+0x48>)
 800690e:	4013      	ands	r3, r2
 8006910:	0019      	movs	r1, r3
 8006912:	4a07      	ldr	r2, [pc, #28]	; (8006930 <LL_DMA_SetMemorySize+0x44>)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	18d3      	adds	r3, r2, r3
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	001a      	movs	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	18d3      	adds	r3, r2, r3
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	430a      	orrs	r2, r1
 8006924:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	46bd      	mov	sp, r7
 800692a:	b006      	add	sp, #24
 800692c:	bd80      	pop	{r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	080167a8 	.word	0x080167a8
 8006934:	fffff3ff 	.word	0xfffff3ff

08006938 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8006948:	4a0c      	ldr	r2, [pc, #48]	; (800697c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	18d3      	adds	r3, r2, r3
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	001a      	movs	r2, r3
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	18d3      	adds	r3, r2, r3
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a09      	ldr	r2, [pc, #36]	; (8006980 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800695a:	4013      	ands	r3, r2
 800695c:	0019      	movs	r1, r3
 800695e:	4a07      	ldr	r2, [pc, #28]	; (800697c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	18d3      	adds	r3, r2, r3
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	001a      	movs	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	18d3      	adds	r3, r2, r3
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	430a      	orrs	r2, r1
 8006970:	601a      	str	r2, [r3, #0]
             Priority);
}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	46bd      	mov	sp, r7
 8006976:	b006      	add	sp, #24
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	080167a8 	.word	0x080167a8
 8006980:	ffffcfff 	.word	0xffffcfff

08006984 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	0a9b      	lsrs	r3, r3, #10
 8006994:	4a0f      	ldr	r2, [pc, #60]	; (80069d4 <LL_DMA_SetPeriphRequest+0x50>)
 8006996:	405a      	eors	r2, r3
 8006998:	0013      	movs	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	18d3      	adds	r3, r2, r3
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4a0b      	ldr	r2, [pc, #44]	; (80069d8 <LL_DMA_SetPeriphRequest+0x54>)
 80069aa:	4694      	mov	ip, r2
 80069ac:	4463      	add	r3, ip
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	223f      	movs	r2, #63	; 0x3f
 80069b2:	4393      	bics	r3, r2
 80069b4:	0019      	movs	r1, r3
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	18d3      	adds	r3, r2, r3
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4a06      	ldr	r2, [pc, #24]	; (80069d8 <LL_DMA_SetPeriphRequest+0x54>)
 80069c0:	4694      	mov	ip, r2
 80069c2:	4463      	add	r3, ip
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]
}
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b006      	add	sp, #24
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	00100080 	.word	0x00100080
 80069d8:	40020800 	.word	0x40020800

080069dc <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2201      	movs	r2, #1
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	601a      	str	r2, [r3, #0]
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b002      	add	sp, #8
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a03      	ldr	r2, [pc, #12]	; (8006a14 <LL_LPUART_DisableFIFO+0x1c>)
 8006a06:	401a      	ands	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	601a      	str	r2, [r3, #0]
}
 8006a0c:	46c0      	nop			; (mov r8, r8)
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b002      	add	sp, #8
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	dfffffff 	.word	0xdfffffff

08006a18 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	08da      	lsrs	r2, r3, #3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	075b      	lsls	r3, r3, #29
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	46c0      	nop			; (mov r8, r8)
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b002      	add	sp, #8
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	4a05      	ldr	r2, [pc, #20]	; (8006a60 <LL_LPUART_SetRXFIFOThreshold+0x24>)
 8006a4c:	401a      	ands	r2, r3
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	065b      	lsls	r3, r3, #25
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	609a      	str	r2, [r3, #8]
}
 8006a58:	46c0      	nop			; (mov r8, r8)
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b002      	add	sp, #8
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	f1ffffff 	.word	0xf1ffffff

08006a64 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(USART_TypeDef *LPUARTx)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	2380      	movs	r3, #128	; 0x80
 8006a72:	039b      	lsls	r3, r3, #14
 8006a74:	401a      	ands	r2, r3
 8006a76:	2380      	movs	r3, #128	; 0x80
 8006a78:	039b      	lsls	r3, r3, #14
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d101      	bne.n	8006a82 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	0018      	movs	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b002      	add	sp, #8
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(USART_TypeDef *LPUARTx)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	2380      	movs	r3, #128	; 0x80
 8006a9a:	03db      	lsls	r3, r3, #15
 8006a9c:	401a      	ands	r2, r3
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	03db      	lsls	r3, r3, #15
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d101      	bne.n	8006aaa <LL_LPUART_IsActiveFlag_REACK+0x1e>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <LL_LPUART_IsActiveFlag_REACK+0x20>
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	0018      	movs	r0, r3
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8006abc:	4b07      	ldr	r3, [pc, #28]	; (8006adc <LL_APB1_GRP1_EnableClock+0x28>)
 8006abe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <LL_APB1_GRP1_EnableClock+0x28>)
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <LL_APB1_GRP1_EnableClock+0x28>)
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	46c0      	nop			; (mov r8, r8)
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b004      	add	sp, #16
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40021000 	.word	0x40021000

08006ae0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <LL_IOP_GRP1_EnableClock+0x28>)
 8006aea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <LL_IOP_GRP1_EnableClock+0x28>)
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8006af4:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <LL_IOP_GRP1_EnableClock+0x28>)
 8006af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4013      	ands	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	46c0      	nop			; (mov r8, r8)
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b004      	add	sp, #16
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40021000 	.word	0x40021000

08006b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b0c:	b590      	push	{r4, r7, lr}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b12:	f000 fbeb 	bl	80072ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b16:	f000 f821 	bl	8006b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b1a:	f000 faa3 	bl	8007064 <MX_GPIO_Init>
  MX_DMA_Init();
 8006b1e:	f000 fa7d 	bl	800701c <MX_DMA_Init>
  MX_UCPD1_Init();
 8006b22:	f000 f9d5 	bl	8006ed0 <MX_UCPD1_Init>
  MX_ADC1_Init();
 8006b26:	f000 f893 	bl	8006c50 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8006b2a:	f000 f907 	bl	8006d3c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8006b2e:	f008 f80b 	bl	800eb48 <MX_USBPD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	4a07      	ldr	r2, [pc, #28]	; (8006b54 <main+0x48>)
 8006b36:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006b38:	c313      	stmia	r3!, {r0, r1, r4}
 8006b3a:	ca03      	ldmia	r2!, {r0, r1}
 8006b3c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006b3e:	1d3b      	adds	r3, r7, #4
 8006b40:	2100      	movs	r1, #0
 8006b42:	0018      	movs	r0, r3
 8006b44:	f003 fac4 	bl	800a0d0 <osThreadCreate>
 8006b48:	0002      	movs	r2, r0
 8006b4a:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <main+0x4c>)
 8006b4c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8006b4e:	f003 fab7 	bl	800a0c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006b52:	e7fe      	b.n	8006b52 <main+0x46>
 8006b54:	08015aa4 	.word	0x08015aa4
 8006b58:	20001b60 	.word	0x20001b60

08006b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b0a1      	sub	sp, #132	; 0x84
 8006b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b62:	2448      	movs	r4, #72	; 0x48
 8006b64:	193b      	adds	r3, r7, r4
 8006b66:	0018      	movs	r0, r3
 8006b68:	2338      	movs	r3, #56	; 0x38
 8006b6a:	001a      	movs	r2, r3
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	f00e fb46 	bl	80151fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b72:	2338      	movs	r3, #56	; 0x38
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	0018      	movs	r0, r3
 8006b78:	2310      	movs	r3, #16
 8006b7a:	001a      	movs	r2, r3
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	f00e fb3e 	bl	80151fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	0018      	movs	r0, r3
 8006b86:	2334      	movs	r3, #52	; 0x34
 8006b88:	001a      	movs	r2, r3
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	f00e fb37 	bl	80151fe <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b90:	2380      	movs	r3, #128	; 0x80
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	0018      	movs	r0, r3
 8006b96:	f001 fee3 	bl	8008960 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006b9a:	193b      	adds	r3, r7, r4
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006ba0:	193b      	adds	r3, r7, r4
 8006ba2:	2280      	movs	r2, #128	; 0x80
 8006ba4:	0052      	lsls	r2, r2, #1
 8006ba6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006ba8:	0021      	movs	r1, r4
 8006baa:	187b      	adds	r3, r7, r1
 8006bac:	2200      	movs	r2, #0
 8006bae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006bb0:	187b      	adds	r3, r7, r1
 8006bb2:	2240      	movs	r2, #64	; 0x40
 8006bb4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	2202      	movs	r2, #2
 8006bba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006bbc:	187b      	adds	r3, r7, r1
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006bc2:	187b      	adds	r3, r7, r1
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8006bc8:	187b      	adds	r3, r7, r1
 8006bca:	2208      	movs	r2, #8
 8006bcc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006bce:	187b      	adds	r3, r7, r1
 8006bd0:	2280      	movs	r2, #128	; 0x80
 8006bd2:	0292      	lsls	r2, r2, #10
 8006bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006bd6:	187b      	adds	r3, r7, r1
 8006bd8:	2280      	movs	r2, #128	; 0x80
 8006bda:	0492      	lsls	r2, r2, #18
 8006bdc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006bde:	187b      	adds	r3, r7, r1
 8006be0:	2280      	movs	r2, #128	; 0x80
 8006be2:	0592      	lsls	r2, r2, #22
 8006be4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006be6:	187b      	adds	r3, r7, r1
 8006be8:	0018      	movs	r0, r3
 8006bea:	f001 fef9 	bl	80089e0 <HAL_RCC_OscConfig>
 8006bee:	1e03      	subs	r3, r0, #0
 8006bf0:	d001      	beq.n	8006bf6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8006bf2:	f000 fa61 	bl	80070b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006bf6:	2138      	movs	r1, #56	; 0x38
 8006bf8:	187b      	adds	r3, r7, r1
 8006bfa:	2207      	movs	r2, #7
 8006bfc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006bfe:	187b      	adds	r3, r7, r1
 8006c00:	2202      	movs	r2, #2
 8006c02:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c04:	187b      	adds	r3, r7, r1
 8006c06:	2200      	movs	r2, #0
 8006c08:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006c0a:	187b      	adds	r3, r7, r1
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006c10:	187b      	adds	r3, r7, r1
 8006c12:	2102      	movs	r1, #2
 8006c14:	0018      	movs	r0, r3
 8006c16:	f002 fa03 	bl	8009020 <HAL_RCC_ClockConfig>
 8006c1a:	1e03      	subs	r3, r0, #0
 8006c1c:	d001      	beq.n	8006c22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006c1e:	f000 fa4b 	bl	80070b8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC;
 8006c22:	1d3b      	adds	r3, r7, #4
 8006c24:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <SystemClock_Config+0xf0>)
 8006c26:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006c28:	1d3b      	adds	r3, r7, #4
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8006c2e:	1d3b      	adds	r3, r7, #4
 8006c30:	2200      	movs	r2, #0
 8006c32:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c34:	1d3b      	adds	r3, r7, #4
 8006c36:	0018      	movs	r0, r3
 8006c38:	f002 fb7c 	bl	8009334 <HAL_RCCEx_PeriphCLKConfig>
 8006c3c:	1e03      	subs	r3, r0, #0
 8006c3e:	d001      	beq.n	8006c44 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8006c40:	f000 fa3a 	bl	80070b8 <Error_Handler>
  }
}
 8006c44:	46c0      	nop			; (mov r8, r8)
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b021      	add	sp, #132	; 0x84
 8006c4a:	bd90      	pop	{r4, r7, pc}
 8006c4c:	00004010 	.word	0x00004010

08006c50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	0018      	movs	r0, r3
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	001a      	movs	r2, r3
 8006c5e:	2100      	movs	r1, #0
 8006c60:	f00e facd 	bl	80151fe <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006c64:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c66:	4a33      	ldr	r2, [pc, #204]	; (8006d34 <MX_ADC1_Init+0xe4>)
 8006c68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006c6a:	4b31      	ldr	r3, [pc, #196]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c6c:	2280      	movs	r2, #128	; 0x80
 8006c6e:	0612      	lsls	r2, r2, #24
 8006c70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006c72:	4b2f      	ldr	r3, [pc, #188]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c78:	4b2d      	ldr	r3, [pc, #180]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006c7e:	4b2c      	ldr	r3, [pc, #176]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006c84:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c86:	2204      	movs	r2, #4
 8006c88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006c8a:	4b29      	ldr	r3, [pc, #164]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8006c90:	4b27      	ldr	r3, [pc, #156]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006c96:	4b26      	ldr	r3, [pc, #152]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006c9c:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006ca2:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006caa:	4b21      	ldr	r3, [pc, #132]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006cb6:	4b1e      	ldr	r3, [pc, #120]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006cb8:	222c      	movs	r2, #44	; 0x2c
 8006cba:	2100      	movs	r1, #0
 8006cbc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006cbe:	4b1c      	ldr	r3, [pc, #112]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006cc0:	2280      	movs	r2, #128	; 0x80
 8006cc2:	0152      	lsls	r2, r2, #5
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006cc8:	2207      	movs	r2, #7
 8006cca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8006ccc:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006cce:	2207      	movs	r2, #7
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8006cd2:	4b17      	ldr	r3, [pc, #92]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006cd4:	223c      	movs	r2, #60	; 0x3c
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8006cda:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006ce0:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f000 fcf2 	bl	80076cc <HAL_ADC_Init>
 8006ce8:	1e03      	subs	r3, r0, #0
 8006cea:	d001      	beq.n	8006cf0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8006cec:	f000 f9e4 	bl	80070b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	4a11      	ldr	r2, [pc, #68]	; (8006d38 <MX_ADC1_Init+0xe8>)
 8006cf4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	2200      	movs	r2, #0
 8006d00:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006d02:	1d3a      	adds	r2, r7, #4
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006d06:	0011      	movs	r1, r2
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f000 ff05 	bl	8007b18 <HAL_ADC_ConfigChannel>
 8006d0e:	1e03      	subs	r3, r0, #0
 8006d10:	d001      	beq.n	8006d16 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8006d12:	f000 f9d1 	bl	80070b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f001 f9d1 	bl	80080c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8006d1e:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <MX_ADC1_Init+0xe0>)
 8006d20:	0018      	movs	r0, r3
 8006d22:	f000 feab 	bl	8007a7c <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b004      	add	sp, #16
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	20001b64 	.word	0x20001b64
 8006d34:	40012400 	.word	0x40012400
 8006d38:	24000200 	.word	0x24000200

08006d3c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b08f      	sub	sp, #60	; 0x3c
 8006d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8006d42:	241c      	movs	r4, #28
 8006d44:	193b      	adds	r3, r7, r4
 8006d46:	0018      	movs	r0, r3
 8006d48:	231c      	movs	r3, #28
 8006d4a:	001a      	movs	r2, r3
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	f00e fa56 	bl	80151fe <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d52:	1d3b      	adds	r3, r7, #4
 8006d54:	0018      	movs	r0, r3
 8006d56:	2318      	movs	r3, #24
 8006d58:	001a      	movs	r2, r3
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	f00e fa4f 	bl	80151fe <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 8006d60:	2380      	movs	r3, #128	; 0x80
 8006d62:	035b      	lsls	r3, r3, #13
 8006d64:	0018      	movs	r0, r3
 8006d66:	f7ff fea5 	bl	8006ab4 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	f7ff feb8 	bl	8006ae0 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	2204      	movs	r2, #4
 8006d74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006d76:	1d3b      	adds	r3, r7, #4
 8006d78:	2202      	movs	r2, #2
 8006d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d7c:	1d3b      	adds	r3, r7, #4
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d82:	1d3b      	adds	r3, r7, #4
 8006d84:	2200      	movs	r2, #0
 8006d86:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	2206      	movs	r2, #6
 8006d92:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d94:	1d3a      	adds	r2, r7, #4
 8006d96:	23a0      	movs	r3, #160	; 0xa0
 8006d98:	05db      	lsls	r3, r3, #23
 8006d9a:	0011      	movs	r1, r2
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f002 fe47 	bl	8009a30 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8006da2:	1d3b      	adds	r3, r7, #4
 8006da4:	2208      	movs	r2, #8
 8006da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006da8:	1d3b      	adds	r3, r7, #4
 8006daa:	2202      	movs	r2, #2
 8006dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	2200      	movs	r2, #0
 8006db2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006db4:	1d3b      	adds	r3, r7, #4
 8006db6:	2200      	movs	r2, #0
 8006db8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006dba:	1d3b      	adds	r3, r7, #4
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	2206      	movs	r2, #6
 8006dc4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dc6:	1d3a      	adds	r2, r7, #4
 8006dc8:	23a0      	movs	r3, #160	; 0xa0
 8006dca:	05db      	lsls	r3, r3, #23
 8006dcc:	0011      	movs	r1, r2
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f002 fe2e 	bl	8009a30 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_TX);
 8006dd4:	4b3c      	ldr	r3, [pc, #240]	; (8006ec8 <MX_LPUART1_UART_Init+0x18c>)
 8006dd6:	220f      	movs	r2, #15
 8006dd8:	2102      	movs	r1, #2
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f7ff fdd2 	bl	8006984 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8006de0:	4b39      	ldr	r3, [pc, #228]	; (8006ec8 <MX_LPUART1_UART_Init+0x18c>)
 8006de2:	2210      	movs	r2, #16
 8006de4:	2102      	movs	r1, #2
 8006de6:	0018      	movs	r0, r3
 8006de8:	f7ff fcc8 	bl	800677c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8006dec:	4b36      	ldr	r3, [pc, #216]	; (8006ec8 <MX_LPUART1_UART_Init+0x18c>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	2102      	movs	r1, #2
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7ff fda0 	bl	8006938 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8006df8:	4b33      	ldr	r3, [pc, #204]	; (8006ec8 <MX_LPUART1_UART_Init+0x18c>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2102      	movs	r1, #2
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7ff fce2 	bl	80067c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8006e04:	4b30      	ldr	r3, [pc, #192]	; (8006ec8 <MX_LPUART1_UART_Init+0x18c>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	2102      	movs	r1, #2
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7ff fd00 	bl	8006810 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8006e10:	4b2d      	ldr	r3, [pc, #180]	; (8006ec8 <MX_LPUART1_UART_Init+0x18c>)
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	2102      	movs	r1, #2
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7ff fd1e 	bl	8006858 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8006e1c:	4b2a      	ldr	r3, [pc, #168]	; (8006ec8 <MX_LPUART1_UART_Init+0x18c>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2102      	movs	r1, #2
 8006e22:	0018      	movs	r0, r3
 8006e24:	f7ff fd3c 	bl	80068a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8006e28:	4b27      	ldr	r3, [pc, #156]	; (8006ec8 <MX_LPUART1_UART_Init+0x18c>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f7ff fd5c 	bl	80068ec <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(USART3_4_LPUART1_IRQn, 3);
 8006e34:	2103      	movs	r1, #3
 8006e36:	201d      	movs	r0, #29
 8006e38:	f7ff fc32 	bl	80066a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8006e3c:	201d      	movs	r0, #29
 8006e3e:	f7ff fc15 	bl	800666c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8006e42:	193b      	adds	r3, r7, r4
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.BaudRate = 921600;
 8006e48:	193b      	adds	r3, r7, r4
 8006e4a:	22e1      	movs	r2, #225	; 0xe1
 8006e4c:	0312      	lsls	r2, r2, #12
 8006e4e:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_7B;
 8006e50:	193b      	adds	r3, r7, r4
 8006e52:	2280      	movs	r2, #128	; 0x80
 8006e54:	0552      	lsls	r2, r2, #21
 8006e56:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8006e58:	0021      	movs	r1, r4
 8006e5a:	187b      	adds	r3, r7, r1
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8006e60:	187b      	adds	r3, r7, r1
 8006e62:	2200      	movs	r2, #0
 8006e64:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8006e66:	187b      	adds	r3, r7, r1
 8006e68:	220c      	movs	r2, #12
 8006e6a:	615a      	str	r2, [r3, #20]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8006e6c:	187b      	adds	r3, r7, r1
 8006e6e:	2200      	movs	r2, #0
 8006e70:	619a      	str	r2, [r3, #24]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8006e72:	187b      	adds	r3, r7, r1
 8006e74:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <MX_LPUART1_UART_Init+0x190>)
 8006e76:	0019      	movs	r1, r3
 8006e78:	0010      	movs	r0, r2
 8006e7a:	f002 fec1 	bl	8009c00 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8006e7e:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <MX_LPUART1_UART_Init+0x190>)
 8006e80:	2100      	movs	r1, #0
 8006e82:	0018      	movs	r0, r3
 8006e84:	f7ff fdc8 	bl	8006a18 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8006e88:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <MX_LPUART1_UART_Init+0x190>)
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f7ff fdd5 	bl	8006a3c <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8006e92:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <MX_LPUART1_UART_Init+0x190>)
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7ff fdaf 	bl	80069f8 <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <MX_LPUART1_UART_Init+0x190>)
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7ff fd9d 	bl	80069dc <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <MX_LPUART1_UART_Init+0x190>)
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff fddc 	bl	8006a64 <LL_LPUART_IsActiveFlag_TEACK>
 8006eac:	1e03      	subs	r3, r0, #0
 8006eae:	d0f9      	beq.n	8006ea4 <MX_LPUART1_UART_Init+0x168>
 8006eb0:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <MX_LPUART1_UART_Init+0x190>)
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7ff fdea 	bl	8006a8c <LL_LPUART_IsActiveFlag_REACK>
 8006eb8:	1e03      	subs	r3, r0, #0
 8006eba:	d0f3      	beq.n	8006ea4 <MX_LPUART1_UART_Init+0x168>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006ebc:	46c0      	nop			; (mov r8, r8)
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b00f      	add	sp, #60	; 0x3c
 8006ec4:	bd90      	pop	{r4, r7, pc}
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	40020000 	.word	0x40020000
 8006ecc:	40008000 	.word	0x40008000

08006ed0 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ed6:	003b      	movs	r3, r7
 8006ed8:	0018      	movs	r0, r3
 8006eda:	2318      	movs	r3, #24
 8006edc:	001a      	movs	r2, r3
 8006ede:	2100      	movs	r1, #0
 8006ee0:	f00e f98d 	bl	80151fe <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	049b      	lsls	r3, r3, #18
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7ff fde3 	bl	8006ab4 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8006eee:	2002      	movs	r0, #2
 8006ef0:	f7ff fdf6 	bl	8006ae0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	f7ff fdf3 	bl	8006ae0 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8006efa:	003b      	movs	r3, r7
 8006efc:	2280      	movs	r2, #128	; 0x80
 8006efe:	0212      	lsls	r2, r2, #8
 8006f00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006f02:	003b      	movs	r3, r7
 8006f04:	2203      	movs	r2, #3
 8006f06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006f08:	003b      	movs	r3, r7
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f0e:	003b      	movs	r3, r7
 8006f10:	4a40      	ldr	r2, [pc, #256]	; (8007014 <MX_UCPD1_Init+0x144>)
 8006f12:	0019      	movs	r1, r3
 8006f14:	0010      	movs	r0, r2
 8006f16:	f002 fd8b 	bl	8009a30 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8006f1a:	003b      	movs	r3, r7
 8006f1c:	2280      	movs	r2, #128	; 0x80
 8006f1e:	0052      	lsls	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8006f22:	003b      	movs	r3, r7
 8006f24:	2203      	movs	r2, #3
 8006f26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006f28:	003b      	movs	r3, r7
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2e:	003a      	movs	r2, r7
 8006f30:	23a0      	movs	r3, #160	; 0xa0
 8006f32:	05db      	lsls	r3, r3, #23
 8006f34:	0011      	movs	r1, r2
 8006f36:	0018      	movs	r0, r3
 8006f38:	f002 fd7a 	bl	8009a30 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8006f3c:	4b36      	ldr	r3, [pc, #216]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f3e:	223a      	movs	r2, #58	; 0x3a
 8006f40:	2100      	movs	r1, #0
 8006f42:	0018      	movs	r0, r3
 8006f44:	f7ff fd1e 	bl	8006984 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8006f48:	4b33      	ldr	r3, [pc, #204]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7ff fc14 	bl	800677c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8006f54:	4b30      	ldr	r3, [pc, #192]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	2100      	movs	r1, #0
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f7ff fcec 	bl	8006938 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8006f60:	4b2d      	ldr	r3, [pc, #180]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	2100      	movs	r1, #0
 8006f66:	0018      	movs	r0, r3
 8006f68:	f7ff fc2e 	bl	80067c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8006f6c:	4b2a      	ldr	r3, [pc, #168]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2100      	movs	r1, #0
 8006f72:	0018      	movs	r0, r3
 8006f74:	f7ff fc4c 	bl	8006810 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8006f78:	4b27      	ldr	r3, [pc, #156]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f7a:	2280      	movs	r2, #128	; 0x80
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f7ff fc6a 	bl	8006858 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8006f84:	4b24      	ldr	r3, [pc, #144]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	2100      	movs	r1, #0
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f7ff fc88 	bl	80068a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8006f90:	4b21      	ldr	r3, [pc, #132]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	2100      	movs	r1, #0
 8006f96:	0018      	movs	r0, r3
 8006f98:	f7ff fca8 	bl	80068ec <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8006f9c:	4b1e      	ldr	r3, [pc, #120]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006f9e:	223b      	movs	r2, #59	; 0x3b
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f7ff fcee 	bl	8006984 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006faa:	2210      	movs	r2, #16
 8006fac:	2101      	movs	r1, #1
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7ff fbe4 	bl	800677c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8006fb4:	4b18      	ldr	r3, [pc, #96]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2101      	movs	r1, #1
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7ff fcbc 	bl	8006938 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8006fc0:	4b15      	ldr	r3, [pc, #84]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f7ff fbfe 	bl	80067c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8006fcc:	4b12      	ldr	r3, [pc, #72]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7ff fc1c 	bl	8006810 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006fda:	2280      	movs	r2, #128	; 0x80
 8006fdc:	2101      	movs	r1, #1
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f7ff fc3a 	bl	8006858 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8006fe4:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2101      	movs	r1, #1
 8006fea:	0018      	movs	r0, r3
 8006fec:	f7ff fc58 	bl	80068a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8006ff0:	4b09      	ldr	r3, [pc, #36]	; (8007018 <MX_UCPD1_Init+0x148>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f7ff fc78 	bl	80068ec <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_2_IRQn, 3);
 8006ffc:	2103      	movs	r1, #3
 8006ffe:	2008      	movs	r0, #8
 8007000:	f7ff fb4e 	bl	80066a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_2_IRQn);
 8007004:	2008      	movs	r0, #8
 8007006:	f7ff fb31 	bl	800666c <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	46bd      	mov	sp, r7
 800700e:	b006      	add	sp, #24
 8007010:	bd80      	pop	{r7, pc}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	50000400 	.word	0x50000400
 8007018:	40020000 	.word	0x40020000

0800701c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <MX_DMA_Init+0x44>)
 8007024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007026:	4b0e      	ldr	r3, [pc, #56]	; (8007060 <MX_DMA_Init+0x44>)
 8007028:	2101      	movs	r1, #1
 800702a:	430a      	orrs	r2, r1
 800702c:	639a      	str	r2, [r3, #56]	; 0x38
 800702e:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <MX_DMA_Init+0x44>)
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	2201      	movs	r2, #1
 8007034:	4013      	ands	r3, r2
 8007036:	607b      	str	r3, [r7, #4]
 8007038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 3);
 800703a:	2103      	movs	r1, #3
 800703c:	2009      	movs	r0, #9
 800703e:	f7ff fb2f 	bl	80066a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007042:	2009      	movs	r0, #9
 8007044:	f7ff fb12 	bl	800666c <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 8007048:	2103      	movs	r1, #3
 800704a:	200a      	movs	r0, #10
 800704c:	f7ff fb28 	bl	80066a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007050:	200a      	movs	r0, #10
 8007052:	f7ff fb0b 	bl	800666c <__NVIC_EnableIRQ>

}
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	46bd      	mov	sp, r7
 800705a:	b002      	add	sp, #8
 800705c:	bd80      	pop	{r7, pc}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	40021000 	.word	0x40021000

08007064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <MX_GPIO_Init+0x40>)
 800706c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <MX_GPIO_Init+0x40>)
 8007070:	2101      	movs	r1, #1
 8007072:	430a      	orrs	r2, r1
 8007074:	635a      	str	r2, [r3, #52]	; 0x34
 8007076:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <MX_GPIO_Init+0x40>)
 8007078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707a:	2201      	movs	r2, #1
 800707c:	4013      	ands	r3, r2
 800707e:	607b      	str	r3, [r7, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007082:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <MX_GPIO_Init+0x40>)
 8007084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <MX_GPIO_Init+0x40>)
 8007088:	2102      	movs	r1, #2
 800708a:	430a      	orrs	r2, r1
 800708c:	635a      	str	r2, [r3, #52]	; 0x34
 800708e:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <MX_GPIO_Init+0x40>)
 8007090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007092:	2202      	movs	r2, #2
 8007094:	4013      	ands	r3, r2
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	683b      	ldr	r3, [r7, #0]

}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	46bd      	mov	sp, r7
 800709e:	b002      	add	sp, #8
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	40021000 	.word	0x40021000

080070a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80070b0:	2001      	movs	r0, #1
 80070b2:	f003 f842 	bl	800a13a <osDelay>
 80070b6:	e7fb      	b.n	80070b0 <StartDefaultTask+0x8>

080070b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80070bc:	b672      	cpsid	i
}
 80070be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80070c0:	e7fe      	b.n	80070c0 <Error_Handler+0x8>
	...

080070c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070ca:	4b15      	ldr	r3, [pc, #84]	; (8007120 <HAL_MspInit+0x5c>)
 80070cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ce:	4b14      	ldr	r3, [pc, #80]	; (8007120 <HAL_MspInit+0x5c>)
 80070d0:	2101      	movs	r1, #1
 80070d2:	430a      	orrs	r2, r1
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
 80070d6:	4b12      	ldr	r3, [pc, #72]	; (8007120 <HAL_MspInit+0x5c>)
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	2201      	movs	r2, #1
 80070dc:	4013      	ands	r3, r2
 80070de:	607b      	str	r3, [r7, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80070e2:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <HAL_MspInit+0x5c>)
 80070e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070e6:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <HAL_MspInit+0x5c>)
 80070e8:	2180      	movs	r1, #128	; 0x80
 80070ea:	0549      	lsls	r1, r1, #21
 80070ec:	430a      	orrs	r2, r1
 80070ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <HAL_MspInit+0x5c>)
 80070f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	055b      	lsls	r3, r3, #21
 80070f8:	4013      	ands	r3, r2
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80070fe:	2302      	movs	r3, #2
 8007100:	425b      	negs	r3, r3
 8007102:	2200      	movs	r2, #0
 8007104:	2103      	movs	r1, #3
 8007106:	0018      	movs	r0, r3
 8007108:	f001 f900 	bl	800830c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800710c:	23c0      	movs	r3, #192	; 0xc0
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	0018      	movs	r0, r3
 8007112:	f000 f995 	bl	8007440 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	46bd      	mov	sp, r7
 800711a:	b002      	add	sp, #8
 800711c:	bd80      	pop	{r7, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	40021000 	.word	0x40021000

08007124 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007124:	b590      	push	{r4, r7, lr}
 8007126:	b08b      	sub	sp, #44	; 0x2c
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800712c:	2414      	movs	r4, #20
 800712e:	193b      	adds	r3, r7, r4
 8007130:	0018      	movs	r0, r3
 8007132:	2314      	movs	r3, #20
 8007134:	001a      	movs	r2, r3
 8007136:	2100      	movs	r1, #0
 8007138:	f00e f861 	bl	80151fe <memset>
  if(hadc->Instance==ADC1)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <HAL_ADC_MspInit+0x7c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d128      	bne.n	8007198 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007146:	4b17      	ldr	r3, [pc, #92]	; (80071a4 <HAL_ADC_MspInit+0x80>)
 8007148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800714a:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <HAL_ADC_MspInit+0x80>)
 800714c:	2180      	movs	r1, #128	; 0x80
 800714e:	0349      	lsls	r1, r1, #13
 8007150:	430a      	orrs	r2, r1
 8007152:	641a      	str	r2, [r3, #64]	; 0x40
 8007154:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <HAL_ADC_MspInit+0x80>)
 8007156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	035b      	lsls	r3, r3, #13
 800715c:	4013      	ands	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007162:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <HAL_ADC_MspInit+0x80>)
 8007164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <HAL_ADC_MspInit+0x80>)
 8007168:	2102      	movs	r1, #2
 800716a:	430a      	orrs	r2, r1
 800716c:	635a      	str	r2, [r3, #52]	; 0x34
 800716e:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <HAL_ADC_MspInit+0x80>)
 8007170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007172:	2202      	movs	r2, #2
 8007174:	4013      	ands	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VSENSE_Pin;
 800717a:	193b      	adds	r3, r7, r4
 800717c:	2202      	movs	r2, #2
 800717e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007180:	193b      	adds	r3, r7, r4
 8007182:	2203      	movs	r2, #3
 8007184:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007186:	193b      	adds	r3, r7, r4
 8007188:	2200      	movs	r2, #0
 800718a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VSENSE_GPIO_Port, &GPIO_InitStruct);
 800718c:	193b      	adds	r3, r7, r4
 800718e:	4a06      	ldr	r2, [pc, #24]	; (80071a8 <HAL_ADC_MspInit+0x84>)
 8007190:	0019      	movs	r1, r3
 8007192:	0010      	movs	r0, r2
 8007194:	f001 fa80 	bl	8008698 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	b00b      	add	sp, #44	; 0x2c
 800719e:	bd90      	pop	{r4, r7, pc}
 80071a0:	40012400 	.word	0x40012400
 80071a4:	40021000 	.word	0x40021000
 80071a8:	50000400 	.word	0x50000400

080071ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80071b0:	e7fe      	b.n	80071b0 <NMI_Handler+0x4>

080071b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071b6:	e7fe      	b.n	80071b6 <HardFault_Handler+0x4>

080071b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
#if defined( _GUI_INTERFACE)
	GUI_TimerCounter();
 80071bc:	f00a f98c 	bl	80114d8 <GUI_TimerCounter>
#endif
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071c0:	f000 f8fe 	bl	80073c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80071c4:	f004 fd50 	bl	800bc68 <xTaskGetSchedulerState>
 80071c8:	0003      	movs	r3, r0
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d001      	beq.n	80071d2 <SysTick_Handler+0x1a>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80071ce:	f003 fbdb 	bl	800a988 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  USBPD_DPM_TimerCounter();
 80071d2:	f007 fdf3 	bl	800edbc <USBPD_DPM_TimerCounter>
  GUI_TimerCounter();
 80071d6:	f00a f97f 	bl	80114d8 <GUI_TimerCounter>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <UCPD1_2_IRQHandler>:

/**
  * @brief This function handles UCPD1 and UCPD2 interrupts / UCPD1 and UCPD2 wake-up interrupts through EXTI lines 32 and 33.
  */
void UCPD1_2_IRQHandler(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_2_IRQn 0 */

  /* USER CODE END UCPD1_2_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 80071e4:	f005 fd17 	bl	800cc16 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_2_IRQn 1 */

  /* USER CODE END UCPD1_2_IRQn 1 */
}
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  TRACER_EMB_IRQHandlerDMA();
 80071fc:	f00d f83c 	bl	8014278 <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */

  TRACER_EMB_IRQHandlerUSART();
 800720a:	f00d f83c 	bl	8014286 <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800721c:	4a14      	ldr	r2, [pc, #80]	; (8007270 <_sbrk+0x5c>)
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <_sbrk+0x60>)
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007228:	4b13      	ldr	r3, [pc, #76]	; (8007278 <_sbrk+0x64>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007230:	4b11      	ldr	r3, [pc, #68]	; (8007278 <_sbrk+0x64>)
 8007232:	4a12      	ldr	r2, [pc, #72]	; (800727c <_sbrk+0x68>)
 8007234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007236:	4b10      	ldr	r3, [pc, #64]	; (8007278 <_sbrk+0x64>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	18d3      	adds	r3, r2, r3
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	429a      	cmp	r2, r3
 8007242:	d207      	bcs.n	8007254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007244:	f00d ff9e 	bl	8015184 <__errno>
 8007248:	0003      	movs	r3, r0
 800724a:	220c      	movs	r2, #12
 800724c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800724e:	2301      	movs	r3, #1
 8007250:	425b      	negs	r3, r3
 8007252:	e009      	b.n	8007268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007254:	4b08      	ldr	r3, [pc, #32]	; (8007278 <_sbrk+0x64>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <_sbrk+0x64>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	18d2      	adds	r2, r2, r3
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <_sbrk+0x64>)
 8007264:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007266:	68fb      	ldr	r3, [r7, #12]
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b006      	add	sp, #24
 800726e:	bd80      	pop	{r7, pc}
 8007270:	20009000 	.word	0x20009000
 8007274:	00000400 	.word	0x00000400
 8007278:	200001f0 	.word	0x200001f0
 800727c:	20001ea0 	.word	0x20001ea0

08007280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <SystemInit+0x14>)
 8007286:	2280      	movs	r2, #128	; 0x80
 8007288:	0512      	lsls	r2, r2, #20
 800728a:	609a      	str	r2, [r3, #8]
#endif
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	e000ed00 	.word	0xe000ed00

08007298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007298:	480d      	ldr	r0, [pc, #52]	; (80072d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800729a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800729c:	f7ff fff0 	bl	8007280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80072a0:	480c      	ldr	r0, [pc, #48]	; (80072d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80072a2:	490d      	ldr	r1, [pc, #52]	; (80072d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80072a4:	4a0d      	ldr	r2, [pc, #52]	; (80072dc <LoopForever+0xe>)
  movs r3, #0
 80072a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072a8:	e002      	b.n	80072b0 <LoopCopyDataInit>

080072aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072ae:	3304      	adds	r3, #4

080072b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072b4:	d3f9      	bcc.n	80072aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072b6:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80072b8:	4c0a      	ldr	r4, [pc, #40]	; (80072e4 <LoopForever+0x16>)
  movs r3, #0
 80072ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072bc:	e001      	b.n	80072c2 <LoopFillZerobss>

080072be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072c0:	3204      	adds	r2, #4

080072c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072c4:	d3fb      	bcc.n	80072be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80072c6:	f00d ff63 	bl	8015190 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80072ca:	f7ff fc1f 	bl	8006b0c <main>

080072ce <LoopForever>:

LoopForever:
  b LoopForever
 80072ce:	e7fe      	b.n	80072ce <LoopForever>
  ldr   r0, =_estack
 80072d0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80072d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072d8:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 80072dc:	080170b0 	.word	0x080170b0
  ldr r2, =_sbss
 80072e0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80072e4:	20001ea0 	.word	0x20001ea0

080072e8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80072e8:	e7fe      	b.n	80072e8 <ADC1_COMP_IRQHandler>
	...

080072ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80072f2:	1dfb      	adds	r3, r7, #7
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072f8:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <HAL_Init+0x3c>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <HAL_Init+0x3c>)
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	0049      	lsls	r1, r1, #1
 8007302:	430a      	orrs	r2, r1
 8007304:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007306:	2003      	movs	r0, #3
 8007308:	f000 f810 	bl	800732c <HAL_InitTick>
 800730c:	1e03      	subs	r3, r0, #0
 800730e:	d003      	beq.n	8007318 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007310:	1dfb      	adds	r3, r7, #7
 8007312:	2201      	movs	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e001      	b.n	800731c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007318:	f7ff fed4 	bl	80070c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800731c:	1dfb      	adds	r3, r7, #7
 800731e:	781b      	ldrb	r3, [r3, #0]
}
 8007320:	0018      	movs	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	b002      	add	sp, #8
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40022000 	.word	0x40022000

0800732c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800732c:	b590      	push	{r4, r7, lr}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007334:	230f      	movs	r3, #15
 8007336:	18fb      	adds	r3, r7, r3
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800733c:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_InitTick+0x88>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d02b      	beq.n	800739c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8007344:	4b1c      	ldr	r3, [pc, #112]	; (80073b8 <HAL_InitTick+0x8c>)
 8007346:	681c      	ldr	r4, [r3, #0]
 8007348:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_InitTick+0x88>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	0019      	movs	r1, r3
 800734e:	23fa      	movs	r3, #250	; 0xfa
 8007350:	0098      	lsls	r0, r3, #2
 8007352:	f7fe feff 	bl	8006154 <__udivsi3>
 8007356:	0003      	movs	r3, r0
 8007358:	0019      	movs	r1, r3
 800735a:	0020      	movs	r0, r4
 800735c:	f7fe fefa 	bl	8006154 <__udivsi3>
 8007360:	0003      	movs	r3, r0
 8007362:	0018      	movs	r0, r3
 8007364:	f000 ffeb 	bl	800833e <HAL_SYSTICK_Config>
 8007368:	1e03      	subs	r3, r0, #0
 800736a:	d112      	bne.n	8007392 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b03      	cmp	r3, #3
 8007370:	d80a      	bhi.n	8007388 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	2301      	movs	r3, #1
 8007376:	425b      	negs	r3, r3
 8007378:	2200      	movs	r2, #0
 800737a:	0018      	movs	r0, r3
 800737c:	f000 ffc6 	bl	800830c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007380:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <HAL_InitTick+0x90>)
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e00d      	b.n	80073a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8007388:	230f      	movs	r3, #15
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	2201      	movs	r2, #1
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e008      	b.n	80073a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007392:	230f      	movs	r3, #15
 8007394:	18fb      	adds	r3, r7, r3
 8007396:	2201      	movs	r2, #1
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	e003      	b.n	80073a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800739c:	230f      	movs	r3, #15
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	2201      	movs	r2, #1
 80073a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80073a4:	230f      	movs	r3, #15
 80073a6:	18fb      	adds	r3, r7, r3
 80073a8:	781b      	ldrb	r3, [r3, #0]
}
 80073aa:	0018      	movs	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	b005      	add	sp, #20
 80073b0:	bd90      	pop	{r4, r7, pc}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	2000000c 	.word	0x2000000c
 80073b8:	20000004 	.word	0x20000004
 80073bc:	20000008 	.word	0x20000008

080073c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <HAL_IncTick+0x1c>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	001a      	movs	r2, r3
 80073ca:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <HAL_IncTick+0x20>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	18d2      	adds	r2, r2, r3
 80073d0:	4b03      	ldr	r3, [pc, #12]	; (80073e0 <HAL_IncTick+0x20>)
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	46c0      	nop			; (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	2000000c 	.word	0x2000000c
 80073e0:	20001bc8 	.word	0x20001bc8

080073e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  return uwTick;
 80073e8:	4b02      	ldr	r3, [pc, #8]	; (80073f4 <HAL_GetTick+0x10>)
 80073ea:	681b      	ldr	r3, [r3, #0]
}
 80073ec:	0018      	movs	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	20001bc8 	.word	0x20001bc8

080073f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007400:	f7ff fff0 	bl	80073e4 <HAL_GetTick>
 8007404:	0003      	movs	r3, r0
 8007406:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3301      	adds	r3, #1
 8007410:	d005      	beq.n	800741e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <HAL_Delay+0x44>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	001a      	movs	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	189b      	adds	r3, r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	f7ff ffe0 	bl	80073e4 <HAL_GetTick>
 8007424:	0002      	movs	r2, r0
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	429a      	cmp	r2, r3
 800742e:	d8f7      	bhi.n	8007420 <HAL_Delay+0x28>
  {
  }
}
 8007430:	46c0      	nop			; (mov r8, r8)
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	46bd      	mov	sp, r7
 8007436:	b004      	add	sp, #16
 8007438:	bd80      	pop	{r7, pc}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	2000000c 	.word	0x2000000c

08007440 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007448:	4b06      	ldr	r3, [pc, #24]	; (8007464 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a06      	ldr	r2, [pc, #24]	; (8007468 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800744e:	4013      	ands	r3, r2
 8007450:	0019      	movs	r1, r3
 8007452:	4b04      	ldr	r3, [pc, #16]	; (8007464 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	430a      	orrs	r2, r1
 8007458:	601a      	str	r2, [r3, #0]
}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	46bd      	mov	sp, r7
 800745e:	b002      	add	sp, #8
 8007460:	bd80      	pop	{r7, pc}
 8007462:	46c0      	nop			; (mov r8, r8)
 8007464:	40010000 	.word	0x40010000
 8007468:	fffff9ff 	.word	0xfffff9ff

0800746c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a05      	ldr	r2, [pc, #20]	; (8007490 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800747c:	401a      	ands	r2, r3
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	601a      	str	r2, [r3, #0]
}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	46bd      	mov	sp, r7
 800748a:	b002      	add	sp, #8
 800748c:	bd80      	pop	{r7, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	fe3fffff 	.word	0xfe3fffff

08007494 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	23e0      	movs	r3, #224	; 0xe0
 80074a2:	045b      	lsls	r3, r3, #17
 80074a4:	4013      	ands	r3, r2
}
 80074a6:	0018      	movs	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	b002      	add	sp, #8
 80074ac:	bd80      	pop	{r7, pc}

080074ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	2104      	movs	r1, #4
 80074c2:	400a      	ands	r2, r1
 80074c4:	2107      	movs	r1, #7
 80074c6:	4091      	lsls	r1, r2
 80074c8:	000a      	movs	r2, r1
 80074ca:	43d2      	mvns	r2, r2
 80074cc:	401a      	ands	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2104      	movs	r1, #4
 80074d2:	400b      	ands	r3, r1
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	4099      	lsls	r1, r3
 80074d8:	000b      	movs	r3, r1
 80074da:	431a      	orrs	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80074e0:	46c0      	nop			; (mov r8, r8)
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b004      	add	sp, #16
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	211f      	movs	r1, #31
 80074fc:	400a      	ands	r2, r1
 80074fe:	210f      	movs	r1, #15
 8007500:	4091      	lsls	r1, r2
 8007502:	000a      	movs	r2, r1
 8007504:	43d2      	mvns	r2, r2
 8007506:	401a      	ands	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	0e9b      	lsrs	r3, r3, #26
 800750c:	210f      	movs	r1, #15
 800750e:	4019      	ands	r1, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	201f      	movs	r0, #31
 8007514:	4003      	ands	r3, r0
 8007516:	4099      	lsls	r1, r3
 8007518:	000b      	movs	r3, r1
 800751a:	431a      	orrs	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	46bd      	mov	sp, r7
 8007524:	b004      	add	sp, #16
 8007526:	bd80      	pop	{r7, pc}

08007528 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	035b      	lsls	r3, r3, #13
 800753a:	0b5b      	lsrs	r3, r3, #13
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	46bd      	mov	sp, r7
 8007546:	b002      	add	sp, #8
 8007548:	bd80      	pop	{r7, pc}

0800754a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	0352      	lsls	r2, r2, #13
 800755c:	0b52      	lsrs	r2, r2, #13
 800755e:	43d2      	mvns	r2, r2
 8007560:	401a      	ands	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007566:	46c0      	nop			; (mov r8, r8)
 8007568:	46bd      	mov	sp, r7
 800756a:	b002      	add	sp, #8
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	0212      	lsls	r2, r2, #8
 8007584:	43d2      	mvns	r2, r2
 8007586:	401a      	ands	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	400b      	ands	r3, r1
 8007590:	4904      	ldr	r1, [pc, #16]	; (80075a4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8007592:	400b      	ands	r3, r1
 8007594:	431a      	orrs	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	46bd      	mov	sp, r7
 800759e:	b004      	add	sp, #16
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	07ffff00 	.word	0x07ffff00

080075a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	4a05      	ldr	r2, [pc, #20]	; (80075cc <LL_ADC_EnableInternalRegulator+0x24>)
 80075b6:	4013      	ands	r3, r2
 80075b8:	2280      	movs	r2, #128	; 0x80
 80075ba:	0552      	lsls	r2, r2, #21
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	46bd      	mov	sp, r7
 80075c6:	b002      	add	sp, #8
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	6fffffe8 	.word	0x6fffffe8

080075d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	055b      	lsls	r3, r3, #21
 80075e0:	401a      	ands	r2, r3
 80075e2:	2380      	movs	r3, #128	; 0x80
 80075e4:	055b      	lsls	r3, r3, #21
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d101      	bne.n	80075ee <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b002      	add	sp, #8
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	4a04      	ldr	r2, [pc, #16]	; (8007618 <LL_ADC_Enable+0x20>)
 8007606:	4013      	ands	r3, r2
 8007608:	2201      	movs	r2, #1
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007610:	46c0      	nop			; (mov r8, r8)
 8007612:	46bd      	mov	sp, r7
 8007614:	b002      	add	sp, #8
 8007616:	bd80      	pop	{r7, pc}
 8007618:	7fffffe8 	.word	0x7fffffe8

0800761c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	4a04      	ldr	r2, [pc, #16]	; (800763c <LL_ADC_Disable+0x20>)
 800762a:	4013      	ands	r3, r2
 800762c:	2202      	movs	r2, #2
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b002      	add	sp, #8
 800763a:	bd80      	pop	{r7, pc}
 800763c:	7fffffe8 	.word	0x7fffffe8

08007640 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	2201      	movs	r2, #1
 800764e:	4013      	ands	r3, r2
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <LL_ADC_IsEnabled+0x18>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <LL_ADC_IsEnabled+0x1a>
 8007658:	2300      	movs	r3, #0
}
 800765a:	0018      	movs	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	b002      	add	sp, #8
 8007660:	bd80      	pop	{r7, pc}

08007662 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2202      	movs	r2, #2
 8007670:	4013      	ands	r3, r2
 8007672:	2b02      	cmp	r3, #2
 8007674:	d101      	bne.n	800767a <LL_ADC_IsDisableOngoing+0x18>
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <LL_ADC_IsDisableOngoing+0x1a>
 800767a:	2300      	movs	r3, #0
}
 800767c:	0018      	movs	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	b002      	add	sp, #8
 8007682:	bd80      	pop	{r7, pc}

08007684 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <LL_ADC_REG_StartConversion+0x20>)
 8007692:	4013      	ands	r3, r2
 8007694:	2204      	movs	r2, #4
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800769c:	46c0      	nop			; (mov r8, r8)
 800769e:	46bd      	mov	sp, r7
 80076a0:	b002      	add	sp, #8
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	7fffffe8 	.word	0x7fffffe8

080076a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2204      	movs	r2, #4
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d101      	bne.n	80076c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	0018      	movs	r0, r3
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b002      	add	sp, #8
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076d4:	231f      	movs	r3, #31
 80076d6:	18fb      	adds	r3, r7, r3
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80076dc:	2300      	movs	r3, #0
 80076de:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e1ab      	b.n	8007a4a <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7ff fd11 	bl	8007124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2254      	movs	r2, #84	; 0x54
 800770c:	2100      	movs	r1, #0
 800770e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	0018      	movs	r0, r3
 8007716:	f7ff ff5b 	bl	80075d0 <LL_ADC_IsInternalRegulatorEnabled>
 800771a:	1e03      	subs	r3, r0, #0
 800771c:	d114      	bne.n	8007748 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	0018      	movs	r0, r3
 8007724:	f7ff ff40 	bl	80075a8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007728:	4bca      	ldr	r3, [pc, #808]	; (8007a54 <HAL_ADC_Init+0x388>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	49ca      	ldr	r1, [pc, #808]	; (8007a58 <HAL_ADC_Init+0x38c>)
 800772e:	0018      	movs	r0, r3
 8007730:	f7fe fd10 	bl	8006154 <__udivsi3>
 8007734:	0003      	movs	r3, r0
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800773a:	e002      	b.n	8007742 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	3b01      	subs	r3, #1
 8007740:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f9      	bne.n	800773c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	0018      	movs	r0, r3
 800774e:	f7ff ff3f 	bl	80075d0 <LL_ADC_IsInternalRegulatorEnabled>
 8007752:	1e03      	subs	r3, r0, #0
 8007754:	d10f      	bne.n	8007776 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775a:	2210      	movs	r2, #16
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007766:	2201      	movs	r2, #1
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800776e:	231f      	movs	r3, #31
 8007770:	18fb      	adds	r3, r7, r3
 8007772:	2201      	movs	r2, #1
 8007774:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	0018      	movs	r0, r3
 800777c:	f7ff ff94 	bl	80076a8 <LL_ADC_REG_IsConversionOngoing>
 8007780:	0003      	movs	r3, r0
 8007782:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	2210      	movs	r2, #16
 800778a:	4013      	ands	r3, r2
 800778c:	d000      	beq.n	8007790 <HAL_ADC_Init+0xc4>
 800778e:	e14f      	b.n	8007a30 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d000      	beq.n	8007798 <HAL_ADC_Init+0xcc>
 8007796:	e14b      	b.n	8007a30 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779c:	4aaf      	ldr	r2, [pc, #700]	; (8007a5c <HAL_ADC_Init+0x390>)
 800779e:	4013      	ands	r3, r2
 80077a0:	2202      	movs	r2, #2
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	0018      	movs	r0, r3
 80077ae:	f7ff ff47 	bl	8007640 <LL_ADC_IsEnabled>
 80077b2:	1e03      	subs	r3, r0, #0
 80077b4:	d151      	bne.n	800785a <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	2218      	movs	r2, #24
 80077be:	4393      	bics	r3, r2
 80077c0:	0019      	movs	r1, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	0f9b      	lsrs	r3, r3, #30
 80077d4:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80077da:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 80077e0:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 80077e6:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 80077ec:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	223c      	movs	r2, #60	; 0x3c
 80077f8:	5c9b      	ldrb	r3, [r3, r2]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d103      	bne.n	8007806 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2201      	movs	r2, #1
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	4a94      	ldr	r2, [pc, #592]	; (8007a60 <HAL_ADC_Init+0x394>)
 800780e:	4013      	ands	r3, r2
 8007810:	0019      	movs	r1, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	430a      	orrs	r2, r1
 800781a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	23c0      	movs	r3, #192	; 0xc0
 8007822:	061b      	lsls	r3, r3, #24
 8007824:	429a      	cmp	r2, r3
 8007826:	d018      	beq.n	800785a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800782c:	2380      	movs	r3, #128	; 0x80
 800782e:	05db      	lsls	r3, r3, #23
 8007830:	429a      	cmp	r2, r3
 8007832:	d012      	beq.n	800785a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007838:	2380      	movs	r3, #128	; 0x80
 800783a:	061b      	lsls	r3, r3, #24
 800783c:	429a      	cmp	r2, r3
 800783e:	d00c      	beq.n	800785a <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8007840:	4b88      	ldr	r3, [pc, #544]	; (8007a64 <HAL_ADC_Init+0x398>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a88      	ldr	r2, [pc, #544]	; (8007a68 <HAL_ADC_Init+0x39c>)
 8007846:	4013      	ands	r3, r2
 8007848:	0019      	movs	r1, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	23f0      	movs	r3, #240	; 0xf0
 8007850:	039b      	lsls	r3, r3, #14
 8007852:	401a      	ands	r2, r3
 8007854:	4b83      	ldr	r3, [pc, #524]	; (8007a64 <HAL_ADC_Init+0x398>)
 8007856:	430a      	orrs	r2, r1
 8007858:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7e1b      	ldrb	r3, [r3, #24]
 800785e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7e5b      	ldrb	r3, [r3, #25]
 8007864:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007866:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7e9b      	ldrb	r3, [r3, #26]
 800786c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800786e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_ADC_Init+0x1b2>
 8007878:	2380      	movs	r3, #128	; 0x80
 800787a:	015b      	lsls	r3, r3, #5
 800787c:	e000      	b.n	8007880 <HAL_ADC_Init+0x1b4>
 800787e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007880:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007886:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	da04      	bge.n	800789a <HAL_ADC_Init+0x1ce>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	e001      	b.n	800789e <HAL_ADC_Init+0x1d2>
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800789e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	212c      	movs	r1, #44	; 0x2c
 80078a4:	5c5b      	ldrb	r3, [r3, r1]
 80078a6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80078a8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	5c9b      	ldrb	r3, [r3, r2]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d115      	bne.n	80078e6 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	7e9b      	ldrb	r3, [r3, #26]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d105      	bne.n	80078ce <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2280      	movs	r2, #128	; 0x80
 80078c6:	0252      	lsls	r2, r2, #9
 80078c8:	4313      	orrs	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	e00b      	b.n	80078e6 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d2:	2220      	movs	r2, #32
 80078d4:	431a      	orrs	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078de:	2201      	movs	r2, #1
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078f2:	23e0      	movs	r3, #224	; 0xe0
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80078fc:	4313      	orrs	r3, r2
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	4313      	orrs	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	4a58      	ldr	r2, [pc, #352]	; (8007a6c <HAL_ADC_Init+0x3a0>)
 800790c:	4013      	ands	r3, r2
 800790e:	0019      	movs	r1, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	430a      	orrs	r2, r1
 8007918:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	4a53      	ldr	r2, [pc, #332]	; (8007a70 <HAL_ADC_Init+0x3a4>)
 8007922:	4013      	ands	r3, r2
 8007924:	0019      	movs	r1, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	430a      	orrs	r2, r1
 800792e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007938:	001a      	movs	r2, r3
 800793a:	2100      	movs	r1, #0
 800793c:	f7ff fdb7 	bl	80074ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	494a      	ldr	r1, [pc, #296]	; (8007a74 <HAL_ADC_Init+0x3a8>)
 800794a:	001a      	movs	r2, r3
 800794c:	f7ff fdaf 	bl	80074ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d109      	bne.n	800796c <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2110      	movs	r1, #16
 8007964:	4249      	negs	r1, r1
 8007966:	430a      	orrs	r2, r1
 8007968:	629a      	str	r2, [r3, #40]	; 0x28
 800796a:	e03a      	b.n	80079e2 <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	2380      	movs	r3, #128	; 0x80
 8007972:	039b      	lsls	r3, r3, #14
 8007974:	429a      	cmp	r2, r3
 8007976:	d134      	bne.n	80079e2 <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8007978:	2300      	movs	r3, #0
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	e00c      	b.n	8007998 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	40da      	lsrs	r2, r3
 8007988:	0013      	movs	r3, r2
 800798a:	220f      	movs	r2, #15
 800798c:	4013      	ands	r3, r2
 800798e:	2b0f      	cmp	r3, #15
 8007990:	d006      	beq.n	80079a0 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	3301      	adds	r3, #1
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b07      	cmp	r3, #7
 800799c:	d9ef      	bls.n	800797e <HAL_ADC_Init+0x2b2>
 800799e:	e000      	b.n	80079a2 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 80079a0:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d109      	bne.n	80079bc <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2110      	movs	r1, #16
 80079b4:	4249      	negs	r1, r1
 80079b6:	430a      	orrs	r2, r1
 80079b8:	629a      	str	r2, [r3, #40]	; 0x28
 80079ba:	e012      	b.n	80079e2 <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	221c      	movs	r2, #28
 80079cc:	4013      	ands	r3, r2
 80079ce:	2210      	movs	r2, #16
 80079d0:	4252      	negs	r2, r2
 80079d2:	409a      	lsls	r2, r3
 80079d4:	0011      	movs	r1, r2
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	4a23      	ldr	r2, [pc, #140]	; (8007a78 <HAL_ADC_Init+0x3ac>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d10b      	bne.n	8007a0a <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fc:	2203      	movs	r2, #3
 80079fe:	4393      	bics	r3, r2
 8007a00:	2201      	movs	r2, #1
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8007a08:	e01c      	b.n	8007a44 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0e:	2212      	movs	r2, #18
 8007a10:	4393      	bics	r3, r2
 8007a12:	2210      	movs	r2, #16
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1e:	2201      	movs	r2, #1
 8007a20:	431a      	orrs	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8007a26:	231f      	movs	r3, #31
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8007a2e:	e009      	b.n	8007a44 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a34:	2210      	movs	r2, #16
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007a3c:	231f      	movs	r3, #31
 8007a3e:	18fb      	adds	r3, r7, r3
 8007a40:	2201      	movs	r2, #1
 8007a42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8007a44:	231f      	movs	r3, #31
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	781b      	ldrb	r3, [r3, #0]
}
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	b008      	add	sp, #32
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	20000004 	.word	0x20000004
 8007a58:	00030d40 	.word	0x00030d40
 8007a5c:	fffffefd 	.word	0xfffffefd
 8007a60:	1ffffc02 	.word	0x1ffffc02
 8007a64:	40012708 	.word	0x40012708
 8007a68:	ffc3ffff 	.word	0xffc3ffff
 8007a6c:	fffe0219 	.word	0xfffe0219
 8007a70:	dffffc02 	.word	0xdffffc02
 8007a74:	07ffff04 	.word	0x07ffff04
 8007a78:	833fffe7 	.word	0x833fffe7

08007a7c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007a7c:	b5b0      	push	{r4, r5, r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7ff fe0d 	bl	80076a8 <LL_ADC_REG_IsConversionOngoing>
 8007a8e:	1e03      	subs	r3, r0, #0
 8007a90:	d135      	bne.n	8007afe <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2254      	movs	r2, #84	; 0x54
 8007a96:	5c9b      	ldrb	r3, [r3, r2]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_ADC_Start+0x24>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e035      	b.n	8007b0c <HAL_ADC_Start+0x90>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2254      	movs	r2, #84	; 0x54
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007aa8:	250f      	movs	r5, #15
 8007aaa:	197c      	adds	r4, r7, r5
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f000 fa0c 	bl	8007ecc <ADC_Enable>
 8007ab4:	0003      	movs	r3, r0
 8007ab6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007ab8:	197b      	adds	r3, r7, r5
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d119      	bne.n	8007af4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac4:	4a13      	ldr	r2, [pc, #76]	; (8007b14 <HAL_ADC_Start+0x98>)
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	2280      	movs	r2, #128	; 0x80
 8007aca:	0052      	lsls	r2, r2, #1
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	221c      	movs	r2, #28
 8007ade:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2254      	movs	r2, #84	; 0x54
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	0018      	movs	r0, r3
 8007aee:	f7ff fdc9 	bl	8007684 <LL_ADC_REG_StartConversion>
 8007af2:	e008      	b.n	8007b06 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2254      	movs	r2, #84	; 0x54
 8007af8:	2100      	movs	r1, #0
 8007afa:	5499      	strb	r1, [r3, r2]
 8007afc:	e003      	b.n	8007b06 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007afe:	230f      	movs	r3, #15
 8007b00:	18fb      	adds	r3, r7, r3
 8007b02:	2202      	movs	r2, #2
 8007b04:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8007b06:	230f      	movs	r3, #15
 8007b08:	18fb      	adds	r3, r7, r3
 8007b0a:	781b      	ldrb	r3, [r3, #0]
}
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b004      	add	sp, #16
 8007b12:	bdb0      	pop	{r4, r5, r7, pc}
 8007b14:	fffff0fe 	.word	0xfffff0fe

08007b18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b22:	2317      	movs	r3, #23
 8007b24:	18fb      	adds	r3, r7, r3
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2254      	movs	r2, #84	; 0x54
 8007b32:	5c9b      	ldrb	r3, [r3, r2]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_ADC_ConfigChannel+0x24>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e1c2      	b.n	8007ec2 <HAL_ADC_ConfigChannel+0x3aa>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2254      	movs	r2, #84	; 0x54
 8007b40:	2101      	movs	r1, #1
 8007b42:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	0018      	movs	r0, r3
 8007b4a:	f7ff fdad 	bl	80076a8 <LL_ADC_REG_IsConversionOngoing>
 8007b4e:	1e03      	subs	r3, r0, #0
 8007b50:	d000      	beq.n	8007b54 <HAL_ADC_ConfigChannel+0x3c>
 8007b52:	e1a5      	b.n	8007ea0 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d100      	bne.n	8007b5e <HAL_ADC_ConfigChannel+0x46>
 8007b5c:	e144      	b.n	8007de8 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	2380      	movs	r3, #128	; 0x80
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d004      	beq.n	8007b74 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007b6e:	4ac2      	ldr	r2, [pc, #776]	; (8007e78 <HAL_ADC_ConfigChannel+0x360>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d108      	bne.n	8007b86 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	0010      	movs	r0, r2
 8007b80:	f7ff fcd2 	bl	8007528 <LL_ADC_REG_SetSequencerChAdd>
 8007b84:	e0c9      	b.n	8007d1a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	211f      	movs	r1, #31
 8007b90:	400b      	ands	r3, r1
 8007b92:	210f      	movs	r1, #15
 8007b94:	4099      	lsls	r1, r3
 8007b96:	000b      	movs	r3, r1
 8007b98:	43db      	mvns	r3, r3
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	0019      	movs	r1, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	035b      	lsls	r3, r3, #13
 8007ba4:	0b5b      	lsrs	r3, r3, #13
 8007ba6:	d105      	bne.n	8007bb4 <HAL_ADC_ConfigChannel+0x9c>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	0e9b      	lsrs	r3, r3, #26
 8007bae:	221f      	movs	r2, #31
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	e098      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4013      	ands	r3, r2
 8007bbc:	d000      	beq.n	8007bc0 <HAL_ADC_ConfigChannel+0xa8>
 8007bbe:	e091      	b.n	8007ce4 <HAL_ADC_ConfigChannel+0x1cc>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	d000      	beq.n	8007bcc <HAL_ADC_ConfigChannel+0xb4>
 8007bca:	e089      	b.n	8007ce0 <HAL_ADC_ConfigChannel+0x1c8>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	d000      	beq.n	8007bd8 <HAL_ADC_ConfigChannel+0xc0>
 8007bd6:	e081      	b.n	8007cdc <HAL_ADC_ConfigChannel+0x1c4>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2208      	movs	r2, #8
 8007bde:	4013      	ands	r3, r2
 8007be0:	d000      	beq.n	8007be4 <HAL_ADC_ConfigChannel+0xcc>
 8007be2:	e079      	b.n	8007cd8 <HAL_ADC_ConfigChannel+0x1c0>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2210      	movs	r2, #16
 8007bea:	4013      	ands	r3, r2
 8007bec:	d000      	beq.n	8007bf0 <HAL_ADC_ConfigChannel+0xd8>
 8007bee:	e071      	b.n	8007cd4 <HAL_ADC_ConfigChannel+0x1bc>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	d000      	beq.n	8007bfc <HAL_ADC_ConfigChannel+0xe4>
 8007bfa:	e069      	b.n	8007cd0 <HAL_ADC_ConfigChannel+0x1b8>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2240      	movs	r2, #64	; 0x40
 8007c02:	4013      	ands	r3, r2
 8007c04:	d000      	beq.n	8007c08 <HAL_ADC_ConfigChannel+0xf0>
 8007c06:	e061      	b.n	8007ccc <HAL_ADC_ConfigChannel+0x1b4>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2280      	movs	r2, #128	; 0x80
 8007c0e:	4013      	ands	r3, r2
 8007c10:	d000      	beq.n	8007c14 <HAL_ADC_ConfigChannel+0xfc>
 8007c12:	e059      	b.n	8007cc8 <HAL_ADC_ConfigChannel+0x1b0>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	2380      	movs	r3, #128	; 0x80
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	d151      	bne.n	8007cc4 <HAL_ADC_ConfigChannel+0x1ac>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	2380      	movs	r3, #128	; 0x80
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4013      	ands	r3, r2
 8007c2a:	d149      	bne.n	8007cc0 <HAL_ADC_ConfigChannel+0x1a8>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	2380      	movs	r3, #128	; 0x80
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4013      	ands	r3, r2
 8007c36:	d141      	bne.n	8007cbc <HAL_ADC_ConfigChannel+0x1a4>
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	2380      	movs	r3, #128	; 0x80
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	4013      	ands	r3, r2
 8007c42:	d139      	bne.n	8007cb8 <HAL_ADC_ConfigChannel+0x1a0>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	2380      	movs	r3, #128	; 0x80
 8007c4a:	015b      	lsls	r3, r3, #5
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	d131      	bne.n	8007cb4 <HAL_ADC_ConfigChannel+0x19c>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	2380      	movs	r3, #128	; 0x80
 8007c56:	019b      	lsls	r3, r3, #6
 8007c58:	4013      	ands	r3, r2
 8007c5a:	d129      	bne.n	8007cb0 <HAL_ADC_ConfigChannel+0x198>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	2380      	movs	r3, #128	; 0x80
 8007c62:	01db      	lsls	r3, r3, #7
 8007c64:	4013      	ands	r3, r2
 8007c66:	d121      	bne.n	8007cac <HAL_ADC_ConfigChannel+0x194>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	2380      	movs	r3, #128	; 0x80
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	4013      	ands	r3, r2
 8007c72:	d119      	bne.n	8007ca8 <HAL_ADC_ConfigChannel+0x190>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	025b      	lsls	r3, r3, #9
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	d111      	bne.n	8007ca4 <HAL_ADC_ConfigChannel+0x18c>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	2380      	movs	r3, #128	; 0x80
 8007c86:	029b      	lsls	r3, r3, #10
 8007c88:	4013      	ands	r3, r2
 8007c8a:	d109      	bne.n	8007ca0 <HAL_ADC_ConfigChannel+0x188>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	2380      	movs	r3, #128	; 0x80
 8007c92:	02db      	lsls	r3, r3, #11
 8007c94:	4013      	ands	r3, r2
 8007c96:	d001      	beq.n	8007c9c <HAL_ADC_ConfigChannel+0x184>
 8007c98:	2312      	movs	r3, #18
 8007c9a:	e024      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	e022      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007ca0:	2311      	movs	r3, #17
 8007ca2:	e020      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	e01e      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007ca8:	230f      	movs	r3, #15
 8007caa:	e01c      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cac:	230e      	movs	r3, #14
 8007cae:	e01a      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cb0:	230d      	movs	r3, #13
 8007cb2:	e018      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	e016      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cb8:	230b      	movs	r3, #11
 8007cba:	e014      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cbc:	230a      	movs	r3, #10
 8007cbe:	e012      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cc0:	2309      	movs	r3, #9
 8007cc2:	e010      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	e00e      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cc8:	2307      	movs	r3, #7
 8007cca:	e00c      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007ccc:	2306      	movs	r3, #6
 8007cce:	e00a      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cd0:	2305      	movs	r3, #5
 8007cd2:	e008      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	e006      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e004      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	e002      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <HAL_ADC_ConfigChannel+0x1ce>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	6852      	ldr	r2, [r2, #4]
 8007cea:	201f      	movs	r0, #31
 8007cec:	4002      	ands	r2, r0
 8007cee:	4093      	lsls	r3, r2
 8007cf0:	000a      	movs	r2, r1
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	089b      	lsrs	r3, r3, #2
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d808      	bhi.n	8007d1a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	6859      	ldr	r1, [r3, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	001a      	movs	r2, r3
 8007d16:	f7ff fbe7 	bl	80074e8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6819      	ldr	r1, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	001a      	movs	r2, r3
 8007d28:	f7ff fc22 	bl	8007570 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	db00      	blt.n	8007d36 <HAL_ADC_ConfigChannel+0x21e>
 8007d34:	e0be      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d36:	4b51      	ldr	r3, [pc, #324]	; (8007e7c <HAL_ADC_ConfigChannel+0x364>)
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f7ff fbab 	bl	8007494 <LL_ADC_GetCommonPathInternalCh>
 8007d3e:	0003      	movs	r3, r0
 8007d40:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a4e      	ldr	r2, [pc, #312]	; (8007e80 <HAL_ADC_ConfigChannel+0x368>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d123      	bne.n	8007d94 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	2380      	movs	r3, #128	; 0x80
 8007d50:	041b      	lsls	r3, r3, #16
 8007d52:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007d54:	d11e      	bne.n	8007d94 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2280      	movs	r2, #128	; 0x80
 8007d5a:	0412      	lsls	r2, r2, #16
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	4a47      	ldr	r2, [pc, #284]	; (8007e7c <HAL_ADC_ConfigChannel+0x364>)
 8007d60:	0019      	movs	r1, r3
 8007d62:	0010      	movs	r0, r2
 8007d64:	f7ff fb82 	bl	800746c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8007d68:	4b46      	ldr	r3, [pc, #280]	; (8007e84 <HAL_ADC_ConfigChannel+0x36c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4946      	ldr	r1, [pc, #280]	; (8007e88 <HAL_ADC_ConfigChannel+0x370>)
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f7fe f9f0 	bl	8006154 <__udivsi3>
 8007d74:	0003      	movs	r3, r0
 8007d76:	001a      	movs	r2, r3
 8007d78:	0013      	movs	r3, r2
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	189b      	adds	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	3301      	adds	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007d84:	e002      	b.n	8007d8c <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f9      	bne.n	8007d86 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007d92:	e08f      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a3c      	ldr	r2, [pc, #240]	; (8007e8c <HAL_ADC_ConfigChannel+0x374>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d10e      	bne.n	8007dbc <HAL_ADC_ConfigChannel+0x2a4>
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	2380      	movs	r3, #128	; 0x80
 8007da2:	045b      	lsls	r3, r3, #17
 8007da4:	4013      	ands	r3, r2
 8007da6:	d109      	bne.n	8007dbc <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2280      	movs	r2, #128	; 0x80
 8007dac:	0452      	lsls	r2, r2, #17
 8007dae:	4313      	orrs	r3, r2
 8007db0:	4a32      	ldr	r2, [pc, #200]	; (8007e7c <HAL_ADC_ConfigChannel+0x364>)
 8007db2:	0019      	movs	r1, r3
 8007db4:	0010      	movs	r0, r2
 8007db6:	f7ff fb59 	bl	800746c <LL_ADC_SetCommonPathInternalCh>
 8007dba:	e07b      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a33      	ldr	r2, [pc, #204]	; (8007e90 <HAL_ADC_ConfigChannel+0x378>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d000      	beq.n	8007dc8 <HAL_ADC_ConfigChannel+0x2b0>
 8007dc6:	e075      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	2380      	movs	r3, #128	; 0x80
 8007dcc:	03db      	lsls	r3, r3, #15
 8007dce:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007dd0:	d000      	beq.n	8007dd4 <HAL_ADC_ConfigChannel+0x2bc>
 8007dd2:	e06f      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2280      	movs	r2, #128	; 0x80
 8007dd8:	03d2      	lsls	r2, r2, #15
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	4a27      	ldr	r2, [pc, #156]	; (8007e7c <HAL_ADC_ConfigChannel+0x364>)
 8007dde:	0019      	movs	r1, r3
 8007de0:	0010      	movs	r0, r2
 8007de2:	f7ff fb43 	bl	800746c <LL_ADC_SetCommonPathInternalCh>
 8007de6:	e065      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	2380      	movs	r3, #128	; 0x80
 8007dee:	061b      	lsls	r3, r3, #24
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d004      	beq.n	8007dfe <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007df8:	4a1f      	ldr	r2, [pc, #124]	; (8007e78 <HAL_ADC_ConfigChannel+0x360>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d107      	bne.n	8007e0e <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	0019      	movs	r1, r3
 8007e08:	0010      	movs	r0, r2
 8007e0a:	f7ff fb9e 	bl	800754a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	da4e      	bge.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e16:	4b19      	ldr	r3, [pc, #100]	; (8007e7c <HAL_ADC_ConfigChannel+0x364>)
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f7ff fb3b 	bl	8007494 <LL_ADC_GetCommonPathInternalCh>
 8007e1e:	0003      	movs	r3, r0
 8007e20:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a16      	ldr	r2, [pc, #88]	; (8007e80 <HAL_ADC_ConfigChannel+0x368>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d108      	bne.n	8007e3e <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	4a19      	ldr	r2, [pc, #100]	; (8007e94 <HAL_ADC_ConfigChannel+0x37c>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <HAL_ADC_ConfigChannel+0x364>)
 8007e34:	0019      	movs	r1, r3
 8007e36:	0010      	movs	r0, r2
 8007e38:	f7ff fb18 	bl	800746c <LL_ADC_SetCommonPathInternalCh>
 8007e3c:	e03a      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a12      	ldr	r2, [pc, #72]	; (8007e8c <HAL_ADC_ConfigChannel+0x374>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d108      	bne.n	8007e5a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4a13      	ldr	r2, [pc, #76]	; (8007e98 <HAL_ADC_ConfigChannel+0x380>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	4a0b      	ldr	r2, [pc, #44]	; (8007e7c <HAL_ADC_ConfigChannel+0x364>)
 8007e50:	0019      	movs	r1, r3
 8007e52:	0010      	movs	r0, r2
 8007e54:	f7ff fb0a 	bl	800746c <LL_ADC_SetCommonPathInternalCh>
 8007e58:	e02c      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a0c      	ldr	r2, [pc, #48]	; (8007e90 <HAL_ADC_ConfigChannel+0x378>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d127      	bne.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4a0d      	ldr	r2, [pc, #52]	; (8007e9c <HAL_ADC_ConfigChannel+0x384>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	4a04      	ldr	r2, [pc, #16]	; (8007e7c <HAL_ADC_ConfigChannel+0x364>)
 8007e6c:	0019      	movs	r1, r3
 8007e6e:	0010      	movs	r0, r2
 8007e70:	f7ff fafc 	bl	800746c <LL_ADC_SetCommonPathInternalCh>
 8007e74:	e01e      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x39c>
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	80000004 	.word	0x80000004
 8007e7c:	40012708 	.word	0x40012708
 8007e80:	b0001000 	.word	0xb0001000
 8007e84:	20000004 	.word	0x20000004
 8007e88:	00030d40 	.word	0x00030d40
 8007e8c:	b8004000 	.word	0xb8004000
 8007e90:	b4002000 	.word	0xb4002000
 8007e94:	ff7fffff 	.word	0xff7fffff
 8007e98:	feffffff 	.word	0xfeffffff
 8007e9c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007eac:	2317      	movs	r3, #23
 8007eae:	18fb      	adds	r3, r7, r3
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2254      	movs	r2, #84	; 0x54
 8007eb8:	2100      	movs	r1, #0
 8007eba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8007ebc:	2317      	movs	r3, #23
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	781b      	ldrb	r3, [r3, #0]
}
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	b006      	add	sp, #24
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	46c0      	nop			; (mov r8, r8)

08007ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	0018      	movs	r0, r3
 8007ede:	f7ff fbaf 	bl	8007640 <LL_ADC_IsEnabled>
 8007ee2:	1e03      	subs	r3, r0, #0
 8007ee4:	d162      	bne.n	8007fac <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	4a32      	ldr	r2, [pc, #200]	; (8007fb8 <ADC_Enable+0xec>)
 8007eee:	4013      	ands	r3, r2
 8007ef0:	d00d      	beq.n	8007f0e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef6:	2210      	movs	r2, #16
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f02:	2201      	movs	r2, #1
 8007f04:	431a      	orrs	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e04f      	b.n	8007fae <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	0018      	movs	r0, r3
 8007f14:	f7ff fb70 	bl	80075f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007f18:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <ADC_Enable+0xf0>)
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	f7ff faba 	bl	8007494 <LL_ADC_GetCommonPathInternalCh>
 8007f20:	0002      	movs	r2, r0
 8007f22:	2380      	movs	r3, #128	; 0x80
 8007f24:	041b      	lsls	r3, r3, #16
 8007f26:	4013      	ands	r3, r2
 8007f28:	d00f      	beq.n	8007f4a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8007f2a:	4b25      	ldr	r3, [pc, #148]	; (8007fc0 <ADC_Enable+0xf4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4925      	ldr	r1, [pc, #148]	; (8007fc4 <ADC_Enable+0xf8>)
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7fe f90f 	bl	8006154 <__udivsi3>
 8007f36:	0003      	movs	r3, r0
 8007f38:	3301      	adds	r3, #1
 8007f3a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007f3c:	e002      	b.n	8007f44 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f9      	bne.n	8007f3e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7e5b      	ldrb	r3, [r3, #25]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d02c      	beq.n	8007fac <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007f52:	f7ff fa47 	bl	80073e4 <HAL_GetTick>
 8007f56:	0003      	movs	r3, r0
 8007f58:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f5a:	e020      	b.n	8007f9e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	0018      	movs	r0, r3
 8007f62:	f7ff fb6d 	bl	8007640 <LL_ADC_IsEnabled>
 8007f66:	1e03      	subs	r3, r0, #0
 8007f68:	d104      	bne.n	8007f74 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f7ff fb42 	bl	80075f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007f74:	f7ff fa36 	bl	80073e4 <HAL_GetTick>
 8007f78:	0002      	movs	r2, r0
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d90d      	bls.n	8007f9e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	2210      	movs	r2, #16
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f92:	2201      	movs	r2, #1
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e007      	b.n	8007fae <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d1d7      	bne.n	8007f5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	0018      	movs	r0, r3
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b004      	add	sp, #16
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	80000017 	.word	0x80000017
 8007fbc:	40012708 	.word	0x40012708
 8007fc0:	20000004 	.word	0x20000004
 8007fc4:	00030d40 	.word	0x00030d40

08007fc8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	f7ff fb44 	bl	8007662 <LL_ADC_IsDisableOngoing>
 8007fda:	0003      	movs	r3, r0
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f7ff fb2c 	bl	8007640 <LL_ADC_IsEnabled>
 8007fe8:	1e03      	subs	r3, r0, #0
 8007fea:	d040      	beq.n	800806e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d13d      	bne.n	800806e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d10d      	bne.n	800801c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	0018      	movs	r0, r3
 8008006:	f7ff fb09 	bl	800761c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2203      	movs	r2, #3
 8008010:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008012:	f7ff f9e7 	bl	80073e4 <HAL_GetTick>
 8008016:	0003      	movs	r3, r0
 8008018:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800801a:	e022      	b.n	8008062 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008020:	2210      	movs	r2, #16
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	2201      	movs	r2, #1
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e01b      	b.n	8008070 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008038:	f7ff f9d4 	bl	80073e4 <HAL_GetTick>
 800803c:	0002      	movs	r2, r0
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d90d      	bls.n	8008062 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804a:	2210      	movs	r2, #16
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	2201      	movs	r2, #1
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e006      	b.n	8008070 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2201      	movs	r2, #1
 800806a:	4013      	ands	r3, r2
 800806c:	d1e4      	bne.n	8008038 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	0018      	movs	r0, r3
 8008072:	46bd      	mov	sp, r7
 8008074:	b004      	add	sp, #16
 8008076:	bd80      	pop	{r7, pc}

08008078 <LL_ADC_IsEnabled>:
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2201      	movs	r2, #1
 8008086:	4013      	ands	r3, r2
 8008088:	2b01      	cmp	r3, #1
 800808a:	d101      	bne.n	8008090 <LL_ADC_IsEnabled+0x18>
 800808c:	2301      	movs	r3, #1
 800808e:	e000      	b.n	8008092 <LL_ADC_IsEnabled+0x1a>
 8008090:	2300      	movs	r3, #0
}
 8008092:	0018      	movs	r0, r3
 8008094:	46bd      	mov	sp, r7
 8008096:	b002      	add	sp, #8
 8008098:	bd80      	pop	{r7, pc}

0800809a <LL_ADC_IsCalibrationOnGoing>:
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	0fdb      	lsrs	r3, r3, #31
 80080a8:	07da      	lsls	r2, r3, #31
 80080aa:	2380      	movs	r3, #128	; 0x80
 80080ac:	061b      	lsls	r3, r3, #24
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d101      	bne.n	80080b6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e000      	b.n	80080b8 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	0018      	movs	r0, r3
 80080ba:	46bd      	mov	sp, r7
 80080bc:	b002      	add	sp, #8
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80080c0:	b590      	push	{r4, r7, lr}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2254      	movs	r2, #84	; 0x54
 80080d0:	5c9b      	ldrb	r3, [r3, r2]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <HAL_ADCEx_Calibration_Start+0x1a>
 80080d6:	2302      	movs	r3, #2
 80080d8:	e06c      	b.n	80081b4 <HAL_ADCEx_Calibration_Start+0xf4>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2254      	movs	r2, #84	; 0x54
 80080de:	2101      	movs	r1, #1
 80080e0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80080e2:	2317      	movs	r3, #23
 80080e4:	18fc      	adds	r4, r7, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	0018      	movs	r0, r3
 80080ea:	f7ff ff6d 	bl	8007fc8 <ADC_Disable>
 80080ee:	0003      	movs	r3, r0
 80080f0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	0018      	movs	r0, r3
 80080f8:	f7ff ffbe 	bl	8008078 <LL_ADC_IsEnabled>
 80080fc:	1e03      	subs	r3, r0, #0
 80080fe:	d14c      	bne.n	800819a <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008104:	4a2d      	ldr	r2, [pc, #180]	; (80081bc <HAL_ADCEx_Calibration_Start+0xfc>)
 8008106:	4013      	ands	r3, r2
 8008108:	2202      	movs	r2, #2
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2203      	movs	r2, #3
 8008118:	4013      	ands	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2103      	movs	r1, #3
 8008128:	438a      	bics	r2, r1
 800812a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	0609      	lsls	r1, r1, #24
 800813a:	430a      	orrs	r2, r1
 800813c:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800813e:	e014      	b.n	800816a <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4a1d      	ldr	r2, [pc, #116]	; (80081c0 <HAL_ADCEx_Calibration_Start+0x100>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d90d      	bls.n	800816a <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008152:	2212      	movs	r2, #18
 8008154:	4393      	bics	r3, r2
 8008156:	2210      	movs	r2, #16
 8008158:	431a      	orrs	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2254      	movs	r2, #84	; 0x54
 8008162:	2100      	movs	r1, #0
 8008164:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e024      	b.n	80081b4 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	0018      	movs	r0, r3
 8008170:	f7ff ff93 	bl	800809a <LL_ADC_IsCalibrationOnGoing>
 8008174:	1e03      	subs	r3, r0, #0
 8008176:	d1e3      	bne.n	8008140 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68d9      	ldr	r1, [r3, #12]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	430a      	orrs	r2, r1
 8008186:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818c:	2203      	movs	r2, #3
 800818e:	4393      	bics	r3, r2
 8008190:	2201      	movs	r2, #1
 8008192:	431a      	orrs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	659a      	str	r2, [r3, #88]	; 0x58
 8008198:	e005      	b.n	80081a6 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819e:	2210      	movs	r2, #16
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2254      	movs	r2, #84	; 0x54
 80081aa:	2100      	movs	r1, #0
 80081ac:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80081ae:	2317      	movs	r3, #23
 80081b0:	18fb      	adds	r3, r7, r3
 80081b2:	781b      	ldrb	r3, [r3, #0]
}
 80081b4:	0018      	movs	r0, r3
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b007      	add	sp, #28
 80081ba:	bd90      	pop	{r4, r7, pc}
 80081bc:	fffffefd 	.word	0xfffffefd
 80081c0:	0002f1ff 	.word	0x0002f1ff

080081c4 <__NVIC_SetPriority>:
{
 80081c4:	b590      	push	{r4, r7, lr}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	0002      	movs	r2, r0
 80081cc:	6039      	str	r1, [r7, #0]
 80081ce:	1dfb      	adds	r3, r7, #7
 80081d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80081d2:	1dfb      	adds	r3, r7, #7
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b7f      	cmp	r3, #127	; 0x7f
 80081d8:	d828      	bhi.n	800822c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081da:	4a2f      	ldr	r2, [pc, #188]	; (8008298 <__NVIC_SetPriority+0xd4>)
 80081dc:	1dfb      	adds	r3, r7, #7
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	b25b      	sxtb	r3, r3
 80081e2:	089b      	lsrs	r3, r3, #2
 80081e4:	33c0      	adds	r3, #192	; 0xc0
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	589b      	ldr	r3, [r3, r2]
 80081ea:	1dfa      	adds	r2, r7, #7
 80081ec:	7812      	ldrb	r2, [r2, #0]
 80081ee:	0011      	movs	r1, r2
 80081f0:	2203      	movs	r2, #3
 80081f2:	400a      	ands	r2, r1
 80081f4:	00d2      	lsls	r2, r2, #3
 80081f6:	21ff      	movs	r1, #255	; 0xff
 80081f8:	4091      	lsls	r1, r2
 80081fa:	000a      	movs	r2, r1
 80081fc:	43d2      	mvns	r2, r2
 80081fe:	401a      	ands	r2, r3
 8008200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	019b      	lsls	r3, r3, #6
 8008206:	22ff      	movs	r2, #255	; 0xff
 8008208:	401a      	ands	r2, r3
 800820a:	1dfb      	adds	r3, r7, #7
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	0018      	movs	r0, r3
 8008210:	2303      	movs	r3, #3
 8008212:	4003      	ands	r3, r0
 8008214:	00db      	lsls	r3, r3, #3
 8008216:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008218:	481f      	ldr	r0, [pc, #124]	; (8008298 <__NVIC_SetPriority+0xd4>)
 800821a:	1dfb      	adds	r3, r7, #7
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b25b      	sxtb	r3, r3
 8008220:	089b      	lsrs	r3, r3, #2
 8008222:	430a      	orrs	r2, r1
 8008224:	33c0      	adds	r3, #192	; 0xc0
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	501a      	str	r2, [r3, r0]
}
 800822a:	e031      	b.n	8008290 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800822c:	4a1b      	ldr	r2, [pc, #108]	; (800829c <__NVIC_SetPriority+0xd8>)
 800822e:	1dfb      	adds	r3, r7, #7
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	0019      	movs	r1, r3
 8008234:	230f      	movs	r3, #15
 8008236:	400b      	ands	r3, r1
 8008238:	3b08      	subs	r3, #8
 800823a:	089b      	lsrs	r3, r3, #2
 800823c:	3306      	adds	r3, #6
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	18d3      	adds	r3, r2, r3
 8008242:	3304      	adds	r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	1dfa      	adds	r2, r7, #7
 8008248:	7812      	ldrb	r2, [r2, #0]
 800824a:	0011      	movs	r1, r2
 800824c:	2203      	movs	r2, #3
 800824e:	400a      	ands	r2, r1
 8008250:	00d2      	lsls	r2, r2, #3
 8008252:	21ff      	movs	r1, #255	; 0xff
 8008254:	4091      	lsls	r1, r2
 8008256:	000a      	movs	r2, r1
 8008258:	43d2      	mvns	r2, r2
 800825a:	401a      	ands	r2, r3
 800825c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	019b      	lsls	r3, r3, #6
 8008262:	22ff      	movs	r2, #255	; 0xff
 8008264:	401a      	ands	r2, r3
 8008266:	1dfb      	adds	r3, r7, #7
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	0018      	movs	r0, r3
 800826c:	2303      	movs	r3, #3
 800826e:	4003      	ands	r3, r0
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008274:	4809      	ldr	r0, [pc, #36]	; (800829c <__NVIC_SetPriority+0xd8>)
 8008276:	1dfb      	adds	r3, r7, #7
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	001c      	movs	r4, r3
 800827c:	230f      	movs	r3, #15
 800827e:	4023      	ands	r3, r4
 8008280:	3b08      	subs	r3, #8
 8008282:	089b      	lsrs	r3, r3, #2
 8008284:	430a      	orrs	r2, r1
 8008286:	3306      	adds	r3, #6
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	18c3      	adds	r3, r0, r3
 800828c:	3304      	adds	r3, #4
 800828e:	601a      	str	r2, [r3, #0]
}
 8008290:	46c0      	nop			; (mov r8, r8)
 8008292:	46bd      	mov	sp, r7
 8008294:	b003      	add	sp, #12
 8008296:	bd90      	pop	{r4, r7, pc}
 8008298:	e000e100 	.word	0xe000e100
 800829c:	e000ed00 	.word	0xe000ed00

080082a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80082a4:	f3bf 8f4f 	dsb	sy
}
 80082a8:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082aa:	4b04      	ldr	r3, [pc, #16]	; (80082bc <__NVIC_SystemReset+0x1c>)
 80082ac:	4a04      	ldr	r2, [pc, #16]	; (80082c0 <__NVIC_SystemReset+0x20>)
 80082ae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80082b0:	f3bf 8f4f 	dsb	sy
}
 80082b4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	e7fd      	b.n	80082b6 <__NVIC_SystemReset+0x16>
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	e000ed00 	.word	0xe000ed00
 80082c0:	05fa0004 	.word	0x05fa0004

080082c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1e5a      	subs	r2, r3, #1
 80082d0:	2380      	movs	r3, #128	; 0x80
 80082d2:	045b      	lsls	r3, r3, #17
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d301      	bcc.n	80082dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80082d8:	2301      	movs	r3, #1
 80082da:	e010      	b.n	80082fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <SysTick_Config+0x44>)
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	3a01      	subs	r2, #1
 80082e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80082e4:	2301      	movs	r3, #1
 80082e6:	425b      	negs	r3, r3
 80082e8:	2103      	movs	r1, #3
 80082ea:	0018      	movs	r0, r3
 80082ec:	f7ff ff6a 	bl	80081c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082f0:	4b05      	ldr	r3, [pc, #20]	; (8008308 <SysTick_Config+0x44>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082f6:	4b04      	ldr	r3, [pc, #16]	; (8008308 <SysTick_Config+0x44>)
 80082f8:	2207      	movs	r2, #7
 80082fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	0018      	movs	r0, r3
 8008300:	46bd      	mov	sp, r7
 8008302:	b002      	add	sp, #8
 8008304:	bd80      	pop	{r7, pc}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	e000e010 	.word	0xe000e010

0800830c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
 8008316:	210f      	movs	r1, #15
 8008318:	187b      	adds	r3, r7, r1
 800831a:	1c02      	adds	r2, r0, #0
 800831c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	187b      	adds	r3, r7, r1
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	b25b      	sxtb	r3, r3
 8008326:	0011      	movs	r1, r2
 8008328:	0018      	movs	r0, r3
 800832a:	f7ff ff4b 	bl	80081c4 <__NVIC_SetPriority>
}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	46bd      	mov	sp, r7
 8008332:	b004      	add	sp, #16
 8008334:	bd80      	pop	{r7, pc}

08008336 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800833a:	f7ff ffb1 	bl	80082a0 <__NVIC_SystemReset>

0800833e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	0018      	movs	r0, r3
 800834a:	f7ff ffbb 	bl	80082c4 <SysTick_Config>
 800834e:	0003      	movs	r3, r0
}
 8008350:	0018      	movs	r0, r3
 8008352:	46bd      	mov	sp, r7
 8008354:	b002      	add	sp, #8
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008358:	b5b0      	push	{r4, r5, r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	603a      	str	r2, [r7, #0]
 8008364:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008366:	4b21      	ldr	r3, [pc, #132]	; (80083ec <HAL_FLASH_Program+0x94>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <HAL_FLASH_Program+0x1a>
 800836e:	2302      	movs	r3, #2
 8008370:	e038      	b.n	80083e4 <HAL_FLASH_Program+0x8c>
 8008372:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <HAL_FLASH_Program+0x94>)
 8008374:	2201      	movs	r2, #1
 8008376:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008378:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <HAL_FLASH_Program+0x94>)
 800837a:	2200      	movs	r2, #0
 800837c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800837e:	2517      	movs	r5, #23
 8008380:	197c      	adds	r4, r7, r5
 8008382:	23fa      	movs	r3, #250	; 0xfa
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	0018      	movs	r0, r3
 8008388:	f000 f874 	bl	8008474 <FLASH_WaitForLastOperation>
 800838c:	0003      	movs	r3, r0
 800838e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008390:	197b      	adds	r3, r7, r5
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11f      	bne.n	80083d8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d106      	bne.n	80083ac <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68b9      	ldr	r1, [r7, #8]
 80083a4:	0008      	movs	r0, r1
 80083a6:	f000 f8b3 	bl	8008510 <FLASH_Program_DoubleWord>
 80083aa:	e005      	b.n	80083b8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	0011      	movs	r1, r2
 80083b2:	0018      	movs	r0, r3
 80083b4:	f00d fb68 	bl	8015a88 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80083b8:	2317      	movs	r3, #23
 80083ba:	18fc      	adds	r4, r7, r3
 80083bc:	23fa      	movs	r3, #250	; 0xfa
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	0018      	movs	r0, r3
 80083c2:	f000 f857 	bl	8008474 <FLASH_WaitForLastOperation>
 80083c6:	0003      	movs	r3, r0
 80083c8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <HAL_FLASH_Program+0x98>)
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	43d9      	mvns	r1, r3
 80083d2:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <HAL_FLASH_Program+0x98>)
 80083d4:	400a      	ands	r2, r1
 80083d6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <HAL_FLASH_Program+0x94>)
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80083de:	2317      	movs	r3, #23
 80083e0:	18fb      	adds	r3, r7, r3
 80083e2:	781b      	ldrb	r3, [r3, #0]
}
 80083e4:	0018      	movs	r0, r3
 80083e6:	46bd      	mov	sp, r7
 80083e8:	b006      	add	sp, #24
 80083ea:	bdb0      	pop	{r4, r5, r7, pc}
 80083ec:	200001f4 	.word	0x200001f4
 80083f0:	40022000 	.word	0x40022000

080083f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80083fa:	1dfb      	adds	r3, r7, #7
 80083fc:	2200      	movs	r2, #0
 80083fe:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008400:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <HAL_FLASH_Unlock+0x3c>)
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	da0c      	bge.n	8008422 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008408:	4b09      	ldr	r3, [pc, #36]	; (8008430 <HAL_FLASH_Unlock+0x3c>)
 800840a:	4a0a      	ldr	r2, [pc, #40]	; (8008434 <HAL_FLASH_Unlock+0x40>)
 800840c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800840e:	4b08      	ldr	r3, [pc, #32]	; (8008430 <HAL_FLASH_Unlock+0x3c>)
 8008410:	4a09      	ldr	r2, [pc, #36]	; (8008438 <HAL_FLASH_Unlock+0x44>)
 8008412:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <HAL_FLASH_Unlock+0x3c>)
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	da02      	bge.n	8008422 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800841c:	1dfb      	adds	r3, r7, #7
 800841e:	2201      	movs	r2, #1
 8008420:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008422:	1dfb      	adds	r3, r7, #7
 8008424:	781b      	ldrb	r3, [r3, #0]
}
 8008426:	0018      	movs	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	b002      	add	sp, #8
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	40022000 	.word	0x40022000
 8008434:	45670123 	.word	0x45670123
 8008438:	cdef89ab 	.word	0xcdef89ab

0800843c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008442:	1dfb      	adds	r3, r7, #7
 8008444:	2201      	movs	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008448:	4b09      	ldr	r3, [pc, #36]	; (8008470 <HAL_FLASH_Lock+0x34>)
 800844a:	695a      	ldr	r2, [r3, #20]
 800844c:	4b08      	ldr	r3, [pc, #32]	; (8008470 <HAL_FLASH_Lock+0x34>)
 800844e:	2180      	movs	r1, #128	; 0x80
 8008450:	0609      	lsls	r1, r1, #24
 8008452:	430a      	orrs	r2, r1
 8008454:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008456:	4b06      	ldr	r3, [pc, #24]	; (8008470 <HAL_FLASH_Lock+0x34>)
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	da02      	bge.n	8008464 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800845e:	1dfb      	adds	r3, r7, #7
 8008460:	2200      	movs	r2, #0
 8008462:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008464:	1dfb      	adds	r3, r7, #7
 8008466:	781b      	ldrb	r3, [r3, #0]
}
 8008468:	0018      	movs	r0, r3
 800846a:	46bd      	mov	sp, r7
 800846c:	b002      	add	sp, #8
 800846e:	bd80      	pop	{r7, pc}
 8008470:	40022000 	.word	0x40022000

08008474 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800847c:	f7fe ffb2 	bl	80073e4 <HAL_GetTick>
 8008480:	0002      	movs	r2, r0
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	189b      	adds	r3, r3, r2
 8008486:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8008488:	2380      	movs	r3, #128	; 0x80
 800848a:	025b      	lsls	r3, r3, #9
 800848c:	60bb      	str	r3, [r7, #8]
#endif

  while ((FLASH->SR & error) != 0x00U)
 800848e:	e007      	b.n	80084a0 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8008490:	f7fe ffa8 	bl	80073e4 <HAL_GetTick>
 8008494:	0002      	movs	r2, r0
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4293      	cmp	r3, r2
 800849a:	d801      	bhi.n	80084a0 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e02a      	b.n	80084f6 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <FLASH_WaitForLastOperation+0x8c>)
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	4013      	ands	r3, r2
 80084a8:	d1f2      	bne.n	8008490 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80084aa:	4b15      	ldr	r3, [pc, #84]	; (8008500 <FLASH_WaitForLastOperation+0x8c>)
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	4a15      	ldr	r2, [pc, #84]	; (8008504 <FLASH_WaitForLastOperation+0x90>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80084b4:	4b12      	ldr	r3, [pc, #72]	; (8008500 <FLASH_WaitForLastOperation+0x8c>)
 80084b6:	4a14      	ldr	r2, [pc, #80]	; (8008508 <FLASH_WaitForLastOperation+0x94>)
 80084b8:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d004      	beq.n	80084ca <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80084c0:	4b12      	ldr	r3, [pc, #72]	; (800850c <FLASH_WaitForLastOperation+0x98>)
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e015      	b.n	80084f6 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80084ca:	f7fe ff8b 	bl	80073e4 <HAL_GetTick>
 80084ce:	0002      	movs	r2, r0
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	189b      	adds	r3, r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80084d6:	e007      	b.n	80084e8 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 80084d8:	f7fe ff84 	bl	80073e4 <HAL_GetTick>
 80084dc:	0002      	movs	r2, r0
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d801      	bhi.n	80084e8 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e006      	b.n	80084f6 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <FLASH_WaitForLastOperation+0x8c>)
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	2380      	movs	r3, #128	; 0x80
 80084ee:	02db      	lsls	r3, r3, #11
 80084f0:	4013      	ands	r3, r2
 80084f2:	d1f1      	bne.n	80084d8 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	0018      	movs	r0, r3
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b004      	add	sp, #16
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	40022000 	.word	0x40022000
 8008504:	0000c3fa 	.word	0x0000c3fa
 8008508:	0000c3fb 	.word	0x0000c3fb
 800850c:	200001f4 	.word	0x200001f4

08008510 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008510:	b5b0      	push	{r4, r5, r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	603a      	str	r2, [r7, #0]
 800851a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800851c:	4b0b      	ldr	r3, [pc, #44]	; (800854c <FLASH_Program_DoubleWord+0x3c>)
 800851e:	695a      	ldr	r2, [r3, #20]
 8008520:	4b0a      	ldr	r3, [pc, #40]	; (800854c <FLASH_Program_DoubleWord+0x3c>)
 8008522:	2101      	movs	r1, #1
 8008524:	430a      	orrs	r2, r1
 8008526:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800852e:	f3bf 8f6f 	isb	sy
}
 8008532:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	001c      	movs	r4, r3
 8008538:	2300      	movs	r3, #0
 800853a:	001d      	movs	r5, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3304      	adds	r3, #4
 8008540:	0022      	movs	r2, r4
 8008542:	601a      	str	r2, [r3, #0]
}
 8008544:	46c0      	nop			; (mov r8, r8)
 8008546:	46bd      	mov	sp, r7
 8008548:	b004      	add	sp, #16
 800854a:	bdb0      	pop	{r4, r5, r7, pc}
 800854c:	40022000 	.word	0x40022000

08008550 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008550:	b5b0      	push	{r4, r5, r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800855a:	4b35      	ldr	r3, [pc, #212]	; (8008630 <HAL_FLASHEx_Erase+0xe0>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d101      	bne.n	8008566 <HAL_FLASHEx_Erase+0x16>
 8008562:	2302      	movs	r3, #2
 8008564:	e05f      	b.n	8008626 <HAL_FLASHEx_Erase+0xd6>
 8008566:	4b32      	ldr	r3, [pc, #200]	; (8008630 <HAL_FLASHEx_Erase+0xe0>)
 8008568:	2201      	movs	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800856c:	4b30      	ldr	r3, [pc, #192]	; (8008630 <HAL_FLASHEx_Erase+0xe0>)
 800856e:	2200      	movs	r2, #0
 8008570:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008572:	250f      	movs	r5, #15
 8008574:	197c      	adds	r4, r7, r5
 8008576:	23fa      	movs	r3, #250	; 0xfa
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	0018      	movs	r0, r3
 800857c:	f7ff ff7a 	bl	8008474 <FLASH_WaitForLastOperation>
 8008580:	0003      	movs	r3, r0
 8008582:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008584:	002c      	movs	r4, r5
 8008586:	193b      	adds	r3, r7, r4
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d145      	bne.n	800861a <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2204      	movs	r2, #4
 8008592:	605a      	str	r2, [r3, #4]
#endif

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b04      	cmp	r3, #4
 800859a:	d10d      	bne.n	80085b8 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	0018      	movs	r0, r3
 80085a2:	f000 f849 	bl	8008638 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80085a6:	193c      	adds	r4, r7, r4
 80085a8:	23fa      	movs	r3, #250	; 0xfa
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	0018      	movs	r0, r3
 80085ae:	f7ff ff61 	bl	8008474 <FLASH_WaitForLastOperation>
 80085b2:	0003      	movs	r3, r0
 80085b4:	7023      	strb	r3, [r4, #0]
 80085b6:	e030      	b.n	800861a <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2201      	movs	r2, #1
 80085bc:	4252      	negs	r2, r2
 80085be:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	e01a      	b.n	80085fe <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	0011      	movs	r1, r2
 80085d0:	0018      	movs	r0, r3
 80085d2:	f000 f845 	bl	8008660 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80085d6:	250f      	movs	r5, #15
 80085d8:	197c      	adds	r4, r7, r5
 80085da:	23fa      	movs	r3, #250	; 0xfa
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	0018      	movs	r0, r3
 80085e0:	f7ff ff48 	bl	8008474 <FLASH_WaitForLastOperation>
 80085e4:	0003      	movs	r3, r0
 80085e6:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80085e8:	197b      	adds	r3, r7, r5
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	601a      	str	r2, [r3, #0]
          break;
 80085f6:	e00a      	b.n	800860e <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	3301      	adds	r3, #1
 80085fc:	60bb      	str	r3, [r7, #8]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	18d3      	adds	r3, r2, r3
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	429a      	cmp	r2, r3
 800860c:	d3dc      	bcc.n	80085c8 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800860e:	4b09      	ldr	r3, [pc, #36]	; (8008634 <HAL_FLASHEx_Erase+0xe4>)
 8008610:	695a      	ldr	r2, [r3, #20]
 8008612:	4b08      	ldr	r3, [pc, #32]	; (8008634 <HAL_FLASHEx_Erase+0xe4>)
 8008614:	2102      	movs	r1, #2
 8008616:	438a      	bics	r2, r1
 8008618:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800861a:	4b05      	ldr	r3, [pc, #20]	; (8008630 <HAL_FLASHEx_Erase+0xe0>)
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008620:	230f      	movs	r3, #15
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	781b      	ldrb	r3, [r3, #0]
}
 8008626:	0018      	movs	r0, r3
 8008628:	46bd      	mov	sp, r7
 800862a:	b004      	add	sp, #16
 800862c:	bdb0      	pop	{r4, r5, r7, pc}
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	200001f4 	.word	0x200001f4
 8008634:	40022000 	.word	0x40022000

08008638 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008640:	4b06      	ldr	r3, [pc, #24]	; (800865c <FLASH_MassErase+0x24>)
 8008642:	695a      	ldr	r2, [r3, #20]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	431a      	orrs	r2, r3
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <FLASH_MassErase+0x24>)
 800864a:	2180      	movs	r1, #128	; 0x80
 800864c:	0249      	lsls	r1, r1, #9
 800864e:	430a      	orrs	r2, r1
 8008650:	615a      	str	r2, [r3, #20]
}
 8008652:	46c0      	nop			; (mov r8, r8)
 8008654:	46bd      	mov	sp, r7
 8008656:	b002      	add	sp, #8
 8008658:	bd80      	pop	{r7, pc}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	40022000 	.word	0x40022000

08008660 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800866a:	4b08      	ldr	r3, [pc, #32]	; (800868c <FLASH_PageErase+0x2c>)
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	4a08      	ldr	r2, [pc, #32]	; (8008690 <FLASH_PageErase+0x30>)
 8008670:	4013      	ands	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	00da      	lsls	r2, r3, #3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	431a      	orrs	r2, r3
 800867c:	4b03      	ldr	r3, [pc, #12]	; (800868c <FLASH_PageErase+0x2c>)
 800867e:	4905      	ldr	r1, [pc, #20]	; (8008694 <FLASH_PageErase+0x34>)
 8008680:	430a      	orrs	r2, r1
 8008682:	615a      	str	r2, [r3, #20]
}
 8008684:	46c0      	nop			; (mov r8, r8)
 8008686:	46bd      	mov	sp, r7
 8008688:	b004      	add	sp, #16
 800868a:	bd80      	pop	{r7, pc}
 800868c:	40022000 	.word	0x40022000
 8008690:	fffffe07 	.word	0xfffffe07
 8008694:	00010002 	.word	0x00010002

08008698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086a6:	e147      	b.n	8008938 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2101      	movs	r1, #1
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4091      	lsls	r1, r2
 80086b2:	000a      	movs	r2, r1
 80086b4:	4013      	ands	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d100      	bne.n	80086c0 <HAL_GPIO_Init+0x28>
 80086be:	e138      	b.n	8008932 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d00b      	beq.n	80086e0 <HAL_GPIO_Init+0x48>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d007      	beq.n	80086e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086d4:	2b11      	cmp	r3, #17
 80086d6:	d003      	beq.n	80086e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2b12      	cmp	r3, #18
 80086de:	d130      	bne.n	8008742 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	2203      	movs	r2, #3
 80086ec:	409a      	lsls	r2, r3
 80086ee:	0013      	movs	r3, r2
 80086f0:	43da      	mvns	r2, r3
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	4013      	ands	r3, r2
 80086f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	409a      	lsls	r2, r3
 8008702:	0013      	movs	r3, r2
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	4313      	orrs	r3, r2
 8008708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008716:	2201      	movs	r2, #1
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	409a      	lsls	r2, r3
 800871c:	0013      	movs	r3, r2
 800871e:	43da      	mvns	r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	4013      	ands	r3, r2
 8008724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	091b      	lsrs	r3, r3, #4
 800872c:	2201      	movs	r2, #1
 800872e:	401a      	ands	r2, r3
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	409a      	lsls	r2, r3
 8008734:	0013      	movs	r3, r2
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	2203      	movs	r2, #3
 800874e:	409a      	lsls	r2, r3
 8008750:	0013      	movs	r3, r2
 8008752:	43da      	mvns	r2, r3
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4013      	ands	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	409a      	lsls	r2, r3
 8008764:	0013      	movs	r3, r2
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d003      	beq.n	8008782 <HAL_GPIO_Init+0xea>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b12      	cmp	r3, #18
 8008780:	d123      	bne.n	80087ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	08da      	lsrs	r2, r3, #3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3208      	adds	r2, #8
 800878a:	0092      	lsls	r2, r2, #2
 800878c:	58d3      	ldr	r3, [r2, r3]
 800878e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2207      	movs	r2, #7
 8008794:	4013      	ands	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	220f      	movs	r2, #15
 800879a:	409a      	lsls	r2, r3
 800879c:	0013      	movs	r3, r2
 800879e:	43da      	mvns	r2, r3
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	4013      	ands	r3, r2
 80087a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2107      	movs	r1, #7
 80087ae:	400b      	ands	r3, r1
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	409a      	lsls	r2, r3
 80087b4:	0013      	movs	r3, r2
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	08da      	lsrs	r2, r3, #3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3208      	adds	r2, #8
 80087c4:	0092      	lsls	r2, r2, #2
 80087c6:	6939      	ldr	r1, [r7, #16]
 80087c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	2203      	movs	r2, #3
 80087d6:	409a      	lsls	r2, r3
 80087d8:	0013      	movs	r3, r2
 80087da:	43da      	mvns	r2, r3
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4013      	ands	r3, r2
 80087e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2203      	movs	r2, #3
 80087e8:	401a      	ands	r2, r3
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	409a      	lsls	r2, r3
 80087f0:	0013      	movs	r3, r2
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	055b      	lsls	r3, r3, #21
 8008806:	4013      	ands	r3, r2
 8008808:	d100      	bne.n	800880c <HAL_GPIO_Init+0x174>
 800880a:	e092      	b.n	8008932 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800880c:	4a50      	ldr	r2, [pc, #320]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	089b      	lsrs	r3, r3, #2
 8008812:	3318      	adds	r3, #24
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	589b      	ldr	r3, [r3, r2]
 8008818:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2203      	movs	r2, #3
 800881e:	4013      	ands	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	220f      	movs	r2, #15
 8008824:	409a      	lsls	r2, r3
 8008826:	0013      	movs	r3, r2
 8008828:	43da      	mvns	r2, r3
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	4013      	ands	r3, r2
 800882e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	23a0      	movs	r3, #160	; 0xa0
 8008834:	05db      	lsls	r3, r3, #23
 8008836:	429a      	cmp	r2, r3
 8008838:	d013      	beq.n	8008862 <HAL_GPIO_Init+0x1ca>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a45      	ldr	r2, [pc, #276]	; (8008954 <HAL_GPIO_Init+0x2bc>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d00d      	beq.n	800885e <HAL_GPIO_Init+0x1c6>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a44      	ldr	r2, [pc, #272]	; (8008958 <HAL_GPIO_Init+0x2c0>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d007      	beq.n	800885a <HAL_GPIO_Init+0x1c2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a43      	ldr	r2, [pc, #268]	; (800895c <HAL_GPIO_Init+0x2c4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d101      	bne.n	8008856 <HAL_GPIO_Init+0x1be>
 8008852:	2303      	movs	r3, #3
 8008854:	e006      	b.n	8008864 <HAL_GPIO_Init+0x1cc>
 8008856:	2305      	movs	r3, #5
 8008858:	e004      	b.n	8008864 <HAL_GPIO_Init+0x1cc>
 800885a:	2302      	movs	r3, #2
 800885c:	e002      	b.n	8008864 <HAL_GPIO_Init+0x1cc>
 800885e:	2301      	movs	r3, #1
 8008860:	e000      	b.n	8008864 <HAL_GPIO_Init+0x1cc>
 8008862:	2300      	movs	r3, #0
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	2103      	movs	r1, #3
 8008868:	400a      	ands	r2, r1
 800886a:	00d2      	lsls	r2, r2, #3
 800886c:	4093      	lsls	r3, r2
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	4313      	orrs	r3, r2
 8008872:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008874:	4936      	ldr	r1, [pc, #216]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	089b      	lsrs	r3, r3, #2
 800887a:	3318      	adds	r3, #24
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008882:	4a33      	ldr	r2, [pc, #204]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	58d3      	ldr	r3, [r2, r3]
 8008888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	43da      	mvns	r2, r3
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	4013      	ands	r3, r2
 8008892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	2380      	movs	r3, #128	; 0x80
 800889a:	025b      	lsls	r3, r3, #9
 800889c:	4013      	ands	r3, r2
 800889e:	d003      	beq.n	80088a8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80088a8:	4929      	ldr	r1, [pc, #164]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 80088aa:	2280      	movs	r2, #128	; 0x80
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80088b0:	4a27      	ldr	r2, [pc, #156]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 80088b2:	2384      	movs	r3, #132	; 0x84
 80088b4:	58d3      	ldr	r3, [r2, r3]
 80088b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	43da      	mvns	r2, r3
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	4013      	ands	r3, r2
 80088c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	2380      	movs	r3, #128	; 0x80
 80088c8:	029b      	lsls	r3, r3, #10
 80088ca:	4013      	ands	r3, r2
 80088cc:	d003      	beq.n	80088d6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80088d6:	491e      	ldr	r1, [pc, #120]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 80088d8:	2284      	movs	r2, #132	; 0x84
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088de:	4b1c      	ldr	r3, [pc, #112]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	43da      	mvns	r2, r3
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	4013      	ands	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	2380      	movs	r3, #128	; 0x80
 80088f4:	035b      	lsls	r3, r3, #13
 80088f6:	4013      	ands	r3, r2
 80088f8:	d003      	beq.n	8008902 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	43da      	mvns	r2, r3
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	4013      	ands	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	2380      	movs	r3, #128	; 0x80
 800891e:	039b      	lsls	r3, r3, #14
 8008920:	4013      	ands	r3, r2
 8008922:	d003      	beq.n	800892c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800892c:	4b08      	ldr	r3, [pc, #32]	; (8008950 <HAL_GPIO_Init+0x2b8>)
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	3301      	adds	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	40da      	lsrs	r2, r3
 8008940:	1e13      	subs	r3, r2, #0
 8008942:	d000      	beq.n	8008946 <HAL_GPIO_Init+0x2ae>
 8008944:	e6b0      	b.n	80086a8 <HAL_GPIO_Init+0x10>
  }
}
 8008946:	46c0      	nop			; (mov r8, r8)
 8008948:	46c0      	nop			; (mov r8, r8)
 800894a:	46bd      	mov	sp, r7
 800894c:	b006      	add	sp, #24
 800894e:	bd80      	pop	{r7, pc}
 8008950:	40021800 	.word	0x40021800
 8008954:	50000400 	.word	0x50000400
 8008958:	50000800 	.word	0x50000800
 800895c:	50000c00 	.word	0x50000c00

08008960 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008968:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a19      	ldr	r2, [pc, #100]	; (80089d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800896e:	4013      	ands	r3, r2
 8008970:	0019      	movs	r1, r3
 8008972:	4b17      	ldr	r3, [pc, #92]	; (80089d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	430a      	orrs	r2, r1
 8008978:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	2380      	movs	r3, #128	; 0x80
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	429a      	cmp	r2, r3
 8008982:	d11f      	bne.n	80089c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8008984:	4b14      	ldr	r3, [pc, #80]	; (80089d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	0013      	movs	r3, r2
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	189b      	adds	r3, r3, r2
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	4912      	ldr	r1, [pc, #72]	; (80089dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008992:	0018      	movs	r0, r3
 8008994:	f7fd fbde 	bl	8006154 <__udivsi3>
 8008998:	0003      	movs	r3, r0
 800899a:	3301      	adds	r3, #1
 800899c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800899e:	e008      	b.n	80089b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e001      	b.n	80089b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e009      	b.n	80089c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089b2:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80089b4:	695a      	ldr	r2, [r3, #20]
 80089b6:	2380      	movs	r3, #128	; 0x80
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	401a      	ands	r2, r3
 80089bc:	2380      	movs	r3, #128	; 0x80
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d0ed      	beq.n	80089a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	0018      	movs	r0, r3
 80089c8:	46bd      	mov	sp, r7
 80089ca:	b004      	add	sp, #16
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	40007000 	.word	0x40007000
 80089d4:	fffff9ff 	.word	0xfffff9ff
 80089d8:	20000004 	.word	0x20000004
 80089dc:	000f4240 	.word	0x000f4240

080089e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e304      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2201      	movs	r2, #1
 80089f8:	4013      	ands	r3, r2
 80089fa:	d100      	bne.n	80089fe <HAL_RCC_OscConfig+0x1e>
 80089fc:	e07c      	b.n	8008af8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089fe:	4bc3      	ldr	r3, [pc, #780]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2238      	movs	r2, #56	; 0x38
 8008a04:	4013      	ands	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a08:	4bc0      	ldr	r3, [pc, #768]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	4013      	ands	r3, r2
 8008a10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b10      	cmp	r3, #16
 8008a16:	d102      	bne.n	8008a1e <HAL_RCC_OscConfig+0x3e>
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d002      	beq.n	8008a24 <HAL_RCC_OscConfig+0x44>
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d10b      	bne.n	8008a3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a24:	4bb9      	ldr	r3, [pc, #740]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	2380      	movs	r3, #128	; 0x80
 8008a2a:	029b      	lsls	r3, r3, #10
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	d062      	beq.n	8008af6 <HAL_RCC_OscConfig+0x116>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d15e      	bne.n	8008af6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e2df      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	025b      	lsls	r3, r3, #9
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d107      	bne.n	8008a58 <HAL_RCC_OscConfig+0x78>
 8008a48:	4bb0      	ldr	r3, [pc, #704]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	4baf      	ldr	r3, [pc, #700]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a4e:	2180      	movs	r1, #128	; 0x80
 8008a50:	0249      	lsls	r1, r1, #9
 8008a52:	430a      	orrs	r2, r1
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	e020      	b.n	8008a9a <HAL_RCC_OscConfig+0xba>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	23a0      	movs	r3, #160	; 0xa0
 8008a5e:	02db      	lsls	r3, r3, #11
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d10e      	bne.n	8008a82 <HAL_RCC_OscConfig+0xa2>
 8008a64:	4ba9      	ldr	r3, [pc, #676]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	4ba8      	ldr	r3, [pc, #672]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a6a:	2180      	movs	r1, #128	; 0x80
 8008a6c:	02c9      	lsls	r1, r1, #11
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	4ba6      	ldr	r3, [pc, #664]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	4ba5      	ldr	r3, [pc, #660]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a78:	2180      	movs	r1, #128	; 0x80
 8008a7a:	0249      	lsls	r1, r1, #9
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	e00b      	b.n	8008a9a <HAL_RCC_OscConfig+0xba>
 8008a82:	4ba2      	ldr	r3, [pc, #648]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4ba1      	ldr	r3, [pc, #644]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a88:	49a1      	ldr	r1, [pc, #644]	; (8008d10 <HAL_RCC_OscConfig+0x330>)
 8008a8a:	400a      	ands	r2, r1
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	4b9f      	ldr	r3, [pc, #636]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b9e      	ldr	r3, [pc, #632]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008a94:	499f      	ldr	r1, [pc, #636]	; (8008d14 <HAL_RCC_OscConfig+0x334>)
 8008a96:	400a      	ands	r2, r1
 8008a98:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d014      	beq.n	8008acc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa2:	f7fe fc9f 	bl	80073e4 <HAL_GetTick>
 8008aa6:	0003      	movs	r3, r0
 8008aa8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008aaa:	e008      	b.n	8008abe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008aac:	f7fe fc9a 	bl	80073e4 <HAL_GetTick>
 8008ab0:	0002      	movs	r2, r0
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b64      	cmp	r3, #100	; 0x64
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e29e      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008abe:	4b93      	ldr	r3, [pc, #588]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	2380      	movs	r3, #128	; 0x80
 8008ac4:	029b      	lsls	r3, r3, #10
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	d0f0      	beq.n	8008aac <HAL_RCC_OscConfig+0xcc>
 8008aca:	e015      	b.n	8008af8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008acc:	f7fe fc8a 	bl	80073e4 <HAL_GetTick>
 8008ad0:	0003      	movs	r3, r0
 8008ad2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ad4:	e008      	b.n	8008ae8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ad6:	f7fe fc85 	bl	80073e4 <HAL_GetTick>
 8008ada:	0002      	movs	r2, r0
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b64      	cmp	r3, #100	; 0x64
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e289      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ae8:	4b88      	ldr	r3, [pc, #544]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	029b      	lsls	r3, r3, #10
 8008af0:	4013      	ands	r3, r2
 8008af2:	d1f0      	bne.n	8008ad6 <HAL_RCC_OscConfig+0xf6>
 8008af4:	e000      	b.n	8008af8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008af6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2202      	movs	r2, #2
 8008afe:	4013      	ands	r3, r2
 8008b00:	d100      	bne.n	8008b04 <HAL_RCC_OscConfig+0x124>
 8008b02:	e099      	b.n	8008c38 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b04:	4b81      	ldr	r3, [pc, #516]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	2238      	movs	r2, #56	; 0x38
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b0e:	4b7f      	ldr	r3, [pc, #508]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	2203      	movs	r2, #3
 8008b14:	4013      	ands	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	2b10      	cmp	r3, #16
 8008b1c:	d102      	bne.n	8008b24 <HAL_RCC_OscConfig+0x144>
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d002      	beq.n	8008b2a <HAL_RCC_OscConfig+0x14a>
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d135      	bne.n	8008b96 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b2a:	4b78      	ldr	r3, [pc, #480]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	4013      	ands	r3, r2
 8008b34:	d005      	beq.n	8008b42 <HAL_RCC_OscConfig+0x162>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e25c      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b42:	4b72      	ldr	r3, [pc, #456]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	4a74      	ldr	r2, [pc, #464]	; (8008d18 <HAL_RCC_OscConfig+0x338>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	021a      	lsls	r2, r3, #8
 8008b52:	4b6e      	ldr	r3, [pc, #440]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008b54:	430a      	orrs	r2, r1
 8008b56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d112      	bne.n	8008b84 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008b5e:	4b6b      	ldr	r3, [pc, #428]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a6e      	ldr	r2, [pc, #440]	; (8008d1c <HAL_RCC_OscConfig+0x33c>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	0019      	movs	r1, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	4b67      	ldr	r3, [pc, #412]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008b72:	4b66      	ldr	r3, [pc, #408]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	0adb      	lsrs	r3, r3, #11
 8008b78:	2207      	movs	r2, #7
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	4a68      	ldr	r2, [pc, #416]	; (8008d20 <HAL_RCC_OscConfig+0x340>)
 8008b7e:	40da      	lsrs	r2, r3
 8008b80:	4b68      	ldr	r3, [pc, #416]	; (8008d24 <HAL_RCC_OscConfig+0x344>)
 8008b82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008b84:	4b68      	ldr	r3, [pc, #416]	; (8008d28 <HAL_RCC_OscConfig+0x348>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f7fe fbcf 	bl	800732c <HAL_InitTick>
 8008b8e:	1e03      	subs	r3, r0, #0
 8008b90:	d051      	beq.n	8008c36 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e232      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d030      	beq.n	8008c00 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008b9e:	4b5b      	ldr	r3, [pc, #364]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a5e      	ldr	r2, [pc, #376]	; (8008d1c <HAL_RCC_OscConfig+0x33c>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	0019      	movs	r1, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	4b57      	ldr	r3, [pc, #348]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008bb2:	4b56      	ldr	r3, [pc, #344]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b55      	ldr	r3, [pc, #340]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008bb8:	2180      	movs	r1, #128	; 0x80
 8008bba:	0049      	lsls	r1, r1, #1
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7fe fc10 	bl	80073e4 <HAL_GetTick>
 8008bc4:	0003      	movs	r3, r0
 8008bc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bc8:	e008      	b.n	8008bdc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bca:	f7fe fc0b 	bl	80073e4 <HAL_GetTick>
 8008bce:	0002      	movs	r2, r0
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e20f      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bdc:	4b4b      	ldr	r3, [pc, #300]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	2380      	movs	r3, #128	; 0x80
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	4013      	ands	r3, r2
 8008be6:	d0f0      	beq.n	8008bca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008be8:	4b48      	ldr	r3, [pc, #288]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	4a4a      	ldr	r2, [pc, #296]	; (8008d18 <HAL_RCC_OscConfig+0x338>)
 8008bee:	4013      	ands	r3, r2
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	021a      	lsls	r2, r3, #8
 8008bf8:	4b44      	ldr	r3, [pc, #272]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	e01b      	b.n	8008c38 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008c00:	4b42      	ldr	r3, [pc, #264]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	4b41      	ldr	r3, [pc, #260]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008c06:	4949      	ldr	r1, [pc, #292]	; (8008d2c <HAL_RCC_OscConfig+0x34c>)
 8008c08:	400a      	ands	r2, r1
 8008c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c0c:	f7fe fbea 	bl	80073e4 <HAL_GetTick>
 8008c10:	0003      	movs	r3, r0
 8008c12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c14:	e008      	b.n	8008c28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c16:	f7fe fbe5 	bl	80073e4 <HAL_GetTick>
 8008c1a:	0002      	movs	r2, r0
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d901      	bls.n	8008c28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e1e9      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c28:	4b38      	ldr	r3, [pc, #224]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	2380      	movs	r3, #128	; 0x80
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	4013      	ands	r3, r2
 8008c32:	d1f0      	bne.n	8008c16 <HAL_RCC_OscConfig+0x236>
 8008c34:	e000      	b.n	8008c38 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2208      	movs	r2, #8
 8008c3e:	4013      	ands	r3, r2
 8008c40:	d047      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008c42:	4b32      	ldr	r3, [pc, #200]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	2238      	movs	r2, #56	; 0x38
 8008c48:	4013      	ands	r3, r2
 8008c4a:	2b18      	cmp	r3, #24
 8008c4c:	d10a      	bne.n	8008c64 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008c4e:	4b2f      	ldr	r3, [pc, #188]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c52:	2202      	movs	r2, #2
 8008c54:	4013      	ands	r3, r2
 8008c56:	d03c      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x2f2>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d138      	bne.n	8008cd2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e1cb      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d019      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008c6c:	4b27      	ldr	r3, [pc, #156]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008c6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008c70:	4b26      	ldr	r3, [pc, #152]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008c72:	2101      	movs	r1, #1
 8008c74:	430a      	orrs	r2, r1
 8008c76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c78:	f7fe fbb4 	bl	80073e4 <HAL_GetTick>
 8008c7c:	0003      	movs	r3, r0
 8008c7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c80:	e008      	b.n	8008c94 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c82:	f7fe fbaf 	bl	80073e4 <HAL_GetTick>
 8008c86:	0002      	movs	r2, r0
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d901      	bls.n	8008c94 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e1b3      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c94:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c98:	2202      	movs	r2, #2
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	d0f1      	beq.n	8008c82 <HAL_RCC_OscConfig+0x2a2>
 8008c9e:	e018      	b.n	8008cd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008ca2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ca4:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	438a      	bics	r2, r1
 8008caa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cac:	f7fe fb9a 	bl	80073e4 <HAL_GetTick>
 8008cb0:	0003      	movs	r3, r0
 8008cb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cb6:	f7fe fb95 	bl	80073e4 <HAL_GetTick>
 8008cba:	0002      	movs	r2, r0
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e199      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cc8:	4b10      	ldr	r3, [pc, #64]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ccc:	2202      	movs	r2, #2
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d1f1      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2204      	movs	r2, #4
 8008cd8:	4013      	ands	r3, r2
 8008cda:	d100      	bne.n	8008cde <HAL_RCC_OscConfig+0x2fe>
 8008cdc:	e0c6      	b.n	8008e6c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cde:	231f      	movs	r3, #31
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	2238      	movs	r2, #56	; 0x38
 8008cec:	4013      	ands	r3, r2
 8008cee:	2b20      	cmp	r3, #32
 8008cf0:	d11e      	bne.n	8008d30 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008cf2:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <HAL_RCC_OscConfig+0x32c>)
 8008cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	d100      	bne.n	8008cfe <HAL_RCC_OscConfig+0x31e>
 8008cfc:	e0b6      	b.n	8008e6c <HAL_RCC_OscConfig+0x48c>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d000      	beq.n	8008d08 <HAL_RCC_OscConfig+0x328>
 8008d06:	e0b1      	b.n	8008e6c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e177      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
 8008d0c:	40021000 	.word	0x40021000
 8008d10:	fffeffff 	.word	0xfffeffff
 8008d14:	fffbffff 	.word	0xfffbffff
 8008d18:	ffff80ff 	.word	0xffff80ff
 8008d1c:	ffffc7ff 	.word	0xffffc7ff
 8008d20:	00f42400 	.word	0x00f42400
 8008d24:	20000004 	.word	0x20000004
 8008d28:	20000008 	.word	0x20000008
 8008d2c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d30:	4bb4      	ldr	r3, [pc, #720]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d34:	2380      	movs	r3, #128	; 0x80
 8008d36:	055b      	lsls	r3, r3, #21
 8008d38:	4013      	ands	r3, r2
 8008d3a:	d101      	bne.n	8008d40 <HAL_RCC_OscConfig+0x360>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <HAL_RCC_OscConfig+0x362>
 8008d40:	2300      	movs	r3, #0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d011      	beq.n	8008d6a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008d46:	4baf      	ldr	r3, [pc, #700]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d4a:	4bae      	ldr	r3, [pc, #696]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008d4c:	2180      	movs	r1, #128	; 0x80
 8008d4e:	0549      	lsls	r1, r1, #21
 8008d50:	430a      	orrs	r2, r1
 8008d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d54:	4bab      	ldr	r3, [pc, #684]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d58:	2380      	movs	r3, #128	; 0x80
 8008d5a:	055b      	lsls	r3, r3, #21
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008d62:	231f      	movs	r3, #31
 8008d64:	18fb      	adds	r3, r7, r3
 8008d66:	2201      	movs	r2, #1
 8008d68:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d6a:	4ba7      	ldr	r3, [pc, #668]	; (8009008 <HAL_RCC_OscConfig+0x628>)
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	2380      	movs	r3, #128	; 0x80
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	4013      	ands	r3, r2
 8008d74:	d11a      	bne.n	8008dac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d76:	4ba4      	ldr	r3, [pc, #656]	; (8009008 <HAL_RCC_OscConfig+0x628>)
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	4ba3      	ldr	r3, [pc, #652]	; (8009008 <HAL_RCC_OscConfig+0x628>)
 8008d7c:	2180      	movs	r1, #128	; 0x80
 8008d7e:	0049      	lsls	r1, r1, #1
 8008d80:	430a      	orrs	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008d84:	f7fe fb2e 	bl	80073e4 <HAL_GetTick>
 8008d88:	0003      	movs	r3, r0
 8008d8a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d8c:	e008      	b.n	8008da0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d8e:	f7fe fb29 	bl	80073e4 <HAL_GetTick>
 8008d92:	0002      	movs	r2, r0
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d901      	bls.n	8008da0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e12d      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008da0:	4b99      	ldr	r3, [pc, #612]	; (8009008 <HAL_RCC_OscConfig+0x628>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	2380      	movs	r3, #128	; 0x80
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	4013      	ands	r3, r2
 8008daa:	d0f0      	beq.n	8008d8e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d106      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x3e2>
 8008db4:	4b93      	ldr	r3, [pc, #588]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008db6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008db8:	4b92      	ldr	r3, [pc, #584]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008dba:	2101      	movs	r1, #1
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dc0:	e01c      	b.n	8008dfc <HAL_RCC_OscConfig+0x41c>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	d10c      	bne.n	8008de4 <HAL_RCC_OscConfig+0x404>
 8008dca:	4b8e      	ldr	r3, [pc, #568]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008dcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008dce:	4b8d      	ldr	r3, [pc, #564]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008dd0:	2104      	movs	r1, #4
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dd6:	4b8b      	ldr	r3, [pc, #556]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008dda:	4b8a      	ldr	r3, [pc, #552]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008ddc:	2101      	movs	r1, #1
 8008dde:	430a      	orrs	r2, r1
 8008de0:	65da      	str	r2, [r3, #92]	; 0x5c
 8008de2:	e00b      	b.n	8008dfc <HAL_RCC_OscConfig+0x41c>
 8008de4:	4b87      	ldr	r3, [pc, #540]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008de8:	4b86      	ldr	r3, [pc, #536]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008dea:	2101      	movs	r1, #1
 8008dec:	438a      	bics	r2, r1
 8008dee:	65da      	str	r2, [r3, #92]	; 0x5c
 8008df0:	4b84      	ldr	r3, [pc, #528]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008df4:	4b83      	ldr	r3, [pc, #524]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008df6:	2104      	movs	r1, #4
 8008df8:	438a      	bics	r2, r1
 8008dfa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d014      	beq.n	8008e2e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e04:	f7fe faee 	bl	80073e4 <HAL_GetTick>
 8008e08:	0003      	movs	r3, r0
 8008e0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e0c:	e009      	b.n	8008e22 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e0e:	f7fe fae9 	bl	80073e4 <HAL_GetTick>
 8008e12:	0002      	movs	r2, r0
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	4a7c      	ldr	r2, [pc, #496]	; (800900c <HAL_RCC_OscConfig+0x62c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e0ec      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e22:	4b78      	ldr	r3, [pc, #480]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e26:	2202      	movs	r2, #2
 8008e28:	4013      	ands	r3, r2
 8008e2a:	d0f0      	beq.n	8008e0e <HAL_RCC_OscConfig+0x42e>
 8008e2c:	e013      	b.n	8008e56 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e2e:	f7fe fad9 	bl	80073e4 <HAL_GetTick>
 8008e32:	0003      	movs	r3, r0
 8008e34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e36:	e009      	b.n	8008e4c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e38:	f7fe fad4 	bl	80073e4 <HAL_GetTick>
 8008e3c:	0002      	movs	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	4a72      	ldr	r2, [pc, #456]	; (800900c <HAL_RCC_OscConfig+0x62c>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e0d7      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e4c:	4b6d      	ldr	r3, [pc, #436]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e50:	2202      	movs	r2, #2
 8008e52:	4013      	ands	r3, r2
 8008e54:	d1f0      	bne.n	8008e38 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008e56:	231f      	movs	r3, #31
 8008e58:	18fb      	adds	r3, r7, r3
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d105      	bne.n	8008e6c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008e60:	4b68      	ldr	r3, [pc, #416]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e64:	4b67      	ldr	r3, [pc, #412]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008e66:	496a      	ldr	r1, [pc, #424]	; (8009010 <HAL_RCC_OscConfig+0x630>)
 8008e68:	400a      	ands	r2, r1
 8008e6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d100      	bne.n	8008e76 <HAL_RCC_OscConfig+0x496>
 8008e74:	e0c1      	b.n	8008ffa <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e76:	4b63      	ldr	r3, [pc, #396]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	2238      	movs	r2, #56	; 0x38
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	2b10      	cmp	r3, #16
 8008e80:	d100      	bne.n	8008e84 <HAL_RCC_OscConfig+0x4a4>
 8008e82:	e081      	b.n	8008f88 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d156      	bne.n	8008f3a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e8c:	4b5d      	ldr	r3, [pc, #372]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	4b5c      	ldr	r3, [pc, #368]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008e92:	4960      	ldr	r1, [pc, #384]	; (8009014 <HAL_RCC_OscConfig+0x634>)
 8008e94:	400a      	ands	r2, r1
 8008e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e98:	f7fe faa4 	bl	80073e4 <HAL_GetTick>
 8008e9c:	0003      	movs	r3, r0
 8008e9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ea0:	e008      	b.n	8008eb4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ea2:	f7fe fa9f 	bl	80073e4 <HAL_GetTick>
 8008ea6:	0002      	movs	r2, r0
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d901      	bls.n	8008eb4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e0a3      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008eb4:	4b53      	ldr	r3, [pc, #332]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	2380      	movs	r3, #128	; 0x80
 8008eba:	049b      	lsls	r3, r3, #18
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	d1f0      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ec0:	4b50      	ldr	r3, [pc, #320]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	4a54      	ldr	r2, [pc, #336]	; (8009018 <HAL_RCC_OscConfig+0x638>)
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	0019      	movs	r1, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1a      	ldr	r2, [r3, #32]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed8:	021b      	lsls	r3, r3, #8
 8008eda:	431a      	orrs	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eec:	431a      	orrs	r2, r3
 8008eee:	4b45      	ldr	r3, [pc, #276]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ef4:	4b43      	ldr	r3, [pc, #268]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4b42      	ldr	r3, [pc, #264]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008efa:	2180      	movs	r1, #128	; 0x80
 8008efc:	0449      	lsls	r1, r1, #17
 8008efe:	430a      	orrs	r2, r1
 8008f00:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008f02:	4b40      	ldr	r3, [pc, #256]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	4b3f      	ldr	r3, [pc, #252]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f08:	2180      	movs	r1, #128	; 0x80
 8008f0a:	0549      	lsls	r1, r1, #21
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f10:	f7fe fa68 	bl	80073e4 <HAL_GetTick>
 8008f14:	0003      	movs	r3, r0
 8008f16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f18:	e008      	b.n	8008f2c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f1a:	f7fe fa63 	bl	80073e4 <HAL_GetTick>
 8008f1e:	0002      	movs	r2, r0
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d901      	bls.n	8008f2c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e067      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f2c:	4b35      	ldr	r3, [pc, #212]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	049b      	lsls	r3, r3, #18
 8008f34:	4013      	ands	r3, r2
 8008f36:	d0f0      	beq.n	8008f1a <HAL_RCC_OscConfig+0x53a>
 8008f38:	e05f      	b.n	8008ffa <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f3a:	4b32      	ldr	r3, [pc, #200]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4b31      	ldr	r3, [pc, #196]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f40:	4934      	ldr	r1, [pc, #208]	; (8009014 <HAL_RCC_OscConfig+0x634>)
 8008f42:	400a      	ands	r2, r1
 8008f44:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008f46:	4b2f      	ldr	r3, [pc, #188]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	4b2e      	ldr	r3, [pc, #184]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f4c:	2103      	movs	r1, #3
 8008f4e:	438a      	bics	r2, r1
 8008f50:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008f52:	4b2c      	ldr	r3, [pc, #176]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	4b2b      	ldr	r3, [pc, #172]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f58:	4930      	ldr	r1, [pc, #192]	; (800901c <HAL_RCC_OscConfig+0x63c>)
 8008f5a:	400a      	ands	r2, r1
 8008f5c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f5e:	f7fe fa41 	bl	80073e4 <HAL_GetTick>
 8008f62:	0003      	movs	r3, r0
 8008f64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f66:	e008      	b.n	8008f7a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f68:	f7fe fa3c 	bl	80073e4 <HAL_GetTick>
 8008f6c:	0002      	movs	r2, r0
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e040      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f7a:	4b22      	ldr	r3, [pc, #136]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	049b      	lsls	r3, r3, #18
 8008f82:	4013      	ands	r3, r2
 8008f84:	d1f0      	bne.n	8008f68 <HAL_RCC_OscConfig+0x588>
 8008f86:	e038      	b.n	8008ffa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d101      	bne.n	8008f94 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e033      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008f94:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <HAL_RCC_OscConfig+0x624>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	401a      	ands	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d126      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	2270      	movs	r2, #112	; 0x70
 8008fac:	401a      	ands	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d11f      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	23fe      	movs	r3, #254	; 0xfe
 8008fba:	01db      	lsls	r3, r3, #7
 8008fbc:	401a      	ands	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d116      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	23f8      	movs	r3, #248	; 0xf8
 8008fcc:	039b      	lsls	r3, r3, #14
 8008fce:	401a      	ands	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d10e      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	23e0      	movs	r3, #224	; 0xe0
 8008fdc:	051b      	lsls	r3, r3, #20
 8008fde:	401a      	ands	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d106      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	0f5b      	lsrs	r3, r3, #29
 8008fec:	075a      	lsls	r2, r3, #29
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d001      	beq.n	8008ffa <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	46bd      	mov	sp, r7
 8009000:	b008      	add	sp, #32
 8009002:	bd80      	pop	{r7, pc}
 8009004:	40021000 	.word	0x40021000
 8009008:	40007000 	.word	0x40007000
 800900c:	00001388 	.word	0x00001388
 8009010:	efffffff 	.word	0xefffffff
 8009014:	feffffff 	.word	0xfeffffff
 8009018:	11c1808c 	.word	0x11c1808c
 800901c:	eefeffff 	.word	0xeefeffff

08009020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e0e9      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009034:	4b76      	ldr	r3, [pc, #472]	; (8009210 <HAL_RCC_ClockConfig+0x1f0>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2207      	movs	r2, #7
 800903a:	4013      	ands	r3, r2
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d91e      	bls.n	8009080 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009042:	4b73      	ldr	r3, [pc, #460]	; (8009210 <HAL_RCC_ClockConfig+0x1f0>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2207      	movs	r2, #7
 8009048:	4393      	bics	r3, r2
 800904a:	0019      	movs	r1, r3
 800904c:	4b70      	ldr	r3, [pc, #448]	; (8009210 <HAL_RCC_ClockConfig+0x1f0>)
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009054:	f7fe f9c6 	bl	80073e4 <HAL_GetTick>
 8009058:	0003      	movs	r3, r0
 800905a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800905c:	e009      	b.n	8009072 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800905e:	f7fe f9c1 	bl	80073e4 <HAL_GetTick>
 8009062:	0002      	movs	r2, r0
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	4a6a      	ldr	r2, [pc, #424]	; (8009214 <HAL_RCC_ClockConfig+0x1f4>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d901      	bls.n	8009072 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e0ca      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009072:	4b67      	ldr	r3, [pc, #412]	; (8009210 <HAL_RCC_ClockConfig+0x1f0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2207      	movs	r2, #7
 8009078:	4013      	ands	r3, r2
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d1ee      	bne.n	800905e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2202      	movs	r2, #2
 8009086:	4013      	ands	r3, r2
 8009088:	d015      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2204      	movs	r2, #4
 8009090:	4013      	ands	r3, r2
 8009092:	d006      	beq.n	80090a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009094:	4b60      	ldr	r3, [pc, #384]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	4b5f      	ldr	r3, [pc, #380]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 800909a:	21e0      	movs	r1, #224	; 0xe0
 800909c:	01c9      	lsls	r1, r1, #7
 800909e:	430a      	orrs	r2, r1
 80090a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a2:	4b5d      	ldr	r3, [pc, #372]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	4a5d      	ldr	r2, [pc, #372]	; (800921c <HAL_RCC_ClockConfig+0x1fc>)
 80090a8:	4013      	ands	r3, r2
 80090aa:	0019      	movs	r1, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689a      	ldr	r2, [r3, #8]
 80090b0:	4b59      	ldr	r3, [pc, #356]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 80090b2:	430a      	orrs	r2, r1
 80090b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2201      	movs	r2, #1
 80090bc:	4013      	ands	r3, r2
 80090be:	d057      	beq.n	8009170 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d107      	bne.n	80090d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090c8:	4b53      	ldr	r3, [pc, #332]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	029b      	lsls	r3, r3, #10
 80090d0:	4013      	ands	r3, r2
 80090d2:	d12b      	bne.n	800912c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e097      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d107      	bne.n	80090f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090e0:	4b4d      	ldr	r3, [pc, #308]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	2380      	movs	r3, #128	; 0x80
 80090e6:	049b      	lsls	r3, r3, #18
 80090e8:	4013      	ands	r3, r2
 80090ea:	d11f      	bne.n	800912c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e08b      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d107      	bne.n	8009108 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090f8:	4b47      	ldr	r3, [pc, #284]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	2380      	movs	r3, #128	; 0x80
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4013      	ands	r3, r2
 8009102:	d113      	bne.n	800912c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e07f      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	2b03      	cmp	r3, #3
 800910e:	d106      	bne.n	800911e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009110:	4b41      	ldr	r3, [pc, #260]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 8009112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009114:	2202      	movs	r2, #2
 8009116:	4013      	ands	r3, r2
 8009118:	d108      	bne.n	800912c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e074      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800911e:	4b3e      	ldr	r3, [pc, #248]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 8009120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009122:	2202      	movs	r2, #2
 8009124:	4013      	ands	r3, r2
 8009126:	d101      	bne.n	800912c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e06d      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800912c:	4b3a      	ldr	r3, [pc, #232]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	2207      	movs	r2, #7
 8009132:	4393      	bics	r3, r2
 8009134:	0019      	movs	r1, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	4b37      	ldr	r3, [pc, #220]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 800913c:	430a      	orrs	r2, r1
 800913e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009140:	f7fe f950 	bl	80073e4 <HAL_GetTick>
 8009144:	0003      	movs	r3, r0
 8009146:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009148:	e009      	b.n	800915e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800914a:	f7fe f94b 	bl	80073e4 <HAL_GetTick>
 800914e:	0002      	movs	r2, r0
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	4a2f      	ldr	r2, [pc, #188]	; (8009214 <HAL_RCC_ClockConfig+0x1f4>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d901      	bls.n	800915e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e054      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800915e:	4b2e      	ldr	r3, [pc, #184]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	2238      	movs	r2, #56	; 0x38
 8009164:	401a      	ands	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	429a      	cmp	r2, r3
 800916e:	d1ec      	bne.n	800914a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009170:	4b27      	ldr	r3, [pc, #156]	; (8009210 <HAL_RCC_ClockConfig+0x1f0>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2207      	movs	r2, #7
 8009176:	4013      	ands	r3, r2
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d21e      	bcs.n	80091bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800917e:	4b24      	ldr	r3, [pc, #144]	; (8009210 <HAL_RCC_ClockConfig+0x1f0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2207      	movs	r2, #7
 8009184:	4393      	bics	r3, r2
 8009186:	0019      	movs	r1, r3
 8009188:	4b21      	ldr	r3, [pc, #132]	; (8009210 <HAL_RCC_ClockConfig+0x1f0>)
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009190:	f7fe f928 	bl	80073e4 <HAL_GetTick>
 8009194:	0003      	movs	r3, r0
 8009196:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009198:	e009      	b.n	80091ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800919a:	f7fe f923 	bl	80073e4 <HAL_GetTick>
 800919e:	0002      	movs	r2, r0
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	4a1b      	ldr	r2, [pc, #108]	; (8009214 <HAL_RCC_ClockConfig+0x1f4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e02c      	b.n	8009208 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80091ae:	4b18      	ldr	r3, [pc, #96]	; (8009210 <HAL_RCC_ClockConfig+0x1f0>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2207      	movs	r2, #7
 80091b4:	4013      	ands	r3, r2
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d1ee      	bne.n	800919a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2204      	movs	r2, #4
 80091c2:	4013      	ands	r3, r2
 80091c4:	d009      	beq.n	80091da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80091c6:	4b14      	ldr	r3, [pc, #80]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	4a15      	ldr	r2, [pc, #84]	; (8009220 <HAL_RCC_ClockConfig+0x200>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	0019      	movs	r1, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	4b10      	ldr	r3, [pc, #64]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 80091d6:	430a      	orrs	r2, r1
 80091d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80091da:	f000 f829 	bl	8009230 <HAL_RCC_GetSysClockFreq>
 80091de:	0001      	movs	r1, r0
 80091e0:	4b0d      	ldr	r3, [pc, #52]	; (8009218 <HAL_RCC_ClockConfig+0x1f8>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	0a1b      	lsrs	r3, r3, #8
 80091e6:	220f      	movs	r2, #15
 80091e8:	401a      	ands	r2, r3
 80091ea:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <HAL_RCC_ClockConfig+0x204>)
 80091ec:	0092      	lsls	r2, r2, #2
 80091ee:	58d3      	ldr	r3, [r2, r3]
 80091f0:	221f      	movs	r2, #31
 80091f2:	4013      	ands	r3, r2
 80091f4:	000a      	movs	r2, r1
 80091f6:	40da      	lsrs	r2, r3
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <HAL_RCC_ClockConfig+0x208>)
 80091fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80091fc:	4b0b      	ldr	r3, [pc, #44]	; (800922c <HAL_RCC_ClockConfig+0x20c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	0018      	movs	r0, r3
 8009202:	f7fe f893 	bl	800732c <HAL_InitTick>
 8009206:	0003      	movs	r3, r0
}
 8009208:	0018      	movs	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	b004      	add	sp, #16
 800920e:	bd80      	pop	{r7, pc}
 8009210:	40022000 	.word	0x40022000
 8009214:	00001388 	.word	0x00001388
 8009218:	40021000 	.word	0x40021000
 800921c:	fffff0ff 	.word	0xfffff0ff
 8009220:	ffff8fff 	.word	0xffff8fff
 8009224:	080167b0 	.word	0x080167b0
 8009228:	20000004 	.word	0x20000004
 800922c:	20000008 	.word	0x20000008

08009230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009236:	4b3c      	ldr	r3, [pc, #240]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2238      	movs	r2, #56	; 0x38
 800923c:	4013      	ands	r3, r2
 800923e:	d10f      	bne.n	8009260 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009240:	4b39      	ldr	r3, [pc, #228]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	0adb      	lsrs	r3, r3, #11
 8009246:	2207      	movs	r2, #7
 8009248:	4013      	ands	r3, r2
 800924a:	2201      	movs	r2, #1
 800924c:	409a      	lsls	r2, r3
 800924e:	0013      	movs	r3, r2
 8009250:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	4835      	ldr	r0, [pc, #212]	; (800932c <HAL_RCC_GetSysClockFreq+0xfc>)
 8009256:	f7fc ff7d 	bl	8006154 <__udivsi3>
 800925a:	0003      	movs	r3, r0
 800925c:	613b      	str	r3, [r7, #16]
 800925e:	e05d      	b.n	800931c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009260:	4b31      	ldr	r3, [pc, #196]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	2238      	movs	r2, #56	; 0x38
 8009266:	4013      	ands	r3, r2
 8009268:	2b08      	cmp	r3, #8
 800926a:	d102      	bne.n	8009272 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800926c:	4b30      	ldr	r3, [pc, #192]	; (8009330 <HAL_RCC_GetSysClockFreq+0x100>)
 800926e:	613b      	str	r3, [r7, #16]
 8009270:	e054      	b.n	800931c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009272:	4b2d      	ldr	r3, [pc, #180]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2238      	movs	r2, #56	; 0x38
 8009278:	4013      	ands	r3, r2
 800927a:	2b10      	cmp	r3, #16
 800927c:	d138      	bne.n	80092f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800927e:	4b2a      	ldr	r3, [pc, #168]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2203      	movs	r2, #3
 8009284:	4013      	ands	r3, r2
 8009286:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009288:	4b27      	ldr	r3, [pc, #156]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	091b      	lsrs	r3, r3, #4
 800928e:	2207      	movs	r2, #7
 8009290:	4013      	ands	r3, r2
 8009292:	3301      	adds	r3, #1
 8009294:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b03      	cmp	r3, #3
 800929a:	d10d      	bne.n	80092b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800929c:	68b9      	ldr	r1, [r7, #8]
 800929e:	4824      	ldr	r0, [pc, #144]	; (8009330 <HAL_RCC_GetSysClockFreq+0x100>)
 80092a0:	f7fc ff58 	bl	8006154 <__udivsi3>
 80092a4:	0003      	movs	r3, r0
 80092a6:	0019      	movs	r1, r3
 80092a8:	4b1f      	ldr	r3, [pc, #124]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	0a1b      	lsrs	r3, r3, #8
 80092ae:	227f      	movs	r2, #127	; 0x7f
 80092b0:	4013      	ands	r3, r2
 80092b2:	434b      	muls	r3, r1
 80092b4:	617b      	str	r3, [r7, #20]
        break;
 80092b6:	e00d      	b.n	80092d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	481c      	ldr	r0, [pc, #112]	; (800932c <HAL_RCC_GetSysClockFreq+0xfc>)
 80092bc:	f7fc ff4a 	bl	8006154 <__udivsi3>
 80092c0:	0003      	movs	r3, r0
 80092c2:	0019      	movs	r1, r3
 80092c4:	4b18      	ldr	r3, [pc, #96]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	0a1b      	lsrs	r3, r3, #8
 80092ca:	227f      	movs	r2, #127	; 0x7f
 80092cc:	4013      	ands	r3, r2
 80092ce:	434b      	muls	r3, r1
 80092d0:	617b      	str	r3, [r7, #20]
        break;
 80092d2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80092d4:	4b14      	ldr	r3, [pc, #80]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	0f5b      	lsrs	r3, r3, #29
 80092da:	2207      	movs	r2, #7
 80092dc:	4013      	ands	r3, r2
 80092de:	3301      	adds	r3, #1
 80092e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	6978      	ldr	r0, [r7, #20]
 80092e6:	f7fc ff35 	bl	8006154 <__udivsi3>
 80092ea:	0003      	movs	r3, r0
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	e015      	b.n	800931c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80092f0:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	2238      	movs	r2, #56	; 0x38
 80092f6:	4013      	ands	r3, r2
 80092f8:	2b20      	cmp	r3, #32
 80092fa:	d103      	bne.n	8009304 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80092fc:	2380      	movs	r3, #128	; 0x80
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	613b      	str	r3, [r7, #16]
 8009302:	e00b      	b.n	800931c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009304:	4b08      	ldr	r3, [pc, #32]	; (8009328 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	2238      	movs	r2, #56	; 0x38
 800930a:	4013      	ands	r3, r2
 800930c:	2b18      	cmp	r3, #24
 800930e:	d103      	bne.n	8009318 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009310:	23fa      	movs	r3, #250	; 0xfa
 8009312:	01db      	lsls	r3, r3, #7
 8009314:	613b      	str	r3, [r7, #16]
 8009316:	e001      	b.n	800931c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800931c:	693b      	ldr	r3, [r7, #16]
}
 800931e:	0018      	movs	r0, r3
 8009320:	46bd      	mov	sp, r7
 8009322:	b006      	add	sp, #24
 8009324:	bd80      	pop	{r7, pc}
 8009326:	46c0      	nop			; (mov r8, r8)
 8009328:	40021000 	.word	0x40021000
 800932c:	00f42400 	.word	0x00f42400
 8009330:	007a1200 	.word	0x007a1200

08009334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800933c:	2313      	movs	r3, #19
 800933e:	18fb      	adds	r3, r7, r3
 8009340:	2200      	movs	r2, #0
 8009342:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009344:	2312      	movs	r3, #18
 8009346:	18fb      	adds	r3, r7, r3
 8009348:	2200      	movs	r2, #0
 800934a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	2380      	movs	r3, #128	; 0x80
 8009352:	029b      	lsls	r3, r3, #10
 8009354:	4013      	ands	r3, r2
 8009356:	d100      	bne.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009358:	e0a3      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800935a:	2011      	movs	r0, #17
 800935c:	183b      	adds	r3, r7, r0
 800935e:	2200      	movs	r2, #0
 8009360:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009362:	4bc3      	ldr	r3, [pc, #780]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009366:	2380      	movs	r3, #128	; 0x80
 8009368:	055b      	lsls	r3, r3, #21
 800936a:	4013      	ands	r3, r2
 800936c:	d110      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800936e:	4bc0      	ldr	r3, [pc, #768]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009372:	4bbf      	ldr	r3, [pc, #764]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009374:	2180      	movs	r1, #128	; 0x80
 8009376:	0549      	lsls	r1, r1, #21
 8009378:	430a      	orrs	r2, r1
 800937a:	63da      	str	r2, [r3, #60]	; 0x3c
 800937c:	4bbc      	ldr	r3, [pc, #752]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800937e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009380:	2380      	movs	r3, #128	; 0x80
 8009382:	055b      	lsls	r3, r3, #21
 8009384:	4013      	ands	r3, r2
 8009386:	60bb      	str	r3, [r7, #8]
 8009388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800938a:	183b      	adds	r3, r7, r0
 800938c:	2201      	movs	r2, #1
 800938e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009390:	4bb8      	ldr	r3, [pc, #736]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	4bb7      	ldr	r3, [pc, #732]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8009396:	2180      	movs	r1, #128	; 0x80
 8009398:	0049      	lsls	r1, r1, #1
 800939a:	430a      	orrs	r2, r1
 800939c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800939e:	f7fe f821 	bl	80073e4 <HAL_GetTick>
 80093a2:	0003      	movs	r3, r0
 80093a4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093a6:	e00b      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093a8:	f7fe f81c 	bl	80073e4 <HAL_GetTick>
 80093ac:	0002      	movs	r2, r0
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d904      	bls.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80093b6:	2313      	movs	r3, #19
 80093b8:	18fb      	adds	r3, r7, r3
 80093ba:	2203      	movs	r2, #3
 80093bc:	701a      	strb	r2, [r3, #0]
        break;
 80093be:	e005      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c0:	4bac      	ldr	r3, [pc, #688]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	2380      	movs	r3, #128	; 0x80
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	4013      	ands	r3, r2
 80093ca:	d0ed      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80093cc:	2313      	movs	r3, #19
 80093ce:	18fb      	adds	r3, r7, r3
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d154      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80093d6:	4ba6      	ldr	r3, [pc, #664]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093da:	23c0      	movs	r3, #192	; 0xc0
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4013      	ands	r3, r2
 80093e0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d019      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d014      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80093f2:	4b9f      	ldr	r3, [pc, #636]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f6:	4aa0      	ldr	r2, [pc, #640]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80093f8:	4013      	ands	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093fc:	4b9c      	ldr	r3, [pc, #624]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009400:	4b9b      	ldr	r3, [pc, #620]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009402:	2180      	movs	r1, #128	; 0x80
 8009404:	0249      	lsls	r1, r1, #9
 8009406:	430a      	orrs	r2, r1
 8009408:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800940a:	4b99      	ldr	r3, [pc, #612]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800940c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800940e:	4b98      	ldr	r3, [pc, #608]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009410:	499a      	ldr	r1, [pc, #616]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8009412:	400a      	ands	r2, r1
 8009414:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009416:	4b96      	ldr	r3, [pc, #600]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2201      	movs	r2, #1
 8009420:	4013      	ands	r3, r2
 8009422:	d016      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009424:	f7fd ffde 	bl	80073e4 <HAL_GetTick>
 8009428:	0003      	movs	r3, r0
 800942a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800942c:	e00c      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800942e:	f7fd ffd9 	bl	80073e4 <HAL_GetTick>
 8009432:	0002      	movs	r2, r0
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	4a91      	ldr	r2, [pc, #580]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d904      	bls.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800943e:	2313      	movs	r3, #19
 8009440:	18fb      	adds	r3, r7, r3
 8009442:	2203      	movs	r2, #3
 8009444:	701a      	strb	r2, [r3, #0]
            break;
 8009446:	e004      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009448:	4b89      	ldr	r3, [pc, #548]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800944a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800944c:	2202      	movs	r2, #2
 800944e:	4013      	ands	r3, r2
 8009450:	d0ed      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009452:	2313      	movs	r3, #19
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800945c:	4b84      	ldr	r3, [pc, #528]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800945e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009460:	4a85      	ldr	r2, [pc, #532]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8009462:	4013      	ands	r3, r2
 8009464:	0019      	movs	r1, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800946a:	4b81      	ldr	r3, [pc, #516]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800946c:	430a      	orrs	r2, r1
 800946e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009470:	e00c      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009472:	2312      	movs	r3, #18
 8009474:	18fb      	adds	r3, r7, r3
 8009476:	2213      	movs	r2, #19
 8009478:	18ba      	adds	r2, r7, r2
 800947a:	7812      	ldrb	r2, [r2, #0]
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	e005      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009480:	2312      	movs	r3, #18
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	2213      	movs	r2, #19
 8009486:	18ba      	adds	r2, r7, r2
 8009488:	7812      	ldrb	r2, [r2, #0]
 800948a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800948c:	2311      	movs	r3, #17
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d105      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009496:	4b76      	ldr	r3, [pc, #472]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800949a:	4b75      	ldr	r3, [pc, #468]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800949c:	4979      	ldr	r1, [pc, #484]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800949e:	400a      	ands	r2, r1
 80094a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2201      	movs	r2, #1
 80094a8:	4013      	ands	r3, r2
 80094aa:	d009      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094ac:	4b70      	ldr	r3, [pc, #448]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b0:	2203      	movs	r2, #3
 80094b2:	4393      	bics	r3, r2
 80094b4:	0019      	movs	r1, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	4b6d      	ldr	r3, [pc, #436]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094bc:	430a      	orrs	r2, r1
 80094be:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2202      	movs	r2, #2
 80094c6:	4013      	ands	r3, r2
 80094c8:	d009      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094ca:	4b69      	ldr	r3, [pc, #420]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ce:	220c      	movs	r2, #12
 80094d0:	4393      	bics	r3, r2
 80094d2:	0019      	movs	r1, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	4b65      	ldr	r3, [pc, #404]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094da:	430a      	orrs	r2, r1
 80094dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2210      	movs	r2, #16
 80094e4:	4013      	ands	r3, r2
 80094e6:	d009      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094e8:	4b61      	ldr	r3, [pc, #388]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ec:	4a66      	ldr	r2, [pc, #408]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80094ee:	4013      	ands	r3, r2
 80094f0:	0019      	movs	r1, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	4b5e      	ldr	r3, [pc, #376]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094f8:	430a      	orrs	r2, r1
 80094fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	2380      	movs	r3, #128	; 0x80
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4013      	ands	r3, r2
 8009506:	d009      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009508:	4b59      	ldr	r3, [pc, #356]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800950a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950c:	4a5f      	ldr	r2, [pc, #380]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800950e:	4013      	ands	r3, r2
 8009510:	0019      	movs	r1, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	4b56      	ldr	r3, [pc, #344]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009518:	430a      	orrs	r2, r1
 800951a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	2380      	movs	r3, #128	; 0x80
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	4013      	ands	r3, r2
 8009526:	d009      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009528:	4b51      	ldr	r3, [pc, #324]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800952a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952c:	4a58      	ldr	r2, [pc, #352]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800952e:	4013      	ands	r3, r2
 8009530:	0019      	movs	r1, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69da      	ldr	r2, [r3, #28]
 8009536:	4b4e      	ldr	r3, [pc, #312]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009538:	430a      	orrs	r2, r1
 800953a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2220      	movs	r2, #32
 8009542:	4013      	ands	r3, r2
 8009544:	d009      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009546:	4b4a      	ldr	r3, [pc, #296]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954a:	4a52      	ldr	r2, [pc, #328]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800954c:	4013      	ands	r3, r2
 800954e:	0019      	movs	r1, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691a      	ldr	r2, [r3, #16]
 8009554:	4b46      	ldr	r3, [pc, #280]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009556:	430a      	orrs	r2, r1
 8009558:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	2380      	movs	r3, #128	; 0x80
 8009560:	01db      	lsls	r3, r3, #7
 8009562:	4013      	ands	r3, r2
 8009564:	d015      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009566:	4b42      	ldr	r3, [pc, #264]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	0899      	lsrs	r1, r3, #2
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1a      	ldr	r2, [r3, #32]
 8009572:	4b3f      	ldr	r3, [pc, #252]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009574:	430a      	orrs	r2, r1
 8009576:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a1a      	ldr	r2, [r3, #32]
 800957c:	2380      	movs	r3, #128	; 0x80
 800957e:	05db      	lsls	r3, r3, #23
 8009580:	429a      	cmp	r2, r3
 8009582:	d106      	bne.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009584:	4b3a      	ldr	r3, [pc, #232]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	4b39      	ldr	r3, [pc, #228]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800958a:	2180      	movs	r1, #128	; 0x80
 800958c:	0249      	lsls	r1, r1, #9
 800958e:	430a      	orrs	r2, r1
 8009590:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	2380      	movs	r3, #128	; 0x80
 8009598:	031b      	lsls	r3, r3, #12
 800959a:	4013      	ands	r3, r2
 800959c:	d009      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800959e:	4b34      	ldr	r3, [pc, #208]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80095a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a2:	2240      	movs	r2, #64	; 0x40
 80095a4:	4393      	bics	r3, r2
 80095a6:	0019      	movs	r1, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ac:	4b30      	ldr	r3, [pc, #192]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80095ae:	430a      	orrs	r2, r1
 80095b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	2380      	movs	r3, #128	; 0x80
 80095b8:	039b      	lsls	r3, r3, #14
 80095ba:	4013      	ands	r3, r2
 80095bc:	d016      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80095be:	4b2c      	ldr	r3, [pc, #176]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80095c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c2:	4a35      	ldr	r2, [pc, #212]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80095c4:	4013      	ands	r3, r2
 80095c6:	0019      	movs	r1, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095cc:	4b28      	ldr	r3, [pc, #160]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80095ce:	430a      	orrs	r2, r1
 80095d0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095d6:	2380      	movs	r3, #128	; 0x80
 80095d8:	03db      	lsls	r3, r3, #15
 80095da:	429a      	cmp	r2, r3
 80095dc:	d106      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80095de:	4b24      	ldr	r3, [pc, #144]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	4b23      	ldr	r3, [pc, #140]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80095e4:	2180      	movs	r1, #128	; 0x80
 80095e6:	0449      	lsls	r1, r1, #17
 80095e8:	430a      	orrs	r2, r1
 80095ea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	2380      	movs	r3, #128	; 0x80
 80095f2:	03db      	lsls	r3, r3, #15
 80095f4:	4013      	ands	r3, r2
 80095f6:	d016      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80095f8:	4b1d      	ldr	r3, [pc, #116]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80095fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fc:	4a27      	ldr	r2, [pc, #156]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80095fe:	4013      	ands	r3, r2
 8009600:	0019      	movs	r1, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	4b1a      	ldr	r3, [pc, #104]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009608:	430a      	orrs	r2, r1
 800960a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	2380      	movs	r3, #128	; 0x80
 8009612:	045b      	lsls	r3, r3, #17
 8009614:	429a      	cmp	r2, r3
 8009616:	d106      	bne.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009618:	4b15      	ldr	r3, [pc, #84]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	4b14      	ldr	r3, [pc, #80]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800961e:	2180      	movs	r1, #128	; 0x80
 8009620:	0449      	lsls	r1, r1, #17
 8009622:	430a      	orrs	r2, r1
 8009624:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	2380      	movs	r3, #128	; 0x80
 800962c:	011b      	lsls	r3, r3, #4
 800962e:	4013      	ands	r3, r2
 8009630:	d016      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009632:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009636:	4a1a      	ldr	r2, [pc, #104]	; (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8009638:	4013      	ands	r3, r2
 800963a:	0019      	movs	r1, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695a      	ldr	r2, [r3, #20]
 8009640:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009642:	430a      	orrs	r2, r1
 8009644:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	695a      	ldr	r2, [r3, #20]
 800964a:	2380      	movs	r3, #128	; 0x80
 800964c:	01db      	lsls	r3, r3, #7
 800964e:	429a      	cmp	r2, r3
 8009650:	d106      	bne.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009652:	4b07      	ldr	r3, [pc, #28]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009654:	68da      	ldr	r2, [r3, #12]
 8009656:	4b06      	ldr	r3, [pc, #24]	; (8009670 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009658:	2180      	movs	r1, #128	; 0x80
 800965a:	0249      	lsls	r1, r1, #9
 800965c:	430a      	orrs	r2, r1
 800965e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009660:	2312      	movs	r3, #18
 8009662:	18fb      	adds	r3, r7, r3
 8009664:	781b      	ldrb	r3, [r3, #0]
}
 8009666:	0018      	movs	r0, r3
 8009668:	46bd      	mov	sp, r7
 800966a:	b006      	add	sp, #24
 800966c:	bd80      	pop	{r7, pc}
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	40021000 	.word	0x40021000
 8009674:	40007000 	.word	0x40007000
 8009678:	fffffcff 	.word	0xfffffcff
 800967c:	fffeffff 	.word	0xfffeffff
 8009680:	00001388 	.word	0x00001388
 8009684:	efffffff 	.word	0xefffffff
 8009688:	fffff3ff 	.word	0xfffff3ff
 800968c:	fff3ffff 	.word	0xfff3ffff
 8009690:	ffcfffff 	.word	0xffcfffff
 8009694:	ffffcfff 	.word	0xffffcfff
 8009698:	ffbfffff 	.word	0xffbfffff
 800969c:	feffffff 	.word	0xfeffffff
 80096a0:	ffff3fff 	.word	0xffff3fff

080096a4 <LL_DMA_ConfigTransfer>:
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80096b4:	4a0c      	ldr	r2, [pc, #48]	; (80096e8 <LL_DMA_ConfigTransfer+0x44>)
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	18d3      	adds	r3, r2, r3
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	001a      	movs	r2, r3
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	18d3      	adds	r3, r2, r3
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a09      	ldr	r2, [pc, #36]	; (80096ec <LL_DMA_ConfigTransfer+0x48>)
 80096c6:	4013      	ands	r3, r2
 80096c8:	0019      	movs	r1, r3
 80096ca:	4a07      	ldr	r2, [pc, #28]	; (80096e8 <LL_DMA_ConfigTransfer+0x44>)
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	18d3      	adds	r3, r2, r3
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	001a      	movs	r2, r3
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	18d3      	adds	r3, r2, r3
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	430a      	orrs	r2, r1
 80096dc:	601a      	str	r2, [r3, #0]
}
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	46bd      	mov	sp, r7
 80096e2:	b006      	add	sp, #24
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	46c0      	nop			; (mov r8, r8)
 80096e8:	08016810 	.word	0x08016810
 80096ec:	ffff800f 	.word	0xffff800f

080096f0 <LL_DMA_SetDataLength>:
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8009700:	4a0b      	ldr	r2, [pc, #44]	; (8009730 <LL_DMA_SetDataLength+0x40>)
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	18d3      	adds	r3, r2, r3
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	001a      	movs	r2, r3
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	18d3      	adds	r3, r2, r3
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	0c1b      	lsrs	r3, r3, #16
 8009712:	0419      	lsls	r1, r3, #16
 8009714:	4a06      	ldr	r2, [pc, #24]	; (8009730 <LL_DMA_SetDataLength+0x40>)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	18d3      	adds	r3, r2, r3
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	001a      	movs	r2, r3
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	18d3      	adds	r3, r2, r3
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	430a      	orrs	r2, r1
 8009726:	605a      	str	r2, [r3, #4]
}
 8009728:	46c0      	nop			; (mov r8, r8)
 800972a:	46bd      	mov	sp, r7
 800972c:	b006      	add	sp, #24
 800972e:	bd80      	pop	{r7, pc}
 8009730:	08016810 	.word	0x08016810

08009734 <LL_DMA_SetMemoryAddress>:
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8009744:	4a06      	ldr	r2, [pc, #24]	; (8009760 <LL_DMA_SetMemoryAddress+0x2c>)
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	18d3      	adds	r3, r2, r3
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	001a      	movs	r2, r3
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	18d3      	adds	r3, r2, r3
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	60da      	str	r2, [r3, #12]
}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	46bd      	mov	sp, r7
 800975a:	b006      	add	sp, #24
 800975c:	bd80      	pop	{r7, pc}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	08016810 	.word	0x08016810

08009764 <LL_DMA_SetPeriphAddress>:
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8009774:	4a06      	ldr	r2, [pc, #24]	; (8009790 <LL_DMA_SetPeriphAddress+0x2c>)
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	18d3      	adds	r3, r2, r3
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	001a      	movs	r2, r3
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	18d3      	adds	r3, r2, r3
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	609a      	str	r2, [r3, #8]
}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	46bd      	mov	sp, r7
 800978a:	b006      	add	sp, #24
 800978c:	bd80      	pop	{r7, pc}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	08016810 	.word	0x08016810

08009794 <LL_DMA_SetPeriphRequest>:
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	0a9b      	lsrs	r3, r3, #10
 80097a4:	4a0f      	ldr	r2, [pc, #60]	; (80097e4 <LL_DMA_SetPeriphRequest+0x50>)
 80097a6:	405a      	eors	r2, r3
 80097a8:	0013      	movs	r3, r2
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	1a9b      	subs	r3, r3, r2
 80097ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4a0b      	ldr	r2, [pc, #44]	; (80097e8 <LL_DMA_SetPeriphRequest+0x54>)
 80097ba:	4694      	mov	ip, r2
 80097bc:	4463      	add	r3, ip
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	223f      	movs	r2, #63	; 0x3f
 80097c2:	4393      	bics	r3, r2
 80097c4:	0019      	movs	r1, r3
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	18d3      	adds	r3, r2, r3
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4a06      	ldr	r2, [pc, #24]	; (80097e8 <LL_DMA_SetPeriphRequest+0x54>)
 80097d0:	4694      	mov	ip, r2
 80097d2:	4463      	add	r3, ip
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	601a      	str	r2, [r3, #0]
}
 80097da:	46c0      	nop			; (mov r8, r8)
 80097dc:	46bd      	mov	sp, r7
 80097de:	b006      	add	sp, #24
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	00100080 	.word	0x00100080
 80097e8:	40020800 	.word	0x40020800

080097ec <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8009800:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8009806:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800980c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8009812:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8009818:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800981e:	431a      	orrs	r2, r3
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	0018      	movs	r0, r3
 8009826:	f7ff ff3d 	bl	80096a4 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	68b9      	ldr	r1, [r7, #8]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	0018      	movs	r0, r3
 8009834:	f7ff ff7e 	bl	8009734 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	0018      	movs	r0, r3
 8009842:	f7ff ff8f 	bl	8009764 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1a      	ldr	r2, [r3, #32]
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	0018      	movs	r0, r3
 8009850:	f7ff ff4e 	bl	80096f0 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	0018      	movs	r0, r3
 800985e:	f7ff ff99 	bl	8009794 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 8009862:	2300      	movs	r3, #0
}
 8009864:	0018      	movs	r0, r3
 8009866:	46bd      	mov	sp, r7
 8009868:	b004      	add	sp, #16
 800986a:	bd80      	pop	{r7, pc}

0800986c <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	46bd      	mov	sp, r7
 80098ba:	b002      	add	sp, #8
 80098bc:	bd80      	pop	{r7, pc}

080098be <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6819      	ldr	r1, [r3, #0]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	435b      	muls	r3, r3
 80098d2:	001a      	movs	r2, r3
 80098d4:	0013      	movs	r3, r2
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	189b      	adds	r3, r3, r2
 80098da:	43db      	mvns	r3, r3
 80098dc:	400b      	ands	r3, r1
 80098de:	001a      	movs	r2, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	435b      	muls	r3, r3
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	434b      	muls	r3, r1
 80098e8:	431a      	orrs	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	601a      	str	r2, [r3, #0]
}
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	46bd      	mov	sp, r7
 80098f2:	b004      	add	sp, #16
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	60f8      	str	r0, [r7, #12]
 80098fe:	60b9      	str	r1, [r7, #8]
 8009900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	43d2      	mvns	r2, r2
 800990a:	401a      	ands	r2, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	434b      	muls	r3, r1
 8009912:	431a      	orrs	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	605a      	str	r2, [r3, #4]
}
 8009918:	46c0      	nop			; (mov r8, r8)
 800991a:	46bd      	mov	sp, r7
 800991c:	b004      	add	sp, #16
 800991e:	bd80      	pop	{r7, pc}

08009920 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6899      	ldr	r1, [r3, #8]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	435b      	muls	r3, r3
 8009934:	001a      	movs	r2, r3
 8009936:	0013      	movs	r3, r2
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	189b      	adds	r3, r3, r2
 800993c:	43db      	mvns	r3, r3
 800993e:	400b      	ands	r3, r1
 8009940:	001a      	movs	r2, r3
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	435b      	muls	r3, r3
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	434b      	muls	r3, r1
 800994a:	431a      	orrs	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	609a      	str	r2, [r3, #8]
}
 8009950:	46c0      	nop			; (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b004      	add	sp, #16
 8009956:	bd80      	pop	{r7, pc}

08009958 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	68d9      	ldr	r1, [r3, #12]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	435b      	muls	r3, r3
 800996c:	001a      	movs	r2, r3
 800996e:	0013      	movs	r3, r2
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	189b      	adds	r3, r3, r2
 8009974:	43db      	mvns	r3, r3
 8009976:	400b      	ands	r3, r1
 8009978:	001a      	movs	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	435b      	muls	r3, r3
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	434b      	muls	r3, r1
 8009982:	431a      	orrs	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	60da      	str	r2, [r3, #12]
}
 8009988:	46c0      	nop			; (mov r8, r8)
 800998a:	46bd      	mov	sp, r7
 800998c:	b004      	add	sp, #16
 800998e:	bd80      	pop	{r7, pc}

08009990 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a19      	ldr	r1, [r3, #32]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	435b      	muls	r3, r3
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	4353      	muls	r3, r2
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	435a      	muls	r2, r3
 80099ac:	0013      	movs	r3, r2
 80099ae:	011b      	lsls	r3, r3, #4
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	43db      	mvns	r3, r3
 80099b4:	400b      	ands	r3, r1
 80099b6:	001a      	movs	r2, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	435b      	muls	r3, r3
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	434b      	muls	r3, r1
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	434b      	muls	r3, r1
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	434b      	muls	r3, r1
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80099ce:	46c0      	nop			; (mov r8, r8)
 80099d0:	46bd      	mov	sp, r7
 80099d2:	b004      	add	sp, #16
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	0a1b      	lsrs	r3, r3, #8
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	0a12      	lsrs	r2, r2, #8
 80099ee:	4353      	muls	r3, r2
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	0a12      	lsrs	r2, r2, #8
 80099f4:	4353      	muls	r3, r2
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	0a12      	lsrs	r2, r2, #8
 80099fa:	435a      	muls	r2, r3
 80099fc:	0013      	movs	r3, r2
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	43db      	mvns	r3, r3
 8009a04:	400b      	ands	r3, r1
 8009a06:	001a      	movs	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	0a1b      	lsrs	r3, r3, #8
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	0a09      	lsrs	r1, r1, #8
 8009a10:	434b      	muls	r3, r1
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	0a09      	lsrs	r1, r1, #8
 8009a16:	434b      	muls	r3, r1
 8009a18:	68b9      	ldr	r1, [r7, #8]
 8009a1a:	0a09      	lsrs	r1, r1, #8
 8009a1c:	434b      	muls	r3, r1
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	434b      	muls	r3, r1
 8009a22:	431a      	orrs	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8009a28:	46c0      	nop			; (mov r8, r8)
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	b004      	add	sp, #16
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009a3e:	e047      	b.n	8009ad0 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2101      	movs	r1, #1
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4091      	lsls	r1, r2
 8009a4a:	000a      	movs	r2, r1
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d039      	beq.n	8009aca <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d003      	beq.n	8009a66 <LL_GPIO_Init+0x36>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d10d      	bne.n	8009a82 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f7ff ff56 	bl	8009920 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	68b9      	ldr	r1, [r7, #8]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f7ff ff3a 	bl	80098f6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	68b9      	ldr	r1, [r7, #8]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f7ff ff64 	bl	8009958 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d111      	bne.n	8009abc <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2bff      	cmp	r3, #255	; 0xff
 8009a9c:	d807      	bhi.n	8009aae <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	695a      	ldr	r2, [r3, #20]
 8009aa2:	68b9      	ldr	r1, [r7, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f7ff ff72 	bl	8009990 <LL_GPIO_SetAFPin_0_7>
 8009aac:	e006      	b.n	8009abc <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	695a      	ldr	r2, [r3, #20]
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f7ff ff8d 	bl	80099d6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	68b9      	ldr	r1, [r7, #8]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7ff fefa 	bl	80098be <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3301      	adds	r3, #1
 8009ace:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	40da      	lsrs	r2, r3
 8009ad8:	1e13      	subs	r3, r2, #0
 8009ada:	d1b1      	bne.n	8009a40 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	0018      	movs	r0, r3
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	b004      	add	sp, #16
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <LL_LPUART_IsEnabled>:
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2201      	movs	r2, #1
 8009af4:	4013      	ands	r3, r2
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d101      	bne.n	8009afe <LL_LPUART_IsEnabled+0x18>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e000      	b.n	8009b00 <LL_LPUART_IsEnabled+0x1a>
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	0018      	movs	r0, r3
 8009b02:	46bd      	mov	sp, r7
 8009b04:	b002      	add	sp, #8
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <LL_LPUART_SetPrescaler>:
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	220f      	movs	r2, #15
 8009b18:	4393      	bics	r3, r2
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	b292      	uxth	r2, r2
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009b24:	46c0      	nop			; (mov r8, r8)
 8009b26:	46bd      	mov	sp, r7
 8009b28:	b002      	add	sp, #8
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <LL_LPUART_SetStopBitsLength>:
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	4a05      	ldr	r2, [pc, #20]	; (8009b50 <LL_LPUART_SetStopBitsLength+0x24>)
 8009b3c:	401a      	ands	r2, r3
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	605a      	str	r2, [r3, #4]
}
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	b002      	add	sp, #8
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	ffffcfff 	.word	0xffffcfff

08009b54 <LL_LPUART_SetHWFlowCtrl>:
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	4a05      	ldr	r2, [pc, #20]	; (8009b78 <LL_LPUART_SetHWFlowCtrl+0x24>)
 8009b64:	401a      	ands	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	609a      	str	r2, [r3, #8]
}
 8009b6e:	46c0      	nop			; (mov r8, r8)
 8009b70:	46bd      	mov	sp, r7
 8009b72:	b002      	add	sp, #8
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	46c0      	nop			; (mov r8, r8)
 8009b78:	fffffcff 	.word	0xfffffcff

08009b7c <LL_LPUART_SetBaudRate>:
{
 8009b7c:	b5b0      	push	{r4, r5, r7, lr}
 8009b7e:	b08c      	sub	sp, #48	; 0x30
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009b84:	62b9      	str	r1, [r7, #40]	; 0x28
 8009b86:	627a      	str	r2, [r7, #36]	; 0x24
 8009b88:	623b      	str	r3, [r7, #32]
  if (BaudRate != 0U)
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d030      	beq.n	8009bf2 <LL_LPUART_SetBaudRate+0x76>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	61bb      	str	r3, [r7, #24]
 8009b94:	2300      	movs	r3, #0
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	001a      	movs	r2, r3
 8009b9e:	4b17      	ldr	r3, [pc, #92]	; (8009bfc <LL_LPUART_SetBaudRate+0x80>)
 8009ba0:	0052      	lsls	r2, r2, #1
 8009ba2:	5ad3      	ldrh	r3, [r2, r3]
 8009ba4:	613b      	str	r3, [r7, #16]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	69b8      	ldr	r0, [r7, #24]
 8009bb0:	69f9      	ldr	r1, [r7, #28]
 8009bb2:	f7fc fc45 	bl	8006440 <__aeabi_uldivmod>
 8009bb6:	0002      	movs	r2, r0
 8009bb8:	000b      	movs	r3, r1
 8009bba:	0e11      	lsrs	r1, r2, #24
 8009bbc:	021d      	lsls	r5, r3, #8
 8009bbe:	430d      	orrs	r5, r1
 8009bc0:	0214      	lsls	r4, r2, #8
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	085b      	lsrs	r3, r3, #1
 8009bc6:	60bb      	str	r3, [r7, #8]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68b8      	ldr	r0, [r7, #8]
 8009bce:	68f9      	ldr	r1, [r7, #12]
 8009bd0:	1900      	adds	r0, r0, r4
 8009bd2:	4169      	adcs	r1, r5
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	607b      	str	r3, [r7, #4]
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f7fc fc2e 	bl	8006440 <__aeabi_uldivmod>
 8009be4:	0002      	movs	r2, r0
 8009be6:	000b      	movs	r3, r1
 8009be8:	0013      	movs	r3, r2
 8009bea:	031b      	lsls	r3, r3, #12
 8009bec:	0b1a      	lsrs	r2, r3, #12
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	60da      	str	r2, [r3, #12]
}
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	b00c      	add	sp, #48	; 0x30
 8009bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	08016818 	.word	0x08016818

08009c00 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8009c00:	b590      	push	{r4, r7, lr}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009c0a:	240f      	movs	r4, #15
 8009c0c:	193b      	adds	r3, r7, r4
 8009c0e:	2201      	movs	r2, #1
 8009c10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	0018      	movs	r0, r3
 8009c16:	f7ff ff66 	bl	8009ae6 <LL_LPUART_IsEnabled>
 8009c1a:	1e03      	subs	r3, r0, #0
 8009c1c:	d13c      	bne.n	8009c98 <LL_LPUART_Init+0x98>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a21      	ldr	r2, [pc, #132]	; (8009ca8 <LL_LPUART_Init+0xa8>)
 8009c24:	401a      	ands	r2, r3
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	6899      	ldr	r1, [r3, #8]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	4319      	orrs	r1, r3
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	430b      	orrs	r3, r1
 8009c36:	431a      	orrs	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	68da      	ldr	r2, [r3, #12]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	0011      	movs	r1, r2
 8009c44:	0018      	movs	r0, r3
 8009c46:	f7ff ff71 	bl	8009b2c <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	699a      	ldr	r2, [r3, #24]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	0011      	movs	r1, r2
 8009c52:	0018      	movs	r0, r3
 8009c54:	f7ff ff7e 	bl	8009b54 <LL_LPUART_SetHWFlowCtrl>
    else
    {
      /* Nothing to do, as error code is already assigned to ERROR value */
    }
#else
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8009c58:	23c0      	movs	r3, #192	; 0xc0
 8009c5a:	011b      	lsls	r3, r3, #4
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	f000 f8af 	bl	8009dc0 <LL_RCC_GetLPUARTClockFreq>
 8009c62:	0003      	movs	r3, r0
 8009c64:	60bb      	str	r3, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00e      	beq.n	8009c8a <LL_LPUART_Init+0x8a>
        && (LPUART_InitStruct->BaudRate != 0U))
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00a      	beq.n	8009c8a <LL_LPUART_Init+0x8a>
    {
      status = SUCCESS;
 8009c74:	193b      	adds	r3, r7, r4
 8009c76:	2200      	movs	r2, #0
 8009c78:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ff79 	bl	8009b7c <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	0011      	movs	r1, r2
 8009c92:	0018      	movs	r0, r3
 8009c94:	f7ff ff38 	bl	8009b08 <LL_LPUART_SetPrescaler>
  }

  return (status);
 8009c98:	230f      	movs	r3, #15
 8009c9a:	18fb      	adds	r3, r7, r3
 8009c9c:	781b      	ldrb	r3, [r3, #0]
}
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	b005      	add	sp, #20
 8009ca4:	bd90      	pop	{r4, r7, pc}
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	efffe9f3 	.word	0xefffe9f3

08009cac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009cb0:	4b07      	ldr	r3, [pc, #28]	; (8009cd0 <LL_RCC_HSI_IsReady+0x24>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	2380      	movs	r3, #128	; 0x80
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	401a      	ands	r2, r3
 8009cba:	2380      	movs	r3, #128	; 0x80
 8009cbc:	00db      	lsls	r3, r3, #3
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d101      	bne.n	8009cc6 <LL_RCC_HSI_IsReady+0x1a>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <LL_RCC_HSI_IsReady+0x1c>
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	0018      	movs	r0, r3
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	40021000 	.word	0x40021000

08009cd4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <LL_RCC_LSE_IsReady+0x1c>)
 8009cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cdc:	2202      	movs	r2, #2
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d101      	bne.n	8009ce8 <LL_RCC_LSE_IsReady+0x14>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e000      	b.n	8009cea <LL_RCC_LSE_IsReady+0x16>
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	0018      	movs	r0, r3
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	40021000 	.word	0x40021000

08009cf4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009cf8:	4b03      	ldr	r3, [pc, #12]	; (8009d08 <LL_RCC_GetSysClkSource+0x14>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	2238      	movs	r2, #56	; 0x38
 8009cfe:	4013      	ands	r3, r2
}
 8009d00:	0018      	movs	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	40021000 	.word	0x40021000

08009d0c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009d10:	4b03      	ldr	r3, [pc, #12]	; (8009d20 <LL_RCC_GetAHBPrescaler+0x14>)
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	23f0      	movs	r3, #240	; 0xf0
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	4013      	ands	r3, r2
}
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	40021000 	.word	0x40021000

08009d24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009d28:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	23e0      	movs	r3, #224	; 0xe0
 8009d2e:	01db      	lsls	r3, r3, #7
 8009d30:	4013      	ands	r3, r2
}
 8009d32:	0018      	movs	r0, r3
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	40021000 	.word	0x40021000

08009d3c <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx) | (LPUARTx << 16U));
 8009d44:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <LL_RCC_GetLPUARTClockSource+0x20>)
 8009d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	401a      	ands	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	041b      	lsls	r3, r3, #16
 8009d50:	4313      	orrs	r3, r2
}
 8009d52:	0018      	movs	r0, r3
 8009d54:	46bd      	mov	sp, r7
 8009d56:	b002      	add	sp, #8
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	46c0      	nop			; (mov r8, r8)
 8009d5c:	40021000 	.word	0x40021000

08009d60 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009d64:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <LL_RCC_PLL_GetN+0x14>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	0a1b      	lsrs	r3, r3, #8
 8009d6a:	227f      	movs	r2, #127	; 0x7f
 8009d6c:	4013      	ands	r3, r2
}
 8009d6e:	0018      	movs	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	40021000 	.word	0x40021000

08009d78 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009d7c:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <LL_RCC_PLL_GetR+0x14>)
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	0f5b      	lsrs	r3, r3, #29
 8009d82:	075b      	lsls	r3, r3, #29
}
 8009d84:	0018      	movs	r0, r3
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	46c0      	nop			; (mov r8, r8)
 8009d8c:	40021000 	.word	0x40021000

08009d90 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009d94:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <LL_RCC_PLL_GetMainSource+0x14>)
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	2203      	movs	r2, #3
 8009d9a:	4013      	ands	r3, r2
}
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	46c0      	nop			; (mov r8, r8)
 8009da4:	40021000 	.word	0x40021000

08009da8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009dac:	4b03      	ldr	r3, [pc, #12]	; (8009dbc <LL_RCC_PLL_GetDivider+0x14>)
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	2270      	movs	r2, #112	; 0x70
 8009db2:	4013      	ands	r3, r2
}
 8009db4:	0018      	movs	r0, r3
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	46c0      	nop			; (mov r8, r8)
 8009dbc:	40021000 	.word	0x40021000

08009dc0 <LL_RCC_GetLPUARTClockFreq>:
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  * (*) feature not available on all devices
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  if (LPUARTxSource == LL_RCC_LPUART1_CLKSOURCE)
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	23c0      	movs	r3, #192	; 0xc0
 8009dd0:	011b      	lsls	r3, r3, #4
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d137      	bne.n	8009e46 <LL_RCC_GetLPUARTClockFreq+0x86>
  {
    /* LPUART1CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))     
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f7ff ffaf 	bl	8009d3c <LL_RCC_GetLPUARTClockSource>
 8009dde:	0003      	movs	r3, r0
 8009de0:	4a1b      	ldr	r2, [pc, #108]	; (8009e50 <LL_RCC_GetLPUARTClockFreq+0x90>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d016      	beq.n	8009e14 <LL_RCC_GetLPUARTClockFreq+0x54>
 8009de6:	4a1a      	ldr	r2, [pc, #104]	; (8009e50 <LL_RCC_GetLPUARTClockFreq+0x90>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d81c      	bhi.n	8009e26 <LL_RCC_GetLPUARTClockFreq+0x66>
 8009dec:	4a19      	ldr	r2, [pc, #100]	; (8009e54 <LL_RCC_GetLPUARTClockFreq+0x94>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d003      	beq.n	8009dfa <LL_RCC_GetLPUARTClockFreq+0x3a>
 8009df2:	4a19      	ldr	r2, [pc, #100]	; (8009e58 <LL_RCC_GetLPUARTClockFreq+0x98>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d005      	beq.n	8009e04 <LL_RCC_GetLPUARTClockFreq+0x44>
 8009df8:	e015      	b.n	8009e26 <LL_RCC_GetLPUARTClockFreq+0x66>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 8009dfa:	f000 f831 	bl	8009e60 <RCC_GetSystemClockFreq>
 8009dfe:	0003      	movs	r3, r0
 8009e00:	60fb      	str	r3, [r7, #12]
        break;
 8009e02:	e020      	b.n	8009e46 <LL_RCC_GetLPUARTClockFreq+0x86>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009e04:	f7ff ff52 	bl	8009cac <LL_RCC_HSI_IsReady>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d118      	bne.n	8009e40 <LL_RCC_GetLPUARTClockFreq+0x80>
        {
          lpuart_frequency = HSI_VALUE;
 8009e0e:	4b13      	ldr	r3, [pc, #76]	; (8009e5c <LL_RCC_GetLPUARTClockFreq+0x9c>)
 8009e10:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009e12:	e015      	b.n	8009e40 <LL_RCC_GetLPUARTClockFreq+0x80>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009e14:	f7ff ff5e 	bl	8009cd4 <LL_RCC_LSE_IsReady>
 8009e18:	0003      	movs	r3, r0
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d112      	bne.n	8009e44 <LL_RCC_GetLPUARTClockFreq+0x84>
        {
          lpuart_frequency = LSE_VALUE;
 8009e1e:	2380      	movs	r3, #128	; 0x80
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009e24:	e00e      	b.n	8009e44 <LL_RCC_GetLPUARTClockFreq+0x84>

      case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009e26:	f000 f81b 	bl	8009e60 <RCC_GetSystemClockFreq>
 8009e2a:	0003      	movs	r3, r0
 8009e2c:	0018      	movs	r0, r3
 8009e2e:	f000 f845 	bl	8009ebc <RCC_GetHCLKClockFreq>
 8009e32:	0003      	movs	r3, r0
 8009e34:	0018      	movs	r0, r3
 8009e36:	f000 f859 	bl	8009eec <RCC_GetPCLK1ClockFreq>
 8009e3a:	0003      	movs	r3, r0
 8009e3c:	60fb      	str	r3, [r7, #12]
        break;
 8009e3e:	e002      	b.n	8009e46 <LL_RCC_GetLPUARTClockFreq+0x86>
        break;
 8009e40:	46c0      	nop			; (mov r8, r8)
 8009e42:	e000      	b.n	8009e46 <LL_RCC_GetLPUARTClockFreq+0x86>
        break;
 8009e44:	46c0      	nop			; (mov r8, r8)
#endif /* LPUART2 */
  else
  {
  }  

  return lpuart_frequency;
 8009e46:	68fb      	ldr	r3, [r7, #12]
}
 8009e48:	0018      	movs	r0, r3
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	b004      	add	sp, #16
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	0c000c00 	.word	0x0c000c00
 8009e54:	0c000400 	.word	0x0c000400
 8009e58:	0c000800 	.word	0x0c000800
 8009e5c:	00f42400 	.word	0x00f42400

08009e60 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009e66:	f7ff ff45 	bl	8009cf4 <LL_RCC_GetSysClkSource>
 8009e6a:	0003      	movs	r3, r0
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d002      	beq.n	8009e76 <RCC_GetSystemClockFreq+0x16>
 8009e70:	2b10      	cmp	r3, #16
 8009e72:	d003      	beq.n	8009e7c <RCC_GetSystemClockFreq+0x1c>
 8009e74:	e007      	b.n	8009e86 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8009e76:	4b0e      	ldr	r3, [pc, #56]	; (8009eb0 <RCC_GetSystemClockFreq+0x50>)
 8009e78:	607b      	str	r3, [r7, #4]
      break;
 8009e7a:	e014      	b.n	8009ea6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8009e7c:	f000 f84c 	bl	8009f18 <RCC_PLL_GetFreqDomain_SYS>
 8009e80:	0003      	movs	r3, r0
 8009e82:	607b      	str	r3, [r7, #4]
      break;
 8009e84:	e00f      	b.n	8009ea6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <RCC_GetSystemClockFreq+0x54>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	0adb      	lsrs	r3, r3, #11
 8009e8c:	2207      	movs	r2, #7
 8009e8e:	4013      	ands	r3, r2
 8009e90:	2201      	movs	r2, #1
 8009e92:	409a      	lsls	r2, r3
 8009e94:	0013      	movs	r3, r2
 8009e96:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	4807      	ldr	r0, [pc, #28]	; (8009eb8 <RCC_GetSystemClockFreq+0x58>)
 8009e9c:	f7fc f95a 	bl	8006154 <__udivsi3>
 8009ea0:	0003      	movs	r3, r0
 8009ea2:	607b      	str	r3, [r7, #4]
      break;
 8009ea4:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8009ea6:	687b      	ldr	r3, [r7, #4]
}
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	b002      	add	sp, #8
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	007a1200 	.word	0x007a1200
 8009eb4:	40021000 	.word	0x40021000
 8009eb8:	00f42400 	.word	0x00f42400

08009ebc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009ec4:	f7ff ff22 	bl	8009d0c <LL_RCC_GetAHBPrescaler>
 8009ec8:	0003      	movs	r3, r0
 8009eca:	0a1b      	lsrs	r3, r3, #8
 8009ecc:	220f      	movs	r2, #15
 8009ece:	401a      	ands	r2, r3
 8009ed0:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <RCC_GetHCLKClockFreq+0x2c>)
 8009ed2:	0092      	lsls	r2, r2, #2
 8009ed4:	58d3      	ldr	r3, [r2, r3]
 8009ed6:	221f      	movs	r2, #31
 8009ed8:	4013      	ands	r3, r2
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	40da      	lsrs	r2, r3
 8009ede:	0013      	movs	r3, r2
}
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	b002      	add	sp, #8
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	080167b0 	.word	0x080167b0

08009eec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009ef4:	f7ff ff16 	bl	8009d24 <LL_RCC_GetAPB1Prescaler>
 8009ef8:	0003      	movs	r3, r0
 8009efa:	0b1a      	lsrs	r2, r3, #12
 8009efc:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <RCC_GetPCLK1ClockFreq+0x28>)
 8009efe:	0092      	lsls	r2, r2, #2
 8009f00:	58d3      	ldr	r3, [r2, r3]
 8009f02:	221f      	movs	r2, #31
 8009f04:	4013      	ands	r3, r2
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	40da      	lsrs	r2, r3
 8009f0a:	0013      	movs	r3, r2
}
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	b002      	add	sp, #8
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	080167f0 	.word	0x080167f0

08009f18 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8009f18:	b590      	push	{r4, r7, lr}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009f1e:	f7ff ff37 	bl	8009d90 <LL_RCC_PLL_GetMainSource>
 8009f22:	0003      	movs	r3, r0
 8009f24:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d003      	beq.n	8009f34 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d003      	beq.n	8009f3a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8009f32:	e005      	b.n	8009f40 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009f34:	4b13      	ldr	r3, [pc, #76]	; (8009f84 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8009f36:	607b      	str	r3, [r7, #4]
      break;
 8009f38:	e005      	b.n	8009f46 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009f3a:	4b13      	ldr	r3, [pc, #76]	; (8009f88 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8009f3c:	607b      	str	r3, [r7, #4]
      break;
 8009f3e:	e002      	b.n	8009f46 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8009f40:	4b10      	ldr	r3, [pc, #64]	; (8009f84 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8009f42:	607b      	str	r3, [r7, #4]
      break;
 8009f44:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009f46:	f7ff ff0b 	bl	8009d60 <LL_RCC_PLL_GetN>
 8009f4a:	0002      	movs	r2, r0
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4353      	muls	r3, r2
 8009f50:	001c      	movs	r4, r3
 8009f52:	f7ff ff29 	bl	8009da8 <LL_RCC_PLL_GetDivider>
 8009f56:	0003      	movs	r3, r0
 8009f58:	091b      	lsrs	r3, r3, #4
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	0019      	movs	r1, r3
 8009f5e:	0020      	movs	r0, r4
 8009f60:	f7fc f8f8 	bl	8006154 <__udivsi3>
 8009f64:	0003      	movs	r3, r0
 8009f66:	001c      	movs	r4, r3
 8009f68:	f7ff ff06 	bl	8009d78 <LL_RCC_PLL_GetR>
 8009f6c:	0003      	movs	r3, r0
 8009f6e:	0f5b      	lsrs	r3, r3, #29
 8009f70:	3301      	adds	r3, #1
 8009f72:	0019      	movs	r1, r3
 8009f74:	0020      	movs	r0, r4
 8009f76:	f7fc f8ed 	bl	8006154 <__udivsi3>
 8009f7a:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8009f7c:	0018      	movs	r0, r3
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	b003      	add	sp, #12
 8009f82:	bd90      	pop	{r4, r7, pc}
 8009f84:	00f42400 	.word	0x00f42400
 8009f88:	007a1200 	.word	0x007a1200

08009f8c <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	085a      	lsrs	r2, r3, #1
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	601a      	str	r2, [r3, #0]
}
 8009fa0:	46c0      	nop			; (mov r8, r8)
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	b002      	add	sp, #8
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <LL_APB1_GRP1_EnableClock>:
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <LL_APB1_GRP1_EnableClock+0x28>)
 8009fb2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009fb4:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <LL_APB1_GRP1_EnableClock+0x28>)
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8009fbc:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <LL_APB1_GRP1_EnableClock+0x28>)
 8009fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
}
 8009fc8:	46c0      	nop			; (mov r8, r8)
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	b004      	add	sp, #16
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	40021000 	.word	0x40021000

08009fd4 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if(UCPD1 == UCPDx)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a16      	ldr	r2, [pc, #88]	; (800a03c <LL_UCPD_Init+0x68>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d104      	bne.n	8009ff0 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8009fe6:	2380      	movs	r3, #128	; 0x80
 8009fe8:	049b      	lsls	r3, r3, #18
 8009fea:	0018      	movs	r0, r3
 8009fec:	f7ff ffdc 	bl	8009fa8 <LL_APB1_GRP1_EnableClock>
  }

  if(UCPD2 == UCPDx)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a13      	ldr	r2, [pc, #76]	; (800a040 <LL_UCPD_Init+0x6c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d104      	bne.n	800a002 <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8009ff8:	2380      	movs	r3, #128	; 0x80
 8009ffa:	04db      	lsls	r3, r3, #19
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f7ff ffd3 	bl	8009fa8 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	0018      	movs	r0, r3
 800a006:	f7ff ffc1 	bl	8009f8c <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a0d      	ldr	r2, [pc, #52]	; (800a044 <LL_UCPD_Init+0x70>)
 800a010:	401a      	ands	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6819      	ldr	r1, [r3, #0]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	02db      	lsls	r3, r3, #11
 800a01c:	4319      	orrs	r1, r3
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	019b      	lsls	r3, r3, #6
 800a024:	4319      	orrs	r1, r3
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	430b      	orrs	r3, r1
 800a02c:	431a      	orrs	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800a032:	2300      	movs	r3, #0
}
 800a034:	0018      	movs	r0, r3
 800a036:	46bd      	mov	sp, r7
 800a038:	b002      	add	sp, #8
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	4000a000 	.word	0x4000a000
 800a040:	4000a400 	.word	0x4000a400
 800a044:	fff10000 	.word	0xfff10000

0800a048 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	0292      	lsls	r2, r2, #10
 800a056:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2207      	movs	r2, #7
 800a05c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2210      	movs	r2, #16
 800a062:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	220d      	movs	r2, #13
 800a068:	60da      	str	r2, [r3, #12]
}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	46bd      	mov	sp, r7
 800a06e:	b002      	add	sp, #8
 800a070:	bd80      	pop	{r7, pc}

0800a072 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	0002      	movs	r2, r0
 800a07a:	1dbb      	adds	r3, r7, #6
 800a07c:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a07e:	2300      	movs	r3, #0
 800a080:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a082:	1dbb      	adds	r3, r7, #6
 800a084:	2200      	movs	r2, #0
 800a086:	5e9b      	ldrsh	r3, [r3, r2]
 800a088:	2b84      	cmp	r3, #132	; 0x84
 800a08a:	d006      	beq.n	800a09a <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800a08c:	1dbb      	adds	r3, r7, #6
 800a08e:	2200      	movs	r2, #0
 800a090:	5e9a      	ldrsh	r2, [r3, r2]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	18d3      	adds	r3, r2, r3
 800a096:	3303      	adds	r3, #3
 800a098:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a09a:	68fb      	ldr	r3, [r7, #12]
}
 800a09c:	0018      	movs	r0, r3
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	b004      	add	sp, #16
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0aa:	f3ef 8305 	mrs	r3, IPSR
 800a0ae:	607b      	str	r3, [r7, #4]
  return(result);
 800a0b0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a0b2:	1e5a      	subs	r2, r3, #1
 800a0b4:	4193      	sbcs	r3, r2
 800a0b6:	b2db      	uxtb	r3, r3
}
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	b002      	add	sp, #8
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a0c4:	f001 fa66 	bl	800b594 <vTaskStartScheduler>
  
  return osOK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685c      	ldr	r4, [r3, #4]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0e6:	b29e      	uxth	r6, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	f7ff ffbf 	bl	800a072 <makeFreeRtosPriority>
 800a0f4:	0001      	movs	r1, r0
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	230c      	movs	r3, #12
 800a0fa:	18fb      	adds	r3, r7, r3
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	9100      	str	r1, [sp, #0]
 800a100:	0013      	movs	r3, r2
 800a102:	0032      	movs	r2, r6
 800a104:	0029      	movs	r1, r5
 800a106:	0020      	movs	r0, r4
 800a108:	f001 f88b 	bl	800b222 <xTaskCreate>
 800a10c:	0003      	movs	r3, r0
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d001      	beq.n	800a116 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	e000      	b.n	800a118 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800a116:	68fb      	ldr	r3, [r7, #12]
}
 800a118:	0018      	movs	r0, r3
 800a11a:	46bd      	mov	sp, r7
 800a11c:	b005      	add	sp, #20
 800a11e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a120 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	0018      	movs	r0, r3
 800a12c:	f001 f9a8 	bl	800b480 <vTaskDelete>
  return osOK;
 800a130:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800a132:	0018      	movs	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	b002      	add	sp, #8
 800a138:	bd80      	pop	{r7, pc}

0800a13a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <osDelay+0x16>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	e000      	b.n	800a152 <osDelay+0x18>
 800a150:	2301      	movs	r3, #1
 800a152:	0018      	movs	r0, r3
 800a154:	f001 f9f8 	bl	800b548 <vTaskDelay>
  
  return osOK;
 800a158:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a15a:	0018      	movs	r0, r3
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b004      	add	sp, #16
 800a160:	bd80      	pop	{r7, pc}

0800a162 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6818      	ldr	r0, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	0019      	movs	r1, r3
 800a178:	f000 fc96 	bl	800aaa8 <xQueueGenericCreate>
 800a17c:	0003      	movs	r3, r0
#endif
}
 800a17e:	0018      	movs	r0, r3
 800a180:	46bd      	mov	sp, r7
 800a182:	b002      	add	sp, #8
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a194:	2300      	movs	r3, #0
 800a196:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <osMessagePut+0x1e>
    ticks = 1;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a1a6:	f7ff ff7d 	bl	800a0a4 <inHandlerMode>
 800a1aa:	1e03      	subs	r3, r0, #0
 800a1ac:	d014      	beq.n	800a1d8 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a1ae:	2310      	movs	r3, #16
 800a1b0:	18fa      	adds	r2, r7, r3
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	18f9      	adds	r1, r7, r3
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f000 fd89 	bl	800acd0 <xQueueGenericSendFromISR>
 800a1be:	0003      	movs	r3, r0
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d001      	beq.n	800a1c8 <osMessagePut+0x40>
      return osErrorOS;
 800a1c4:	23ff      	movs	r3, #255	; 0xff
 800a1c6:	e014      	b.n	800a1f2 <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d010      	beq.n	800a1f0 <osMessagePut+0x68>
 800a1ce:	4b0b      	ldr	r3, [pc, #44]	; (800a1fc <osMessagePut+0x74>)
 800a1d0:	2280      	movs	r2, #128	; 0x80
 800a1d2:	0552      	lsls	r2, r2, #21
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	e00b      	b.n	800a1f0 <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	2308      	movs	r3, #8
 800a1dc:	18f9      	adds	r1, r7, r3
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f000 fcb1 	bl	800ab48 <xQueueGenericSend>
 800a1e6:	0003      	movs	r3, r0
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d001      	beq.n	800a1f0 <osMessagePut+0x68>
      return osErrorOS;
 800a1ec:	23ff      	movs	r3, #255	; 0xff
 800a1ee:	e000      	b.n	800a1f2 <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	b006      	add	sp, #24
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	46c0      	nop			; (mov r8, r8)
 800a1fc:	e000ed04 	.word	0xe000ed04

0800a200 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a200:	b590      	push	{r4, r7, lr}
 800a202:	b08b      	sub	sp, #44	; 0x2c
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a20c:	2114      	movs	r1, #20
 800a20e:	187b      	adds	r3, r7, r1
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 800a214:	187b      	adds	r3, r7, r1
 800a216:	2200      	movs	r2, #0
 800a218:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d107      	bne.n	800a230 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a220:	187b      	adds	r3, r7, r1
 800a222:	2280      	movs	r2, #128	; 0x80
 800a224:	601a      	str	r2, [r3, #0]
    return event;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	187a      	adds	r2, r7, r1
 800a22a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a22c:	c313      	stmia	r3!, {r0, r1, r4}
 800a22e:	e051      	b.n	800a2d4 <osMessageGet+0xd4>
  }
  
  taskWoken = pdFALSE;
 800a230:	2300      	movs	r3, #0
 800a232:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3301      	adds	r3, #1
 800a23c:	d103      	bne.n	800a246 <osMessageGet+0x46>
    ticks = portMAX_DELAY;
 800a23e:	2301      	movs	r3, #1
 800a240:	425b      	negs	r3, r3
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
 800a244:	e009      	b.n	800a25a <osMessageGet+0x5a>
  }
  else if (millisec != 0) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d006      	beq.n	800a25a <osMessageGet+0x5a>
    ticks = millisec / portTICK_PERIOD_MS;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <osMessageGet+0x5a>
      ticks = 1;
 800a256:	2301      	movs	r3, #1
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a25a:	f7ff ff23 	bl	800a0a4 <inHandlerMode>
 800a25e:	1e03      	subs	r3, r0, #0
 800a260:	d01b      	beq.n	800a29a <osMessageGet+0x9a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a262:	2320      	movs	r3, #32
 800a264:	18fa      	adds	r2, r7, r3
 800a266:	2414      	movs	r4, #20
 800a268:	193b      	adds	r3, r7, r4
 800a26a:	1d19      	adds	r1, r3, #4
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	0018      	movs	r0, r3
 800a270:	f000 fe57 	bl	800af22 <xQueueReceiveFromISR>
 800a274:	0003      	movs	r3, r0
 800a276:	2b01      	cmp	r3, #1
 800a278:	d103      	bne.n	800a282 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
 800a27a:	193b      	adds	r3, r7, r4
 800a27c:	2210      	movs	r2, #16
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	e003      	b.n	800a28a <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800a282:	2314      	movs	r3, #20
 800a284:	18fb      	adds	r3, r7, r3
 800a286:	2200      	movs	r2, #0
 800a288:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d01c      	beq.n	800a2ca <osMessageGet+0xca>
 800a290:	4b12      	ldr	r3, [pc, #72]	; (800a2dc <osMessageGet+0xdc>)
 800a292:	2280      	movs	r2, #128	; 0x80
 800a294:	0552      	lsls	r2, r2, #21
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	e017      	b.n	800a2ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a29c:	2414      	movs	r4, #20
 800a29e:	193b      	adds	r3, r7, r4
 800a2a0:	1d19      	adds	r1, r3, #4
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	f000 fd87 	bl	800adb8 <xQueueReceive>
 800a2aa:	0003      	movs	r3, r0
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d103      	bne.n	800a2b8 <osMessageGet+0xb8>
      /* We have mail */
      event.status = osEventMessage;
 800a2b0:	193b      	adds	r3, r7, r4
 800a2b2:	2210      	movs	r2, #16
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	e008      	b.n	800a2ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <osMessageGet+0xc2>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	e000      	b.n	800a2c4 <osMessageGet+0xc4>
 800a2c2:	2240      	movs	r2, #64	; 0x40
 800a2c4:	2314      	movs	r3, #20
 800a2c6:	18fb      	adds	r3, r7, r3
 800a2c8:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2214      	movs	r2, #20
 800a2ce:	18ba      	adds	r2, r7, r2
 800a2d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a2d2:	c313      	stmia	r3!, {r0, r1, r4}
}
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	b00b      	add	sp, #44	; 0x2c
 800a2da:	bd90      	pop	{r4, r7, pc}
 800a2dc:	e000ed04 	.word	0xe000ed04

0800a2e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a2ec:	f001 f988 	bl	800b600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2f0:	4b4b      	ldr	r3, [pc, #300]	; (800a420 <pvPortMalloc+0x140>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2f8:	f000 f8ec 	bl	800a4d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2fc:	4b49      	ldr	r3, [pc, #292]	; (800a424 <pvPortMalloc+0x144>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	4013      	ands	r3, r2
 800a304:	d000      	beq.n	800a308 <pvPortMalloc+0x28>
 800a306:	e07e      	b.n	800a406 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d012      	beq.n	800a334 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800a30e:	2208      	movs	r2, #8
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	189b      	adds	r3, r3, r2
 800a314:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2207      	movs	r2, #7
 800a31a:	4013      	ands	r3, r2
 800a31c:	d00a      	beq.n	800a334 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2207      	movs	r2, #7
 800a322:	4393      	bics	r3, r2
 800a324:	3308      	adds	r3, #8
 800a326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2207      	movs	r2, #7
 800a32c:	4013      	ands	r3, r2
 800a32e:	d001      	beq.n	800a334 <pvPortMalloc+0x54>
 800a330:	b672      	cpsid	i
 800a332:	e7fe      	b.n	800a332 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d065      	beq.n	800a406 <pvPortMalloc+0x126>
 800a33a:	4b3b      	ldr	r3, [pc, #236]	; (800a428 <pvPortMalloc+0x148>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	429a      	cmp	r2, r3
 800a342:	d860      	bhi.n	800a406 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a344:	4b39      	ldr	r3, [pc, #228]	; (800a42c <pvPortMalloc+0x14c>)
 800a346:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a348:	4b38      	ldr	r3, [pc, #224]	; (800a42c <pvPortMalloc+0x14c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a34e:	e004      	b.n	800a35a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d903      	bls.n	800a36c <pvPortMalloc+0x8c>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1f1      	bne.n	800a350 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a36c:	4b2c      	ldr	r3, [pc, #176]	; (800a420 <pvPortMalloc+0x140>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	429a      	cmp	r2, r3
 800a374:	d047      	beq.n	800a406 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2208      	movs	r2, #8
 800a37c:	189b      	adds	r3, r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	1ad2      	subs	r2, r2, r3
 800a390:	2308      	movs	r3, #8
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	429a      	cmp	r2, r3
 800a396:	d916      	bls.n	800a3c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	18d3      	adds	r3, r2, r3
 800a39e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2207      	movs	r2, #7
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d001      	beq.n	800a3ac <pvPortMalloc+0xcc>
 800a3a8:	b672      	cpsid	i
 800a3aa:	e7fe      	b.n	800a3aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	1ad2      	subs	r2, r2, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f000 f8e7 	bl	800a594 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3c6:	4b18      	ldr	r3, [pc, #96]	; (800a428 <pvPortMalloc+0x148>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	1ad2      	subs	r2, r2, r3
 800a3d0:	4b15      	ldr	r3, [pc, #84]	; (800a428 <pvPortMalloc+0x148>)
 800a3d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3d4:	4b14      	ldr	r3, [pc, #80]	; (800a428 <pvPortMalloc+0x148>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	4b15      	ldr	r3, [pc, #84]	; (800a430 <pvPortMalloc+0x150>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d203      	bcs.n	800a3e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3e0:	4b11      	ldr	r3, [pc, #68]	; (800a428 <pvPortMalloc+0x148>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	4b12      	ldr	r3, [pc, #72]	; (800a430 <pvPortMalloc+0x150>)
 800a3e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <pvPortMalloc+0x144>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <pvPortMalloc+0x154>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <pvPortMalloc+0x154>)
 800a404:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a406:	f001 f907 	bl	800b618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2207      	movs	r2, #7
 800a40e:	4013      	ands	r3, r2
 800a410:	d001      	beq.n	800a416 <pvPortMalloc+0x136>
 800a412:	b672      	cpsid	i
 800a414:	e7fe      	b.n	800a414 <pvPortMalloc+0x134>
	return pvReturn;
 800a416:	68fb      	ldr	r3, [r7, #12]
}
 800a418:	0018      	movs	r0, r3
 800a41a:	46bd      	mov	sp, r7
 800a41c:	b006      	add	sp, #24
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	200015a0 	.word	0x200015a0
 800a424:	200015b4 	.word	0x200015b4
 800a428:	200015a4 	.word	0x200015a4
 800a42c:	20001598 	.word	0x20001598
 800a430:	200015a8 	.word	0x200015a8
 800a434:	200015ac 	.word	0x200015ac

0800a438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d03a      	beq.n	800a4c0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a44a:	2308      	movs	r3, #8
 800a44c:	425b      	negs	r3, r3
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	18d3      	adds	r3, r2, r3
 800a452:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	4b1a      	ldr	r3, [pc, #104]	; (800a4c8 <vPortFree+0x90>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4013      	ands	r3, r2
 800a462:	d101      	bne.n	800a468 <vPortFree+0x30>
 800a464:	b672      	cpsid	i
 800a466:	e7fe      	b.n	800a466 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <vPortFree+0x3c>
 800a470:	b672      	cpsid	i
 800a472:	e7fe      	b.n	800a472 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	4b13      	ldr	r3, [pc, #76]	; (800a4c8 <vPortFree+0x90>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4013      	ands	r3, r2
 800a47e:	d01f      	beq.n	800a4c0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d11b      	bne.n	800a4c0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <vPortFree+0x90>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	43db      	mvns	r3, r3
 800a492:	401a      	ands	r2, r3
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a498:	f001 f8b2 	bl	800b600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <vPortFree+0x94>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	18d2      	adds	r2, r2, r3
 800a4a6:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <vPortFree+0x94>)
 800a4a8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	f000 f871 	bl	800a594 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4b2:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <vPortFree+0x98>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <vPortFree+0x98>)
 800a4ba:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800a4bc:	f001 f8ac 	bl	800b618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4c0:	46c0      	nop			; (mov r8, r8)
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	b004      	add	sp, #16
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	200015b4 	.word	0x200015b4
 800a4cc:	200015a4 	.word	0x200015a4
 800a4d0:	200015b0 	.word	0x200015b0

0800a4d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4da:	4b27      	ldr	r3, [pc, #156]	; (800a578 <prvHeapInit+0xa4>)
 800a4dc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4de:	4b27      	ldr	r3, [pc, #156]	; (800a57c <prvHeapInit+0xa8>)
 800a4e0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2207      	movs	r2, #7
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	d00c      	beq.n	800a504 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3307      	adds	r3, #7
 800a4ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2207      	movs	r2, #7
 800a4f4:	4393      	bics	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	1ad2      	subs	r2, r2, r3
 800a4fe:	4b1f      	ldr	r3, [pc, #124]	; (800a57c <prvHeapInit+0xa8>)
 800a500:	18d3      	adds	r3, r2, r3
 800a502:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a508:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <prvHeapInit+0xac>)
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a50e:	4b1c      	ldr	r3, [pc, #112]	; (800a580 <prvHeapInit+0xac>)
 800a510:	2200      	movs	r2, #0
 800a512:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	18d3      	adds	r3, r2, r3
 800a51a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a51c:	2208      	movs	r2, #8
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	1a9b      	subs	r3, r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2207      	movs	r2, #7
 800a528:	4393      	bics	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	4b15      	ldr	r3, [pc, #84]	; (800a584 <prvHeapInit+0xb0>)
 800a530:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800a532:	4b14      	ldr	r3, [pc, #80]	; (800a584 <prvHeapInit+0xb0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a53a:	4b12      	ldr	r3, [pc, #72]	; (800a584 <prvHeapInit+0xb0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	1ad2      	subs	r2, r2, r3
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a550:	4b0c      	ldr	r3, [pc, #48]	; (800a584 <prvHeapInit+0xb0>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <prvHeapInit+0xb4>)
 800a55e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	4b09      	ldr	r3, [pc, #36]	; (800a58c <prvHeapInit+0xb8>)
 800a566:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a568:	4b09      	ldr	r3, [pc, #36]	; (800a590 <prvHeapInit+0xbc>)
 800a56a:	2280      	movs	r2, #128	; 0x80
 800a56c:	0612      	lsls	r2, r2, #24
 800a56e:	601a      	str	r2, [r3, #0]
}
 800a570:	46c0      	nop			; (mov r8, r8)
 800a572:	46bd      	mov	sp, r7
 800a574:	b004      	add	sp, #16
 800a576:	bd80      	pop	{r7, pc}
 800a578:	00001388 	.word	0x00001388
 800a57c:	20000210 	.word	0x20000210
 800a580:	20001598 	.word	0x20001598
 800a584:	200015a0 	.word	0x200015a0
 800a588:	200015a8 	.word	0x200015a8
 800a58c:	200015a4 	.word	0x200015a4
 800a590:	200015b4 	.word	0x200015b4

0800a594 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a59c:	4b27      	ldr	r3, [pc, #156]	; (800a63c <prvInsertBlockIntoFreeList+0xa8>)
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	e002      	b.n	800a5a8 <prvInsertBlockIntoFreeList+0x14>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d8f7      	bhi.n	800a5a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	18d3      	adds	r3, r2, r3
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d108      	bne.n	800a5d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	18d2      	adds	r2, r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	18d2      	adds	r2, r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d118      	bne.n	800a61c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	4b14      	ldr	r3, [pc, #80]	; (800a640 <prvInsertBlockIntoFreeList+0xac>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d00d      	beq.n	800a612 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	18d2      	adds	r2, r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	e008      	b.n	800a624 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a612:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <prvInsertBlockIntoFreeList+0xac>)
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	601a      	str	r2, [r3, #0]
 800a61a:	e003      	b.n	800a624 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d002      	beq.n	800a632 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a632:	46c0      	nop			; (mov r8, r8)
 800a634:	46bd      	mov	sp, r7
 800a636:	b004      	add	sp, #16
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	20001598 	.word	0x20001598
 800a640:	200015a0 	.word	0x200015a0

0800a644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3308      	adds	r3, #8
 800a650:	001a      	movs	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	4252      	negs	r2, r2
 800a65c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3308      	adds	r3, #8
 800a662:	001a      	movs	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3308      	adds	r3, #8
 800a66c:	001a      	movs	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a678:	46c0      	nop			; (mov r8, r8)
 800a67a:	46bd      	mov	sp, r7
 800a67c:	b002      	add	sp, #8
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a68e:	46c0      	nop			; (mov r8, r8)
 800a690:	46bd      	mov	sp, r7
 800a692:	b002      	add	sp, #8
 800a694:	bd80      	pop	{r7, pc}

0800a696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	601a      	str	r2, [r3, #0]
}
 800a6d2:	46c0      	nop			; (mov r8, r8)
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	b004      	add	sp, #16
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	d103      	bne.n	800a6f8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	60fb      	str	r3, [r7, #12]
 800a6f6:	e00c      	b.n	800a712 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3308      	adds	r3, #8
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	e002      	b.n	800a706 <vListInsert+0x2c>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	60fb      	str	r3, [r7, #12]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d2f6      	bcs.n	800a700 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	1c5a      	adds	r2, r3, #1
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	601a      	str	r2, [r3, #0]
}
 800a73e:	46c0      	nop			; (mov r8, r8)
 800a740:	46bd      	mov	sp, r7
 800a742:	b004      	add	sp, #16
 800a744:	bd80      	pop	{r7, pc}

0800a746 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b084      	sub	sp, #16
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6892      	ldr	r2, [r2, #8]
 800a75c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6852      	ldr	r2, [r2, #4]
 800a766:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d103      	bne.n	800a77a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	689a      	ldr	r2, [r3, #8]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	1e5a      	subs	r2, r3, #1
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
}
 800a78e:	0018      	movs	r0, r3
 800a790:	46bd      	mov	sp, r7
 800a792:	b004      	add	sp, #16
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3b04      	subs	r3, #4
 800a7a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2280      	movs	r2, #128	; 0x80
 800a7ae:	0452      	lsls	r2, r2, #17
 800a7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3b04      	subs	r3, #4
 800a7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3b04      	subs	r3, #4
 800a7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7c4:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <pxPortInitialiseStack+0x50>)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3b14      	subs	r3, #20
 800a7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3b20      	subs	r3, #32
 800a7da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
}
 800a7de:	0018      	movs	r0, r3
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	b004      	add	sp, #16
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	46c0      	nop			; (mov r8, r8)
 800a7e8:	0800a7ed 	.word	0x0800a7ed

0800a7ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7f6:	4b08      	ldr	r3, [pc, #32]	; (800a818 <prvTaskExitError+0x2c>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	d001      	beq.n	800a802 <prvTaskExitError+0x16>
 800a7fe:	b672      	cpsid	i
 800a800:	e7fe      	b.n	800a800 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a802:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a804:	46c0      	nop			; (mov r8, r8)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0fc      	beq.n	800a806 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a80c:	46c0      	nop			; (mov r8, r8)
 800a80e:	46c0      	nop			; (mov r8, r8)
 800a810:	46bd      	mov	sp, r7
 800a812:	b002      	add	sp, #8
 800a814:	bd80      	pop	{r7, pc}
 800a816:	46c0      	nop			; (mov r8, r8)
 800a818:	20000010 	.word	0x20000010

0800a81c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a820:	46c0      	nop			; (mov r8, r8)
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a830 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a830:	4a0b      	ldr	r2, [pc, #44]	; (800a860 <pxCurrentTCBConst2>)
 800a832:	6813      	ldr	r3, [r2, #0]
 800a834:	6818      	ldr	r0, [r3, #0]
 800a836:	3020      	adds	r0, #32
 800a838:	f380 8809 	msr	PSP, r0
 800a83c:	2002      	movs	r0, #2
 800a83e:	f380 8814 	msr	CONTROL, r0
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a848:	46ae      	mov	lr, r5
 800a84a:	bc08      	pop	{r3}
 800a84c:	bc04      	pop	{r2}
 800a84e:	b662      	cpsie	i
 800a850:	4718      	bx	r3
 800a852:	46c0      	nop			; (mov r8, r8)
 800a854:	46c0      	nop			; (mov r8, r8)
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	46c0      	nop			; (mov r8, r8)
 800a85a:	46c0      	nop			; (mov r8, r8)
 800a85c:	46c0      	nop			; (mov r8, r8)
 800a85e:	46c0      	nop			; (mov r8, r8)

0800a860 <pxCurrentTCBConst2>:
 800a860:	200015b8 	.word	0x200015b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a864:	46c0      	nop			; (mov r8, r8)
 800a866:	46c0      	nop			; (mov r8, r8)

0800a868 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a86c:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <xPortStartScheduler+0x40>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b0d      	ldr	r3, [pc, #52]	; (800a8a8 <xPortStartScheduler+0x40>)
 800a872:	21ff      	movs	r1, #255	; 0xff
 800a874:	0409      	lsls	r1, r1, #16
 800a876:	430a      	orrs	r2, r1
 800a878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a87a:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <xPortStartScheduler+0x40>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <xPortStartScheduler+0x40>)
 800a880:	21ff      	movs	r1, #255	; 0xff
 800a882:	0609      	lsls	r1, r1, #24
 800a884:	430a      	orrs	r2, r1
 800a886:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a888:	f000 f898 	bl	800a9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a88c:	4b07      	ldr	r3, [pc, #28]	; (800a8ac <xPortStartScheduler+0x44>)
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a892:	f7ff ffcd 	bl	800a830 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a896:	f000 fffb 	bl	800b890 <vTaskSwitchContext>
	prvTaskExitError();
 800a89a:	f7ff ffa7 	bl	800a7ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	46c0      	nop			; (mov r8, r8)
 800a8a8:	e000ed20 	.word	0xe000ed20
 800a8ac:	20000010 	.word	0x20000010

0800a8b0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <vPortYield+0x1c>)
 800a8b6:	2280      	movs	r2, #128	; 0x80
 800a8b8:	0552      	lsls	r2, r2, #21
 800a8ba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a8bc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a8c0:	f3bf 8f6f 	isb	sy
}
 800a8c4:	46c0      	nop			; (mov r8, r8)
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	46c0      	nop			; (mov r8, r8)
 800a8cc:	e000ed04 	.word	0xe000ed04

0800a8d0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800a8d4:	b672      	cpsid	i
	uxCriticalNesting++;
 800a8d6:	4b06      	ldr	r3, [pc, #24]	; (800a8f0 <vPortEnterCritical+0x20>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <vPortEnterCritical+0x20>)
 800a8de:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800a8e0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a8e4:	f3bf 8f6f 	isb	sy
}
 800a8e8:	46c0      	nop			; (mov r8, r8)
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	46c0      	nop			; (mov r8, r8)
 800a8f0:	20000010 	.word	0x20000010

0800a8f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8f8:	4b09      	ldr	r3, [pc, #36]	; (800a920 <vPortExitCritical+0x2c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <vPortExitCritical+0x10>
 800a900:	b672      	cpsid	i
 800a902:	e7fe      	b.n	800a902 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800a904:	4b06      	ldr	r3, [pc, #24]	; (800a920 <vPortExitCritical+0x2c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	1e5a      	subs	r2, r3, #1
 800a90a:	4b05      	ldr	r3, [pc, #20]	; (800a920 <vPortExitCritical+0x2c>)
 800a90c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800a90e:	4b04      	ldr	r3, [pc, #16]	; (800a920 <vPortExitCritical+0x2c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d100      	bne.n	800a918 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800a916:	b662      	cpsie	i
	}
}
 800a918:	46c0      	nop			; (mov r8, r8)
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	46c0      	nop			; (mov r8, r8)
 800a920:	20000010 	.word	0x20000010

0800a924 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800a924:	f3ef 8010 	mrs	r0, PRIMASK
 800a928:	b672      	cpsid	i
 800a92a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800a92c:	46c0      	nop			; (mov r8, r8)
 800a92e:	0018      	movs	r0, r3

0800a930 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800a930:	f380 8810 	msr	PRIMASK, r0
 800a934:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800a936:	46c0      	nop			; (mov r8, r8)
	...

0800a940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a940:	f3ef 8009 	mrs	r0, PSP
 800a944:	4b0e      	ldr	r3, [pc, #56]	; (800a980 <pxCurrentTCBConst>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	3820      	subs	r0, #32
 800a94a:	6010      	str	r0, [r2, #0]
 800a94c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a94e:	4644      	mov	r4, r8
 800a950:	464d      	mov	r5, r9
 800a952:	4656      	mov	r6, sl
 800a954:	465f      	mov	r7, fp
 800a956:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a958:	b508      	push	{r3, lr}
 800a95a:	b672      	cpsid	i
 800a95c:	f000 ff98 	bl	800b890 <vTaskSwitchContext>
 800a960:	b662      	cpsie	i
 800a962:	bc0c      	pop	{r2, r3}
 800a964:	6811      	ldr	r1, [r2, #0]
 800a966:	6808      	ldr	r0, [r1, #0]
 800a968:	3010      	adds	r0, #16
 800a96a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a96c:	46a0      	mov	r8, r4
 800a96e:	46a9      	mov	r9, r5
 800a970:	46b2      	mov	sl, r6
 800a972:	46bb      	mov	fp, r7
 800a974:	f380 8809 	msr	PSP, r0
 800a978:	3820      	subs	r0, #32
 800a97a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a97c:	4718      	bx	r3
 800a97e:	46c0      	nop			; (mov r8, r8)

0800a980 <pxCurrentTCBConst>:
 800a980:	200015b8 	.word	0x200015b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800a984:	46c0      	nop			; (mov r8, r8)
 800a986:	46c0      	nop			; (mov r8, r8)

0800a988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a98e:	f7ff ffc9 	bl	800a924 <ulSetInterruptMaskFromISR>
 800a992:	0003      	movs	r3, r0
 800a994:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a996:	f000 fecb 	bl	800b730 <xTaskIncrementTick>
 800a99a:	1e03      	subs	r3, r0, #0
 800a99c:	d003      	beq.n	800a9a6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a99e:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <xPortSysTickHandler+0x30>)
 800a9a0:	2280      	movs	r2, #128	; 0x80
 800a9a2:	0552      	lsls	r2, r2, #21
 800a9a4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	f7ff ffc1 	bl	800a930 <vClearInterruptMaskFromISR>
}
 800a9ae:	46c0      	nop			; (mov r8, r8)
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	b002      	add	sp, #8
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	; (800a9f0 <vPortSetupTimerInterrupt+0x34>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	; (800a9f4 <vPortSetupTimerInterrupt+0x38>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	; (800a9f8 <vPortSetupTimerInterrupt+0x3c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	22fa      	movs	r2, #250	; 0xfa
 800a9d2:	0091      	lsls	r1, r2, #2
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	f7fb fbbd 	bl	8006154 <__udivsi3>
 800a9da:	0003      	movs	r3, r0
 800a9dc:	001a      	movs	r2, r3
 800a9de:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <vPortSetupTimerInterrupt+0x40>)
 800a9e0:	3a01      	subs	r2, #1
 800a9e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a9e4:	4b02      	ldr	r3, [pc, #8]	; (800a9f0 <vPortSetupTimerInterrupt+0x34>)
 800a9e6:	2207      	movs	r2, #7
 800a9e8:	601a      	str	r2, [r3, #0]
}
 800a9ea:	46c0      	nop			; (mov r8, r8)
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	e000e010 	.word	0xe000e010
 800a9f4:	e000e018 	.word	0xe000e018
 800a9f8:	20000004 	.word	0x20000004
 800a9fc:	e000e014 	.word	0xe000e014

0800aa00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <xQueueGenericReset+0x18>
 800aa14:	b672      	cpsid	i
 800aa16:	e7fe      	b.n	800aa16 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800aa18:	f7ff ff5a 	bl	800a8d0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa28:	434b      	muls	r3, r1
 800aa2a:	18d2      	adds	r2, r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa46:	1e59      	subs	r1, r3, #1
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	434b      	muls	r3, r1
 800aa4e:	18d2      	adds	r2, r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2244      	movs	r2, #68	; 0x44
 800aa58:	21ff      	movs	r1, #255	; 0xff
 800aa5a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2245      	movs	r2, #69	; 0x45
 800aa60:	21ff      	movs	r1, #255	; 0xff
 800aa62:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10d      	bne.n	800aa86 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d013      	beq.n	800aa9a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3310      	adds	r3, #16
 800aa76:	0018      	movs	r0, r3
 800aa78:	f000 ff7a 	bl	800b970 <xTaskRemoveFromEventList>
 800aa7c:	1e03      	subs	r3, r0, #0
 800aa7e:	d00c      	beq.n	800aa9a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa80:	f7ff ff16 	bl	800a8b0 <vPortYield>
 800aa84:	e009      	b.n	800aa9a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3310      	adds	r3, #16
 800aa8a:	0018      	movs	r0, r3
 800aa8c:	f7ff fdda 	bl	800a644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3324      	adds	r3, #36	; 0x24
 800aa94:	0018      	movs	r0, r3
 800aa96:	f7ff fdd5 	bl	800a644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa9a:	f7ff ff2b 	bl	800a8f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa9e:	2301      	movs	r3, #1
}
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	b004      	add	sp, #16
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aaa8:	b590      	push	{r4, r7, lr}
 800aaaa:	b08b      	sub	sp, #44	; 0x2c
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	1dfb      	adds	r3, r7, #7
 800aab4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <xQueueGenericCreate+0x18>
 800aabc:	b672      	cpsid	i
 800aabe:	e7fe      	b.n	800aabe <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	4353      	muls	r3, r2
 800aac6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	3348      	adds	r3, #72	; 0x48
 800aacc:	0018      	movs	r0, r3
 800aace:	f7ff fc07 	bl	800a2e0 <pvPortMalloc>
 800aad2:	0003      	movs	r3, r0
 800aad4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00e      	beq.n	800aafa <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	3348      	adds	r3, #72	; 0x48
 800aae4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aae6:	1dfb      	adds	r3, r7, #7
 800aae8:	781c      	ldrb	r4, [r3, #0]
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	0023      	movs	r3, r4
 800aaf6:	f000 f805 	bl	800ab04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aafa:	69bb      	ldr	r3, [r7, #24]
	}
 800aafc:	0018      	movs	r0, r3
 800aafe:	46bd      	mov	sp, r7
 800ab00:	b009      	add	sp, #36	; 0x24
 800ab02:	bd90      	pop	{r4, r7, pc}

0800ab04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	001a      	movs	r2, r3
 800ab12:	1cfb      	adds	r3, r7, #3
 800ab14:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d103      	bne.n	800ab24 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	e002      	b.n	800ab2a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	2101      	movs	r1, #1
 800ab3a:	0018      	movs	r0, r3
 800ab3c:	f7ff ff60 	bl	800aa00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab40:	46c0      	nop			; (mov r8, r8)
 800ab42:	46bd      	mov	sp, r7
 800ab44:	b004      	add	sp, #16
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08a      	sub	sp, #40	; 0x28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab56:	2300      	movs	r3, #0
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <xQueueGenericSend+0x20>
 800ab64:	b672      	cpsid	i
 800ab66:	e7fe      	b.n	800ab66 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d103      	bne.n	800ab76 <xQueueGenericSend+0x2e>
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <xQueueGenericSend+0x32>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e000      	b.n	800ab7c <xQueueGenericSend+0x34>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <xQueueGenericSend+0x3c>
 800ab80:	b672      	cpsid	i
 800ab82:	e7fe      	b.n	800ab82 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d103      	bne.n	800ab92 <xQueueGenericSend+0x4a>
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d101      	bne.n	800ab96 <xQueueGenericSend+0x4e>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e000      	b.n	800ab98 <xQueueGenericSend+0x50>
 800ab96:	2300      	movs	r3, #0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <xQueueGenericSend+0x58>
 800ab9c:	b672      	cpsid	i
 800ab9e:	e7fe      	b.n	800ab9e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aba0:	f001 f862 	bl	800bc68 <xTaskGetSchedulerState>
 800aba4:	1e03      	subs	r3, r0, #0
 800aba6:	d102      	bne.n	800abae <xQueueGenericSend+0x66>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <xQueueGenericSend+0x6a>
 800abae:	2301      	movs	r3, #1
 800abb0:	e000      	b.n	800abb4 <xQueueGenericSend+0x6c>
 800abb2:	2300      	movs	r3, #0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <xQueueGenericSend+0x74>
 800abb8:	b672      	cpsid	i
 800abba:	e7fe      	b.n	800abba <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abbc:	f7ff fe88 	bl	800a8d0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abc0:	6a3b      	ldr	r3, [r7, #32]
 800abc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc8:	429a      	cmp	r2, r3
 800abca:	d302      	bcc.n	800abd2 <xQueueGenericSend+0x8a>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d11e      	bne.n	800ac10 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	68b9      	ldr	r1, [r7, #8]
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	0018      	movs	r0, r3
 800abda:	f000 fa05 	bl	800afe8 <prvCopyDataToQueue>
 800abde:	0003      	movs	r3, r0
 800abe0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abe2:	6a3b      	ldr	r3, [r7, #32]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d009      	beq.n	800abfe <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	3324      	adds	r3, #36	; 0x24
 800abee:	0018      	movs	r0, r3
 800abf0:	f000 febe 	bl	800b970 <xTaskRemoveFromEventList>
 800abf4:	1e03      	subs	r3, r0, #0
 800abf6:	d007      	beq.n	800ac08 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abf8:	f7ff fe5a 	bl	800a8b0 <vPortYield>
 800abfc:	e004      	b.n	800ac08 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac04:	f7ff fe54 	bl	800a8b0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac08:	f7ff fe74 	bl	800a8f4 <vPortExitCritical>
				return pdPASS;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e05b      	b.n	800acc8 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d103      	bne.n	800ac1e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac16:	f7ff fe6d 	bl	800a8f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e054      	b.n	800acc8 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d106      	bne.n	800ac32 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac24:	2314      	movs	r3, #20
 800ac26:	18fb      	adds	r3, r7, r3
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f000 fefd 	bl	800ba28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac32:	f7ff fe5f 	bl	800a8f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac36:	f000 fce3 	bl	800b600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac3a:	f7ff fe49 	bl	800a8d0 <vPortEnterCritical>
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	2244      	movs	r2, #68	; 0x44
 800ac42:	5c9b      	ldrb	r3, [r3, r2]
 800ac44:	b25b      	sxtb	r3, r3
 800ac46:	3301      	adds	r3, #1
 800ac48:	d103      	bne.n	800ac52 <xQueueGenericSend+0x10a>
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	2244      	movs	r2, #68	; 0x44
 800ac4e:	2100      	movs	r1, #0
 800ac50:	5499      	strb	r1, [r3, r2]
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	2245      	movs	r2, #69	; 0x45
 800ac56:	5c9b      	ldrb	r3, [r3, r2]
 800ac58:	b25b      	sxtb	r3, r3
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	d103      	bne.n	800ac66 <xQueueGenericSend+0x11e>
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	2245      	movs	r2, #69	; 0x45
 800ac62:	2100      	movs	r1, #0
 800ac64:	5499      	strb	r1, [r3, r2]
 800ac66:	f7ff fe45 	bl	800a8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac6a:	1d3a      	adds	r2, r7, #4
 800ac6c:	2314      	movs	r3, #20
 800ac6e:	18fb      	adds	r3, r7, r3
 800ac70:	0011      	movs	r1, r2
 800ac72:	0018      	movs	r0, r3
 800ac74:	f000 feec 	bl	800ba50 <xTaskCheckForTimeOut>
 800ac78:	1e03      	subs	r3, r0, #0
 800ac7a:	d11e      	bne.n	800acba <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac7c:	6a3b      	ldr	r3, [r7, #32]
 800ac7e:	0018      	movs	r0, r3
 800ac80:	f000 fab7 	bl	800b1f2 <prvIsQueueFull>
 800ac84:	1e03      	subs	r3, r0, #0
 800ac86:	d011      	beq.n	800acac <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	3310      	adds	r3, #16
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	0011      	movs	r1, r2
 800ac90:	0018      	movs	r0, r3
 800ac92:	f000 fe4f 	bl	800b934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f000 fa36 	bl	800b10a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac9e:	f000 fcbb 	bl	800b618 <xTaskResumeAll>
 800aca2:	1e03      	subs	r3, r0, #0
 800aca4:	d18a      	bne.n	800abbc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800aca6:	f7ff fe03 	bl	800a8b0 <vPortYield>
 800acaa:	e787      	b.n	800abbc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	0018      	movs	r0, r3
 800acb0:	f000 fa2b 	bl	800b10a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acb4:	f000 fcb0 	bl	800b618 <xTaskResumeAll>
 800acb8:	e780      	b.n	800abbc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	0018      	movs	r0, r3
 800acbe:	f000 fa24 	bl	800b10a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acc2:	f000 fca9 	bl	800b618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800acc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800acc8:	0018      	movs	r0, r3
 800acca:	46bd      	mov	sp, r7
 800accc:	b00a      	add	sp, #40	; 0x28
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800acd0:	b590      	push	{r4, r7, lr}
 800acd2:	b08b      	sub	sp, #44	; 0x2c
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800ace2:	6a3b      	ldr	r3, [r7, #32]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <xQueueGenericSendFromISR+0x1c>
 800ace8:	b672      	cpsid	i
 800acea:	e7fe      	b.n	800acea <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d103      	bne.n	800acfa <xQueueGenericSendFromISR+0x2a>
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d101      	bne.n	800acfe <xQueueGenericSendFromISR+0x2e>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e000      	b.n	800ad00 <xQueueGenericSendFromISR+0x30>
 800acfe:	2300      	movs	r3, #0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <xQueueGenericSendFromISR+0x38>
 800ad04:	b672      	cpsid	i
 800ad06:	e7fe      	b.n	800ad06 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d103      	bne.n	800ad16 <xQueueGenericSendFromISR+0x46>
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d101      	bne.n	800ad1a <xQueueGenericSendFromISR+0x4a>
 800ad16:	2301      	movs	r3, #1
 800ad18:	e000      	b.n	800ad1c <xQueueGenericSendFromISR+0x4c>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <xQueueGenericSendFromISR+0x54>
 800ad20:	b672      	cpsid	i
 800ad22:	e7fe      	b.n	800ad22 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad24:	f7ff fdfe 	bl	800a924 <ulSetInterruptMaskFromISR>
 800ad28:	0003      	movs	r3, r0
 800ad2a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d302      	bcc.n	800ad3e <xQueueGenericSendFromISR+0x6e>
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d131      	bne.n	800ada2 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad3e:	241b      	movs	r4, #27
 800ad40:	193b      	adds	r3, r7, r4
 800ad42:	6a3a      	ldr	r2, [r7, #32]
 800ad44:	2145      	movs	r1, #69	; 0x45
 800ad46:	5c52      	ldrb	r2, [r2, r1]
 800ad48:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	6a3b      	ldr	r3, [r7, #32]
 800ad56:	0018      	movs	r0, r3
 800ad58:	f000 f946 	bl	800afe8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad5c:	193b      	adds	r3, r7, r4
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	b25b      	sxtb	r3, r3
 800ad62:	3301      	adds	r3, #1
 800ad64:	d111      	bne.n	800ad8a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d016      	beq.n	800ad9c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	3324      	adds	r3, #36	; 0x24
 800ad72:	0018      	movs	r0, r3
 800ad74:	f000 fdfc 	bl	800b970 <xTaskRemoveFromEventList>
 800ad78:	1e03      	subs	r3, r0, #0
 800ad7a:	d00f      	beq.n	800ad9c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00c      	beq.n	800ad9c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	e008      	b.n	800ad9c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad8a:	231b      	movs	r3, #27
 800ad8c:	18fb      	adds	r3, r7, r3
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	3301      	adds	r3, #1
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	b259      	sxtb	r1, r3
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	2245      	movs	r2, #69	; 0x45
 800ad9a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800ada0:	e001      	b.n	800ada6 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	0018      	movs	r0, r3
 800adaa:	f7ff fdc1 	bl	800a930 <vClearInterruptMaskFromISR>

	return xReturn;
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adb0:	0018      	movs	r0, r3
 800adb2:	46bd      	mov	sp, r7
 800adb4:	b00b      	add	sp, #44	; 0x2c
 800adb6:	bd90      	pop	{r4, r7, pc}

0800adb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08a      	sub	sp, #40	; 0x28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800adc4:	2300      	movs	r3, #0
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <xQueueReceive+0x1e>
 800add2:	b672      	cpsid	i
 800add4:	e7fe      	b.n	800add4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d103      	bne.n	800ade4 <xQueueReceive+0x2c>
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <xQueueReceive+0x30>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e000      	b.n	800adea <xQueueReceive+0x32>
 800ade8:	2300      	movs	r3, #0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d101      	bne.n	800adf2 <xQueueReceive+0x3a>
 800adee:	b672      	cpsid	i
 800adf0:	e7fe      	b.n	800adf0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adf2:	f000 ff39 	bl	800bc68 <xTaskGetSchedulerState>
 800adf6:	1e03      	subs	r3, r0, #0
 800adf8:	d102      	bne.n	800ae00 <xQueueReceive+0x48>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <xQueueReceive+0x4c>
 800ae00:	2301      	movs	r3, #1
 800ae02:	e000      	b.n	800ae06 <xQueueReceive+0x4e>
 800ae04:	2300      	movs	r3, #0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <xQueueReceive+0x56>
 800ae0a:	b672      	cpsid	i
 800ae0c:	e7fe      	b.n	800ae0c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae0e:	f7ff fd5f 	bl	800a8d0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae16:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01a      	beq.n	800ae54 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	0011      	movs	r1, r2
 800ae24:	0018      	movs	r0, r3
 800ae26:	f000 f94a 	bl	800b0be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	1e5a      	subs	r2, r3, #1
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d008      	beq.n	800ae4c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	3310      	adds	r3, #16
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f000 fd96 	bl	800b970 <xTaskRemoveFromEventList>
 800ae44:	1e03      	subs	r3, r0, #0
 800ae46:	d001      	beq.n	800ae4c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae48:	f7ff fd32 	bl	800a8b0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae4c:	f7ff fd52 	bl	800a8f4 <vPortExitCritical>
				return pdPASS;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e062      	b.n	800af1a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d103      	bne.n	800ae62 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae5a:	f7ff fd4b 	bl	800a8f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e05b      	b.n	800af1a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae68:	2314      	movs	r3, #20
 800ae6a:	18fb      	adds	r3, r7, r3
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	f000 fddb 	bl	800ba28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae72:	2301      	movs	r3, #1
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae76:	f7ff fd3d 	bl	800a8f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae7a:	f000 fbc1 	bl	800b600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae7e:	f7ff fd27 	bl	800a8d0 <vPortEnterCritical>
 800ae82:	6a3b      	ldr	r3, [r7, #32]
 800ae84:	2244      	movs	r2, #68	; 0x44
 800ae86:	5c9b      	ldrb	r3, [r3, r2]
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	d103      	bne.n	800ae96 <xQueueReceive+0xde>
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	2244      	movs	r2, #68	; 0x44
 800ae92:	2100      	movs	r1, #0
 800ae94:	5499      	strb	r1, [r3, r2]
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	2245      	movs	r2, #69	; 0x45
 800ae9a:	5c9b      	ldrb	r3, [r3, r2]
 800ae9c:	b25b      	sxtb	r3, r3
 800ae9e:	3301      	adds	r3, #1
 800aea0:	d103      	bne.n	800aeaa <xQueueReceive+0xf2>
 800aea2:	6a3b      	ldr	r3, [r7, #32]
 800aea4:	2245      	movs	r2, #69	; 0x45
 800aea6:	2100      	movs	r1, #0
 800aea8:	5499      	strb	r1, [r3, r2]
 800aeaa:	f7ff fd23 	bl	800a8f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeae:	1d3a      	adds	r2, r7, #4
 800aeb0:	2314      	movs	r3, #20
 800aeb2:	18fb      	adds	r3, r7, r3
 800aeb4:	0011      	movs	r1, r2
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f000 fdca 	bl	800ba50 <xTaskCheckForTimeOut>
 800aebc:	1e03      	subs	r3, r0, #0
 800aebe:	d11e      	bne.n	800aefe <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	0018      	movs	r0, r3
 800aec4:	f000 f97f 	bl	800b1c6 <prvIsQueueEmpty>
 800aec8:	1e03      	subs	r3, r0, #0
 800aeca:	d011      	beq.n	800aef0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aecc:	6a3b      	ldr	r3, [r7, #32]
 800aece:	3324      	adds	r3, #36	; 0x24
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	0011      	movs	r1, r2
 800aed4:	0018      	movs	r0, r3
 800aed6:	f000 fd2d 	bl	800b934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	0018      	movs	r0, r3
 800aede:	f000 f914 	bl	800b10a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aee2:	f000 fb99 	bl	800b618 <xTaskResumeAll>
 800aee6:	1e03      	subs	r3, r0, #0
 800aee8:	d191      	bne.n	800ae0e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800aeea:	f7ff fce1 	bl	800a8b0 <vPortYield>
 800aeee:	e78e      	b.n	800ae0e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	0018      	movs	r0, r3
 800aef4:	f000 f909 	bl	800b10a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aef8:	f000 fb8e 	bl	800b618 <xTaskResumeAll>
 800aefc:	e787      	b.n	800ae0e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aefe:	6a3b      	ldr	r3, [r7, #32]
 800af00:	0018      	movs	r0, r3
 800af02:	f000 f902 	bl	800b10a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af06:	f000 fb87 	bl	800b618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	0018      	movs	r0, r3
 800af0e:	f000 f95a 	bl	800b1c6 <prvIsQueueEmpty>
 800af12:	1e03      	subs	r3, r0, #0
 800af14:	d100      	bne.n	800af18 <xQueueReceive+0x160>
 800af16:	e77a      	b.n	800ae0e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af1a:	0018      	movs	r0, r3
 800af1c:	46bd      	mov	sp, r7
 800af1e:	b00a      	add	sp, #40	; 0x28
 800af20:	bd80      	pop	{r7, pc}

0800af22 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af22:	b590      	push	{r4, r7, lr}
 800af24:	b08b      	sub	sp, #44	; 0x2c
 800af26:	af00      	add	r7, sp, #0
 800af28:	60f8      	str	r0, [r7, #12]
 800af2a:	60b9      	str	r1, [r7, #8]
 800af2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d101      	bne.n	800af3c <xQueueReceiveFromISR+0x1a>
 800af38:	b672      	cpsid	i
 800af3a:	e7fe      	b.n	800af3a <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d103      	bne.n	800af4a <xQueueReceiveFromISR+0x28>
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <xQueueReceiveFromISR+0x2c>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <xQueueReceiveFromISR+0x2e>
 800af4e:	2300      	movs	r3, #0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <xQueueReceiveFromISR+0x36>
 800af54:	b672      	cpsid	i
 800af56:	e7fe      	b.n	800af56 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af58:	f7ff fce4 	bl	800a924 <ulSetInterruptMaskFromISR>
 800af5c:	0003      	movs	r3, r0
 800af5e:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af64:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d032      	beq.n	800afd2 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af6c:	2417      	movs	r4, #23
 800af6e:	193b      	adds	r3, r7, r4
 800af70:	6a3a      	ldr	r2, [r7, #32]
 800af72:	2144      	movs	r1, #68	; 0x44
 800af74:	5c52      	ldrb	r2, [r2, r1]
 800af76:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	0011      	movs	r1, r2
 800af7e:	0018      	movs	r0, r3
 800af80:	f000 f89d 	bl	800b0be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	1e5a      	subs	r2, r3, #1
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af8c:	193b      	adds	r3, r7, r4
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	b25b      	sxtb	r3, r3
 800af92:	3301      	adds	r3, #1
 800af94:	d111      	bne.n	800afba <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d016      	beq.n	800afcc <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	3310      	adds	r3, #16
 800afa2:	0018      	movs	r0, r3
 800afa4:	f000 fce4 	bl	800b970 <xTaskRemoveFromEventList>
 800afa8:	1e03      	subs	r3, r0, #0
 800afaa:	d00f      	beq.n	800afcc <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00c      	beq.n	800afcc <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	e008      	b.n	800afcc <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800afba:	2317      	movs	r3, #23
 800afbc:	18fb      	adds	r3, r7, r3
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	3301      	adds	r3, #1
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	b259      	sxtb	r1, r3
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	2244      	movs	r2, #68	; 0x44
 800afca:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800afcc:	2301      	movs	r3, #1
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
 800afd0:	e001      	b.n	800afd6 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	0018      	movs	r0, r3
 800afda:	f7ff fca9 	bl	800a930 <vClearInterruptMaskFromISR>

	return xReturn;
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afe0:	0018      	movs	r0, r3
 800afe2:	46bd      	mov	sp, r7
 800afe4:	b00b      	add	sp, #44	; 0x2c
 800afe6:	bd90      	pop	{r4, r7, pc}

0800afe8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aff4:	2300      	movs	r3, #0
 800aff6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10e      	bne.n	800b024 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d14e      	bne.n	800b0ac <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	0018      	movs	r0, r3
 800b014:	f000 fe44 	bl	800bca0 <xTaskPriorityDisinherit>
 800b018:	0003      	movs	r3, r0
 800b01a:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	609a      	str	r2, [r3, #8]
 800b022:	e043      	b.n	800b0ac <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d119      	bne.n	800b05e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6858      	ldr	r0, [r3, #4]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	0019      	movs	r1, r3
 800b036:	f00a f8d9 	bl	80151ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	18d2      	adds	r2, r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	429a      	cmp	r2, r3
 800b052:	d32b      	bcc.n	800b0ac <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	605a      	str	r2, [r3, #4]
 800b05c:	e026      	b.n	800b0ac <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	68d8      	ldr	r0, [r3, #12]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	0019      	movs	r1, r3
 800b06a:	f00a f8bf 	bl	80151ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	425b      	negs	r3, r3
 800b078:	18d2      	adds	r2, r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d207      	bcs.n	800b09a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	689a      	ldr	r2, [r3, #8]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	425b      	negs	r3, r3
 800b094:	18d2      	adds	r2, r2, r3
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d105      	bne.n	800b0ac <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0b4:	697b      	ldr	r3, [r7, #20]
}
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	b006      	add	sp, #24
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d018      	beq.n	800b102 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68da      	ldr	r2, [r3, #12]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d8:	18d2      	adds	r2, r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d303      	bcc.n	800b0f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68d9      	ldr	r1, [r3, #12]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f00a f875 	bl	80151ec <memcpy>
	}
}
 800b102:	46c0      	nop			; (mov r8, r8)
 800b104:	46bd      	mov	sp, r7
 800b106:	b002      	add	sp, #8
 800b108:	bd80      	pop	{r7, pc}

0800b10a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b112:	f7ff fbdd 	bl	800a8d0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b116:	230f      	movs	r3, #15
 800b118:	18fb      	adds	r3, r7, r3
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	2145      	movs	r1, #69	; 0x45
 800b11e:	5c52      	ldrb	r2, [r2, r1]
 800b120:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b122:	e013      	b.n	800b14c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d016      	beq.n	800b15a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3324      	adds	r3, #36	; 0x24
 800b130:	0018      	movs	r0, r3
 800b132:	f000 fc1d 	bl	800b970 <xTaskRemoveFromEventList>
 800b136:	1e03      	subs	r3, r0, #0
 800b138:	d001      	beq.n	800b13e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b13a:	f000 fcd9 	bl	800baf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b13e:	210f      	movs	r1, #15
 800b140:	187b      	adds	r3, r7, r1
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	3b01      	subs	r3, #1
 800b146:	b2da      	uxtb	r2, r3
 800b148:	187b      	adds	r3, r7, r1
 800b14a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b14c:	230f      	movs	r3, #15
 800b14e:	18fb      	adds	r3, r7, r3
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	b25b      	sxtb	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	dce5      	bgt.n	800b124 <prvUnlockQueue+0x1a>
 800b158:	e000      	b.n	800b15c <prvUnlockQueue+0x52>
					break;
 800b15a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2245      	movs	r2, #69	; 0x45
 800b160:	21ff      	movs	r1, #255	; 0xff
 800b162:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800b164:	f7ff fbc6 	bl	800a8f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b168:	f7ff fbb2 	bl	800a8d0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b16c:	230e      	movs	r3, #14
 800b16e:	18fb      	adds	r3, r7, r3
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	2144      	movs	r1, #68	; 0x44
 800b174:	5c52      	ldrb	r2, [r2, r1]
 800b176:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b178:	e013      	b.n	800b1a2 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d016      	beq.n	800b1b0 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3310      	adds	r3, #16
 800b186:	0018      	movs	r0, r3
 800b188:	f000 fbf2 	bl	800b970 <xTaskRemoveFromEventList>
 800b18c:	1e03      	subs	r3, r0, #0
 800b18e:	d001      	beq.n	800b194 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800b190:	f000 fcae 	bl	800baf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b194:	210e      	movs	r1, #14
 800b196:	187b      	adds	r3, r7, r1
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	187b      	adds	r3, r7, r1
 800b1a0:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1a2:	230e      	movs	r3, #14
 800b1a4:	18fb      	adds	r3, r7, r3
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	b25b      	sxtb	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	dce5      	bgt.n	800b17a <prvUnlockQueue+0x70>
 800b1ae:	e000      	b.n	800b1b2 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800b1b0:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2244      	movs	r2, #68	; 0x44
 800b1b6:	21ff      	movs	r1, #255	; 0xff
 800b1b8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800b1ba:	f7ff fb9b 	bl	800a8f4 <vPortExitCritical>
}
 800b1be:	46c0      	nop			; (mov r8, r8)
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	b004      	add	sp, #16
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1ce:	f7ff fb7f 	bl	800a8d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d102      	bne.n	800b1e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	e001      	b.n	800b1e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1e4:	f7ff fb86 	bl	800a8f4 <vPortExitCritical>

	return xReturn;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	b004      	add	sp, #16
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1fa:	f7ff fb69 	bl	800a8d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b206:	429a      	cmp	r2, r3
 800b208:	d102      	bne.n	800b210 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b20a:	2301      	movs	r3, #1
 800b20c:	60fb      	str	r3, [r7, #12]
 800b20e:	e001      	b.n	800b214 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b210:	2300      	movs	r3, #0
 800b212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b214:	f7ff fb6e 	bl	800a8f4 <vPortExitCritical>

	return xReturn;
 800b218:	68fb      	ldr	r3, [r7, #12]
}
 800b21a:	0018      	movs	r0, r3
 800b21c:	46bd      	mov	sp, r7
 800b21e:	b004      	add	sp, #16
 800b220:	bd80      	pop	{r7, pc}

0800b222 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b222:	b590      	push	{r4, r7, lr}
 800b224:	b08d      	sub	sp, #52	; 0x34
 800b226:	af04      	add	r7, sp, #16
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	603b      	str	r3, [r7, #0]
 800b22e:	1dbb      	adds	r3, r7, #6
 800b230:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b232:	1dbb      	adds	r3, r7, #6
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	0018      	movs	r0, r3
 800b23a:	f7ff f851 	bl	800a2e0 <pvPortMalloc>
 800b23e:	0003      	movs	r3, r0
 800b240:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d010      	beq.n	800b26a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b248:	2054      	movs	r0, #84	; 0x54
 800b24a:	f7ff f849 	bl	800a2e0 <pvPortMalloc>
 800b24e:	0003      	movs	r3, r0
 800b250:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d003      	beq.n	800b260 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	631a      	str	r2, [r3, #48]	; 0x30
 800b25e:	e006      	b.n	800b26e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	0018      	movs	r0, r3
 800b264:	f7ff f8e8 	bl	800a438 <vPortFree>
 800b268:	e001      	b.n	800b26e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d016      	beq.n	800b2a2 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b274:	1dbb      	adds	r3, r7, #6
 800b276:	881a      	ldrh	r2, [r3, #0]
 800b278:	683c      	ldr	r4, [r7, #0]
 800b27a:	68b9      	ldr	r1, [r7, #8]
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	2300      	movs	r3, #0
 800b280:	9303      	str	r3, [sp, #12]
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	9302      	str	r3, [sp, #8]
 800b286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	0023      	movs	r3, r4
 800b290:	f000 f810 	bl	800b2b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	0018      	movs	r0, r3
 800b298:	f000 f88e 	bl	800b3b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b29c:	2301      	movs	r3, #1
 800b29e:	61bb      	str	r3, [r7, #24]
 800b2a0:	e002      	b.n	800b2a8 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	425b      	negs	r3, r3
 800b2a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2a8:	69bb      	ldr	r3, [r7, #24]
	}
 800b2aa:	0018      	movs	r0, r3
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	b009      	add	sp, #36	; 0x24
 800b2b0:	bd90      	pop	{r4, r7, pc}
	...

0800b2b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	493a      	ldr	r1, [pc, #232]	; (800b3b4 <prvInitialiseNewTask+0x100>)
 800b2ca:	468c      	mov	ip, r1
 800b2cc:	4463      	add	r3, ip
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	18d3      	adds	r3, r2, r3
 800b2d2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	2207      	movs	r2, #7
 800b2d8:	4393      	bics	r3, r2
 800b2da:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	2207      	movs	r2, #7
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	d001      	beq.n	800b2e8 <prvInitialiseNewTask+0x34>
 800b2e4:	b672      	cpsid	i
 800b2e6:	e7fe      	b.n	800b2e6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d020      	beq.n	800b330 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	e013      	b.n	800b31c <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	18d3      	adds	r3, r2, r3
 800b2fa:	7818      	ldrb	r0, [r3, #0]
 800b2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2fe:	2134      	movs	r1, #52	; 0x34
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	18d3      	adds	r3, r2, r3
 800b304:	185b      	adds	r3, r3, r1
 800b306:	1c02      	adds	r2, r0, #0
 800b308:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	18d3      	adds	r3, r2, r3
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d006      	beq.n	800b324 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	3301      	adds	r3, #1
 800b31a:	617b      	str	r3, [r7, #20]
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2b0f      	cmp	r3, #15
 800b320:	d9e8      	bls.n	800b2f4 <prvInitialiseNewTask+0x40>
 800b322:	e000      	b.n	800b326 <prvInitialiseNewTask+0x72>
			{
				break;
 800b324:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b328:	2243      	movs	r2, #67	; 0x43
 800b32a:	2100      	movs	r1, #0
 800b32c:	5499      	strb	r1, [r3, r2]
 800b32e:	e003      	b.n	800b338 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	2234      	movs	r2, #52	; 0x34
 800b334:	2100      	movs	r1, #0
 800b336:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	2b06      	cmp	r3, #6
 800b33c:	d901      	bls.n	800b342 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b33e:	2306      	movs	r3, #6
 800b340:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b344:	6a3a      	ldr	r2, [r7, #32]
 800b346:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	6a3a      	ldr	r2, [r7, #32]
 800b34c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	2200      	movs	r2, #0
 800b352:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	3304      	adds	r3, #4
 800b358:	0018      	movs	r0, r3
 800b35a:	f7ff f991 	bl	800a680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	3318      	adds	r3, #24
 800b362:	0018      	movs	r0, r3
 800b364:	f7ff f98c 	bl	800a680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b36c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	2207      	movs	r2, #7
 800b372:	1ad2      	subs	r2, r2, r3
 800b374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b376:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b37c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b380:	2200      	movs	r2, #0
 800b382:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b386:	2250      	movs	r2, #80	; 0x50
 800b388:	2100      	movs	r1, #0
 800b38a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	68f9      	ldr	r1, [r7, #12]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	0018      	movs	r0, r3
 800b394:	f7ff fa00 	bl	800a798 <pxPortInitialiseStack>
 800b398:	0002      	movs	r2, r0
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3aa:	46c0      	nop			; (mov r8, r8)
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	b006      	add	sp, #24
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	3fffffff 	.word	0x3fffffff

0800b3b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3c0:	f7ff fa86 	bl	800a8d0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3c4:	4b28      	ldr	r3, [pc, #160]	; (800b468 <prvAddNewTaskToReadyList+0xb0>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	1c5a      	adds	r2, r3, #1
 800b3ca:	4b27      	ldr	r3, [pc, #156]	; (800b468 <prvAddNewTaskToReadyList+0xb0>)
 800b3cc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b3ce:	4b27      	ldr	r3, [pc, #156]	; (800b46c <prvAddNewTaskToReadyList+0xb4>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3d6:	4b25      	ldr	r3, [pc, #148]	; (800b46c <prvAddNewTaskToReadyList+0xb4>)
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3dc:	4b22      	ldr	r3, [pc, #136]	; (800b468 <prvAddNewTaskToReadyList+0xb0>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d110      	bne.n	800b406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3e4:	f000 fb9e 	bl	800bb24 <prvInitialiseTaskLists>
 800b3e8:	e00d      	b.n	800b406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3ea:	4b21      	ldr	r3, [pc, #132]	; (800b470 <prvAddNewTaskToReadyList+0xb8>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d109      	bne.n	800b406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3f2:	4b1e      	ldr	r3, [pc, #120]	; (800b46c <prvAddNewTaskToReadyList+0xb4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d802      	bhi.n	800b406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b400:	4b1a      	ldr	r3, [pc, #104]	; (800b46c <prvAddNewTaskToReadyList+0xb4>)
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b406:	4b1b      	ldr	r3, [pc, #108]	; (800b474 <prvAddNewTaskToReadyList+0xbc>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	4b19      	ldr	r3, [pc, #100]	; (800b474 <prvAddNewTaskToReadyList+0xbc>)
 800b40e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b414:	4b18      	ldr	r3, [pc, #96]	; (800b478 <prvAddNewTaskToReadyList+0xc0>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d903      	bls.n	800b424 <prvAddNewTaskToReadyList+0x6c>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b420:	4b15      	ldr	r3, [pc, #84]	; (800b478 <prvAddNewTaskToReadyList+0xc0>)
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b428:	0013      	movs	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	189b      	adds	r3, r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	4a12      	ldr	r2, [pc, #72]	; (800b47c <prvAddNewTaskToReadyList+0xc4>)
 800b432:	189a      	adds	r2, r3, r2
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3304      	adds	r3, #4
 800b438:	0019      	movs	r1, r3
 800b43a:	0010      	movs	r0, r2
 800b43c:	f7ff f92b 	bl	800a696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b440:	f7ff fa58 	bl	800a8f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <prvAddNewTaskToReadyList+0xb8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d008      	beq.n	800b45e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b44c:	4b07      	ldr	r3, [pc, #28]	; (800b46c <prvAddNewTaskToReadyList+0xb4>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b456:	429a      	cmp	r2, r3
 800b458:	d201      	bcs.n	800b45e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b45a:	f7ff fa29 	bl	800a8b0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b45e:	46c0      	nop			; (mov r8, r8)
 800b460:	46bd      	mov	sp, r7
 800b462:	b002      	add	sp, #8
 800b464:	bd80      	pop	{r7, pc}
 800b466:	46c0      	nop			; (mov r8, r8)
 800b468:	200016b8 	.word	0x200016b8
 800b46c:	200015b8 	.word	0x200015b8
 800b470:	200016c4 	.word	0x200016c4
 800b474:	200016d4 	.word	0x200016d4
 800b478:	200016c0 	.word	0x200016c0
 800b47c:	200015bc 	.word	0x200015bc

0800b480 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b488:	f7ff fa22 	bl	800a8d0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d102      	bne.n	800b498 <vTaskDelete+0x18>
 800b492:	4b26      	ldr	r3, [pc, #152]	; (800b52c <vTaskDelete+0xac>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	e000      	b.n	800b49a <vTaskDelete+0x1a>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	f7ff f950 	bl	800a746 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d004      	beq.n	800b4b8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3318      	adds	r3, #24
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f7ff f947 	bl	800a746 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b4b8:	4b1d      	ldr	r3, [pc, #116]	; (800b530 <vTaskDelete+0xb0>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	4b1c      	ldr	r3, [pc, #112]	; (800b530 <vTaskDelete+0xb0>)
 800b4c0:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 800b4c2:	4b1a      	ldr	r3, [pc, #104]	; (800b52c <vTaskDelete+0xac>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d10c      	bne.n	800b4e6 <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	1d1a      	adds	r2, r3, #4
 800b4d0:	4b18      	ldr	r3, [pc, #96]	; (800b534 <vTaskDelete+0xb4>)
 800b4d2:	0011      	movs	r1, r2
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f7ff f8de 	bl	800a696 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b4da:	4b17      	ldr	r3, [pc, #92]	; (800b538 <vTaskDelete+0xb8>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	1c5a      	adds	r2, r3, #1
 800b4e0:	4b15      	ldr	r3, [pc, #84]	; (800b538 <vTaskDelete+0xb8>)
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	e00a      	b.n	800b4fc <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b4e6:	4b15      	ldr	r3, [pc, #84]	; (800b53c <vTaskDelete+0xbc>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	1e5a      	subs	r2, r3, #1
 800b4ec:	4b13      	ldr	r3, [pc, #76]	; (800b53c <vTaskDelete+0xbc>)
 800b4ee:	601a      	str	r2, [r3, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f000 fb88 	bl	800bc08 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b4f8:	f000 fb98 	bl	800bc2c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b4fc:	f7ff f9fa 	bl	800a8f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b500:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <vTaskDelete+0xc0>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00c      	beq.n	800b522 <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 800b508:	4b08      	ldr	r3, [pc, #32]	; (800b52c <vTaskDelete+0xac>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d107      	bne.n	800b522 <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b512:	4b0c      	ldr	r3, [pc, #48]	; (800b544 <vTaskDelete+0xc4>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <vTaskDelete+0x9e>
 800b51a:	b672      	cpsid	i
 800b51c:	e7fe      	b.n	800b51c <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 800b51e:	f7ff f9c7 	bl	800a8b0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b522:	46c0      	nop			; (mov r8, r8)
 800b524:	46bd      	mov	sp, r7
 800b526:	b004      	add	sp, #16
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	46c0      	nop			; (mov r8, r8)
 800b52c:	200015b8 	.word	0x200015b8
 800b530:	200016d4 	.word	0x200016d4
 800b534:	2000168c 	.word	0x2000168c
 800b538:	200016a0 	.word	0x200016a0
 800b53c:	200016b8 	.word	0x200016b8
 800b540:	200016c4 	.word	0x200016c4
 800b544:	200016e0 	.word	0x200016e0

0800b548 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b550:	2300      	movs	r3, #0
 800b552:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d010      	beq.n	800b57c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b55a:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <vTaskDelay+0x48>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <vTaskDelay+0x1e>
 800b562:	b672      	cpsid	i
 800b564:	e7fe      	b.n	800b564 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800b566:	f000 f84b 	bl	800b600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2100      	movs	r1, #0
 800b56e:	0018      	movs	r0, r3
 800b570:	f000 fbf2 	bl	800bd58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b574:	f000 f850 	bl	800b618 <xTaskResumeAll>
 800b578:	0003      	movs	r3, r0
 800b57a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d101      	bne.n	800b586 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800b582:	f7ff f995 	bl	800a8b0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b586:	46c0      	nop			; (mov r8, r8)
 800b588:	46bd      	mov	sp, r7
 800b58a:	b004      	add	sp, #16
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	46c0      	nop			; (mov r8, r8)
 800b590:	200016e0 	.word	0x200016e0

0800b594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b59a:	4913      	ldr	r1, [pc, #76]	; (800b5e8 <vTaskStartScheduler+0x54>)
 800b59c:	4813      	ldr	r0, [pc, #76]	; (800b5ec <vTaskStartScheduler+0x58>)
 800b59e:	4b14      	ldr	r3, [pc, #80]	; (800b5f0 <vTaskStartScheduler+0x5c>)
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	2280      	movs	r2, #128	; 0x80
 800b5aa:	f7ff fe3a 	bl	800b222 <xTaskCreate>
 800b5ae:	0003      	movs	r3, r0
 800b5b0:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d10d      	bne.n	800b5d4 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b5b8:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b5ba:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <vTaskStartScheduler+0x60>)
 800b5bc:	2201      	movs	r2, #1
 800b5be:	4252      	negs	r2, r2
 800b5c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5c2:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <vTaskStartScheduler+0x64>)
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5c8:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <vTaskStartScheduler+0x68>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5ce:	f7ff f94b 	bl	800a868 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5d2:	e004      	b.n	800b5de <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	d101      	bne.n	800b5de <vTaskStartScheduler+0x4a>
 800b5da:	b672      	cpsid	i
 800b5dc:	e7fe      	b.n	800b5dc <vTaskStartScheduler+0x48>
}
 800b5de:	46c0      	nop			; (mov r8, r8)
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	b002      	add	sp, #8
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	46c0      	nop			; (mov r8, r8)
 800b5e8:	08015ab8 	.word	0x08015ab8
 800b5ec:	0800bb05 	.word	0x0800bb05
 800b5f0:	200016dc 	.word	0x200016dc
 800b5f4:	200016d8 	.word	0x200016d8
 800b5f8:	200016c4 	.word	0x200016c4
 800b5fc:	200016bc 	.word	0x200016bc

0800b600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b604:	4b03      	ldr	r3, [pc, #12]	; (800b614 <vTaskSuspendAll+0x14>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	4b02      	ldr	r3, [pc, #8]	; (800b614 <vTaskSuspendAll+0x14>)
 800b60c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b60e:	46c0      	nop			; (mov r8, r8)
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	200016e0 	.word	0x200016e0

0800b618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b622:	2300      	movs	r3, #0
 800b624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b626:	4b3a      	ldr	r3, [pc, #232]	; (800b710 <xTaskResumeAll+0xf8>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <xTaskResumeAll+0x1a>
 800b62e:	b672      	cpsid	i
 800b630:	e7fe      	b.n	800b630 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b632:	f7ff f94d 	bl	800a8d0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b636:	4b36      	ldr	r3, [pc, #216]	; (800b710 <xTaskResumeAll+0xf8>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	1e5a      	subs	r2, r3, #1
 800b63c:	4b34      	ldr	r3, [pc, #208]	; (800b710 <xTaskResumeAll+0xf8>)
 800b63e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b640:	4b33      	ldr	r3, [pc, #204]	; (800b710 <xTaskResumeAll+0xf8>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d15b      	bne.n	800b700 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b648:	4b32      	ldr	r3, [pc, #200]	; (800b714 <xTaskResumeAll+0xfc>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d057      	beq.n	800b700 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b650:	e02f      	b.n	800b6b2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b652:	4b31      	ldr	r3, [pc, #196]	; (800b718 <xTaskResumeAll+0x100>)
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3318      	adds	r3, #24
 800b65e:	0018      	movs	r0, r3
 800b660:	f7ff f871 	bl	800a746 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3304      	adds	r3, #4
 800b668:	0018      	movs	r0, r3
 800b66a:	f7ff f86c 	bl	800a746 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b672:	4b2a      	ldr	r3, [pc, #168]	; (800b71c <xTaskResumeAll+0x104>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d903      	bls.n	800b682 <xTaskResumeAll+0x6a>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67e:	4b27      	ldr	r3, [pc, #156]	; (800b71c <xTaskResumeAll+0x104>)
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b686:	0013      	movs	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	189b      	adds	r3, r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4a24      	ldr	r2, [pc, #144]	; (800b720 <xTaskResumeAll+0x108>)
 800b690:	189a      	adds	r2, r3, r2
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3304      	adds	r3, #4
 800b696:	0019      	movs	r1, r3
 800b698:	0010      	movs	r0, r2
 800b69a:	f7fe fffc 	bl	800a696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a2:	4b20      	ldr	r3, [pc, #128]	; (800b724 <xTaskResumeAll+0x10c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d302      	bcc.n	800b6b2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800b6ac:	4b1e      	ldr	r3, [pc, #120]	; (800b728 <xTaskResumeAll+0x110>)
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6b2:	4b19      	ldr	r3, [pc, #100]	; (800b718 <xTaskResumeAll+0x100>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1cb      	bne.n	800b652 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d001      	beq.n	800b6c4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6c0:	f000 fab4 	bl	800bc2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b6c4:	4b19      	ldr	r3, [pc, #100]	; (800b72c <xTaskResumeAll+0x114>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00f      	beq.n	800b6f0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6d0:	f000 f82e 	bl	800b730 <xTaskIncrementTick>
 800b6d4:	1e03      	subs	r3, r0, #0
 800b6d6:	d002      	beq.n	800b6de <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800b6d8:	4b13      	ldr	r3, [pc, #76]	; (800b728 <xTaskResumeAll+0x110>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1f2      	bne.n	800b6d0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800b6ea:	4b10      	ldr	r3, [pc, #64]	; (800b72c <xTaskResumeAll+0x114>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6f0:	4b0d      	ldr	r3, [pc, #52]	; (800b728 <xTaskResumeAll+0x110>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6fc:	f7ff f8d8 	bl	800a8b0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b700:	f7ff f8f8 	bl	800a8f4 <vPortExitCritical>

	return xAlreadyYielded;
 800b704:	68bb      	ldr	r3, [r7, #8]
}
 800b706:	0018      	movs	r0, r3
 800b708:	46bd      	mov	sp, r7
 800b70a:	b004      	add	sp, #16
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	46c0      	nop			; (mov r8, r8)
 800b710:	200016e0 	.word	0x200016e0
 800b714:	200016b8 	.word	0x200016b8
 800b718:	20001678 	.word	0x20001678
 800b71c:	200016c0 	.word	0x200016c0
 800b720:	200015bc 	.word	0x200015bc
 800b724:	200015b8 	.word	0x200015b8
 800b728:	200016cc 	.word	0x200016cc
 800b72c:	200016c8 	.word	0x200016c8

0800b730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b736:	2300      	movs	r3, #0
 800b738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b73a:	4b4a      	ldr	r3, [pc, #296]	; (800b864 <xTaskIncrementTick+0x134>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d000      	beq.n	800b744 <xTaskIncrementTick+0x14>
 800b742:	e084      	b.n	800b84e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b744:	4b48      	ldr	r3, [pc, #288]	; (800b868 <xTaskIncrementTick+0x138>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3301      	adds	r3, #1
 800b74a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b74c:	4b46      	ldr	r3, [pc, #280]	; (800b868 <xTaskIncrementTick+0x138>)
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d117      	bne.n	800b788 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800b758:	4b44      	ldr	r3, [pc, #272]	; (800b86c <xTaskIncrementTick+0x13c>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <xTaskIncrementTick+0x36>
 800b762:	b672      	cpsid	i
 800b764:	e7fe      	b.n	800b764 <xTaskIncrementTick+0x34>
 800b766:	4b41      	ldr	r3, [pc, #260]	; (800b86c <xTaskIncrementTick+0x13c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	4b40      	ldr	r3, [pc, #256]	; (800b870 <xTaskIncrementTick+0x140>)
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	4b3e      	ldr	r3, [pc, #248]	; (800b86c <xTaskIncrementTick+0x13c>)
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	4b3e      	ldr	r3, [pc, #248]	; (800b870 <xTaskIncrementTick+0x140>)
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	4b3e      	ldr	r3, [pc, #248]	; (800b874 <xTaskIncrementTick+0x144>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	1c5a      	adds	r2, r3, #1
 800b780:	4b3c      	ldr	r3, [pc, #240]	; (800b874 <xTaskIncrementTick+0x144>)
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	f000 fa52 	bl	800bc2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b788:	4b3b      	ldr	r3, [pc, #236]	; (800b878 <xTaskIncrementTick+0x148>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d349      	bcc.n	800b826 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b792:	4b36      	ldr	r3, [pc, #216]	; (800b86c <xTaskIncrementTick+0x13c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d104      	bne.n	800b7a6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b79c:	4b36      	ldr	r3, [pc, #216]	; (800b878 <xTaskIncrementTick+0x148>)
 800b79e:	2201      	movs	r2, #1
 800b7a0:	4252      	negs	r2, r2
 800b7a2:	601a      	str	r2, [r3, #0]
					break;
 800b7a4:	e03f      	b.n	800b826 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7a6:	4b31      	ldr	r3, [pc, #196]	; (800b86c <xTaskIncrementTick+0x13c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d203      	bcs.n	800b7c6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7be:	4b2e      	ldr	r3, [pc, #184]	; (800b878 <xTaskIncrementTick+0x148>)
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7c4:	e02f      	b.n	800b826 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	0018      	movs	r0, r3
 800b7cc:	f7fe ffbb 	bl	800a746 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d004      	beq.n	800b7e2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	3318      	adds	r3, #24
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f7fe ffb2 	bl	800a746 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e6:	4b25      	ldr	r3, [pc, #148]	; (800b87c <xTaskIncrementTick+0x14c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d903      	bls.n	800b7f6 <xTaskIncrementTick+0xc6>
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	4b22      	ldr	r3, [pc, #136]	; (800b87c <xTaskIncrementTick+0x14c>)
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fa:	0013      	movs	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	189b      	adds	r3, r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	4a1f      	ldr	r2, [pc, #124]	; (800b880 <xTaskIncrementTick+0x150>)
 800b804:	189a      	adds	r2, r3, r2
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	3304      	adds	r3, #4
 800b80a:	0019      	movs	r1, r3
 800b80c:	0010      	movs	r0, r2
 800b80e:	f7fe ff42 	bl	800a696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b816:	4b1b      	ldr	r3, [pc, #108]	; (800b884 <xTaskIncrementTick+0x154>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d3b8      	bcc.n	800b792 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800b820:	2301      	movs	r3, #1
 800b822:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b824:	e7b5      	b.n	800b792 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b826:	4b17      	ldr	r3, [pc, #92]	; (800b884 <xTaskIncrementTick+0x154>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82c:	4914      	ldr	r1, [pc, #80]	; (800b880 <xTaskIncrementTick+0x150>)
 800b82e:	0013      	movs	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	189b      	adds	r3, r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	585b      	ldr	r3, [r3, r1]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d901      	bls.n	800b840 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800b83c:	2301      	movs	r3, #1
 800b83e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b840:	4b11      	ldr	r3, [pc, #68]	; (800b888 <xTaskIncrementTick+0x158>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d007      	beq.n	800b858 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800b848:	2301      	movs	r3, #1
 800b84a:	617b      	str	r3, [r7, #20]
 800b84c:	e004      	b.n	800b858 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b84e:	4b0f      	ldr	r3, [pc, #60]	; (800b88c <xTaskIncrementTick+0x15c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	4b0d      	ldr	r3, [pc, #52]	; (800b88c <xTaskIncrementTick+0x15c>)
 800b856:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b858:	697b      	ldr	r3, [r7, #20]
}
 800b85a:	0018      	movs	r0, r3
 800b85c:	46bd      	mov	sp, r7
 800b85e:	b006      	add	sp, #24
 800b860:	bd80      	pop	{r7, pc}
 800b862:	46c0      	nop			; (mov r8, r8)
 800b864:	200016e0 	.word	0x200016e0
 800b868:	200016bc 	.word	0x200016bc
 800b86c:	20001670 	.word	0x20001670
 800b870:	20001674 	.word	0x20001674
 800b874:	200016d0 	.word	0x200016d0
 800b878:	200016d8 	.word	0x200016d8
 800b87c:	200016c0 	.word	0x200016c0
 800b880:	200015bc 	.word	0x200015bc
 800b884:	200015b8 	.word	0x200015b8
 800b888:	200016cc 	.word	0x200016cc
 800b88c:	200016c8 	.word	0x200016c8

0800b890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b896:	4b22      	ldr	r3, [pc, #136]	; (800b920 <vTaskSwitchContext+0x90>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b89e:	4b21      	ldr	r3, [pc, #132]	; (800b924 <vTaskSwitchContext+0x94>)
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8a4:	e037      	b.n	800b916 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800b8a6:	4b1f      	ldr	r3, [pc, #124]	; (800b924 <vTaskSwitchContext+0x94>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ac:	4b1e      	ldr	r3, [pc, #120]	; (800b928 <vTaskSwitchContext+0x98>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	607b      	str	r3, [r7, #4]
 800b8b2:	e007      	b.n	800b8c4 <vTaskSwitchContext+0x34>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <vTaskSwitchContext+0x2e>
 800b8ba:	b672      	cpsid	i
 800b8bc:	e7fe      	b.n	800b8bc <vTaskSwitchContext+0x2c>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	607b      	str	r3, [r7, #4]
 800b8c4:	4919      	ldr	r1, [pc, #100]	; (800b92c <vTaskSwitchContext+0x9c>)
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	0013      	movs	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	189b      	adds	r3, r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	585b      	ldr	r3, [r3, r1]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0ee      	beq.n	800b8b4 <vTaskSwitchContext+0x24>
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	0013      	movs	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	189b      	adds	r3, r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4a12      	ldr	r2, [pc, #72]	; (800b92c <vTaskSwitchContext+0x9c>)
 800b8e2:	189b      	adds	r3, r3, r2
 800b8e4:	603b      	str	r3, [r7, #0]
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	605a      	str	r2, [r3, #4]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d104      	bne.n	800b906 <vTaskSwitchContext+0x76>
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	685a      	ldr	r2, [r3, #4]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	605a      	str	r2, [r3, #4]
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	68da      	ldr	r2, [r3, #12]
 800b90c:	4b08      	ldr	r3, [pc, #32]	; (800b930 <vTaskSwitchContext+0xa0>)
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	4b05      	ldr	r3, [pc, #20]	; (800b928 <vTaskSwitchContext+0x98>)
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
}
 800b916:	46c0      	nop			; (mov r8, r8)
 800b918:	46bd      	mov	sp, r7
 800b91a:	b002      	add	sp, #8
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	46c0      	nop			; (mov r8, r8)
 800b920:	200016e0 	.word	0x200016e0
 800b924:	200016cc 	.word	0x200016cc
 800b928:	200016c0 	.word	0x200016c0
 800b92c:	200015bc 	.word	0x200015bc
 800b930:	200015b8 	.word	0x200015b8

0800b934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <vTaskPlaceOnEventList+0x14>
 800b944:	b672      	cpsid	i
 800b946:	e7fe      	b.n	800b946 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b948:	4b08      	ldr	r3, [pc, #32]	; (800b96c <vTaskPlaceOnEventList+0x38>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3318      	adds	r3, #24
 800b94e:	001a      	movs	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	0011      	movs	r1, r2
 800b954:	0018      	movs	r0, r3
 800b956:	f7fe fec0 	bl	800a6da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2101      	movs	r1, #1
 800b95e:	0018      	movs	r0, r3
 800b960:	f000 f9fa 	bl	800bd58 <prvAddCurrentTaskToDelayedList>
}
 800b964:	46c0      	nop			; (mov r8, r8)
 800b966:	46bd      	mov	sp, r7
 800b968:	b002      	add	sp, #8
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	200015b8 	.word	0x200015b8

0800b970 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <xTaskRemoveFromEventList+0x1a>
 800b986:	b672      	cpsid	i
 800b988:	e7fe      	b.n	800b988 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	3318      	adds	r3, #24
 800b98e:	0018      	movs	r0, r3
 800b990:	f7fe fed9 	bl	800a746 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b994:	4b1e      	ldr	r3, [pc, #120]	; (800ba10 <xTaskRemoveFromEventList+0xa0>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d11d      	bne.n	800b9d8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	0018      	movs	r0, r3
 800b9a2:	f7fe fed0 	bl	800a746 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9aa:	4b1a      	ldr	r3, [pc, #104]	; (800ba14 <xTaskRemoveFromEventList+0xa4>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d903      	bls.n	800b9ba <xTaskRemoveFromEventList+0x4a>
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b6:	4b17      	ldr	r3, [pc, #92]	; (800ba14 <xTaskRemoveFromEventList+0xa4>)
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9be:	0013      	movs	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	189b      	adds	r3, r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4a14      	ldr	r2, [pc, #80]	; (800ba18 <xTaskRemoveFromEventList+0xa8>)
 800b9c8:	189a      	adds	r2, r3, r2
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	0019      	movs	r1, r3
 800b9d0:	0010      	movs	r0, r2
 800b9d2:	f7fe fe60 	bl	800a696 <vListInsertEnd>
 800b9d6:	e007      	b.n	800b9e8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	3318      	adds	r3, #24
 800b9dc:	001a      	movs	r2, r3
 800b9de:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <xTaskRemoveFromEventList+0xac>)
 800b9e0:	0011      	movs	r1, r2
 800b9e2:	0018      	movs	r0, r3
 800b9e4:	f7fe fe57 	bl	800a696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ec:	4b0c      	ldr	r3, [pc, #48]	; (800ba20 <xTaskRemoveFromEventList+0xb0>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d905      	bls.n	800ba02 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9fa:	4b0a      	ldr	r3, [pc, #40]	; (800ba24 <xTaskRemoveFromEventList+0xb4>)
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	e001      	b.n	800ba06 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800ba06:	68fb      	ldr	r3, [r7, #12]
}
 800ba08:	0018      	movs	r0, r3
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	b004      	add	sp, #16
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	200016e0 	.word	0x200016e0
 800ba14:	200016c0 	.word	0x200016c0
 800ba18:	200015bc 	.word	0x200015bc
 800ba1c:	20001678 	.word	0x20001678
 800ba20:	200015b8 	.word	0x200015b8
 800ba24:	200016cc 	.word	0x200016cc

0800ba28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba30:	4b05      	ldr	r3, [pc, #20]	; (800ba48 <vTaskInternalSetTimeOutState+0x20>)
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba38:	4b04      	ldr	r3, [pc, #16]	; (800ba4c <vTaskInternalSetTimeOutState+0x24>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	605a      	str	r2, [r3, #4]
}
 800ba40:	46c0      	nop			; (mov r8, r8)
 800ba42:	46bd      	mov	sp, r7
 800ba44:	b002      	add	sp, #8
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	200016d0 	.word	0x200016d0
 800ba4c:	200016bc 	.word	0x200016bc

0800ba50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <xTaskCheckForTimeOut+0x14>
 800ba60:	b672      	cpsid	i
 800ba62:	e7fe      	b.n	800ba62 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <xTaskCheckForTimeOut+0x1e>
 800ba6a:	b672      	cpsid	i
 800ba6c:	e7fe      	b.n	800ba6c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800ba6e:	f7fe ff2f 	bl	800a8d0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba72:	4b1d      	ldr	r3, [pc, #116]	; (800bae8 <xTaskCheckForTimeOut+0x98>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3301      	adds	r3, #1
 800ba88:	d102      	bne.n	800ba90 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	e024      	b.n	800bada <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	4b15      	ldr	r3, [pc, #84]	; (800baec <xTaskCheckForTimeOut+0x9c>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d007      	beq.n	800baac <xTaskCheckForTimeOut+0x5c>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d302      	bcc.n	800baac <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800baa6:	2301      	movs	r3, #1
 800baa8:	617b      	str	r3, [r7, #20]
 800baaa:	e016      	b.n	800bada <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d20c      	bcs.n	800bad0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	1ad2      	subs	r2, r2, r3
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	0018      	movs	r0, r3
 800bac6:	f7ff ffaf 	bl	800ba28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800baca:	2300      	movs	r3, #0
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	e004      	b.n	800bada <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2200      	movs	r2, #0
 800bad4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bad6:	2301      	movs	r3, #1
 800bad8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800bada:	f7fe ff0b 	bl	800a8f4 <vPortExitCritical>

	return xReturn;
 800bade:	697b      	ldr	r3, [r7, #20]
}
 800bae0:	0018      	movs	r0, r3
 800bae2:	46bd      	mov	sp, r7
 800bae4:	b006      	add	sp, #24
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	200016bc 	.word	0x200016bc
 800baec:	200016d0 	.word	0x200016d0

0800baf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800baf4:	4b02      	ldr	r3, [pc, #8]	; (800bb00 <vTaskMissedYield+0x10>)
 800baf6:	2201      	movs	r2, #1
 800baf8:	601a      	str	r2, [r3, #0]
}
 800bafa:	46c0      	nop			; (mov r8, r8)
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	200016cc 	.word	0x200016cc

0800bb04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb0c:	f000 f84e 	bl	800bbac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb10:	4b03      	ldr	r3, [pc, #12]	; (800bb20 <prvIdleTask+0x1c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d9f9      	bls.n	800bb0c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb18:	f7fe feca 	bl	800a8b0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800bb1c:	e7f6      	b.n	800bb0c <prvIdleTask+0x8>
 800bb1e:	46c0      	nop			; (mov r8, r8)
 800bb20:	200015bc 	.word	0x200015bc

0800bb24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	607b      	str	r3, [r7, #4]
 800bb2e:	e00c      	b.n	800bb4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	0013      	movs	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	189b      	adds	r3, r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4a14      	ldr	r2, [pc, #80]	; (800bb8c <prvInitialiseTaskLists+0x68>)
 800bb3c:	189b      	adds	r3, r3, r2
 800bb3e:	0018      	movs	r0, r3
 800bb40:	f7fe fd80 	bl	800a644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3301      	adds	r3, #1
 800bb48:	607b      	str	r3, [r7, #4]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b06      	cmp	r3, #6
 800bb4e:	d9ef      	bls.n	800bb30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb50:	4b0f      	ldr	r3, [pc, #60]	; (800bb90 <prvInitialiseTaskLists+0x6c>)
 800bb52:	0018      	movs	r0, r3
 800bb54:	f7fe fd76 	bl	800a644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb58:	4b0e      	ldr	r3, [pc, #56]	; (800bb94 <prvInitialiseTaskLists+0x70>)
 800bb5a:	0018      	movs	r0, r3
 800bb5c:	f7fe fd72 	bl	800a644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb60:	4b0d      	ldr	r3, [pc, #52]	; (800bb98 <prvInitialiseTaskLists+0x74>)
 800bb62:	0018      	movs	r0, r3
 800bb64:	f7fe fd6e 	bl	800a644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb68:	4b0c      	ldr	r3, [pc, #48]	; (800bb9c <prvInitialiseTaskLists+0x78>)
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	f7fe fd6a 	bl	800a644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb70:	4b0b      	ldr	r3, [pc, #44]	; (800bba0 <prvInitialiseTaskLists+0x7c>)
 800bb72:	0018      	movs	r0, r3
 800bb74:	f7fe fd66 	bl	800a644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb78:	4b0a      	ldr	r3, [pc, #40]	; (800bba4 <prvInitialiseTaskLists+0x80>)
 800bb7a:	4a05      	ldr	r2, [pc, #20]	; (800bb90 <prvInitialiseTaskLists+0x6c>)
 800bb7c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb7e:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <prvInitialiseTaskLists+0x84>)
 800bb80:	4a04      	ldr	r2, [pc, #16]	; (800bb94 <prvInitialiseTaskLists+0x70>)
 800bb82:	601a      	str	r2, [r3, #0]
}
 800bb84:	46c0      	nop			; (mov r8, r8)
 800bb86:	46bd      	mov	sp, r7
 800bb88:	b002      	add	sp, #8
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	200015bc 	.word	0x200015bc
 800bb90:	20001648 	.word	0x20001648
 800bb94:	2000165c 	.word	0x2000165c
 800bb98:	20001678 	.word	0x20001678
 800bb9c:	2000168c 	.word	0x2000168c
 800bba0:	200016a4 	.word	0x200016a4
 800bba4:	20001670 	.word	0x20001670
 800bba8:	20001674 	.word	0x20001674

0800bbac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbb2:	e01a      	b.n	800bbea <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800bbb4:	f7fe fe8c 	bl	800a8d0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbb8:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <prvCheckTasksWaitingTermination+0x50>)
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	f7fe fdbe 	bl	800a746 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbca:	4b0d      	ldr	r3, [pc, #52]	; (800bc00 <prvCheckTasksWaitingTermination+0x54>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	1e5a      	subs	r2, r3, #1
 800bbd0:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <prvCheckTasksWaitingTermination+0x54>)
 800bbd2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbd4:	4b0b      	ldr	r3, [pc, #44]	; (800bc04 <prvCheckTasksWaitingTermination+0x58>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	1e5a      	subs	r2, r3, #1
 800bbda:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <prvCheckTasksWaitingTermination+0x58>)
 800bbdc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800bbde:	f7fe fe89 	bl	800a8f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	f000 f80f 	bl	800bc08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbea:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <prvCheckTasksWaitingTermination+0x58>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e0      	bne.n	800bbb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbf2:	46c0      	nop			; (mov r8, r8)
 800bbf4:	46c0      	nop			; (mov r8, r8)
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	b002      	add	sp, #8
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	2000168c 	.word	0x2000168c
 800bc00:	200016b8 	.word	0x200016b8
 800bc04:	200016a0 	.word	0x200016a0

0800bc08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc14:	0018      	movs	r0, r3
 800bc16:	f7fe fc0f 	bl	800a438 <vPortFree>
			vPortFree( pxTCB );
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	0018      	movs	r0, r3
 800bc1e:	f7fe fc0b 	bl	800a438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc22:	46c0      	nop			; (mov r8, r8)
 800bc24:	46bd      	mov	sp, r7
 800bc26:	b002      	add	sp, #8
 800bc28:	bd80      	pop	{r7, pc}
	...

0800bc2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc32:	4b0b      	ldr	r3, [pc, #44]	; (800bc60 <prvResetNextTaskUnblockTime+0x34>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d104      	bne.n	800bc46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc3c:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <prvResetNextTaskUnblockTime+0x38>)
 800bc3e:	2201      	movs	r2, #1
 800bc40:	4252      	negs	r2, r2
 800bc42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc44:	e008      	b.n	800bc58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc46:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <prvResetNextTaskUnblockTime+0x34>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	4b03      	ldr	r3, [pc, #12]	; (800bc64 <prvResetNextTaskUnblockTime+0x38>)
 800bc56:	601a      	str	r2, [r3, #0]
}
 800bc58:	46c0      	nop			; (mov r8, r8)
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	b002      	add	sp, #8
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20001670 	.word	0x20001670
 800bc64:	200016d8 	.word	0x200016d8

0800bc68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc6e:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <xTaskGetSchedulerState+0x30>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d102      	bne.n	800bc7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc76:	2301      	movs	r3, #1
 800bc78:	607b      	str	r3, [r7, #4]
 800bc7a:	e008      	b.n	800bc8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc7c:	4b07      	ldr	r3, [pc, #28]	; (800bc9c <xTaskGetSchedulerState+0x34>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d102      	bne.n	800bc8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc84:	2302      	movs	r3, #2
 800bc86:	607b      	str	r3, [r7, #4]
 800bc88:	e001      	b.n	800bc8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc8e:	687b      	ldr	r3, [r7, #4]
	}
 800bc90:	0018      	movs	r0, r3
 800bc92:	46bd      	mov	sp, r7
 800bc94:	b002      	add	sp, #8
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	200016c4 	.word	0x200016c4
 800bc9c:	200016e0 	.word	0x200016e0

0800bca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d044      	beq.n	800bd40 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcb6:	4b25      	ldr	r3, [pc, #148]	; (800bd4c <xTaskPriorityDisinherit+0xac>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d001      	beq.n	800bcc4 <xTaskPriorityDisinherit+0x24>
 800bcc0:	b672      	cpsid	i
 800bcc2:	e7fe      	b.n	800bcc2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <xTaskPriorityDisinherit+0x30>
 800bccc:	b672      	cpsid	i
 800bcce:	e7fe      	b.n	800bcce <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd4:	1e5a      	subs	r2, r3, #1
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d02c      	beq.n	800bd40 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d128      	bne.n	800bd40 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	3304      	adds	r3, #4
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f7fe fd27 	bl	800a746 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	2207      	movs	r2, #7
 800bd06:	1ad2      	subs	r2, r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd10:	4b0f      	ldr	r3, [pc, #60]	; (800bd50 <xTaskPriorityDisinherit+0xb0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d903      	bls.n	800bd20 <xTaskPriorityDisinherit+0x80>
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1c:	4b0c      	ldr	r3, [pc, #48]	; (800bd50 <xTaskPriorityDisinherit+0xb0>)
 800bd1e:	601a      	str	r2, [r3, #0]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd24:	0013      	movs	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	189b      	adds	r3, r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4a09      	ldr	r2, [pc, #36]	; (800bd54 <xTaskPriorityDisinherit+0xb4>)
 800bd2e:	189a      	adds	r2, r3, r2
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	3304      	adds	r3, #4
 800bd34:	0019      	movs	r1, r3
 800bd36:	0010      	movs	r0, r2
 800bd38:	f7fe fcad 	bl	800a696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd40:	68fb      	ldr	r3, [r7, #12]
	}
 800bd42:	0018      	movs	r0, r3
 800bd44:	46bd      	mov	sp, r7
 800bd46:	b004      	add	sp, #16
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	200015b8 	.word	0x200015b8
 800bd50:	200016c0 	.word	0x200016c0
 800bd54:	200015bc 	.word	0x200015bc

0800bd58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd62:	4b21      	ldr	r3, [pc, #132]	; (800bde8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd68:	4b20      	ldr	r3, [pc, #128]	; (800bdec <prvAddCurrentTaskToDelayedList+0x94>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	0018      	movs	r0, r3
 800bd70:	f7fe fce9 	bl	800a746 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3301      	adds	r3, #1
 800bd78:	d10b      	bne.n	800bd92 <prvAddCurrentTaskToDelayedList+0x3a>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d008      	beq.n	800bd92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd80:	4b1a      	ldr	r3, [pc, #104]	; (800bdec <prvAddCurrentTaskToDelayedList+0x94>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	1d1a      	adds	r2, r3, #4
 800bd86:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bd88:	0011      	movs	r1, r2
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	f7fe fc83 	bl	800a696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd90:	e026      	b.n	800bde0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	18d3      	adds	r3, r2, r3
 800bd98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd9a:	4b14      	ldr	r3, [pc, #80]	; (800bdec <prvAddCurrentTaskToDelayedList+0x94>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d209      	bcs.n	800bdbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdaa:	4b12      	ldr	r3, [pc, #72]	; (800bdf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <prvAddCurrentTaskToDelayedList+0x94>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	0019      	movs	r1, r3
 800bdb6:	0010      	movs	r0, r2
 800bdb8:	f7fe fc8f 	bl	800a6da <vListInsert>
}
 800bdbc:	e010      	b.n	800bde0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	4b0a      	ldr	r3, [pc, #40]	; (800bdec <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	0019      	movs	r1, r3
 800bdca:	0010      	movs	r0, r2
 800bdcc:	f7fe fc85 	bl	800a6da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bdd0:	4b0a      	ldr	r3, [pc, #40]	; (800bdfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d202      	bcs.n	800bde0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdda:	4b08      	ldr	r3, [pc, #32]	; (800bdfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	601a      	str	r2, [r3, #0]
}
 800bde0:	46c0      	nop			; (mov r8, r8)
 800bde2:	46bd      	mov	sp, r7
 800bde4:	b004      	add	sp, #16
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	200016bc 	.word	0x200016bc
 800bdec:	200015b8 	.word	0x200015b8
 800bdf0:	200016a4 	.word	0x200016a4
 800bdf4:	20001674 	.word	0x20001674
 800bdf8:	20001670 	.word	0x20001670
 800bdfc:	200016d8 	.word	0x200016d8

0800be00 <__NVIC_EnableIRQ>:
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	0002      	movs	r2, r0
 800be08:	1dfb      	adds	r3, r7, #7
 800be0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800be0c:	1dfb      	adds	r3, r7, #7
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	2b7f      	cmp	r3, #127	; 0x7f
 800be12:	d809      	bhi.n	800be28 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be14:	1dfb      	adds	r3, r7, #7
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	001a      	movs	r2, r3
 800be1a:	231f      	movs	r3, #31
 800be1c:	401a      	ands	r2, r3
 800be1e:	4b04      	ldr	r3, [pc, #16]	; (800be30 <__NVIC_EnableIRQ+0x30>)
 800be20:	2101      	movs	r1, #1
 800be22:	4091      	lsls	r1, r2
 800be24:	000a      	movs	r2, r1
 800be26:	601a      	str	r2, [r3, #0]
}
 800be28:	46c0      	nop			; (mov r8, r8)
 800be2a:	46bd      	mov	sp, r7
 800be2c:	b002      	add	sp, #8
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	e000e100 	.word	0xe000e100

0800be34 <__NVIC_SetPriority>:
{
 800be34:	b590      	push	{r4, r7, lr}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	0002      	movs	r2, r0
 800be3c:	6039      	str	r1, [r7, #0]
 800be3e:	1dfb      	adds	r3, r7, #7
 800be40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800be42:	1dfb      	adds	r3, r7, #7
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b7f      	cmp	r3, #127	; 0x7f
 800be48:	d828      	bhi.n	800be9c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800be4a:	4a2f      	ldr	r2, [pc, #188]	; (800bf08 <__NVIC_SetPriority+0xd4>)
 800be4c:	1dfb      	adds	r3, r7, #7
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	b25b      	sxtb	r3, r3
 800be52:	089b      	lsrs	r3, r3, #2
 800be54:	33c0      	adds	r3, #192	; 0xc0
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	589b      	ldr	r3, [r3, r2]
 800be5a:	1dfa      	adds	r2, r7, #7
 800be5c:	7812      	ldrb	r2, [r2, #0]
 800be5e:	0011      	movs	r1, r2
 800be60:	2203      	movs	r2, #3
 800be62:	400a      	ands	r2, r1
 800be64:	00d2      	lsls	r2, r2, #3
 800be66:	21ff      	movs	r1, #255	; 0xff
 800be68:	4091      	lsls	r1, r2
 800be6a:	000a      	movs	r2, r1
 800be6c:	43d2      	mvns	r2, r2
 800be6e:	401a      	ands	r2, r3
 800be70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	019b      	lsls	r3, r3, #6
 800be76:	22ff      	movs	r2, #255	; 0xff
 800be78:	401a      	ands	r2, r3
 800be7a:	1dfb      	adds	r3, r7, #7
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	0018      	movs	r0, r3
 800be80:	2303      	movs	r3, #3
 800be82:	4003      	ands	r3, r0
 800be84:	00db      	lsls	r3, r3, #3
 800be86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800be88:	481f      	ldr	r0, [pc, #124]	; (800bf08 <__NVIC_SetPriority+0xd4>)
 800be8a:	1dfb      	adds	r3, r7, #7
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	b25b      	sxtb	r3, r3
 800be90:	089b      	lsrs	r3, r3, #2
 800be92:	430a      	orrs	r2, r1
 800be94:	33c0      	adds	r3, #192	; 0xc0
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	501a      	str	r2, [r3, r0]
}
 800be9a:	e031      	b.n	800bf00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800be9c:	4a1b      	ldr	r2, [pc, #108]	; (800bf0c <__NVIC_SetPriority+0xd8>)
 800be9e:	1dfb      	adds	r3, r7, #7
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	0019      	movs	r1, r3
 800bea4:	230f      	movs	r3, #15
 800bea6:	400b      	ands	r3, r1
 800bea8:	3b08      	subs	r3, #8
 800beaa:	089b      	lsrs	r3, r3, #2
 800beac:	3306      	adds	r3, #6
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	18d3      	adds	r3, r2, r3
 800beb2:	3304      	adds	r3, #4
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	1dfa      	adds	r2, r7, #7
 800beb8:	7812      	ldrb	r2, [r2, #0]
 800beba:	0011      	movs	r1, r2
 800bebc:	2203      	movs	r2, #3
 800bebe:	400a      	ands	r2, r1
 800bec0:	00d2      	lsls	r2, r2, #3
 800bec2:	21ff      	movs	r1, #255	; 0xff
 800bec4:	4091      	lsls	r1, r2
 800bec6:	000a      	movs	r2, r1
 800bec8:	43d2      	mvns	r2, r2
 800beca:	401a      	ands	r2, r3
 800becc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	019b      	lsls	r3, r3, #6
 800bed2:	22ff      	movs	r2, #255	; 0xff
 800bed4:	401a      	ands	r2, r3
 800bed6:	1dfb      	adds	r3, r7, #7
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	0018      	movs	r0, r3
 800bedc:	2303      	movs	r3, #3
 800bede:	4003      	ands	r3, r0
 800bee0:	00db      	lsls	r3, r3, #3
 800bee2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bee4:	4809      	ldr	r0, [pc, #36]	; (800bf0c <__NVIC_SetPriority+0xd8>)
 800bee6:	1dfb      	adds	r3, r7, #7
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	001c      	movs	r4, r3
 800beec:	230f      	movs	r3, #15
 800beee:	4023      	ands	r3, r4
 800bef0:	3b08      	subs	r3, #8
 800bef2:	089b      	lsrs	r3, r3, #2
 800bef4:	430a      	orrs	r2, r1
 800bef6:	3306      	adds	r3, #6
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	18c3      	adds	r3, r0, r3
 800befc:	3304      	adds	r3, #4
 800befe:	601a      	str	r2, [r3, #0]
}
 800bf00:	46c0      	nop			; (mov r8, r8)
 800bf02:	46bd      	mov	sp, r7
 800bf04:	b003      	add	sp, #12
 800bf06:	bd90      	pop	{r4, r7, pc}
 800bf08:	e000e100 	.word	0xe000e100
 800bf0c:	e000ed00 	.word	0xe000ed00

0800bf10 <LL_UCPD_Enable>:
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2280      	movs	r2, #128	; 0x80
 800bf1e:	0612      	lsls	r2, r2, #24
 800bf20:	431a      	orrs	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	601a      	str	r2, [r3, #0]
}
 800bf26:	46c0      	nop			; (mov r8, r8)
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	b002      	add	sp, #8
 800bf2c:	bd80      	pop	{r7, pc}
	...

0800bf30 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a05      	ldr	r2, [pc, #20]	; (800bf54 <LL_UCPD_SetRxOrderSet+0x24>)
 800bf40:	401a      	ands	r2, r3
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	431a      	orrs	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	601a      	str	r2, [r3, #0]
}
 800bf4a:	46c0      	nop			; (mov r8, r8)
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	b002      	add	sp, #8
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	46c0      	nop			; (mov r8, r8)
 800bf54:	e00fffff 	.word	0xe00fffff

0800bf58 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	4a05      	ldr	r2, [pc, #20]	; (800bf7c <LL_UCPD_SetccEnable+0x24>)
 800bf68:	401a      	ands	r2, r3
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	60da      	str	r2, [r3, #12]
}
 800bf72:	46c0      	nop			; (mov r8, r8)
 800bf74:	46bd      	mov	sp, r7
 800bf76:	b002      	add	sp, #8
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	fffff3ff 	.word	0xfffff3ff

0800bf80 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	2280      	movs	r2, #128	; 0x80
 800bf8e:	0212      	lsls	r2, r2, #8
 800bf90:	431a      	orrs	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	611a      	str	r2, [r3, #16]
}
 800bf96:	46c0      	nop			; (mov r8, r8)
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	b002      	add	sp, #8
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	2280      	movs	r2, #128	; 0x80
 800bfac:	01d2      	lsls	r2, r2, #7
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	611a      	str	r2, [r3, #16]
}
 800bfb4:	46c0      	nop			; (mov r8, r8)
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	b002      	add	sp, #8
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800bfbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfbe:	b08b      	sub	sp, #44	; 0x2c
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	607a      	str	r2, [r7, #4]
 800bfc6:	603b      	str	r3, [r7, #0]
 800bfc8:	240f      	movs	r4, #15
 800bfca:	193b      	adds	r3, r7, r4
 800bfcc:	1c02      	adds	r2, r0, #0
 800bfce:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800bfd0:	193b      	adds	r3, r7, r4
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	0013      	movs	r3, r2
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	189b      	adds	r3, r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4a65      	ldr	r2, [pc, #404]	; (800c174 <CAD_Init+0x1b8>)
 800bfde:	189b      	adds	r3, r3, r2
 800bfe0:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800bfe2:	193b      	adds	r3, r7, r4
 800bfe4:	781a      	ldrb	r2, [r3, #0]
 800bfe6:	4964      	ldr	r1, [pc, #400]	; (800c178 <CAD_Init+0x1bc>)
 800bfe8:	0013      	movs	r3, r2
 800bfea:	00db      	lsls	r3, r3, #3
 800bfec:	1a9b      	subs	r3, r3, r2
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	18cb      	adds	r3, r1, r3
 800bff2:	3310      	adds	r3, #16
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800bff8:	193b      	adds	r3, r7, r4
 800bffa:	781a      	ldrb	r2, [r3, #0]
 800bffc:	495e      	ldr	r1, [pc, #376]	; (800c178 <CAD_Init+0x1bc>)
 800bffe:	0013      	movs	r3, r2
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	1a9b      	subs	r3, r3, r2
 800c004:	00db      	lsls	r3, r3, #3
 800c006:	18cb      	adds	r3, r1, r3
 800c008:	330c      	adds	r3, #12
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800c00e:	193b      	adds	r3, r7, r4
 800c010:	781a      	ldrb	r2, [r3, #0]
 800c012:	4959      	ldr	r1, [pc, #356]	; (800c178 <CAD_Init+0x1bc>)
 800c014:	0013      	movs	r3, r2
 800c016:	00db      	lsls	r3, r3, #3
 800c018:	1a9b      	subs	r3, r3, r2
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	18cb      	adds	r3, r1, r3
 800c01e:	330c      	adds	r3, #12
 800c020:	6819      	ldr	r1, [r3, #0]
 800c022:	193b      	adds	r3, r7, r4
 800c024:	781a      	ldrb	r2, [r3, #0]
 800c026:	4854      	ldr	r0, [pc, #336]	; (800c178 <CAD_Init+0x1bc>)
 800c028:	0013      	movs	r3, r2
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	1a9b      	subs	r3, r3, r2
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	18c3      	adds	r3, r0, r3
 800c032:	3310      	adds	r3, #16
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	794a      	ldrb	r2, [r1, #5]
 800c038:	0612      	lsls	r2, r2, #24
 800c03a:	0f92      	lsrs	r2, r2, #30
 800c03c:	b2d2      	uxtb	r2, r2
 800c03e:	2103      	movs	r1, #3
 800c040:	400a      	ands	r2, r1
 800c042:	0010      	movs	r0, r2
 800c044:	789a      	ldrb	r2, [r3, #2]
 800c046:	2103      	movs	r1, #3
 800c048:	438a      	bics	r2, r1
 800c04a:	1c11      	adds	r1, r2, #0
 800c04c:	1c02      	adds	r2, r0, #0
 800c04e:	430a      	orrs	r2, r1
 800c050:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800c052:	193b      	adds	r3, r7, r4
 800c054:	781a      	ldrb	r2, [r3, #0]
 800c056:	4948      	ldr	r1, [pc, #288]	; (800c178 <CAD_Init+0x1bc>)
 800c058:	0013      	movs	r3, r2
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	18cb      	adds	r3, r1, r3
 800c062:	3310      	adds	r3, #16
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	789a      	ldrb	r2, [r3, #2]
 800c068:	210c      	movs	r1, #12
 800c06a:	438a      	bics	r2, r1
 800c06c:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	220c      	movs	r2, #12
 800c072:	2100      	movs	r1, #0
 800c074:	0018      	movs	r0, r3
 800c076:	f009 f8c2 	bl	80151fe <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800c07a:	193b      	adds	r3, r7, r4
 800c07c:	781a      	ldrb	r2, [r3, #0]
 800c07e:	493e      	ldr	r1, [pc, #248]	; (800c178 <CAD_Init+0x1bc>)
 800c080:	0013      	movs	r3, r2
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	1a9b      	subs	r3, r3, r2
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	18cb      	adds	r3, r1, r3
 800c08a:	332c      	adds	r3, #44	; 0x2c
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800c090:	0025      	movs	r5, r4
 800c092:	193b      	adds	r3, r7, r4
 800c094:	781c      	ldrb	r4, [r3, #0]
 800c096:	197b      	adds	r3, r7, r5
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	0018      	movs	r0, r3
 800c09c:	f000 fc42 	bl	800c924 <USBPD_HW_GetUSPDInstance>
 800c0a0:	0001      	movs	r1, r0
 800c0a2:	4a35      	ldr	r2, [pc, #212]	; (800c178 <CAD_Init+0x1bc>)
 800c0a4:	0023      	movs	r3, r4
 800c0a6:	00db      	lsls	r3, r3, #3
 800c0a8:	1b1b      	subs	r3, r3, r4
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800c0ae:	2614      	movs	r6, #20
 800c0b0:	19bb      	adds	r3, r7, r6
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	f7fd ffc8 	bl	800a048 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800c0b8:	002c      	movs	r4, r5
 800c0ba:	193b      	adds	r3, r7, r4
 800c0bc:	781a      	ldrb	r2, [r3, #0]
 800c0be:	492e      	ldr	r1, [pc, #184]	; (800c178 <CAD_Init+0x1bc>)
 800c0c0:	0013      	movs	r3, r2
 800c0c2:	00db      	lsls	r3, r3, #3
 800c0c4:	1a9b      	subs	r3, r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	585b      	ldr	r3, [r3, r1]
 800c0ca:	19ba      	adds	r2, r7, r6
 800c0cc:	0011      	movs	r1, r2
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	f7fd ff80 	bl	8009fd4 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 | LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
 800c0d4:	193b      	adds	r3, r7, r4
 800c0d6:	781a      	ldrb	r2, [r3, #0]
 800c0d8:	4927      	ldr	r1, [pc, #156]	; (800c178 <CAD_Init+0x1bc>)
 800c0da:	0013      	movs	r3, r2
 800c0dc:	00db      	lsls	r3, r3, #3
 800c0de:	1a9b      	subs	r3, r3, r2
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	585b      	ldr	r3, [r3, r1]
 800c0e4:	22f8      	movs	r2, #248	; 0xf8
 800c0e6:	0452      	lsls	r2, r2, #17
 800c0e8:	0011      	movs	r1, r2
 800c0ea:	0018      	movs	r0, r3
 800c0ec:	f7ff ff20 	bl	800bf30 <LL_UCPD_SetRxOrderSet>
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800c0f0:	193b      	adds	r3, r7, r4
 800c0f2:	781a      	ldrb	r2, [r3, #0]
 800c0f4:	4920      	ldr	r1, [pc, #128]	; (800c178 <CAD_Init+0x1bc>)
 800c0f6:	0013      	movs	r3, r2
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	1a9b      	subs	r3, r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	585b      	ldr	r3, [r3, r1]
 800c100:	22c0      	movs	r2, #192	; 0xc0
 800c102:	0112      	lsls	r2, r2, #4
 800c104:	0011      	movs	r1, r2
 800c106:	0018      	movs	r0, r3
 800c108:	f7ff ff26 	bl	800bf58 <LL_UCPD_SetccEnable>
#endif /* _LOW_POWER */


#if !defined(USBPDCORE_LIB_NO_PD) || defined(USBPD_TYPE_STATE_MACHINE)
  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800c10c:	193b      	adds	r3, r7, r4
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	0018      	movs	r0, r3
 800c112:	f004 f93e 	bl	8010392 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800c116:	193b      	adds	r3, r7, r4
 800c118:	781a      	ldrb	r2, [r3, #0]
 800c11a:	4917      	ldr	r1, [pc, #92]	; (800c178 <CAD_Init+0x1bc>)
 800c11c:	0013      	movs	r3, r2
 800c11e:	00db      	lsls	r3, r3, #3
 800c120:	1a9b      	subs	r3, r3, r2
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	585b      	ldr	r3, [r3, r1]
 800c126:	0018      	movs	r0, r3
 800c128:	f7ff fef2 	bl	800bf10 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 800c12c:	193b      	adds	r3, r7, r4
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	0018      	movs	r0, r3
 800c132:	f001 fd19 	bl	800db68 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	4a10      	ldr	r2, [pc, #64]	; (800c17c <CAD_Init+0x1c0>)
 800c13a:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 800c13c:	193b      	adds	r3, r7, r4
 800c13e:	781a      	ldrb	r2, [r3, #0]
 800c140:	490d      	ldr	r1, [pc, #52]	; (800c178 <CAD_Init+0x1bc>)
 800c142:	0013      	movs	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	18cb      	adds	r3, r1, r3
 800c14c:	330c      	adds	r3, #12
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	795b      	ldrb	r3, [r3, #5]
 800c152:	06db      	lsls	r3, r3, #27
 800c154:	0fdb      	lsrs	r3, r3, #31
 800c156:	b2da      	uxtb	r2, r3
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	01d0      	lsls	r0, r2, #7
 800c15c:	785a      	ldrb	r2, [r3, #1]
 800c15e:	217f      	movs	r1, #127	; 0x7f
 800c160:	400a      	ands	r2, r1
 800c162:	1c11      	adds	r1, r2, #0
 800c164:	1c02      	adds	r2, r0, #0
 800c166:	430a      	orrs	r2, r1
 800c168:	705a      	strb	r2, [r3, #1]
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
    }
#endif  /* USBPD_TYPE_STATE_MACHINE */
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800c16a:	46c0      	nop			; (mov r8, r8)
 800c16c:	46bd      	mov	sp, r7
 800c16e:	b00b      	add	sp, #44	; 0x2c
 800c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c172:	46c0      	nop			; (mov r8, r8)
 800c174:	200016e4 	.word	0x200016e4
 800c178:	20001bcc 	.word	0x20001bcc
 800c17c:	0800c27d 	.word	0x0800c27d

0800c180 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	0002      	movs	r2, r0
 800c188:	1dfb      	adds	r3, r7, #7
 800c18a:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800c18c:	1dfb      	adds	r3, r7, #7
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	0018      	movs	r0, r3
 800c192:	f001 fd99 	bl	800dcc8 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800c196:	1dfb      	adds	r3, r7, #7
 800c198:	7819      	ldrb	r1, [r3, #0]
 800c19a:	4a0c      	ldr	r2, [pc, #48]	; (800c1cc <CAD_Enter_ErrorRecovery+0x4c>)
 800c19c:	000b      	movs	r3, r1
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	185b      	adds	r3, r3, r1
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	5c99      	ldrb	r1, [r3, r2]
 800c1a6:	2080      	movs	r0, #128	; 0x80
 800c1a8:	4240      	negs	r0, r0
 800c1aa:	4301      	orrs	r1, r0
 800c1ac:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800c1ae:	1dfb      	adds	r3, r7, #7
 800c1b0:	781a      	ldrb	r2, [r3, #0]
 800c1b2:	4907      	ldr	r1, [pc, #28]	; (800c1d0 <CAD_Enter_ErrorRecovery+0x50>)
 800c1b4:	0013      	movs	r3, r2
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	1a9b      	subs	r3, r3, r2
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	18cb      	adds	r3, r1, r3
 800c1be:	332c      	adds	r3, #44	; 0x2c
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4798      	blx	r3
}
 800c1c4:	46c0      	nop			; (mov r8, r8)
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	b002      	add	sp, #8
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	200016e4 	.word	0x200016e4
 800c1d0:	20001bcc 	.word	0x20001bcc

0800c1d4 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	0002      	movs	r2, r0
 800c1dc:	6039      	str	r1, [r7, #0]
 800c1de:	1dfb      	adds	r3, r7, #7
 800c1e0:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800c1e2:	1dfb      	adds	r3, r7, #7
 800c1e4:	781a      	ldrb	r2, [r3, #0]
 800c1e6:	4919      	ldr	r1, [pc, #100]	; (800c24c <CAD_SRC_Set_ResistorRp+0x78>)
 800c1e8:	0013      	movs	r3, r2
 800c1ea:	00db      	lsls	r3, r3, #3
 800c1ec:	1a9b      	subs	r3, r3, r2
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	18cb      	adds	r3, r1, r3
 800c1f2:	3310      	adds	r3, #16
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	1c11      	adds	r1, r2, #0
 800c1fa:	2203      	movs	r2, #3
 800c1fc:	400a      	ands	r2, r1
 800c1fe:	b2d2      	uxtb	r2, r2
 800c200:	2103      	movs	r1, #3
 800c202:	400a      	ands	r2, r1
 800c204:	0010      	movs	r0, r2
 800c206:	789a      	ldrb	r2, [r3, #2]
 800c208:	2103      	movs	r1, #3
 800c20a:	438a      	bics	r2, r1
 800c20c:	1c11      	adds	r1, r2, #0
 800c20e:	1c02      	adds	r2, r0, #0
 800c210:	430a      	orrs	r2, r1
 800c212:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800c214:	1dfb      	adds	r3, r7, #7
 800c216:	781a      	ldrb	r2, [r3, #0]
 800c218:	490d      	ldr	r1, [pc, #52]	; (800c250 <CAD_SRC_Set_ResistorRp+0x7c>)
 800c21a:	0013      	movs	r3, r2
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	189b      	adds	r3, r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	18cb      	adds	r3, r1, r3
 800c224:	785a      	ldrb	r2, [r3, #1]
 800c226:	2101      	movs	r1, #1
 800c228:	430a      	orrs	r2, r1
 800c22a:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800c22c:	1dfb      	adds	r3, r7, #7
 800c22e:	781a      	ldrb	r2, [r3, #0]
 800c230:	4906      	ldr	r1, [pc, #24]	; (800c24c <CAD_SRC_Set_ResistorRp+0x78>)
 800c232:	0013      	movs	r3, r2
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	1a9b      	subs	r3, r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	18cb      	adds	r3, r1, r3
 800c23c:	332c      	adds	r3, #44	; 0x2c
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4798      	blx	r3
  return 0;
 800c242:	2300      	movs	r3, #0
}
 800c244:	0018      	movs	r0, r3
 800c246:	46bd      	mov	sp, r7
 800c248:	b002      	add	sp, #8
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	20001bcc 	.word	0x20001bcc
 800c250:	200016e4 	.word	0x200016e4

0800c254 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	0002      	movs	r2, r0
 800c25c:	6039      	str	r1, [r7, #0]
 800c25e:	1dfb      	adds	r3, r7, #7
 800c260:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	1dfb      	adds	r3, r7, #7
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	0011      	movs	r1, r2
 800c26a:	0018      	movs	r0, r3
 800c26c:	f7ff ffb2 	bl	800c1d4 <CAD_SRC_Set_ResistorRp>
 800c270:	0003      	movs	r3, r0
}
 800c272:	0018      	movs	r0, r3
 800c274:	46bd      	mov	sp, r7
 800c276:	b002      	add	sp, #8
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	607a      	str	r2, [r7, #4]
 800c286:	210f      	movs	r1, #15
 800c288:	187b      	adds	r3, r7, r1
 800c28a:	1c02      	adds	r2, r0, #0
 800c28c:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c28e:	187b      	adds	r3, r7, r1
 800c290:	781a      	ldrb	r2, [r3, #0]
 800c292:	0013      	movs	r3, r2
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	189b      	adds	r3, r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4a1b      	ldr	r2, [pc, #108]	; (800c308 <CAD_StateMachine_SNK+0x8c>)
 800c29c:	189b      	adds	r3, r3, r2
 800c29e:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
   BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	785b      	ldrb	r3, [r3, #1]
 800c2a8:	069b      	lsls	r3, r3, #26
 800c2aa:	0edb      	lsrs	r3, r3, #27
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d019      	beq.n	800c2e6 <CAD_StateMachine_SNK+0x6a>
 800c2b2:	dc23      	bgt.n	800c2fc <CAD_StateMachine_SNK+0x80>
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d002      	beq.n	800c2be <CAD_StateMachine_SNK+0x42>
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d009      	beq.n	800c2d0 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

  default:
    {
      break;
 800c2bc:	e01e      	b.n	800c2fc <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 800c2be:	230f      	movs	r3, #15
 800c2c0:	18fb      	adds	r3, r7, r3
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	0018      	movs	r0, r3
 800c2c6:	f000 f9c5 	bl	800c654 <ManageStateDetached_SNK>
 800c2ca:	0003      	movs	r3, r0
 800c2cc:	617b      	str	r3, [r7, #20]
      break;
 800c2ce:	e016      	b.n	800c2fe <CAD_StateMachine_SNK+0x82>
    _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	230f      	movs	r3, #15
 800c2d6:	18fb      	adds	r3, r7, r3
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	0018      	movs	r0, r3
 800c2dc:	f000 fa0c 	bl	800c6f8 <ManageStateAttachedWait_SNK>
 800c2e0:	0003      	movs	r3, r0
 800c2e2:	617b      	str	r3, [r7, #20]
    break;
 800c2e4:	e00b      	b.n	800c2fe <CAD_StateMachine_SNK+0x82>
    _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	68b9      	ldr	r1, [r7, #8]
 800c2ea:	230f      	movs	r3, #15
 800c2ec:	18fb      	adds	r3, r7, r3
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	f000 fa8f 	bl	800c814 <ManageStateAttached_SNK>
 800c2f6:	0003      	movs	r3, r0
 800c2f8:	617b      	str	r3, [r7, #20]
    break;
 800c2fa:	e000      	b.n	800c2fe <CAD_StateMachine_SNK+0x82>
      break;
 800c2fc:	46c0      	nop			; (mov r8, r8)
     _timing = 2;
     break;
    }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800c2fe:	697b      	ldr	r3, [r7, #20]
}
 800c300:	0018      	movs	r0, r3
 800c302:	46bd      	mov	sp, r7
 800c304:	b006      	add	sp, #24
 800c306:	bd80      	pop	{r7, pc}
 800c308:	200016e4 	.word	0x200016e4

0800c30c <CAD_StateMachine>:
#endif /* _DRP */
#endif /* !USBPDCORE_LIB_NO_PD || USBPD_TYPE_STATE_MACHINE */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800c30c:	b590      	push	{r4, r7, lr}
 800c30e:	b089      	sub	sp, #36	; 0x24
 800c310:	af02      	add	r7, sp, #8
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	607a      	str	r2, [r7, #4]
 800c316:	210f      	movs	r1, #15
 800c318:	187b      	adds	r3, r7, r1
 800c31a:	1c02      	adds	r2, r0, #0
 800c31c:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c31e:	187b      	adds	r3, r7, r1
 800c320:	781a      	ldrb	r2, [r3, #0]
 800c322:	0013      	movs	r3, r2
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	189b      	adds	r3, r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4a7a      	ldr	r2, [pc, #488]	; (800c514 <CAD_StateMachine+0x208>)
 800c32c:	189b      	adds	r3, r3, r2
 800c32e:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800c330:	2302      	movs	r3, #2
 800c332:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2200      	movs	r2, #0
 800c338:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800c33a:	187b      	adds	r3, r7, r1
 800c33c:	781a      	ldrb	r2, [r3, #0]
 800c33e:	4976      	ldr	r1, [pc, #472]	; (800c518 <CAD_StateMachine+0x20c>)
 800c340:	0013      	movs	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	1a9b      	subs	r3, r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	18cb      	adds	r3, r1, r3
 800c34a:	3310      	adds	r3, #16
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2210      	movs	r2, #16
 800c352:	4013      	ands	r3, r2
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <CAD_StateMachine+0x52>
  {
    return _timing;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	e0d6      	b.n	800c50c <CAD_StateMachine+0x200>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	227f      	movs	r2, #127	; 0x7f
 800c364:	4393      	bics	r3, r2
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d01b      	beq.n	800c3a4 <CAD_StateMachine+0x98>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	781a      	ldrb	r2, [r3, #0]
 800c370:	217f      	movs	r1, #127	; 0x7f
 800c372:	400a      	ands	r2, r1
 800c374:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	785a      	ldrb	r2, [r3, #1]
 800c37a:	213e      	movs	r1, #62	; 0x3e
 800c37c:	438a      	bics	r2, r1
 800c37e:	1c11      	adds	r1, r2, #0
 800c380:	2218      	movs	r2, #24
 800c382:	430a      	orrs	r2, r1
 800c384:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	785b      	ldrb	r3, [r3, #1]
 800c38a:	069b      	lsls	r3, r3, #26
 800c38c:	0edb      	lsrs	r3, r3, #27
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	001a      	movs	r2, r3
 800c392:	230f      	movs	r3, #15
 800c394:	18fb      	adds	r3, r7, r3
 800c396:	7819      	ldrb	r1, [r3, #0]
 800c398:	2300      	movs	r3, #0
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	2300      	movs	r3, #0
 800c39e:	2005      	movs	r0, #5
 800c3a0:	f002 fadc 	bl	800e95c <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch(_handle->cstate)
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	785b      	ldrb	r3, [r3, #1]
 800c3a8:	069b      	lsls	r3, r3, #26
 800c3aa:	0edb      	lsrs	r3, r3, #27
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b0d      	cmp	r3, #13
 800c3b0:	d05c      	beq.n	800c46c <CAD_StateMachine+0x160>
 800c3b2:	dc72      	bgt.n	800c49a <CAD_StateMachine+0x18e>
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <CAD_StateMachine+0xb2>
 800c3b8:	2b0c      	cmp	r3, #12
 800c3ba:	d02b      	beq.n	800c414 <CAD_StateMachine+0x108>
 800c3bc:	e06d      	b.n	800c49a <CAD_StateMachine+0x18e>
  {
  case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800c3be:	240f      	movs	r4, #15
 800c3c0:	193b      	adds	r3, r7, r4
 800c3c2:	781a      	ldrb	r2, [r3, #0]
 800c3c4:	4954      	ldr	r1, [pc, #336]	; (800c518 <CAD_StateMachine+0x20c>)
 800c3c6:	0013      	movs	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	1a9b      	subs	r3, r3, r2
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	585b      	ldr	r3, [r3, r1]
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	f7ff fdd5 	bl	800bf80 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800c3d6:	193b      	adds	r3, r7, r4
 800c3d8:	781a      	ldrb	r2, [r3, #0]
 800c3da:	494f      	ldr	r1, [pc, #316]	; (800c518 <CAD_StateMachine+0x20c>)
 800c3dc:	0013      	movs	r3, r2
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	1a9b      	subs	r3, r3, r2
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	585b      	ldr	r3, [r3, r1]
 800c3e6:	0018      	movs	r0, r3
 800c3e8:	f7ff fdd9 	bl	800bf9e <LL_UCPD_EnableIT_TypeCEventCC1>
#endif /* !_LOW_POWER */
      if( 0 == PortNum)
 800c3ec:	193b      	adds	r3, r7, r4
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d106      	bne.n	800c402 <CAD_StateMachine+0xf6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	2008      	movs	r0, #8
 800c3f8:	f7ff fd1c 	bl	800be34 <__NVIC_SetPriority>
 800c3fc:	2008      	movs	r0, #8
 800c3fe:	f7ff fcff 	bl	800be00 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	785a      	ldrb	r2, [r3, #1]
 800c406:	213e      	movs	r1, #62	; 0x3e
 800c408:	438a      	bics	r2, r1
 800c40a:	1c11      	adds	r1, r2, #0
 800c40c:	2202      	movs	r2, #2
 800c40e:	430a      	orrs	r2, r1
 800c410:	705a      	strb	r2, [r3, #1]
      break;
 800c412:	e04f      	b.n	800c4b4 <CAD_StateMachine+0x1a8>

  case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800c414:	240f      	movs	r4, #15
 800c416:	193b      	adds	r3, r7, r4
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	0018      	movs	r0, r3
 800c41c:	f001 fc54 	bl	800dcc8 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800c420:	193b      	adds	r3, r7, r4
 800c422:	781a      	ldrb	r2, [r3, #0]
 800c424:	493c      	ldr	r1, [pc, #240]	; (800c518 <CAD_StateMachine+0x20c>)
 800c426:	0013      	movs	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	1a9b      	subs	r3, r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	18cb      	adds	r3, r1, r3
 800c430:	3334      	adds	r3, #52	; 0x34
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	781a      	ldrb	r2, [r3, #0]
 800c440:	2103      	movs	r1, #3
 800c442:	438a      	bics	r2, r1
 800c444:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2201      	movs	r2, #1
 800c44a:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800c44c:	f7fa ffca 	bl	80073e4 <HAL_GetTick>
 800c450:	0002      	movs	r2, r0
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800c456:	231a      	movs	r3, #26
 800c458:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	785a      	ldrb	r2, [r3, #1]
 800c45e:	213e      	movs	r1, #62	; 0x3e
 800c460:	438a      	bics	r2, r1
 800c462:	1c11      	adds	r1, r2, #0
 800c464:	221a      	movs	r2, #26
 800c466:	430a      	orrs	r2, r1
 800c468:	705a      	strb	r2, [r3, #1]
      break;
 800c46a:	e023      	b.n	800c4b4 <CAD_StateMachine+0x1a8>
    }

  case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800c46c:	f7fa ffba 	bl	80073e4 <HAL_GetTick>
 800c470:	0002      	movs	r2, r0
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	2b1a      	cmp	r3, #26
 800c47a:	d91a      	bls.n	800c4b2 <CAD_StateMachine+0x1a6>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK)
        {
          USBPDM1_AssertRd(PortNum);
 800c47c:	230f      	movs	r3, #15
 800c47e:	18fb      	adds	r3, r7, r3
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	0018      	movs	r0, r3
 800c484:	f001 fb70 	bl	800db68 <USBPDM1_AssertRd>
#endif /* _SNK */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	785a      	ldrb	r2, [r3, #1]
 800c48c:	213e      	movs	r1, #62	; 0x3e
 800c48e:	438a      	bics	r2, r1
 800c490:	1c11      	adds	r1, r2, #0
 800c492:	2202      	movs	r2, #2
 800c494:	430a      	orrs	r2, r1
 800c496:	705a      	strb	r2, [r3, #1]
      }
      break;
 800c498:	e00b      	b.n	800c4b2 <CAD_StateMachine+0x1a6>
    }

  default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	687c      	ldr	r4, [r7, #4]
 800c4a0:	68b9      	ldr	r1, [r7, #8]
 800c4a2:	220f      	movs	r2, #15
 800c4a4:	18ba      	adds	r2, r7, r2
 800c4a6:	7810      	ldrb	r0, [r2, #0]
 800c4a8:	0022      	movs	r2, r4
 800c4aa:	4798      	blx	r3
 800c4ac:	0003      	movs	r3, r0
 800c4ae:	617b      	str	r3, [r7, #20]
      break;
 800c4b0:	e000      	b.n	800c4b4 <CAD_StateMachine+0x1a8>
      break;
 800c4b2:	46c0      	nop			; (mov r8, r8)
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	785b      	ldrb	r3, [r3, #1]
 800c4b8:	069b      	lsls	r3, r3, #26
 800c4ba:	0edb      	lsrs	r3, r3, #27
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	789b      	ldrb	r3, [r3, #2]
 800c4c2:	069b      	lsls	r3, r3, #26
 800c4c4:	0edb      	lsrs	r3, r3, #27
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d01e      	beq.n	800c50a <CAD_StateMachine+0x1fe>
  {
    _handle->pstate = _handle->cstate;
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	785b      	ldrb	r3, [r3, #1]
 800c4d0:	069b      	lsls	r3, r3, #26
 800c4d2:	0edb      	lsrs	r3, r3, #27
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	211f      	movs	r1, #31
 800c4da:	400a      	ands	r2, r1
 800c4dc:	1890      	adds	r0, r2, r2
 800c4de:	789a      	ldrb	r2, [r3, #2]
 800c4e0:	213e      	movs	r1, #62	; 0x3e
 800c4e2:	438a      	bics	r2, r1
 800c4e4:	1c11      	adds	r1, r2, #0
 800c4e6:	1c02      	adds	r2, r0, #0
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	709a      	strb	r2, [r3, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	785b      	ldrb	r3, [r3, #1]
 800c4f0:	069b      	lsls	r3, r3, #26
 800c4f2:	0edb      	lsrs	r3, r3, #27
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	001a      	movs	r2, r3
 800c4f8:	230f      	movs	r3, #15
 800c4fa:	18fb      	adds	r3, r7, r3
 800c4fc:	7819      	ldrb	r1, [r3, #0]
 800c4fe:	2300      	movs	r3, #0
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	2300      	movs	r3, #0
 800c504:	2005      	movs	r0, #5
 800c506:	f002 fa29 	bl	800e95c <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800c50a:	697b      	ldr	r3, [r7, #20]
}
 800c50c:	0018      	movs	r0, r3
 800c50e:	46bd      	mov	sp, r7
 800c510:	b007      	add	sp, #28
 800c512:	bd90      	pop	{r4, r7, pc}
 800c514:	200016e4 	.word	0x200016e4
 800c518:	20001bcc 	.word	0x20001bcc

0800c51c <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	0002      	movs	r2, r0
 800c524:	1dfb      	adds	r3, r7, #7
 800c526:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c528:	1dfb      	adds	r3, r7, #7
 800c52a:	781a      	ldrb	r2, [r3, #0]
 800c52c:	0013      	movs	r3, r2
 800c52e:	005b      	lsls	r3, r3, #1
 800c530:	189b      	adds	r3, r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4a45      	ldr	r2, [pc, #276]	; (800c64c <CAD_Check_HW_SNK+0x130>)
 800c536:	189b      	adds	r3, r3, r2
 800c538:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800c53a:	1dfb      	adds	r3, r7, #7
 800c53c:	781a      	ldrb	r2, [r3, #0]
 800c53e:	4944      	ldr	r1, [pc, #272]	; (800c650 <CAD_Check_HW_SNK+0x134>)
 800c540:	0013      	movs	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	1a9b      	subs	r3, r3, r2
 800c546:	00db      	lsls	r3, r3, #3
 800c548:	585b      	ldr	r3, [r3, r1]
 800c54a:	695a      	ldr	r2, [r3, #20]
 800c54c:	23c0      	movs	r3, #192	; 0xc0
 800c54e:	029b      	lsls	r3, r3, #10
 800c550:	4013      	ands	r3, r2
 800c552:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800c554:	1dfb      	adds	r3, r7, #7
 800c556:	781a      	ldrb	r2, [r3, #0]
 800c558:	493d      	ldr	r1, [pc, #244]	; (800c650 <CAD_Check_HW_SNK+0x134>)
 800c55a:	0013      	movs	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	1a9b      	subs	r3, r3, r2
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	585b      	ldr	r3, [r3, r1]
 800c564:	695a      	ldr	r2, [r3, #20]
 800c566:	23c0      	movs	r3, #192	; 0xc0
 800c568:	031b      	lsls	r3, r3, #12
 800c56a:	4013      	ands	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER */

  _handle->cc  = CCNONE;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	781a      	ldrb	r2, [r3, #0]
 800c572:	2103      	movs	r1, #3
 800c574:	438a      	bics	r2, r1
 800c576:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	781a      	ldrb	r2, [r3, #0]
 800c57c:	211c      	movs	r1, #28
 800c57e:	438a      	bics	r2, r1
 800c580:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d02c      	beq.n	800c5e2 <CAD_Check_HW_SNK+0xc6>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d129      	bne.n	800c5e2 <CAD_Check_HW_SNK+0xc6>
  {
      _handle->CurrentHWcondition = HW_Attachment;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	781a      	ldrb	r2, [r3, #0]
 800c592:	211c      	movs	r1, #28
 800c594:	438a      	bics	r2, r1
 800c596:	1c11      	adds	r1, r2, #0
 800c598:	2204      	movs	r2, #4
 800c59a:	430a      	orrs	r2, r1
 800c59c:	701a      	strb	r2, [r3, #0]
      _handle->cc = CC1;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	781a      	ldrb	r2, [r3, #0]
 800c5a2:	2103      	movs	r1, #3
 800c5a4:	438a      	bics	r2, r1
 800c5a6:	1c11      	adds	r1, r2, #0
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	701a      	strb	r2, [r3, #0]
      Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	0c18      	lsrs	r0, r3, #16
 800c5b2:	1dfb      	adds	r3, r7, #7
 800c5b4:	781a      	ldrb	r2, [r3, #0]
 800c5b6:	4926      	ldr	r1, [pc, #152]	; (800c650 <CAD_Check_HW_SNK+0x134>)
 800c5b8:	0013      	movs	r3, r2
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	1a9b      	subs	r3, r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	18cb      	adds	r3, r1, r3
 800c5c2:	3310      	adds	r3, #16
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	1c01      	adds	r1, r0, #0
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	400a      	ands	r2, r1
 800c5cc:	b2d2      	uxtb	r2, r2
 800c5ce:	2103      	movs	r1, #3
 800c5d0:	400a      	ands	r2, r1
 800c5d2:	0090      	lsls	r0, r2, #2
 800c5d4:	789a      	ldrb	r2, [r3, #2]
 800c5d6:	210c      	movs	r1, #12
 800c5d8:	438a      	bics	r2, r1
 800c5da:	1c11      	adds	r1, r2, #0
 800c5dc:	1c02      	adds	r2, r0, #0
 800c5de:	430a      	orrs	r2, r1
 800c5e0:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d12c      	bne.n	800c642 <CAD_Check_HW_SNK+0x126>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d029      	beq.n	800c642 <CAD_Check_HW_SNK+0x126>
  {
      _handle->CurrentHWcondition = HW_Attachment;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	781a      	ldrb	r2, [r3, #0]
 800c5f2:	211c      	movs	r1, #28
 800c5f4:	438a      	bics	r2, r1
 800c5f6:	1c11      	adds	r1, r2, #0
 800c5f8:	2204      	movs	r2, #4
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	701a      	strb	r2, [r3, #0]
      _handle->cc = CC2;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	781a      	ldrb	r2, [r3, #0]
 800c602:	2103      	movs	r1, #3
 800c604:	438a      	bics	r2, r1
 800c606:	1c11      	adds	r1, r2, #0
 800c608:	2202      	movs	r2, #2
 800c60a:	430a      	orrs	r2, r1
 800c60c:	701a      	strb	r2, [r3, #0]
      Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	0c98      	lsrs	r0, r3, #18
 800c612:	1dfb      	adds	r3, r7, #7
 800c614:	781a      	ldrb	r2, [r3, #0]
 800c616:	490e      	ldr	r1, [pc, #56]	; (800c650 <CAD_Check_HW_SNK+0x134>)
 800c618:	0013      	movs	r3, r2
 800c61a:	00db      	lsls	r3, r3, #3
 800c61c:	1a9b      	subs	r3, r3, r2
 800c61e:	00db      	lsls	r3, r3, #3
 800c620:	18cb      	adds	r3, r1, r3
 800c622:	3310      	adds	r3, #16
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	1c01      	adds	r1, r0, #0
 800c628:	2203      	movs	r2, #3
 800c62a:	400a      	ands	r2, r1
 800c62c:	b2d2      	uxtb	r2, r2
 800c62e:	2103      	movs	r1, #3
 800c630:	400a      	ands	r2, r1
 800c632:	0090      	lsls	r0, r2, #2
 800c634:	789a      	ldrb	r2, [r3, #2]
 800c636:	210c      	movs	r1, #12
 800c638:	438a      	bics	r2, r1
 800c63a:	1c11      	adds	r1, r2, #0
 800c63c:	1c02      	adds	r2, r0, #0
 800c63e:	430a      	orrs	r2, r1
 800c640:	709a      	strb	r2, [r3, #2]
  }
}
 800c642:	46c0      	nop			; (mov r8, r8)
 800c644:	46bd      	mov	sp, r7
 800c646:	b006      	add	sp, #24
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	200016e4 	.word	0x200016e4
 800c650:	20001bcc 	.word	0x20001bcc

0800c654 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	0002      	movs	r2, r0
 800c65c:	1dfb      	adds	r3, r7, #7
 800c65e:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c660:	1dfb      	adds	r3, r7, #7
 800c662:	781a      	ldrb	r2, [r3, #0]
 800c664:	0013      	movs	r3, r2
 800c666:	005b      	lsls	r3, r3, #1
 800c668:	189b      	adds	r3, r3, r2
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	4a21      	ldr	r2, [pc, #132]	; (800c6f4 <ManageStateDetached_SNK+0xa0>)
 800c66e:	189b      	adds	r3, r3, r2
 800c670:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800c672:	2302      	movs	r3, #2
 800c674:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 800c676:	1dfb      	adds	r3, r7, #7
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	0018      	movs	r0, r3
 800c67c:	f7ff ff4e 	bl	800c51c <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	221c      	movs	r2, #28
 800c686:	4013      	ands	r3, r2
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d103      	bne.n	800c696 <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800c68e:	2301      	movs	r3, #1
 800c690:	425b      	negs	r3, r3
 800c692:	60fb      	str	r3, [r7, #12]
 800c694:	e029      	b.n	800c6ea <ManageStateDetached_SNK+0x96>
#endif /* _SNK && _ACCESSORY */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800c696:	f7fa fea5 	bl	80073e4 <HAL_GetTick>
 800c69a:	0002      	movs	r2, r0
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	785a      	ldrb	r2, [r3, #1]
 800c6a4:	213e      	movs	r1, #62	; 0x3e
 800c6a6:	438a      	bics	r2, r1
 800c6a8:	1c11      	adds	r1, r2, #0
 800c6aa:	2204      	movs	r2, #4
 800c6ac:	430a      	orrs	r2, r1
 800c6ae:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f7fa fea1 	bl	80073f8 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800c6b6:	1dfb      	adds	r3, r7, #7
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	0018      	movs	r0, r3
 800c6bc:	f7ff ff2e 	bl	800c51c <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	221c      	movs	r2, #28
 800c6c6:	4013      	ands	r3, r2
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d108      	bne.n	800c6e0 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	785a      	ldrb	r2, [r3, #1]
 800c6d2:	213e      	movs	r1, #62	; 0x3e
 800c6d4:	438a      	bics	r2, r1
 800c6d6:	1c11      	adds	r1, r2, #0
 800c6d8:	2202      	movs	r2, #2
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	705a      	strb	r2, [r3, #1]
 800c6de:	e004      	b.n	800c6ea <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800c6e0:	1dfb      	adds	r3, r7, #7
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	f003 fe65 	bl	80103b4 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
}
 800c6ec:	0018      	movs	r0, r3
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	b004      	add	sp, #16
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200016e4 	.word	0x200016e4

0800c6f8 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800c6f8:	b590      	push	{r4, r7, lr}
 800c6fa:	b089      	sub	sp, #36	; 0x24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60b9      	str	r1, [r7, #8]
 800c700:	607a      	str	r2, [r7, #4]
 800c702:	240f      	movs	r4, #15
 800c704:	193b      	adds	r3, r7, r4
 800c706:	1c02      	adds	r2, r0, #0
 800c708:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c70a:	193b      	adds	r3, r7, r4
 800c70c:	781a      	ldrb	r2, [r3, #0]
 800c70e:	0013      	movs	r3, r2
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	189b      	adds	r3, r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4a3e      	ldr	r2, [pc, #248]	; (800c810 <ManageStateAttachedWait_SNK+0x118>)
 800c718:	189b      	adds	r3, r3, r2
 800c71a:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800c71c:	2302      	movs	r3, #2
 800c71e:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800c720:	f7fa fe60 	bl	80073e4 <HAL_GetTick>
 800c724:	0002      	movs	r2, r0
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 800c72e:	193b      	adds	r3, r7, r4
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	0018      	movs	r0, r3
 800c734:	f7ff fef2 	bl	800c51c <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	221c      	movs	r2, #28
 800c73e:	4013      	ands	r3, r2
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b04      	cmp	r3, #4
 800c744:	d130      	bne.n	800c7a8 <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	2b78      	cmp	r3, #120	; 0x78
 800c74a:	d927      	bls.n	800c79c <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800c74c:	193b      	adds	r3, r7, r4
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2101      	movs	r1, #1
 800c752:	0018      	movs	r0, r3
 800c754:	f003 fdc6 	bl	80102e4 <USBPD_PWR_IF_GetVBUSStatus>
 800c758:	0003      	movs	r3, r0
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d11e      	bne.n	800c79c <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	079b      	lsls	r3, r3, #30
 800c764:	0f9b      	lsrs	r3, r3, #30
 800c766:	b2db      	uxtb	r3, r3
 800c768:	001a      	movs	r2, r3
 800c76a:	193b      	adds	r3, r7, r4
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	0011      	movs	r1, r2
 800c770:	0018      	movs	r0, r3
 800c772:	f001 fb2f 	bl	800ddd4 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	785a      	ldrb	r2, [r3, #1]
 800c77a:	213e      	movs	r1, #62	; 0x3e
 800c77c:	438a      	bics	r2, r1
 800c77e:	1c11      	adds	r1, r2, #0
 800c780:	2206      	movs	r2, #6
 800c782:	430a      	orrs	r2, r1
 800c784:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	2202      	movs	r2, #2
 800c78a:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	079b      	lsls	r3, r3, #30
 800c792:	0f9b      	lsrs	r3, r3, #30
 800c794:	b2db      	uxtb	r3, r3
 800c796:	001a      	movs	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	781a      	ldrb	r2, [r3, #0]
 800c7a0:	2120      	movs	r1, #32
 800c7a2:	438a      	bics	r2, r1
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	e02e      	b.n	800c806 <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	2220      	movs	r2, #32
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10c      	bne.n	800c7d0 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800c7b6:	f7fa fe15 	bl	80073e4 <HAL_GetTick>
 800c7ba:	0002      	movs	r2, r0
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	781a      	ldrb	r2, [r3, #0]
 800c7c4:	2120      	movs	r1, #32
 800c7c6:	430a      	orrs	r2, r1
 800c7c8:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 800c7ca:	230c      	movs	r3, #12
 800c7cc:	61fb      	str	r3, [r7, #28]
 800c7ce:	e01a      	b.n	800c806 <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 800c7d0:	f7fa fe08 	bl	80073e4 <HAL_GetTick>
 800c7d4:	0002      	movs	r2, r0
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	1ad3      	subs	r3, r2, r3
 800c7dc:	2b0c      	cmp	r3, #12
 800c7de:	d912      	bls.n	800c806 <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	781a      	ldrb	r2, [r3, #0]
 800c7e4:	2120      	movs	r1, #32
 800c7e6:	438a      	bics	r2, r1
 800c7e8:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	785a      	ldrb	r2, [r3, #1]
 800c7ee:	213e      	movs	r1, #62	; 0x3e
 800c7f0:	438a      	bics	r2, r1
 800c7f2:	1c11      	adds	r1, r2, #0
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800c7fa:	230f      	movs	r3, #15
 800c7fc:	18fb      	adds	r3, r7, r3
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	0018      	movs	r0, r3
 800c802:	f003 fdf5 	bl	80103f0 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 800c806:	69fb      	ldr	r3, [r7, #28]
}
 800c808:	0018      	movs	r0, r3
 800c80a:	46bd      	mov	sp, r7
 800c80c:	b009      	add	sp, #36	; 0x24
 800c80e:	bd90      	pop	{r4, r7, pc}
 800c810:	200016e4 	.word	0x200016e4

0800c814 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800c814:	b590      	push	{r4, r7, lr}
 800c816:	b089      	sub	sp, #36	; 0x24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60b9      	str	r1, [r7, #8]
 800c81c:	607a      	str	r2, [r7, #4]
 800c81e:	210f      	movs	r1, #15
 800c820:	187b      	adds	r3, r7, r1
 800c822:	1c02      	adds	r2, r0, #0
 800c824:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800c826:	0008      	movs	r0, r1
 800c828:	183b      	adds	r3, r7, r0
 800c82a:	781a      	ldrb	r2, [r3, #0]
 800c82c:	0013      	movs	r3, r2
 800c82e:	005b      	lsls	r3, r3, #1
 800c830:	189b      	adds	r3, r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4a2e      	ldr	r2, [pc, #184]	; (800c8f0 <ManageStateAttached_SNK+0xdc>)
 800c836:	189b      	adds	r3, r3, r2
 800c838:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800c83a:	2302      	movs	r3, #2
 800c83c:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 800c83e:	2300      	movs	r3, #0
 800c840:	617b      	str	r3, [r7, #20]
  CLEAR_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);

  for(int32_t index=0; index < 200/2; index++){ __DSB();};
#endif

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800c842:	183b      	adds	r3, r7, r0
 800c844:	781a      	ldrb	r2, [r3, #0]
 800c846:	492b      	ldr	r1, [pc, #172]	; (800c8f4 <ManageStateAttached_SNK+0xe0>)
 800c848:	0013      	movs	r3, r2
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	1a9b      	subs	r3, r3, r2
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	18cb      	adds	r3, r1, r3
 800c852:	3334      	adds	r3, #52	; 0x34
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d10c      	bne.n	800c874 <ManageStateAttached_SNK+0x60>
 800c85a:	183b      	adds	r3, r7, r0
 800c85c:	781a      	ldrb	r2, [r3, #0]
 800c85e:	4925      	ldr	r1, [pc, #148]	; (800c8f4 <ManageStateAttached_SNK+0xe0>)
 800c860:	0013      	movs	r3, r2
 800c862:	00db      	lsls	r3, r3, #3
 800c864:	1a9b      	subs	r3, r3, r2
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	585b      	ldr	r3, [r3, r1]
 800c86a:	695a      	ldr	r2, [r3, #20]
 800c86c:	23c0      	movs	r3, #192	; 0xc0
 800c86e:	029b      	lsls	r3, r3, #10
 800c870:	4013      	ands	r3, r2
 800c872:	e00c      	b.n	800c88e <ManageStateAttached_SNK+0x7a>
 800c874:	230f      	movs	r3, #15
 800c876:	18fb      	adds	r3, r7, r3
 800c878:	781a      	ldrb	r2, [r3, #0]
 800c87a:	491e      	ldr	r1, [pc, #120]	; (800c8f4 <ManageStateAttached_SNK+0xe0>)
 800c87c:	0013      	movs	r3, r2
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	1a9b      	subs	r3, r3, r2
 800c882:	00db      	lsls	r3, r3, #3
 800c884:	585b      	ldr	r3, [r3, r1]
 800c886:	695a      	ldr	r2, [r3, #20]
 800c888:	23c0      	movs	r3, #192	; 0xc0
 800c88a:	031b      	lsls	r3, r3, #12
 800c88c:	4013      	ands	r3, r2
 800c88e:	613b      	str	r3, [r7, #16]
  if((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
 800c890:	240f      	movs	r4, #15
 800c892:	193b      	adds	r3, r7, r4
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2102      	movs	r1, #2
 800c898:	0018      	movs	r0, r3
 800c89a:	f003 fd23 	bl	80102e4 <USBPD_PWR_IF_GetVBUSStatus>
 800c89e:	0003      	movs	r3, r0
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d11e      	bne.n	800c8e2 <ManageStateAttached_SNK+0xce>
    &&
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d11a      	bne.n	800c8e2 <ManageStateAttached_SNK+0xce>
     (comp == ccx)                                                            /* confirm that there is no RP */
    )
  {
    HW_SignalDetachment(PortNum);
 800c8ac:	193b      	adds	r3, r7, r4
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	0018      	movs	r0, r3
 800c8b2:	f001 fbf1 	bl	800e098 <HW_SignalDetachment>
    /* restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	781a      	ldrb	r2, [r3, #0]
 800c8ba:	211c      	movs	r1, #28
 800c8bc:	438a      	bics	r2, r1
 800c8be:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	785a      	ldrb	r2, [r3, #1]
 800c8c4:	213e      	movs	r1, #62	; 0x3e
 800c8c6:	438a      	bics	r2, r1
 800c8c8:	1c11      	adds	r1, r2, #0
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	430a      	orrs	r2, r1
 800c8ce:	705a      	strb	r2, [r3, #1]
    if(USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	601a      	str	r2, [r3, #0]
    _timing = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	61fb      	str	r3, [r7, #28]
 800c8e0:	e001      	b.n	800c8e6 <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800c8e2:	230a      	movs	r3, #10
 800c8e4:	61fb      	str	r3, [r7, #28]
  }

  return _timing;
 800c8e6:	69fb      	ldr	r3, [r7, #28]
}
 800c8e8:	0018      	movs	r0, r3
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	b009      	add	sp, #36	; 0x24
 800c8ee:	bd90      	pop	{r4, r7, pc}
 800c8f0:	200016e4 	.word	0x200016e4
 800c8f4:	20001bcc 	.word	0x20001bcc

0800c8f8 <LL_AHB1_GRP1_EnableClock>:
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800c900:	4b07      	ldr	r3, [pc, #28]	; (800c920 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c902:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c904:	4b06      	ldr	r3, [pc, #24]	; (800c920 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	430a      	orrs	r2, r1
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800c90c:	4b04      	ldr	r3, [pc, #16]	; (800c920 <LL_AHB1_GRP1_EnableClock+0x28>)
 800c90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	4013      	ands	r3, r2
 800c914:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c916:	68fb      	ldr	r3, [r7, #12]
}
 800c918:	46c0      	nop			; (mov r8, r8)
 800c91a:	46bd      	mov	sp, r7
 800c91c:	b004      	add	sp, #16
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	40021000 	.word	0x40021000

0800c924 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	0002      	movs	r2, r0
 800c92c:	1dfb      	adds	r3, r7, #7
 800c92e:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 800c930:	4b02      	ldr	r3, [pc, #8]	; (800c93c <USBPD_HW_GetUSPDInstance+0x18>)
#endif
}
 800c932:	0018      	movs	r0, r3
 800c934:	46bd      	mov	sp, r7
 800c936:	b002      	add	sp, #8
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	46c0      	nop			; (mov r8, r8)
 800c93c:	4000a000 	.word	0x4000a000

0800c940 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800c940:	b590      	push	{r4, r7, lr}
 800c942:	b08f      	sub	sp, #60	; 0x3c
 800c944:	af00      	add	r7, sp, #0
 800c946:	0002      	movs	r2, r0
 800c948:	1dfb      	adds	r3, r7, #7
 800c94a:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800c94c:	240c      	movs	r4, #12
 800c94e:	193b      	adds	r3, r7, r4
 800c950:	0018      	movs	r0, r3
 800c952:	f7fc ff8b 	bl	800986c <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800c956:	193b      	adds	r3, r7, r4
 800c958:	2200      	movs	r2, #0
 800c95a:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800c95c:	193b      	adds	r3, r7, r4
 800c95e:	2200      	movs	r2, #0
 800c960:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800c962:	193b      	adds	r3, r7, r4
 800c964:	2200      	movs	r2, #0
 800c966:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800c968:	193b      	adds	r3, r7, r4
 800c96a:	2280      	movs	r2, #128	; 0x80
 800c96c:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800c96e:	193b      	adds	r3, r7, r4
 800c970:	2200      	movs	r2, #0
 800c972:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800c974:	193b      	adds	r3, r7, r4
 800c976:	2200      	movs	r2, #0
 800c978:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800c97a:	193b      	adds	r3, r7, r4
 800c97c:	2200      	movs	r2, #0
 800c97e:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800c980:	193b      	adds	r3, r7, r4
 800c982:	2200      	movs	r2, #0
 800c984:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800c986:	193b      	adds	r3, r7, r4
 800c988:	2200      	movs	r2, #0
 800c98a:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800c98c:	193b      	adds	r3, r7, r4
 800c98e:	2280      	movs	r2, #128	; 0x80
 800c990:	0192      	lsls	r2, r2, #6
 800c992:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 800c994:	1dfb      	adds	r3, r7, #7
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10c      	bne.n	800c9b6 <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800c99c:	2001      	movs	r0, #1
 800c99e:	f7ff ffab 	bl	800c8f8 <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800c9a2:	193b      	adds	r3, r7, r4
 800c9a4:	223a      	movs	r2, #58	; 0x3a
 800c9a6:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800c9a8:	193b      	adds	r3, r7, r4
 800c9aa:	4806      	ldr	r0, [pc, #24]	; (800c9c4 <USBPD_HW_Init_DMARxInstance+0x84>)
 800c9ac:	001a      	movs	r2, r3
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	f7fc ff1c 	bl	80097ec <LL_DMA_Init>
      break;
 800c9b4:	e000      	b.n	800c9b8 <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif
    default:
      break;
 800c9b6:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800c9b8:	4b03      	ldr	r3, [pc, #12]	; (800c9c8 <USBPD_HW_Init_DMARxInstance+0x88>)
#endif
}
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	b00f      	add	sp, #60	; 0x3c
 800c9c0:	bd90      	pop	{r4, r7, pc}
 800c9c2:	46c0      	nop			; (mov r8, r8)
 800c9c4:	40020000 	.word	0x40020000
 800c9c8:	40020008 	.word	0x40020008

0800c9cc <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	0002      	movs	r2, r0
 800c9d4:	1dfb      	adds	r3, r7, #7
 800c9d6:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800c9d8:	46c0      	nop			; (mov r8, r8)
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b002      	add	sp, #8
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800c9e0:	b590      	push	{r4, r7, lr}
 800c9e2:	b08f      	sub	sp, #60	; 0x3c
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	0002      	movs	r2, r0
 800c9e8:	1dfb      	adds	r3, r7, #7
 800c9ea:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800c9ec:	240c      	movs	r4, #12
 800c9ee:	193b      	adds	r3, r7, r4
 800c9f0:	0018      	movs	r0, r3
 800c9f2:	f7fc ff3b 	bl	800986c <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800c9f6:	193b      	adds	r3, r7, r4
 800c9f8:	2210      	movs	r2, #16
 800c9fa:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800c9fc:	193b      	adds	r3, r7, r4
 800c9fe:	2200      	movs	r2, #0
 800ca00:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800ca02:	193b      	adds	r3, r7, r4
 800ca04:	2200      	movs	r2, #0
 800ca06:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800ca08:	193b      	adds	r3, r7, r4
 800ca0a:	2280      	movs	r2, #128	; 0x80
 800ca0c:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800ca0e:	193b      	adds	r3, r7, r4
 800ca10:	2200      	movs	r2, #0
 800ca12:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800ca14:	193b      	adds	r3, r7, r4
 800ca16:	2200      	movs	r2, #0
 800ca18:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800ca1a:	193b      	adds	r3, r7, r4
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800ca20:	193b      	adds	r3, r7, r4
 800ca22:	2200      	movs	r2, #0
 800ca24:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800ca26:	193b      	adds	r3, r7, r4
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 800ca2c:	1dfb      	adds	r3, r7, #7
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d110      	bne.n	800ca56 <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800ca34:	2001      	movs	r0, #1
 800ca36:	f7ff ff5f 	bl	800c8f8 <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800ca3a:	193b      	adds	r3, r7, r4
 800ca3c:	223b      	movs	r2, #59	; 0x3b
 800ca3e:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800ca40:	193b      	adds	r3, r7, r4
 800ca42:	2280      	movs	r2, #128	; 0x80
 800ca44:	0152      	lsls	r2, r2, #5
 800ca46:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800ca48:	193b      	adds	r3, r7, r4
 800ca4a:	4806      	ldr	r0, [pc, #24]	; (800ca64 <USBPD_HW_Init_DMATxInstance+0x84>)
 800ca4c:	001a      	movs	r2, r3
 800ca4e:	2101      	movs	r1, #1
 800ca50:	f7fc fecc 	bl	80097ec <LL_DMA_Init>
      break;
 800ca54:	e000      	b.n	800ca58 <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif
    default:
      break;
 800ca56:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800ca58:	4b03      	ldr	r3, [pc, #12]	; (800ca68 <USBPD_HW_Init_DMATxInstance+0x88>)
#endif
}
 800ca5a:	0018      	movs	r0, r3
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	b00f      	add	sp, #60	; 0x3c
 800ca60:	bd90      	pop	{r4, r7, pc}
 800ca62:	46c0      	nop			; (mov r8, r8)
 800ca64:	40020000 	.word	0x40020000
 800ca68:	4002001c 	.word	0x4002001c

0800ca6c <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	0002      	movs	r2, r0
 800ca74:	1dfb      	adds	r3, r7, #7
 800ca76:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800ca78:	46c0      	nop			; (mov r8, r8)
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	b002      	add	sp, #8
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	0002      	movs	r2, r0
 800ca88:	1dfb      	adds	r3, r7, #7
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	1dbb      	adds	r3, r7, #6
 800ca8e:	1c0a      	adds	r2, r1, #0
 800ca90:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif
    default:
      break;
 800ca92:	46c0      	nop			; (mov r8, r8)
  }
}
 800ca94:	46c0      	nop			; (mov r8, r8)
 800ca96:	46bd      	mov	sp, r7
 800ca98:	b002      	add	sp, #8
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <LL_UCPD_ClearFlag_FRS>:
  * @rmtoll ICR          FRSEVTIE         LL_UCPD_ClearFlag_FRS
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_FRS(UCPD_TypeDef *UCPDx)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_FRSEVTCF);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	699b      	ldr	r3, [r3, #24]
 800caa8:	2280      	movs	r2, #128	; 0x80
 800caaa:	0352      	lsls	r2, r2, #13
 800caac:	431a      	orrs	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	619a      	str	r2, [r3, #24]
}
 800cab2:	46c0      	nop			; (mov r8, r8)
 800cab4:	46bd      	mov	sp, r7
 800cab6:	b002      	add	sp, #8
 800cab8:	bd80      	pop	{r7, pc}

0800caba <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	2280      	movs	r2, #128	; 0x80
 800cac8:	0212      	lsls	r2, r2, #8
 800caca:	431a      	orrs	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	619a      	str	r2, [r3, #24]
}
 800cad0:	46c0      	nop			; (mov r8, r8)
 800cad2:	46bd      	mov	sp, r7
 800cad4:	b002      	add	sp, #8
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	699b      	ldr	r3, [r3, #24]
 800cae4:	2280      	movs	r2, #128	; 0x80
 800cae6:	01d2      	lsls	r2, r2, #7
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	619a      	str	r2, [r3, #24]
}
 800caee:	46c0      	nop			; (mov r8, r8)
 800caf0:	46bd      	mov	sp, r7
 800caf2:	b002      	add	sp, #8
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	2280      	movs	r2, #128	; 0x80
 800cb04:	0152      	lsls	r2, r2, #5
 800cb06:	431a      	orrs	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	619a      	str	r2, [r3, #24]
}
 800cb0c:	46c0      	nop			; (mov r8, r8)
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	b002      	add	sp, #8
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	699b      	ldr	r3, [r3, #24]
 800cb20:	2280      	movs	r2, #128	; 0x80
 800cb22:	0112      	lsls	r2, r2, #4
 800cb24:	431a      	orrs	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	619a      	str	r2, [r3, #24]
}
 800cb2a:	46c0      	nop			; (mov r8, r8)
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	b002      	add	sp, #8
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b082      	sub	sp, #8
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	2280      	movs	r2, #128	; 0x80
 800cb40:	00d2      	lsls	r2, r2, #3
 800cb42:	431a      	orrs	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	619a      	str	r2, [r3, #24]
}
 800cb48:	46c0      	nop			; (mov r8, r8)
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	b002      	add	sp, #8
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	2280      	movs	r2, #128	; 0x80
 800cb5e:	0092      	lsls	r2, r2, #2
 800cb60:	431a      	orrs	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	619a      	str	r2, [r3, #24]
}
 800cb66:	46c0      	nop			; (mov r8, r8)
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	b002      	add	sp, #8
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b082      	sub	sp, #8
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	2240      	movs	r2, #64	; 0x40
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	619a      	str	r2, [r3, #24]
}
 800cb82:	46c0      	nop			; (mov r8, r8)
 800cb84:	46bd      	mov	sp, r7
 800cb86:	b002      	add	sp, #8
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	2220      	movs	r2, #32
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	619a      	str	r2, [r3, #24]
}
 800cb9e:	46c0      	nop			; (mov r8, r8)
 800cba0:	46bd      	mov	sp, r7
 800cba2:	b002      	add	sp, #8
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	2210      	movs	r2, #16
 800cbb4:	431a      	orrs	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	619a      	str	r2, [r3, #24]
}
 800cbba:	46c0      	nop			; (mov r8, r8)
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	b002      	add	sp, #8
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	2208      	movs	r2, #8
 800cbd0:	431a      	orrs	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	619a      	str	r2, [r3, #24]
}
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	b002      	add	sp, #8
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	2204      	movs	r2, #4
 800cbec:	431a      	orrs	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	619a      	str	r2, [r3, #24]
}
 800cbf2:	46c0      	nop			; (mov r8, r8)
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	b002      	add	sp, #8
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b082      	sub	sp, #8
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	2202      	movs	r2, #2
 800cc08:	431a      	orrs	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	619a      	str	r2, [r3, #24]
}
 800cc0e:	46c0      	nop			; (mov r8, r8)
 800cc10:	46bd      	mov	sp, r7
 800cc12:	b002      	add	sp, #8
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	f000 f804 	bl	800cc28 <PORTx_IRQHandler>
}
 800cc20:	46c0      	nop			; (mov r8, r8)
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	0002      	movs	r2, r0
 800cc30:	1dfb      	adds	r3, r7, #7
 800cc32:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800cc34:	1dfb      	adds	r3, r7, #7
 800cc36:	781a      	ldrb	r2, [r3, #0]
 800cc38:	49ce      	ldr	r1, [pc, #824]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cc3a:	0013      	movs	r3, r2
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	1a9b      	subs	r3, r3, r2
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	585b      	ldr	r3, [r3, r1]
 800cc44:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0,0};

  if ((hucpd->IMR & _interrupt) != 0u)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	4013      	ands	r3, r2
 800cc54:	d100      	bne.n	800cc58 <PORTx_IRQHandler+0x30>
 800cc56:	e1b8      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2202      	movs	r2, #2
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	d02c      	beq.n	800ccba <PORTx_IRQHandler+0x92>
    {
      /* the message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	0018      	movs	r0, r3
 800cc64:	f7ff ffc9 	bl	800cbfa <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800cc68:	1dfb      	adds	r3, r7, #7
 800cc6a:	781a      	ldrb	r2, [r3, #0]
 800cc6c:	49c1      	ldr	r1, [pc, #772]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cc6e:	0013      	movs	r3, r2
 800cc70:	00db      	lsls	r3, r3, #3
 800cc72:	1a9b      	subs	r3, r3, r2
 800cc74:	00db      	lsls	r3, r3, #3
 800cc76:	18cb      	adds	r3, r1, r3
 800cc78:	3304      	adds	r3, #4
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	6819      	ldr	r1, [r3, #0]
 800cc7e:	1dfb      	adds	r3, r7, #7
 800cc80:	781a      	ldrb	r2, [r3, #0]
 800cc82:	48bc      	ldr	r0, [pc, #752]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cc84:	0013      	movs	r3, r2
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	1a9b      	subs	r3, r3, r2
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	18c3      	adds	r3, r0, r3
 800cc8e:	3304      	adds	r3, #4
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2201      	movs	r2, #1
 800cc94:	4391      	bics	r1, r2
 800cc96:	000a      	movs	r2, r1
 800cc98:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800cc9a:	1dfb      	adds	r3, r7, #7
 800cc9c:	781a      	ldrb	r2, [r3, #0]
 800cc9e:	49b5      	ldr	r1, [pc, #724]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cca0:	0013      	movs	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	1a9b      	subs	r3, r3, r2
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	18cb      	adds	r3, r1, r3
 800ccaa:	3314      	adds	r3, #20
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	1dfa      	adds	r2, r7, #7
 800ccb0:	7812      	ldrb	r2, [r2, #0]
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	0010      	movs	r0, r2
 800ccb6:	4798      	blx	r3
      return;
 800ccb8:	e187      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2204      	movs	r2, #4
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	d02c      	beq.n	800cd1c <PORTx_IRQHandler+0xf4>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	0018      	movs	r0, r3
 800ccc6:	f7ff ff8a 	bl	800cbde <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800ccca:	1dfb      	adds	r3, r7, #7
 800cccc:	781a      	ldrb	r2, [r3, #0]
 800ccce:	49a9      	ldr	r1, [pc, #676]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800ccd0:	0013      	movs	r3, r2
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	1a9b      	subs	r3, r3, r2
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	18cb      	adds	r3, r1, r3
 800ccda:	3304      	adds	r3, #4
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	6819      	ldr	r1, [r3, #0]
 800cce0:	1dfb      	adds	r3, r7, #7
 800cce2:	781a      	ldrb	r2, [r3, #0]
 800cce4:	48a3      	ldr	r0, [pc, #652]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cce6:	0013      	movs	r3, r2
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	1a9b      	subs	r3, r3, r2
 800ccec:	00db      	lsls	r3, r3, #3
 800ccee:	18c3      	adds	r3, r0, r3
 800ccf0:	3304      	adds	r3, #4
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	4391      	bics	r1, r2
 800ccf8:	000a      	movs	r2, r1
 800ccfa:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800ccfc:	1dfb      	adds	r3, r7, #7
 800ccfe:	781a      	ldrb	r2, [r3, #0]
 800cd00:	499c      	ldr	r1, [pc, #624]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cd02:	0013      	movs	r3, r2
 800cd04:	00db      	lsls	r3, r3, #3
 800cd06:	1a9b      	subs	r3, r3, r2
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	18cb      	adds	r3, r1, r3
 800cd0c:	3314      	adds	r3, #20
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	1dfa      	adds	r2, r7, #7
 800cd12:	7812      	ldrb	r2, [r2, #0]
 800cd14:	2100      	movs	r1, #0
 800cd16:	0010      	movs	r0, r2
 800cd18:	4798      	blx	r3

#if defined(_LOW_POWER)
      LPM_SetStopMode((LPM_Id_t)(LPM_PE_0 + PortNum), LPM_Enable);
#endif
      return;
 800cd1a:	e156      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2208      	movs	r2, #8
 800cd20:	4013      	ands	r3, r2
 800cd22:	d02c      	beq.n	800cd7e <PORTx_IRQHandler+0x156>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	0018      	movs	r0, r3
 800cd28:	f7ff ff4b 	bl	800cbc2 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800cd2c:	1dfb      	adds	r3, r7, #7
 800cd2e:	781a      	ldrb	r2, [r3, #0]
 800cd30:	4990      	ldr	r1, [pc, #576]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cd32:	0013      	movs	r3, r2
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	1a9b      	subs	r3, r3, r2
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	18cb      	adds	r3, r1, r3
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6819      	ldr	r1, [r3, #0]
 800cd42:	1dfb      	adds	r3, r7, #7
 800cd44:	781a      	ldrb	r2, [r3, #0]
 800cd46:	488b      	ldr	r0, [pc, #556]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cd48:	0013      	movs	r3, r2
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	1a9b      	subs	r3, r3, r2
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	18c3      	adds	r3, r0, r3
 800cd52:	3304      	adds	r3, #4
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2201      	movs	r2, #1
 800cd58:	4391      	bics	r1, r2
 800cd5a:	000a      	movs	r2, r1
 800cd5c:	601a      	str	r2, [r3, #0]
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800cd5e:	1dfb      	adds	r3, r7, #7
 800cd60:	781a      	ldrb	r2, [r3, #0]
 800cd62:	4984      	ldr	r1, [pc, #528]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cd64:	0013      	movs	r3, r2
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	1a9b      	subs	r3, r3, r2
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	18cb      	adds	r3, r1, r3
 800cd6e:	3314      	adds	r3, #20
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	1dfa      	adds	r2, r7, #7
 800cd74:	7812      	ldrb	r2, [r2, #0]
 800cd76:	2102      	movs	r1, #2
 800cd78:	0010      	movs	r0, r2
 800cd7a:	4798      	blx	r3
      return;
 800cd7c:	e125      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2210      	movs	r2, #16
 800cd82:	4013      	ands	r3, r2
 800cd84:	d004      	beq.n	800cd90 <PORTx_IRQHandler+0x168>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	0018      	movs	r0, r3
 800cd8a:	f7ff ff0c 	bl	800cba6 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800cd8e:	e11c      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2220      	movs	r2, #32
 800cd94:	4013      	ands	r3, r2
 800cd96:	d013      	beq.n	800cdc0 <PORTx_IRQHandler+0x198>
    {
      /* Mhum, the stack is not expected to get this answer */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	0018      	movs	r0, r3
 800cd9c:	f7ff fef5 	bl	800cb8a <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800cda0:	1dfb      	adds	r3, r7, #7
 800cda2:	781a      	ldrb	r2, [r3, #0]
 800cda4:	4973      	ldr	r1, [pc, #460]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cda6:	0013      	movs	r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	1a9b      	subs	r3, r3, r2
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	18cb      	adds	r3, r1, r3
 800cdb0:	3324      	adds	r3, #36	; 0x24
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	1dfa      	adds	r2, r7, #7
 800cdb6:	7812      	ldrb	r2, [r2, #0]
 800cdb8:	2105      	movs	r1, #5
 800cdba:	0010      	movs	r0, r2
 800cdbc:	4798      	blx	r3
      return;
 800cdbe:	e104      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2240      	movs	r2, #64	; 0x40
 800cdc4:	4013      	ands	r3, r2
 800cdc6:	d004      	beq.n	800cdd2 <PORTx_IRQHandler+0x1aa>
    {
      /* nothing to do the port partner check message integrity with CRC so PRL will repeat the sent
         can be used for debug purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	0018      	movs	r0, r3
 800cdcc:	f7ff fecf 	bl	800cb6e <LL_UCPD_ClearFlag_TxUND>
      return;
 800cdd0:	e0fb      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	2380      	movs	r3, #128	; 0x80
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4013      	ands	r3, r2
 800cdda:	d004      	beq.n	800cde6 <PORTx_IRQHandler+0x1be>
    {
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	0018      	movs	r0, r3
 800cde0:	f7ff feb6 	bl	800cb50 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      LPM_SetStopMode((LPM_Id_t)(LPM_PE_0 + PortNum), LPM_Disable);
#endif
      return;
 800cde4:	e0f1      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    /* check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	2380      	movs	r3, #128	; 0x80
 800cdea:	00db      	lsls	r3, r3, #3
 800cdec:	4013      	ands	r3, r2
 800cdee:	d013      	beq.n	800ce18 <PORTx_IRQHandler+0x1f0>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800cdf0:	1dfb      	adds	r3, r7, #7
 800cdf2:	781a      	ldrb	r2, [r3, #0]
 800cdf4:	495f      	ldr	r1, [pc, #380]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cdf6:	0013      	movs	r3, r2
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	1a9b      	subs	r3, r3, r2
 800cdfc:	00db      	lsls	r3, r3, #3
 800cdfe:	18cb      	adds	r3, r1, r3
 800ce00:	331c      	adds	r3, #28
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	1dfa      	adds	r2, r7, #7
 800ce06:	7812      	ldrb	r2, [r2, #0]
 800ce08:	2105      	movs	r1, #5
 800ce0a:	0010      	movs	r0, r2
 800ce0c:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	0018      	movs	r0, r3
 800ce12:	f7ff fe8e 	bl	800cb32 <LL_UCPD_ClearFlag_RxHRST>
      return;
 800ce16:	e0d8      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    /* check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	2380      	movs	r3, #128	; 0x80
 800ce1c:	011b      	lsls	r3, r3, #4
 800ce1e:	4013      	ands	r3, r2
 800ce20:	d009      	beq.n	800ce36 <PORTx_IRQHandler+0x20e>
    {
      /* nothing to do the message will be discarded and the port partner retry the send */
      ovrflag[PortNum] = 1;
 800ce22:	1dfb      	adds	r3, r7, #7
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	4a54      	ldr	r2, [pc, #336]	; (800cf78 <PORTx_IRQHandler+0x350>)
 800ce28:	2101      	movs	r1, #1
 800ce2a:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	0018      	movs	r0, r3
 800ce30:	f7ff fe70 	bl	800cb14 <LL_UCPD_ClearFlag_RxOvr>
      return;
 800ce34:	e0c9      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    /* check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	2380      	movs	r3, #128	; 0x80
 800ce3a:	015b      	lsls	r3, r3, #5
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	d100      	bne.n	800ce42 <PORTx_IRQHandler+0x21a>
 800ce40:	e07a      	b.n	800cf38 <PORTx_IRQHandler+0x310>
    {
      /* for DMA mode add a control to check if the number of data received is corresponding with the number of
         data receive by USBPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	0018      	movs	r0, r3
 800ce46:	f7ff fe56 	bl	800caf6 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800ce4a:	1dfb      	adds	r3, r7, #7
 800ce4c:	781a      	ldrb	r2, [r3, #0]
 800ce4e:	4949      	ldr	r1, [pc, #292]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800ce50:	0013      	movs	r3, r2
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	1a9b      	subs	r3, r3, r2
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	18cb      	adds	r3, r1, r3
 800ce5a:	3308      	adds	r3, #8
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6819      	ldr	r1, [r3, #0]
 800ce60:	1dfb      	adds	r3, r7, #7
 800ce62:	781a      	ldrb	r2, [r3, #0]
 800ce64:	4843      	ldr	r0, [pc, #268]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800ce66:	0013      	movs	r3, r2
 800ce68:	00db      	lsls	r3, r3, #3
 800ce6a:	1a9b      	subs	r3, r3, r2
 800ce6c:	00db      	lsls	r3, r3, #3
 800ce6e:	18c3      	adds	r3, r0, r3
 800ce70:	3308      	adds	r3, #8
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2201      	movs	r2, #1
 800ce76:	4391      	bics	r1, r2
 800ce78:	000a      	movs	r2, r1
 800ce7a:	601a      	str	r2, [r3, #0]

#if defined(_LOW_POWER)
      LPM_SetStopMode((LPM_Id_t)(LPM_PE_0 + PortNum), LPM_Enable);
#endif

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	2380      	movs	r3, #128	; 0x80
 800ce80:	019b      	lsls	r3, r3, #6
 800ce82:	4013      	ands	r3, r2
 800ce84:	d117      	bne.n	800ceb6 <PORTx_IRQHandler+0x28e>
 800ce86:	1dfb      	adds	r3, r7, #7
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	4a3b      	ldr	r2, [pc, #236]	; (800cf78 <PORTx_IRQHandler+0x350>)
 800ce8c:	5cd3      	ldrb	r3, [r2, r3]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d111      	bne.n	800ceb6 <PORTx_IRQHandler+0x28e>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800ce92:	1dfb      	adds	r3, r7, #7
 800ce94:	781a      	ldrb	r2, [r3, #0]
 800ce96:	4937      	ldr	r1, [pc, #220]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800ce98:	0013      	movs	r3, r2
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	1a9b      	subs	r3, r3, r2
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	18cb      	adds	r3, r1, r3
 800cea2:	3320      	adds	r3, #32
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceaa:	2107      	movs	r1, #7
 800ceac:	4019      	ands	r1, r3
 800ceae:	1dfb      	adds	r3, r7, #7
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	0018      	movs	r0, r3
 800ceb4:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 800ceb6:	1dfb      	adds	r3, r7, #7
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	4a2f      	ldr	r2, [pc, #188]	; (800cf78 <PORTx_IRQHandler+0x350>)
 800cebc:	2100      	movs	r1, #0
 800cebe:	54d1      	strb	r1, [r2, r3]

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800cec0:	1dfb      	adds	r3, r7, #7
 800cec2:	781a      	ldrb	r2, [r3, #0]
 800cec4:	492b      	ldr	r1, [pc, #172]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cec6:	0013      	movs	r3, r2
 800cec8:	00db      	lsls	r3, r3, #3
 800ceca:	1a9b      	subs	r3, r3, r2
 800cecc:	00db      	lsls	r3, r3, #3
 800cece:	18cb      	adds	r3, r1, r3
 800ced0:	3330      	adds	r3, #48	; 0x30
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	1dfb      	adds	r3, r7, #7
 800ced6:	781a      	ldrb	r2, [r3, #0]
 800ced8:	4926      	ldr	r1, [pc, #152]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800ceda:	0013      	movs	r3, r2
 800cedc:	00db      	lsls	r3, r3, #3
 800cede:	1a9b      	subs	r3, r3, r2
 800cee0:	00db      	lsls	r3, r3, #3
 800cee2:	18cb      	adds	r3, r1, r3
 800cee4:	3308      	adds	r3, #8
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	0002      	movs	r2, r0
 800ceea:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800ceec:	1dfb      	adds	r3, r7, #7
 800ceee:	781a      	ldrb	r2, [r3, #0]
 800cef0:	4920      	ldr	r1, [pc, #128]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cef2:	0013      	movs	r3, r2
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	18cb      	adds	r3, r1, r3
 800cefc:	3308      	adds	r3, #8
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2284      	movs	r2, #132	; 0x84
 800cf02:	0052      	lsls	r2, r2, #1
 800cf04:	605a      	str	r2, [r3, #4]

      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800cf06:	1dfb      	adds	r3, r7, #7
 800cf08:	781a      	ldrb	r2, [r3, #0]
 800cf0a:	491a      	ldr	r1, [pc, #104]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cf0c:	0013      	movs	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	1a9b      	subs	r3, r3, r2
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	18cb      	adds	r3, r1, r3
 800cf16:	3308      	adds	r3, #8
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6819      	ldr	r1, [r3, #0]
 800cf1c:	1dfb      	adds	r3, r7, #7
 800cf1e:	781a      	ldrb	r2, [r3, #0]
 800cf20:	4814      	ldr	r0, [pc, #80]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cf22:	0013      	movs	r3, r2
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	1a9b      	subs	r3, r3, r2
 800cf28:	00db      	lsls	r3, r3, #3
 800cf2a:	18c3      	adds	r3, r0, r3
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2201      	movs	r2, #1
 800cf32:	430a      	orrs	r2, r1
 800cf34:	601a      	str	r2, [r3, #0]
      return;
 800cf36:	e048      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
    }

    /* check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1)) || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	2380      	movs	r3, #128	; 0x80
 800cf3c:	01db      	lsls	r3, r3, #7
 800cf3e:	4013      	ands	r3, r2
 800cf40:	d104      	bne.n	800cf4c <PORTx_IRQHandler+0x324>
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	2380      	movs	r3, #128	; 0x80
 800cf46:	021b      	lsls	r3, r3, #8
 800cf48:	4013      	ands	r3, r2
 800cf4a:	d017      	beq.n	800cf7c <PORTx_IRQHandler+0x354>
    {
      /* clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	0018      	movs	r0, r3
 800cf50:	f7ff fdc2 	bl	800cad8 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	0018      	movs	r0, r3
 800cf58:	f7ff fdaf 	bl	800caba <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800cf5c:	1dfb      	adds	r3, r7, #7
 800cf5e:	781a      	ldrb	r2, [r3, #0]
 800cf60:	4904      	ldr	r1, [pc, #16]	; (800cf74 <PORTx_IRQHandler+0x34c>)
 800cf62:	0013      	movs	r3, r2
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	1a9b      	subs	r3, r3, r2
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	18cb      	adds	r3, r1, r3
 800cf6c:	332c      	adds	r3, #44	; 0x2c
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800cf72:	e02a      	b.n	800cfca <PORTx_IRQHandler+0x3a2>
 800cf74:	20001bcc 	.word	0x20001bcc
 800cf78:	200016f0 	.word	0x200016f0
    }

    /* check FRSEVTIE */
    if (UCPD_SR_FRSEVT == (_interrupt & UCPD_SR_FRSEVT))
 800cf7c:	68ba      	ldr	r2, [r7, #8]
 800cf7e:	2380      	movs	r3, #128	; 0x80
 800cf80:	035b      	lsls	r3, r3, #13
 800cf82:	4013      	ands	r3, r2
 800cf84:	d021      	beq.n	800cfca <PORTx_IRQHandler+0x3a2>
    {
      LL_UCPD_ClearFlag_FRS(hucpd);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	0018      	movs	r0, r3
 800cf8a:	f7ff fd87 	bl	800ca9c <LL_UCPD_ClearFlag_FRS>
      if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800cf8e:	1dfb      	adds	r3, r7, #7
 800cf90:	781a      	ldrb	r2, [r3, #0]
 800cf92:	490f      	ldr	r1, [pc, #60]	; (800cfd0 <PORTx_IRQHandler+0x3a8>)
 800cf94:	0013      	movs	r3, r2
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	1a9b      	subs	r3, r3, r2
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	18cb      	adds	r3, r1, r3
 800cf9e:	3310      	adds	r3, #16
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2204      	movs	r2, #4
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d10d      	bne.n	800cfca <PORTx_IRQHandler+0x3a2>
      {
        /* we shall calculate the FRS timing to confirm the timing */
        Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception(PortNum);
 800cfae:	1dfb      	adds	r3, r7, #7
 800cfb0:	781a      	ldrb	r2, [r3, #0]
 800cfb2:	4907      	ldr	r1, [pc, #28]	; (800cfd0 <PORTx_IRQHandler+0x3a8>)
 800cfb4:	0013      	movs	r3, r2
 800cfb6:	00db      	lsls	r3, r3, #3
 800cfb8:	1a9b      	subs	r3, r3, r2
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	18cb      	adds	r3, r1, r3
 800cfbe:	3328      	adds	r3, #40	; 0x28
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	1dfa      	adds	r2, r7, #7
 800cfc4:	7812      	ldrb	r2, [r2, #0]
 800cfc6:	0010      	movs	r0, r2
 800cfc8:	4798      	blx	r3
      }
    }
  }
}
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	b004      	add	sp, #16
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20001bcc 	.word	0x20001bcc

0800cfd4 <USBPD_PHY_Init>:
  * @param  PowerRole     Power Role of the board.
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer, USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800cfd4:	b590      	push	{r4, r7, lr}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60b9      	str	r1, [r7, #8]
 800cfdc:	607a      	str	r2, [r7, #4]
 800cfde:	603b      	str	r3, [r7, #0]
 800cfe0:	240f      	movs	r4, #15
 800cfe2:	193b      	adds	r3, r7, r4
 800cfe4:	1c02      	adds	r2, r0, #0
 800cfe6:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800cfe8:	193b      	adds	r3, r7, r4
 800cfea:	781a      	ldrb	r2, [r3, #0]
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	6919      	ldr	r1, [r3, #16]
 800cff0:	4830      	ldr	r0, [pc, #192]	; (800d0b4 <USBPD_PHY_Init+0xe0>)
 800cff2:	0013      	movs	r3, r2
 800cff4:	00db      	lsls	r3, r3, #3
 800cff6:	1a9b      	subs	r3, r3, r2
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	18c3      	adds	r3, r0, r3
 800cffc:	3314      	adds	r3, #20
 800cffe:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800d000:	193b      	adds	r3, r7, r4
 800d002:	781a      	ldrb	r2, [r3, #0]
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	68d9      	ldr	r1, [r3, #12]
 800d008:	482a      	ldr	r0, [pc, #168]	; (800d0b4 <USBPD_PHY_Init+0xe0>)
 800d00a:	0013      	movs	r3, r2
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	1a9b      	subs	r3, r3, r2
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	18c3      	adds	r3, r0, r3
 800d014:	3318      	adds	r3, #24
 800d016:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800d018:	193b      	adds	r3, r7, r4
 800d01a:	781a      	ldrb	r2, [r3, #0]
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	6859      	ldr	r1, [r3, #4]
 800d020:	4824      	ldr	r0, [pc, #144]	; (800d0b4 <USBPD_PHY_Init+0xe0>)
 800d022:	0013      	movs	r3, r2
 800d024:	00db      	lsls	r3, r3, #3
 800d026:	1a9b      	subs	r3, r3, r2
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	18c3      	adds	r3, r0, r3
 800d02c:	331c      	adds	r3, #28
 800d02e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800d030:	193b      	adds	r3, r7, r4
 800d032:	781a      	ldrb	r2, [r3, #0]
 800d034:	491f      	ldr	r1, [pc, #124]	; (800d0b4 <USBPD_PHY_Init+0xe0>)
 800d036:	0013      	movs	r3, r2
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	1a9b      	subs	r3, r3, r2
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	18cb      	adds	r3, r1, r3
 800d040:	3320      	adds	r3, #32
 800d042:	4a1d      	ldr	r2, [pc, #116]	; (800d0b8 <USBPD_PHY_Init+0xe4>)
 800d044:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800d046:	193b      	adds	r3, r7, r4
 800d048:	781a      	ldrb	r2, [r3, #0]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	6899      	ldr	r1, [r3, #8]
 800d04e:	4819      	ldr	r0, [pc, #100]	; (800d0b4 <USBPD_PHY_Init+0xe0>)
 800d050:	0013      	movs	r3, r2
 800d052:	00db      	lsls	r3, r3, #3
 800d054:	1a9b      	subs	r3, r3, r2
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	18c3      	adds	r3, r0, r3
 800d05a:	3324      	adds	r3, #36	; 0x24
 800d05c:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800d05e:	193b      	adds	r3, r7, r4
 800d060:	781a      	ldrb	r2, [r3, #0]
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	6959      	ldr	r1, [r3, #20]
 800d066:	4813      	ldr	r0, [pc, #76]	; (800d0b4 <USBPD_PHY_Init+0xe0>)
 800d068:	0013      	movs	r3, r2
 800d06a:	00db      	lsls	r3, r3, #3
 800d06c:	1a9b      	subs	r3, r3, r2
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	18c3      	adds	r3, r0, r3
 800d072:	3328      	adds	r3, #40	; 0x28
 800d074:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800d076:	193b      	adds	r3, r7, r4
 800d078:	781a      	ldrb	r2, [r3, #0]
 800d07a:	490e      	ldr	r1, [pc, #56]	; (800d0b4 <USBPD_PHY_Init+0xe0>)
 800d07c:	0013      	movs	r3, r2
 800d07e:	00db      	lsls	r3, r3, #3
 800d080:	1a9b      	subs	r3, r3, r2
 800d082:	00db      	lsls	r3, r3, #3
 800d084:	18cb      	adds	r3, r1, r3
 800d086:	3330      	adds	r3, #48	; 0x30
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800d08c:	193b      	adds	r3, r7, r4
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	4a0a      	ldr	r2, [pc, #40]	; (800d0bc <USBPD_PHY_Init+0xe8>)
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	18d3      	adds	r3, r2, r3
 800d096:	3304      	adds	r3, #4
 800d098:	6a3a      	ldr	r2, [r7, #32]
 800d09a:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800d09c:	193b      	adds	r3, r7, r4
 800d09e:	781a      	ldrb	r2, [r3, #0]
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	6819      	ldr	r1, [r3, #0]
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <USBPD_PHY_Init+0xe8>)
 800d0a6:	00d2      	lsls	r2, r2, #3
 800d0a8:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	b005      	add	sp, #20
 800d0b2:	bd90      	pop	{r4, r7, pc}
 800d0b4:	20001bcc 	.word	0x20001bcc
 800d0b8:	0800d2a5 	.word	0x0800d2a5
 800d0bc:	200016f4 	.word	0x200016f4

0800d0c0 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not aknowledge by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	0002      	movs	r2, r0
 800d0c8:	1dfb      	adds	r3, r7, #7
 800d0ca:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 800d0cc:	4b02      	ldr	r3, [pc, #8]	; (800d0d8 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 800d0ce:	0018      	movs	r0, r3
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	b002      	add	sp, #8
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	46c0      	nop			; (mov r8, r8)
 800d0d8:	00000389 	.word	0x00000389

0800d0dc <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	0002      	movs	r2, r0
 800d0e4:	1dfb      	adds	r3, r7, #7
 800d0e6:	701a      	strb	r2, [r3, #0]
  return 30u;
 800d0e8:	231e      	movs	r3, #30
}
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	b002      	add	sp, #8
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	0002      	movs	r2, r0
 800d0fa:	1dfb      	adds	r3, r7, #7
 800d0fc:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 800d0fe:	46c0      	nop			; (mov r8, r8)
 800d100:	46bd      	mov	sp, r7
 800d102:	b002      	add	sp, #8
 800d104:	bd80      	pop	{r7, pc}

0800d106 <USBPD_PHY_ResetRequest>:
  * @param  PortNum   Number of the port
  * @param  Type      Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	0002      	movs	r2, r0
 800d10e:	1dfb      	adds	r3, r7, #7
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	1dbb      	adds	r3, r7, #6
 800d114:	1c0a      	adds	r2, r1, #0
 800d116:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800d118:	1dbb      	adds	r3, r7, #6
 800d11a:	7819      	ldrb	r1, [r3, #0]
 800d11c:	1dfb      	adds	r3, r7, #7
 800d11e:	7818      	ldrb	r0, [r3, #0]
 800d120:	2300      	movs	r3, #0
 800d122:	2200      	movs	r2, #0
 800d124:	f000 f805 	bl	800d132 <USBPD_PHY_SendMessage>
 800d128:	0003      	movs	r3, r0
}
 800d12a:	0018      	movs	r0, r3
 800d12c:	46bd      	mov	sp, r7
 800d12e:	b002      	add	sp, #8
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800d132:	b590      	push	{r4, r7, lr}
 800d134:	b083      	sub	sp, #12
 800d136:	af00      	add	r7, sp, #0
 800d138:	0004      	movs	r4, r0
 800d13a:	0008      	movs	r0, r1
 800d13c:	603a      	str	r2, [r7, #0]
 800d13e:	0019      	movs	r1, r3
 800d140:	1dfb      	adds	r3, r7, #7
 800d142:	1c22      	adds	r2, r4, #0
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	1dbb      	adds	r3, r7, #6
 800d148:	1c02      	adds	r2, r0, #0
 800d14a:	701a      	strb	r2, [r3, #0]
 800d14c:	1d3b      	adds	r3, r7, #4
 800d14e:	1c0a      	adds	r2, r1, #0
 800d150:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800d152:	1d3b      	adds	r3, r7, #4
 800d154:	881c      	ldrh	r4, [r3, #0]
 800d156:	683a      	ldr	r2, [r7, #0]
 800d158:	1dbb      	adds	r3, r7, #6
 800d15a:	7819      	ldrb	r1, [r3, #0]
 800d15c:	1dfb      	adds	r3, r7, #7
 800d15e:	7818      	ldrb	r0, [r3, #0]
 800d160:	0023      	movs	r3, r4
 800d162:	f000 fb1f 	bl	800d7a4 <USBPD_HW_IF_SendBuffer>
 800d166:	0003      	movs	r3, r0
}
 800d168:	0018      	movs	r0, r3
 800d16a:	46bd      	mov	sp, r7
 800d16c:	b003      	add	sp, #12
 800d16e:	bd90      	pop	{r4, r7, pc}

0800d170 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	0002      	movs	r2, r0
 800d178:	1dfb      	adds	r3, r7, #7
 800d17a:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800d17c:	1dfb      	adds	r3, r7, #7
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	0018      	movs	r0, r3
 800d182:	f000 fc0b 	bl	800d99c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	0018      	movs	r0, r3
 800d18a:	46bd      	mov	sp, r7
 800d18c:	b002      	add	sp, #8
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	0002      	movs	r2, r0
 800d198:	1dfb      	adds	r3, r7, #7
 800d19a:	701a      	strb	r2, [r3, #0]
 800d19c:	1dbb      	adds	r3, r7, #6
 800d19e:	1c0a      	adds	r2, r1, #0
 800d1a0:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800d1a2:	1dbb      	adds	r3, r7, #6
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	2b07      	cmp	r3, #7
 800d1a8:	d104      	bne.n	800d1b4 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800d1aa:	1dfb      	adds	r3, r7, #7
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	0018      	movs	r0, r3
 800d1b0:	f000 fac0 	bl	800d734 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	0018      	movs	r0, r3
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	b002      	add	sp, #8
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	0002      	movs	r2, r0
 800d1c6:	1dfb      	adds	r3, r7, #7
 800d1c8:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 800d1ca:	1dfb      	adds	r3, r7, #7
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	0018      	movs	r0, r3
 800d1d0:	f000 ffd4 	bl	800e17c <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 800d1d4:	46c0      	nop			; (mov r8, r8)
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	b002      	add	sp, #8
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	0002      	movs	r2, r0
 800d1e4:	1dfb      	adds	r3, r7, #7
 800d1e6:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 800d1e8:	1dfb      	adds	r3, r7, #7
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	f000 ffdf 	bl	800e1b0 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 800d1f2:	46c0      	nop			; (mov r8, r8)
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	b002      	add	sp, #8
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	0002      	movs	r2, r0
 800d204:	6039      	str	r1, [r7, #0]
 800d206:	1dfb      	adds	r3, r7, #7
 800d208:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 800d20a:	1dfb      	adds	r3, r7, #7
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	4a05      	ldr	r2, [pc, #20]	; (800d224 <USBPD_PHY_SOPSupported+0x28>)
 800d210:	00db      	lsls	r3, r3, #3
 800d212:	18d3      	adds	r3, r2, r3
 800d214:	3304      	adds	r3, #4
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	601a      	str	r2, [r3, #0]
}
 800d21a:	46c0      	nop			; (mov r8, r8)
 800d21c:	46bd      	mov	sp, r7
 800d21e:	b002      	add	sp, #8
 800d220:	bd80      	pop	{r7, pc}
 800d222:	46c0      	nop			; (mov r8, r8)
 800d224:	200016f4 	.word	0x200016f4

0800d228 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	0002      	movs	r2, r0
 800d230:	1dfb      	adds	r3, r7, #7
 800d232:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800d234:	1dfb      	adds	r3, r7, #7
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	0018      	movs	r0, r3
 800d23a:	f000 ffd3 	bl	800e1e4 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800d23e:	0003      	movs	r3, r0
}
 800d240:	0018      	movs	r0, r3
 800d242:	46bd      	mov	sp, r7
 800d244:	b002      	add	sp, #8
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBPD_PHY_FastRoleSwapSignalling>:
 * @brief  function to generate an FRS signalling
 * @param  PortNum  Number of the port.
 * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	0002      	movs	r2, r0
 800d250:	1dfb      	adds	r3, r7, #7
 800d252:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 800d254:	1dfb      	adds	r3, r7, #7
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	0018      	movs	r0, r3
 800d25a:	f001 f807 	bl	800e26c <USBPD_HW_IF_FastRoleSwapSignalling>
}
 800d25e:	46c0      	nop			; (mov r8, r8)
 800d260:	46bd      	mov	sp, r7
 800d262:	b002      	add	sp, #8
 800d264:	bd80      	pop	{r7, pc}

0800d266 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b082      	sub	sp, #8
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	0002      	movs	r2, r0
 800d26e:	1dfb      	adds	r3, r7, #7
 800d270:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 800d272:	1dfb      	adds	r3, r7, #7
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	0018      	movs	r0, r3
 800d278:	f000 fd7c 	bl	800dd74 <USBPD_HW_IF_EnableRX>
}
 800d27c:	46c0      	nop			; (mov r8, r8)
 800d27e:	46bd      	mov	sp, r7
 800d280:	b002      	add	sp, #8
 800d282:	bd80      	pop	{r7, pc}

0800d284 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	0002      	movs	r2, r0
 800d28c:	1dfb      	adds	r3, r7, #7
 800d28e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 800d290:	1dfb      	adds	r3, r7, #7
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	0018      	movs	r0, r3
 800d296:	f000 fd85 	bl	800dda4 <USBPD_HW_IF_DisableRX>
}
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	46bd      	mov	sp, r7
 800d29e:	b002      	add	sp, #8
 800d2a0:	bd80      	pop	{r7, pc}
	...

0800d2a4 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800d2a4:	b590      	push	{r4, r7, lr}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	0002      	movs	r2, r0
 800d2ac:	6039      	str	r1, [r7, #0]
 800d2ae:	1dfb      	adds	r3, r7, #7
 800d2b0:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] = { USBPD_SOPTYPE_SOP,              USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
 800d2b2:	2008      	movs	r0, #8
 800d2b4:	183b      	adds	r3, r7, r0
 800d2b6:	4a2e      	ldr	r2, [pc, #184]	; (800d370 <PHY_Rx_Completed+0xcc>)
 800d2b8:	6811      	ldr	r1, [r2, #0]
 800d2ba:	6019      	str	r1, [r3, #0]
 800d2bc:	8892      	ldrh	r2, [r2, #4]
 800d2be:	809a      	strh	r2, [r3, #4]
                                                  USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
                                                };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800d2c0:	240f      	movs	r4, #15
 800d2c2:	193b      	adds	r3, r7, r4
 800d2c4:	1839      	adds	r1, r7, r0
 800d2c6:	683a      	ldr	r2, [r7, #0]
 800d2c8:	188a      	adds	r2, r1, r2
 800d2ca:	7812      	ldrb	r2, [r2, #0]
 800d2cc:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800d2ce:	193b      	adds	r3, r7, r4
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b04      	cmp	r3, #4
 800d2d4:	dc02      	bgt.n	800d2dc <PHY_Rx_Completed+0x38>
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	da1d      	bge.n	800d316 <PHY_Rx_Completed+0x72>
        USBPD_TRACE_Add( USBPD_TRACE_PHY_NOTFRWD,PortNum, _msgtype, Ports[PortNum].ptr_RxBuff, 2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif
      break;
    default :
      break;
 800d2da:	e040      	b.n	800d35e <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 800d2dc:	2b06      	cmp	r3, #6
 800d2de:	d13e      	bne.n	800d35e <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800d2e0:	1dfb      	adds	r3, r7, #7
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	4a23      	ldr	r2, [pc, #140]	; (800d374 <PHY_Rx_Completed+0xd0>)
 800d2e6:	00db      	lsls	r3, r3, #3
 800d2e8:	18d3      	adds	r3, r2, r3
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	221e      	movs	r2, #30
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	2b1e      	cmp	r3, #30
 800d2f4:	d135      	bne.n	800d362 <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800d2f6:	1dfb      	adds	r3, r7, #7
 800d2f8:	781a      	ldrb	r2, [r3, #0]
 800d2fa:	491f      	ldr	r1, [pc, #124]	; (800d378 <PHY_Rx_Completed+0xd4>)
 800d2fc:	0013      	movs	r3, r2
 800d2fe:	00db      	lsls	r3, r3, #3
 800d300:	1a9b      	subs	r3, r3, r2
 800d302:	00db      	lsls	r3, r3, #3
 800d304:	18cb      	adds	r3, r1, r3
 800d306:	331c      	adds	r3, #28
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	1dfa      	adds	r2, r7, #7
 800d30c:	7812      	ldrb	r2, [r2, #0]
 800d30e:	2106      	movs	r1, #6
 800d310:	0010      	movs	r0, r2
 800d312:	4798      	blx	r3
      break;
 800d314:	e025      	b.n	800d362 <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800d316:	240f      	movs	r4, #15
 800d318:	193b      	adds	r3, r7, r4
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2201      	movs	r2, #1
 800d31e:	409a      	lsls	r2, r3
 800d320:	0013      	movs	r3, r2
 800d322:	b2db      	uxtb	r3, r3
 800d324:	0018      	movs	r0, r3
 800d326:	1dfb      	adds	r3, r7, #7
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	4a12      	ldr	r2, [pc, #72]	; (800d374 <PHY_Rx_Completed+0xd0>)
 800d32c:	00db      	lsls	r3, r3, #3
 800d32e:	18d3      	adds	r3, r2, r3
 800d330:	3304      	adds	r3, #4
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	193a      	adds	r2, r7, r4
 800d336:	7812      	ldrb	r2, [r2, #0]
 800d338:	2101      	movs	r1, #1
 800d33a:	4091      	lsls	r1, r2
 800d33c:	000a      	movs	r2, r1
 800d33e:	b2d2      	uxtb	r2, r2
 800d340:	4013      	ands	r3, r2
 800d342:	4298      	cmp	r0, r3
 800d344:	d10f      	bne.n	800d366 <PHY_Rx_Completed+0xc2>
         PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800d346:	1dfb      	adds	r3, r7, #7
 800d348:	781a      	ldrb	r2, [r3, #0]
 800d34a:	4b0a      	ldr	r3, [pc, #40]	; (800d374 <PHY_Rx_Completed+0xd0>)
 800d34c:	00d2      	lsls	r2, r2, #3
 800d34e:	58d3      	ldr	r3, [r2, r3]
 800d350:	193a      	adds	r2, r7, r4
 800d352:	7811      	ldrb	r1, [r2, #0]
 800d354:	1dfa      	adds	r2, r7, #7
 800d356:	7812      	ldrb	r2, [r2, #0]
 800d358:	0010      	movs	r0, r2
 800d35a:	4798      	blx	r3
      break;
 800d35c:	e003      	b.n	800d366 <PHY_Rx_Completed+0xc2>
      break;
 800d35e:	46c0      	nop			; (mov r8, r8)
 800d360:	e002      	b.n	800d368 <PHY_Rx_Completed+0xc4>
      break;
 800d362:	46c0      	nop			; (mov r8, r8)
 800d364:	e000      	b.n	800d368 <PHY_Rx_Completed+0xc4>
      break;
 800d366:	46c0      	nop			; (mov r8, r8)
  }
}
 800d368:	46c0      	nop			; (mov r8, r8)
 800d36a:	46bd      	mov	sp, r7
 800d36c:	b005      	add	sp, #20
 800d36e:	bd90      	pop	{r4, r7, pc}
 800d370:	08015ac0 	.word	0x08015ac0
 800d374:	200016f4 	.word	0x200016f4
 800d378:	20001bcc 	.word	0x20001bcc

0800d37c <LL_AHB1_GRP1_EnableClock>:
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800d384:	4b07      	ldr	r3, [pc, #28]	; (800d3a4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800d386:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d388:	4b06      	ldr	r3, [pc, #24]	; (800d3a4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	430a      	orrs	r2, r1
 800d38e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800d390:	4b04      	ldr	r3, [pc, #16]	; (800d3a4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800d392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	4013      	ands	r3, r2
 800d398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d39a:	68fb      	ldr	r3, [r7, #12]
}
 800d39c:	46c0      	nop			; (mov r8, r8)
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	b004      	add	sp, #16
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	40021000 	.word	0x40021000

0800d3a8 <LL_APB1_GRP1_EnableClock>:
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800d3b0:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <LL_APB1_GRP1_EnableClock+0x28>)
 800d3b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d3b4:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <LL_APB1_GRP1_EnableClock+0x28>)
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	430a      	orrs	r2, r1
 800d3ba:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800d3bc:	4b04      	ldr	r3, [pc, #16]	; (800d3d0 <LL_APB1_GRP1_EnableClock+0x28>)
 800d3be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
}
 800d3c8:	46c0      	nop			; (mov r8, r8)
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	b004      	add	sp, #16
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	40021000 	.word	0x40021000

0800d3d4 <LL_APB2_GRP1_EnableClock>:
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800d3dc:	4b07      	ldr	r3, [pc, #28]	; (800d3fc <LL_APB2_GRP1_EnableClock+0x28>)
 800d3de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d3e0:	4b06      	ldr	r3, [pc, #24]	; (800d3fc <LL_APB2_GRP1_EnableClock+0x28>)
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	430a      	orrs	r2, r1
 800d3e6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800d3e8:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <LL_APB2_GRP1_EnableClock+0x28>)
 800d3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
}
 800d3f4:	46c0      	nop			; (mov r8, r8)
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	b004      	add	sp, #16
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	40021000 	.word	0x40021000

0800d400 <LL_UCPD_Enable>:
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2280      	movs	r2, #128	; 0x80
 800d40e:	0612      	lsls	r2, r2, #24
 800d410:	431a      	orrs	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	601a      	str	r2, [r3, #0]
}
 800d416:	46c0      	nop			; (mov r8, r8)
 800d418:	46bd      	mov	sp, r7
 800d41a:	b002      	add	sp, #8
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <LL_UCPD_Disable>:
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	085a      	lsrs	r2, r3, #1
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	601a      	str	r2, [r3, #0]
}
 800d432:	46c0      	nop			; (mov r8, r8)
 800d434:	46bd      	mov	sp, r7
 800d436:	b002      	add	sp, #8
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	4a03      	ldr	r2, [pc, #12]	; (800d458 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 800d44a:	401a      	ands	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	60da      	str	r2, [r3, #12]
}
 800d450:	46c0      	nop			; (mov r8, r8)
 800d452:	46bd      	mov	sp, r7
 800d454:	b002      	add	sp, #8
 800d456:	bd80      	pop	{r7, pc}
 800d458:	ffdfffff 	.word	0xffdfffff

0800d45c <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	2280      	movs	r2, #128	; 0x80
 800d46a:	0392      	lsls	r2, r2, #14
 800d46c:	431a      	orrs	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	60da      	str	r2, [r3, #12]
}
 800d472:	46c0      	nop			; (mov r8, r8)
 800d474:	46bd      	mov	sp, r7
 800d476:	b002      	add	sp, #8
 800d478:	bd80      	pop	{r7, pc}
	...

0800d47c <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	4a03      	ldr	r2, [pc, #12]	; (800d498 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 800d48a:	401a      	ands	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	60da      	str	r2, [r3, #12]
}
 800d490:	46c0      	nop			; (mov r8, r8)
 800d492:	46bd      	mov	sp, r7
 800d494:	b002      	add	sp, #8
 800d496:	bd80      	pop	{r7, pc}
 800d498:	ffefffff 	.word	0xffefffff

0800d49c <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	2280      	movs	r2, #128	; 0x80
 800d4aa:	0352      	lsls	r2, r2, #13
 800d4ac:	431a      	orrs	r2, r3
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	60da      	str	r2, [r3, #12]
}
 800d4b2:	46c0      	nop			; (mov r8, r8)
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	b002      	add	sp, #8
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <LL_UCPD_SignalFRSTX>:
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b082      	sub	sp, #8
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	2280      	movs	r2, #128	; 0x80
 800d4c8:	0292      	lsls	r2, r2, #10
 800d4ca:	431a      	orrs	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	60da      	str	r2, [r3, #12]
}
 800d4d0:	46c0      	nop			; (mov r8, r8)
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	b002      	add	sp, #8
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <LL_UCPD_FRSDetectionEnable>:
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	2280      	movs	r2, #128	; 0x80
 800d4e6:	0252      	lsls	r2, r2, #9
 800d4e8:	431a      	orrs	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	60da      	str	r2, [r3, #12]
}
 800d4ee:	46c0      	nop			; (mov r8, r8)
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	b002      	add	sp, #8
 800d4f4:	bd80      	pop	{r7, pc}
	...

0800d4f8 <LL_UCPD_SetccEnable>:
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	4a05      	ldr	r2, [pc, #20]	; (800d51c <LL_UCPD_SetccEnable+0x24>)
 800d508:	401a      	ands	r2, r3
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	431a      	orrs	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	60da      	str	r2, [r3, #12]
}
 800d512:	46c0      	nop			; (mov r8, r8)
 800d514:	46bd      	mov	sp, r7
 800d516:	b002      	add	sp, #8
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	46c0      	nop			; (mov r8, r8)
 800d51c:	fffff3ff 	.word	0xfffff3ff

0800d520 <LL_UCPD_SetSNKRole>:
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	2280      	movs	r2, #128	; 0x80
 800d52e:	0092      	lsls	r2, r2, #2
 800d530:	431a      	orrs	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	60da      	str	r2, [r3, #12]
}
 800d536:	46c0      	nop			; (mov r8, r8)
 800d538:	46bd      	mov	sp, r7
 800d53a:	b002      	add	sp, #8
 800d53c:	bd80      	pop	{r7, pc}
	...

0800d540 <LL_UCPD_SetSRCRole>:
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	4a03      	ldr	r2, [pc, #12]	; (800d55c <LL_UCPD_SetSRCRole+0x1c>)
 800d54e:	401a      	ands	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	60da      	str	r2, [r3, #12]
}
 800d554:	46c0      	nop			; (mov r8, r8)
 800d556:	46bd      	mov	sp, r7
 800d558:	b002      	add	sp, #8
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	fffffdff 	.word	0xfffffdff

0800d560 <LL_UCPD_SetRpResistor>:
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	4a05      	ldr	r2, [pc, #20]	; (800d584 <LL_UCPD_SetRpResistor+0x24>)
 800d570:	401a      	ands	r2, r3
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	431a      	orrs	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	60da      	str	r2, [r3, #12]
}
 800d57a:	46c0      	nop			; (mov r8, r8)
 800d57c:	46bd      	mov	sp, r7
 800d57e:	b002      	add	sp, #8
 800d580:	bd80      	pop	{r7, pc}
 800d582:	46c0      	nop			; (mov r8, r8)
 800d584:	fffffe7f 	.word	0xfffffe7f

0800d588 <LL_UCPD_SetCCPin>:
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	2240      	movs	r2, #64	; 0x40
 800d598:	4393      	bics	r3, r2
 800d59a:	001a      	movs	r2, r3
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	60da      	str	r2, [r3, #12]
}
 800d5a4:	46c0      	nop			; (mov r8, r8)
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	b002      	add	sp, #8
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <LL_UCPD_RxEnable>:
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	2220      	movs	r2, #32
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	60da      	str	r2, [r3, #12]
}
 800d5c0:	46c0      	nop			; (mov r8, r8)
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	b002      	add	sp, #8
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <LL_UCPD_RxDisable>:
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	4393      	bics	r3, r2
 800d5d8:	001a      	movs	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	60da      	str	r2, [r3, #12]
}
 800d5de:	46c0      	nop			; (mov r8, r8)
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	b002      	add	sp, #8
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <LL_UCPD_SetRxMode>:
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	2210      	movs	r2, #16
 800d5f6:	4393      	bics	r3, r2
 800d5f8:	001a      	movs	r2, r3
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	431a      	orrs	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	60da      	str	r2, [r3, #12]
}
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	46bd      	mov	sp, r7
 800d606:	b002      	add	sp, #8
 800d608:	bd80      	pop	{r7, pc}

0800d60a <LL_UCPD_SendHardReset>:
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b082      	sub	sp, #8
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	2208      	movs	r2, #8
 800d618:	431a      	orrs	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60da      	str	r2, [r3, #12]
}
 800d61e:	46c0      	nop			; (mov r8, r8)
 800d620:	46bd      	mov	sp, r7
 800d622:	b002      	add	sp, #8
 800d624:	bd80      	pop	{r7, pc}

0800d626 <LL_UCPD_SendMessage>:
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b082      	sub	sp, #8
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	2204      	movs	r2, #4
 800d634:	431a      	orrs	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	60da      	str	r2, [r3, #12]
}
 800d63a:	46c0      	nop			; (mov r8, r8)
 800d63c:	46bd      	mov	sp, r7
 800d63e:	b002      	add	sp, #8
 800d640:	bd80      	pop	{r7, pc}

0800d642 <LL_UCPD_SetTxMode>:
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b082      	sub	sp, #8
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	2203      	movs	r2, #3
 800d652:	4393      	bics	r3, r2
 800d654:	001a      	movs	r2, r3
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	431a      	orrs	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	60da      	str	r2, [r3, #12]
}
 800d65e:	46c0      	nop			; (mov r8, r8)
 800d660:	46bd      	mov	sp, r7
 800d662:	b002      	add	sp, #8
 800d664:	bd80      	pop	{r7, pc}

0800d666 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2280      	movs	r2, #128	; 0x80
 800d674:	05d2      	lsls	r2, r2, #23
 800d676:	431a      	orrs	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	601a      	str	r2, [r3, #0]
}
 800d67c:	46c0      	nop			; (mov r8, r8)
 800d67e:	46bd      	mov	sp, r7
 800d680:	b002      	add	sp, #8
 800d682:	bd80      	pop	{r7, pc}

0800d684 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a03      	ldr	r2, [pc, #12]	; (800d6a0 <LL_UCPD_RxDMADisable+0x1c>)
 800d692:	401a      	ands	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	601a      	str	r2, [r3, #0]
}
 800d698:	46c0      	nop			; (mov r8, r8)
 800d69a:	46bd      	mov	sp, r7
 800d69c:	b002      	add	sp, #8
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	bfffffff 	.word	0xbfffffff

0800d6a4 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2280      	movs	r2, #128	; 0x80
 800d6b2:	0592      	lsls	r2, r2, #22
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	601a      	str	r2, [r3, #0]
}
 800d6ba:	46c0      	nop			; (mov r8, r8)
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	b002      	add	sp, #8
 800d6c0:	bd80      	pop	{r7, pc}
	...

0800d6c4 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a03      	ldr	r2, [pc, #12]	; (800d6e0 <LL_UCPD_TxDMADisable+0x1c>)
 800d6d2:	401a      	ands	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	601a      	str	r2, [r3, #0]
}
 800d6d8:	46c0      	nop			; (mov r8, r8)
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	b002      	add	sp, #8
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	dfffffff 	.word	0xdfffffff

0800d6e4 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	61da      	str	r2, [r3, #28]
}
 800d6f4:	46c0      	nop			; (mov r8, r8)
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	b002      	add	sp, #8
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	683a      	ldr	r2, [r7, #0]
 800d70a:	621a      	str	r2, [r3, #32]
}
 800d70c:	46c0      	nop			; (mov r8, r8)
 800d70e:	46bd      	mov	sp, r7
 800d710:	b002      	add	sp, #8
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800d718:	2380      	movs	r3, #128	; 0x80
 800d71a:	055b      	lsls	r3, r3, #21
 800d71c:	0018      	movs	r0, r3
 800d71e:	f7ff fe43 	bl	800d3a8 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800d722:	2380      	movs	r3, #128	; 0x80
 800d724:	015b      	lsls	r3, r3, #5
 800d726:	0018      	movs	r0, r3
 800d728:	f7ff fe28 	bl	800d37c <LL_AHB1_GRP1_EnableClock>
}
 800d72c:	46c0      	nop			; (mov r8, r8)
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
	...

0800d734 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	0002      	movs	r2, r0
 800d73c:	1dfb      	adds	r3, r7, #7
 800d73e:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 800d740:	1dfb      	adds	r3, r7, #7
 800d742:	781a      	ldrb	r2, [r3, #0]
 800d744:	4916      	ldr	r1, [pc, #88]	; (800d7a0 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800d746:	0013      	movs	r3, r2
 800d748:	00db      	lsls	r3, r3, #3
 800d74a:	1a9b      	subs	r3, r3, r2
 800d74c:	00db      	lsls	r3, r3, #3
 800d74e:	585b      	ldr	r3, [r3, r1]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	2207      	movs	r2, #7
 800d754:	4393      	bics	r3, r2
 800d756:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 800d758:	1dfb      	adds	r3, r7, #7
 800d75a:	781a      	ldrb	r2, [r3, #0]
 800d75c:	4910      	ldr	r1, [pc, #64]	; (800d7a0 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800d75e:	0013      	movs	r3, r2
 800d760:	00db      	lsls	r3, r3, #3
 800d762:	1a9b      	subs	r3, r3, r2
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	585b      	ldr	r3, [r3, r1]
 800d768:	0018      	movs	r0, r3
 800d76a:	f7ff fe58 	bl	800d41e <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800d76e:	1dfb      	adds	r3, r7, #7
 800d770:	781a      	ldrb	r2, [r3, #0]
 800d772:	490b      	ldr	r1, [pc, #44]	; (800d7a0 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800d774:	0013      	movs	r3, r2
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	1a9b      	subs	r3, r3, r2
 800d77a:	00db      	lsls	r3, r3, #3
 800d77c:	585b      	ldr	r3, [r3, r1]
 800d77e:	0018      	movs	r0, r3
 800d780:	f7ff fe3e 	bl	800d400 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 800d784:	1dfb      	adds	r3, r7, #7
 800d786:	781a      	ldrb	r2, [r3, #0]
 800d788:	4905      	ldr	r1, [pc, #20]	; (800d7a0 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800d78a:	0013      	movs	r3, r2
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	1a9b      	subs	r3, r3, r2
 800d790:	00db      	lsls	r3, r3, #3
 800d792:	585b      	ldr	r3, [r3, r1]
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	60da      	str	r2, [r3, #12]
}
 800d798:	46c0      	nop			; (mov r8, r8)
 800d79a:	46bd      	mov	sp, r7
 800d79c:	b004      	add	sp, #16
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20001bcc 	.word	0x20001bcc

0800d7a4 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60ba      	str	r2, [r7, #8]
 800d7ac:	607b      	str	r3, [r7, #4]
 800d7ae:	240f      	movs	r4, #15
 800d7b0:	193b      	adds	r3, r7, r4
 800d7b2:	1c02      	adds	r2, r0, #0
 800d7b4:	701a      	strb	r2, [r3, #0]
 800d7b6:	200e      	movs	r0, #14
 800d7b8:	183b      	adds	r3, r7, r0
 800d7ba:	1c0a      	adds	r2, r1, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800d7be:	2317      	movs	r3, #23
 800d7c0:	18fb      	adds	r3, r7, r3
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 800d7c6:	183b      	adds	r3, r7, r0
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	2b05      	cmp	r3, #5
 800d7cc:	d10b      	bne.n	800d7e6 <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 800d7ce:	193b      	adds	r3, r7, r4
 800d7d0:	781a      	ldrb	r2, [r3, #0]
 800d7d2:	496d      	ldr	r1, [pc, #436]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d7d4:	0013      	movs	r3, r2
 800d7d6:	00db      	lsls	r3, r3, #3
 800d7d8:	1a9b      	subs	r3, r3, r2
 800d7da:	00db      	lsls	r3, r3, #3
 800d7dc:	585b      	ldr	r3, [r3, r1]
 800d7de:	0018      	movs	r0, r3
 800d7e0:	f7ff ff13 	bl	800d60a <LL_UCPD_SendHardReset>
 800d7e4:	e0c9      	b.n	800d97a <USBPD_HW_IF_SendBuffer+0x1d6>
  }
  else
  {
    switch (Type)
 800d7e6:	230e      	movs	r3, #14
 800d7e8:	18fb      	adds	r3, r7, r3
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	2b07      	cmp	r3, #7
 800d7ee:	d871      	bhi.n	800d8d4 <USBPD_HW_IF_SendBuffer+0x130>
 800d7f0:	009a      	lsls	r2, r3, #2
 800d7f2:	4b66      	ldr	r3, [pc, #408]	; (800d98c <USBPD_HW_IF_SendBuffer+0x1e8>)
 800d7f4:	18d3      	adds	r3, r2, r3
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	469f      	mov	pc, r3
    {
      case USBPD_SOPTYPE_SOP :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 800d7fa:	240f      	movs	r4, #15
 800d7fc:	193b      	adds	r3, r7, r4
 800d7fe:	781a      	ldrb	r2, [r3, #0]
 800d800:	4961      	ldr	r1, [pc, #388]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d802:	0013      	movs	r3, r2
 800d804:	00db      	lsls	r3, r3, #3
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	00db      	lsls	r3, r3, #3
 800d80a:	585b      	ldr	r3, [r3, r1]
 800d80c:	4a60      	ldr	r2, [pc, #384]	; (800d990 <USBPD_HW_IF_SendBuffer+0x1ec>)
 800d80e:	0011      	movs	r1, r2
 800d810:	0018      	movs	r0, r3
 800d812:	f7ff ff67 	bl	800d6e4 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800d816:	193b      	adds	r3, r7, r4
 800d818:	781a      	ldrb	r2, [r3, #0]
 800d81a:	495b      	ldr	r1, [pc, #364]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d81c:	0013      	movs	r3, r2
 800d81e:	00db      	lsls	r3, r3, #3
 800d820:	1a9b      	subs	r3, r3, r2
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	585b      	ldr	r3, [r3, r1]
 800d826:	2100      	movs	r1, #0
 800d828:	0018      	movs	r0, r3
 800d82a:	f7ff ff0a 	bl	800d642 <LL_UCPD_SetTxMode>
        break;
 800d82e:	e056      	b.n	800d8de <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP1 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 800d830:	240f      	movs	r4, #15
 800d832:	193b      	adds	r3, r7, r4
 800d834:	781a      	ldrb	r2, [r3, #0]
 800d836:	4954      	ldr	r1, [pc, #336]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d838:	0013      	movs	r3, r2
 800d83a:	00db      	lsls	r3, r3, #3
 800d83c:	1a9b      	subs	r3, r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	585b      	ldr	r3, [r3, r1]
 800d842:	4a54      	ldr	r2, [pc, #336]	; (800d994 <USBPD_HW_IF_SendBuffer+0x1f0>)
 800d844:	0011      	movs	r1, r2
 800d846:	0018      	movs	r0, r3
 800d848:	f7ff ff4c 	bl	800d6e4 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800d84c:	193b      	adds	r3, r7, r4
 800d84e:	781a      	ldrb	r2, [r3, #0]
 800d850:	494d      	ldr	r1, [pc, #308]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d852:	0013      	movs	r3, r2
 800d854:	00db      	lsls	r3, r3, #3
 800d856:	1a9b      	subs	r3, r3, r2
 800d858:	00db      	lsls	r3, r3, #3
 800d85a:	585b      	ldr	r3, [r3, r1]
 800d85c:	2100      	movs	r1, #0
 800d85e:	0018      	movs	r0, r3
 800d860:	f7ff feef 	bl	800d642 <LL_UCPD_SetTxMode>
        break;
 800d864:	e03b      	b.n	800d8de <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_SOP2 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 800d866:	240f      	movs	r4, #15
 800d868:	193b      	adds	r3, r7, r4
 800d86a:	781a      	ldrb	r2, [r3, #0]
 800d86c:	4946      	ldr	r1, [pc, #280]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d86e:	0013      	movs	r3, r2
 800d870:	00db      	lsls	r3, r3, #3
 800d872:	1a9b      	subs	r3, r3, r2
 800d874:	00db      	lsls	r3, r3, #3
 800d876:	585b      	ldr	r3, [r3, r1]
 800d878:	4a47      	ldr	r2, [pc, #284]	; (800d998 <USBPD_HW_IF_SendBuffer+0x1f4>)
 800d87a:	0011      	movs	r1, r2
 800d87c:	0018      	movs	r0, r3
 800d87e:	f7ff ff31 	bl	800d6e4 <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800d882:	193b      	adds	r3, r7, r4
 800d884:	781a      	ldrb	r2, [r3, #0]
 800d886:	4940      	ldr	r1, [pc, #256]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d888:	0013      	movs	r3, r2
 800d88a:	00db      	lsls	r3, r3, #3
 800d88c:	1a9b      	subs	r3, r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	585b      	ldr	r3, [r3, r1]
 800d892:	2100      	movs	r1, #0
 800d894:	0018      	movs	r0, r3
 800d896:	f7ff fed4 	bl	800d642 <LL_UCPD_SetTxMode>
        break;
 800d89a:	e020      	b.n	800d8de <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_CABLE_RESET :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 800d89c:	230f      	movs	r3, #15
 800d89e:	18fb      	adds	r3, r7, r3
 800d8a0:	781a      	ldrb	r2, [r3, #0]
 800d8a2:	4939      	ldr	r1, [pc, #228]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d8a4:	0013      	movs	r3, r2
 800d8a6:	00db      	lsls	r3, r3, #3
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	00db      	lsls	r3, r3, #3
 800d8ac:	585b      	ldr	r3, [r3, r1]
 800d8ae:	2101      	movs	r1, #1
 800d8b0:	0018      	movs	r0, r3
 800d8b2:	f7ff fec6 	bl	800d642 <LL_UCPD_SetTxMode>
        break;
 800d8b6:	e012      	b.n	800d8de <USBPD_HW_IF_SendBuffer+0x13a>
      }
      case USBPD_SOPTYPE_BIST_MODE_2 :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800d8b8:	230f      	movs	r3, #15
 800d8ba:	18fb      	adds	r3, r7, r3
 800d8bc:	781a      	ldrb	r2, [r3, #0]
 800d8be:	4932      	ldr	r1, [pc, #200]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d8c0:	0013      	movs	r3, r2
 800d8c2:	00db      	lsls	r3, r3, #3
 800d8c4:	1a9b      	subs	r3, r3, r2
 800d8c6:	00db      	lsls	r3, r3, #3
 800d8c8:	585b      	ldr	r3, [r3, r1]
 800d8ca:	2102      	movs	r1, #2
 800d8cc:	0018      	movs	r0, r3
 800d8ce:	f7ff feb8 	bl	800d642 <LL_UCPD_SetTxMode>
        break;
 800d8d2:	e004      	b.n	800d8de <USBPD_HW_IF_SendBuffer+0x13a>
      }
      default :
        _status = USBPD_ERROR;
 800d8d4:	2317      	movs	r3, #23
 800d8d6:	18fb      	adds	r3, r7, r3
 800d8d8:	2202      	movs	r2, #2
 800d8da:	701a      	strb	r2, [r3, #0]
        break;
 800d8dc:	46c0      	nop			; (mov r8, r8)
    }

    if (USBPD_OK == _status)
 800d8de:	2317      	movs	r3, #23
 800d8e0:	18fb      	adds	r3, r7, r3
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d148      	bne.n	800d97a <USBPD_HW_IF_SendBuffer+0x1d6>
    {
#if defined(_LOW_POWER)
      LPM_SetStopMode((LPM_Id_t)(LPM_PE_0 + PortNum), LPM_Disable);
#endif
      WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 800d8e8:	240f      	movs	r4, #15
 800d8ea:	193b      	adds	r3, r7, r4
 800d8ec:	781a      	ldrb	r2, [r3, #0]
 800d8ee:	4926      	ldr	r1, [pc, #152]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d8f0:	0013      	movs	r3, r2
 800d8f2:	00db      	lsls	r3, r3, #3
 800d8f4:	1a9b      	subs	r3, r3, r2
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	18cb      	adds	r3, r1, r3
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 800d902:	193b      	adds	r3, r7, r4
 800d904:	781a      	ldrb	r2, [r3, #0]
 800d906:	4920      	ldr	r1, [pc, #128]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d908:	0013      	movs	r3, r2
 800d90a:	00db      	lsls	r3, r3, #3
 800d90c:	1a9b      	subs	r3, r3, r2
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	18cb      	adds	r3, r1, r3
 800d912:	3304      	adds	r3, #4
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	605a      	str	r2, [r3, #4]
      Ports[PortNum].hdmatx->CCR |= DMA_CCR_EN;
 800d91a:	193b      	adds	r3, r7, r4
 800d91c:	781a      	ldrb	r2, [r3, #0]
 800d91e:	491a      	ldr	r1, [pc, #104]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d920:	0013      	movs	r3, r2
 800d922:	00db      	lsls	r3, r3, #3
 800d924:	1a9b      	subs	r3, r3, r2
 800d926:	00db      	lsls	r3, r3, #3
 800d928:	18cb      	adds	r3, r1, r3
 800d92a:	3304      	adds	r3, #4
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6819      	ldr	r1, [r3, #0]
 800d930:	193b      	adds	r3, r7, r4
 800d932:	781a      	ldrb	r2, [r3, #0]
 800d934:	4814      	ldr	r0, [pc, #80]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d936:	0013      	movs	r3, r2
 800d938:	00db      	lsls	r3, r3, #3
 800d93a:	1a9b      	subs	r3, r3, r2
 800d93c:	00db      	lsls	r3, r3, #3
 800d93e:	18c3      	adds	r3, r0, r3
 800d940:	3304      	adds	r3, #4
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2201      	movs	r2, #1
 800d946:	430a      	orrs	r2, r1
 800d948:	601a      	str	r2, [r3, #0]

      LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 800d94a:	193b      	adds	r3, r7, r4
 800d94c:	781a      	ldrb	r2, [r3, #0]
 800d94e:	490e      	ldr	r1, [pc, #56]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d950:	0013      	movs	r3, r2
 800d952:	00db      	lsls	r3, r3, #3
 800d954:	1a9b      	subs	r3, r3, r2
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	585b      	ldr	r3, [r3, r1]
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	0011      	movs	r1, r2
 800d95e:	0018      	movs	r0, r3
 800d960:	f7ff fecc 	bl	800d6fc <LL_UCPD_WriteTxPaySize>
      LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800d964:	193b      	adds	r3, r7, r4
 800d966:	781a      	ldrb	r2, [r3, #0]
 800d968:	4907      	ldr	r1, [pc, #28]	; (800d988 <USBPD_HW_IF_SendBuffer+0x1e4>)
 800d96a:	0013      	movs	r3, r2
 800d96c:	00db      	lsls	r3, r3, #3
 800d96e:	1a9b      	subs	r3, r3, r2
 800d970:	00db      	lsls	r3, r3, #3
 800d972:	585b      	ldr	r3, [r3, r1]
 800d974:	0018      	movs	r0, r3
 800d976:	f7ff fe56 	bl	800d626 <LL_UCPD_SendMessage>
    }
  }
  return _status;
 800d97a:	2317      	movs	r3, #23
 800d97c:	18fb      	adds	r3, r7, r3
 800d97e:	781b      	ldrb	r3, [r3, #0]
}
 800d980:	0018      	movs	r0, r3
 800d982:	46bd      	mov	sp, r7
 800d984:	b007      	add	sp, #28
 800d986:	bd90      	pop	{r4, r7, pc}
 800d988:	20001bcc 	.word	0x20001bcc
 800d98c:	08016830 	.word	0x08016830
 800d990:	0008e318 	.word	0x0008e318
 800d994:	00031b18 	.word	0x00031b18
 800d998:	000360d8 	.word	0x000360d8

0800d99c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	0002      	movs	r2, r0
 800d9a4:	1dfb      	adds	r3, r7, #7
 800d9a6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800d9a8:	1dfb      	adds	r3, r7, #7
 800d9aa:	781a      	ldrb	r2, [r3, #0]
 800d9ac:	490c      	ldr	r1, [pc, #48]	; (800d9e0 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800d9ae:	0013      	movs	r3, r2
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	1a9b      	subs	r3, r3, r2
 800d9b4:	00db      	lsls	r3, r3, #3
 800d9b6:	585b      	ldr	r3, [r3, r1]
 800d9b8:	2102      	movs	r1, #2
 800d9ba:	0018      	movs	r0, r3
 800d9bc:	f7ff fe41 	bl	800d642 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800d9c0:	1dfb      	adds	r3, r7, #7
 800d9c2:	781a      	ldrb	r2, [r3, #0]
 800d9c4:	4906      	ldr	r1, [pc, #24]	; (800d9e0 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800d9c6:	0013      	movs	r3, r2
 800d9c8:	00db      	lsls	r3, r3, #3
 800d9ca:	1a9b      	subs	r3, r3, r2
 800d9cc:	00db      	lsls	r3, r3, #3
 800d9ce:	585b      	ldr	r3, [r3, r1]
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	f7ff fe28 	bl	800d626 <LL_UCPD_SendMessage>
}
 800d9d6:	46c0      	nop			; (mov r8, r8)
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	b002      	add	sp, #8
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	20001bcc 	.word	0x20001bcc

0800d9e4 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	0002      	movs	r2, r0
 800d9ec:	1dfb      	adds	r3, r7, #7
 800d9ee:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800d9f0:	2001      	movs	r0, #1
 800d9f2:	f7ff fcef 	bl	800d3d4 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 800d9f6:	1dfb      	adds	r3, r7, #7
 800d9f8:	781a      	ldrb	r2, [r3, #0]
 800d9fa:	4953      	ldr	r1, [pc, #332]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800d9fc:	0013      	movs	r3, r2
 800d9fe:	00db      	lsls	r3, r3, #3
 800da00:	1a9b      	subs	r3, r3, r2
 800da02:	00db      	lsls	r3, r3, #3
 800da04:	18cb      	adds	r3, r1, r3
 800da06:	3310      	adds	r3, #16
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	789b      	ldrb	r3, [r3, #2]
 800da0c:	079b      	lsls	r3, r3, #30
 800da0e:	0f9b      	lsrs	r3, r3, #30
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b02      	cmp	r3, #2
 800da14:	d021      	beq.n	800da5a <USBPDM1_AssertRp+0x76>
 800da16:	dc2f      	bgt.n	800da78 <USBPDM1_AssertRp+0x94>
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <USBPDM1_AssertRp+0x3e>
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d00d      	beq.n	800da3c <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 800da20:	e02a      	b.n	800da78 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 800da22:	1dfb      	adds	r3, r7, #7
 800da24:	781a      	ldrb	r2, [r3, #0]
 800da26:	4948      	ldr	r1, [pc, #288]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800da28:	0013      	movs	r3, r2
 800da2a:	00db      	lsls	r3, r3, #3
 800da2c:	1a9b      	subs	r3, r3, r2
 800da2e:	00db      	lsls	r3, r3, #3
 800da30:	585b      	ldr	r3, [r3, r1]
 800da32:	2180      	movs	r1, #128	; 0x80
 800da34:	0018      	movs	r0, r3
 800da36:	f7ff fd93 	bl	800d560 <LL_UCPD_SetRpResistor>
      break;
 800da3a:	e01e      	b.n	800da7a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800da3c:	1dfb      	adds	r3, r7, #7
 800da3e:	781a      	ldrb	r2, [r3, #0]
 800da40:	4941      	ldr	r1, [pc, #260]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800da42:	0013      	movs	r3, r2
 800da44:	00db      	lsls	r3, r3, #3
 800da46:	1a9b      	subs	r3, r3, r2
 800da48:	00db      	lsls	r3, r3, #3
 800da4a:	585b      	ldr	r3, [r3, r1]
 800da4c:	2280      	movs	r2, #128	; 0x80
 800da4e:	0052      	lsls	r2, r2, #1
 800da50:	0011      	movs	r1, r2
 800da52:	0018      	movs	r0, r3
 800da54:	f7ff fd84 	bl	800d560 <LL_UCPD_SetRpResistor>
      break;
 800da58:	e00f      	b.n	800da7a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800da5a:	1dfb      	adds	r3, r7, #7
 800da5c:	781a      	ldrb	r2, [r3, #0]
 800da5e:	493a      	ldr	r1, [pc, #232]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800da60:	0013      	movs	r3, r2
 800da62:	00db      	lsls	r3, r3, #3
 800da64:	1a9b      	subs	r3, r3, r2
 800da66:	00db      	lsls	r3, r3, #3
 800da68:	585b      	ldr	r3, [r3, r1]
 800da6a:	22c0      	movs	r2, #192	; 0xc0
 800da6c:	0052      	lsls	r2, r2, #1
 800da6e:	0011      	movs	r1, r2
 800da70:	0018      	movs	r0, r3
 800da72:	f7ff fd75 	bl	800d560 <LL_UCPD_SetRpResistor>
      break;
 800da76:	e000      	b.n	800da7a <USBPDM1_AssertRp+0x96>
      break;
 800da78:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800da7a:	1dfb      	adds	r3, r7, #7
 800da7c:	781a      	ldrb	r2, [r3, #0]
 800da7e:	4932      	ldr	r1, [pc, #200]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800da80:	0013      	movs	r3, r2
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	1a9b      	subs	r3, r3, r2
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	585b      	ldr	r3, [r3, r1]
 800da8a:	2100      	movs	r1, #0
 800da8c:	0018      	movs	r0, r3
 800da8e:	f7ff fd33 	bl	800d4f8 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800da92:	1dfb      	adds	r3, r7, #7
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	492c      	ldr	r1, [pc, #176]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800da98:	0013      	movs	r3, r2
 800da9a:	00db      	lsls	r3, r3, #3
 800da9c:	1a9b      	subs	r3, r3, r2
 800da9e:	00db      	lsls	r3, r3, #3
 800daa0:	585b      	ldr	r3, [r3, r1]
 800daa2:	0018      	movs	r0, r3
 800daa4:	f7ff fd4c 	bl	800d540 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 800daa8:	1dfb      	adds	r3, r7, #7
 800daaa:	781a      	ldrb	r2, [r3, #0]
 800daac:	4926      	ldr	r1, [pc, #152]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800daae:	0013      	movs	r3, r2
 800dab0:	00db      	lsls	r3, r3, #3
 800dab2:	1a9b      	subs	r3, r3, r2
 800dab4:	00db      	lsls	r3, r3, #3
 800dab6:	18cb      	adds	r3, r1, r3
 800dab8:	3334      	adds	r3, #52	; 0x34
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d10e      	bne.n	800dade <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800dac0:	1dfb      	adds	r3, r7, #7
 800dac2:	781a      	ldrb	r2, [r3, #0]
 800dac4:	4920      	ldr	r1, [pc, #128]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800dac6:	0013      	movs	r3, r2
 800dac8:	00db      	lsls	r3, r3, #3
 800daca:	1a9b      	subs	r3, r3, r2
 800dacc:	00db      	lsls	r3, r3, #3
 800dace:	585b      	ldr	r3, [r3, r1]
 800dad0:	22c0      	movs	r2, #192	; 0xc0
 800dad2:	0112      	lsls	r2, r2, #4
 800dad4:	0011      	movs	r1, r2
 800dad6:	0018      	movs	r0, r3
 800dad8:	f7ff fd0e 	bl	800d4f8 <LL_UCPD_SetccEnable>
 800dadc:	e01b      	b.n	800db16 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800dade:	1dfb      	adds	r3, r7, #7
 800dae0:	781a      	ldrb	r2, [r3, #0]
 800dae2:	4919      	ldr	r1, [pc, #100]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800dae4:	0013      	movs	r3, r2
 800dae6:	00db      	lsls	r3, r3, #3
 800dae8:	1a9b      	subs	r3, r3, r2
 800daea:	00db      	lsls	r3, r3, #3
 800daec:	5858      	ldr	r0, [r3, r1]
 800daee:	1dfb      	adds	r3, r7, #7
 800daf0:	781a      	ldrb	r2, [r3, #0]
 800daf2:	4915      	ldr	r1, [pc, #84]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800daf4:	0013      	movs	r3, r2
 800daf6:	00db      	lsls	r3, r3, #3
 800daf8:	1a9b      	subs	r3, r3, r2
 800dafa:	00db      	lsls	r3, r3, #3
 800dafc:	18cb      	adds	r3, r1, r3
 800dafe:	3334      	adds	r3, #52	; 0x34
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d102      	bne.n	800db0c <USBPDM1_AssertRp+0x128>
 800db06:	2380      	movs	r3, #128	; 0x80
 800db08:	00db      	lsls	r3, r3, #3
 800db0a:	e001      	b.n	800db10 <USBPDM1_AssertRp+0x12c>
 800db0c:	2380      	movs	r3, #128	; 0x80
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	0019      	movs	r1, r3
 800db12:	f7ff fcf1 	bl	800d4f8 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800db16:	4b0d      	ldr	r3, [pc, #52]	; (800db4c <USBPDM1_AssertRp+0x168>)
 800db18:	6819      	ldr	r1, [r3, #0]
 800db1a:	1dfb      	adds	r3, r7, #7
 800db1c:	781a      	ldrb	r2, [r3, #0]
 800db1e:	480a      	ldr	r0, [pc, #40]	; (800db48 <USBPDM1_AssertRp+0x164>)
 800db20:	0013      	movs	r3, r2
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	1a9b      	subs	r3, r3, r2
 800db26:	00db      	lsls	r3, r3, #3
 800db28:	581b      	ldr	r3, [r3, r0]
 800db2a:	4a09      	ldr	r2, [pc, #36]	; (800db50 <USBPDM1_AssertRp+0x16c>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d102      	bne.n	800db36 <USBPDM1_AssertRp+0x152>
 800db30:	2380      	movs	r3, #128	; 0x80
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	e001      	b.n	800db3a <USBPDM1_AssertRp+0x156>
 800db36:	2380      	movs	r3, #128	; 0x80
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	4a04      	ldr	r2, [pc, #16]	; (800db4c <USBPDM1_AssertRp+0x168>)
 800db3c:	430b      	orrs	r3, r1
 800db3e:	6013      	str	r3, [r2, #0]
}
 800db40:	46c0      	nop			; (mov r8, r8)
 800db42:	46bd      	mov	sp, r7
 800db44:	b002      	add	sp, #8
 800db46:	bd80      	pop	{r7, pc}
 800db48:	20001bcc 	.word	0x20001bcc
 800db4c:	40010000 	.word	0x40010000
 800db50:	4000a000 	.word	0x4000a000

0800db54 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	0002      	movs	r2, r0
 800db5c:	1dfb      	adds	r3, r7, #7
 800db5e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800db60:	46c0      	nop			; (mov r8, r8)
 800db62:	46bd      	mov	sp, r7
 800db64:	b002      	add	sp, #8
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	0002      	movs	r2, r0
 800db70:	1dfb      	adds	r3, r7, #7
 800db72:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 800db74:	1dfb      	adds	r3, r7, #7
 800db76:	781a      	ldrb	r2, [r3, #0]
 800db78:	494b      	ldr	r1, [pc, #300]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800db7a:	0013      	movs	r3, r2
 800db7c:	00db      	lsls	r3, r3, #3
 800db7e:	1a9b      	subs	r3, r3, r2
 800db80:	00db      	lsls	r3, r3, #3
 800db82:	585b      	ldr	r3, [r3, r1]
 800db84:	0018      	movs	r0, r3
 800db86:	f7ff fc69 	bl	800d45c <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 800db8a:	1dfb      	adds	r3, r7, #7
 800db8c:	781a      	ldrb	r2, [r3, #0]
 800db8e:	4946      	ldr	r1, [pc, #280]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800db90:	0013      	movs	r3, r2
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	1a9b      	subs	r3, r3, r2
 800db96:	00db      	lsls	r3, r3, #3
 800db98:	585b      	ldr	r3, [r3, r1]
 800db9a:	0018      	movs	r0, r3
 800db9c:	f7ff fc7e 	bl	800d49c <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800dba0:	2001      	movs	r0, #1
 800dba2:	f7ff fc17 	bl	800d3d4 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800dba6:	1dfb      	adds	r3, r7, #7
 800dba8:	781a      	ldrb	r2, [r3, #0]
 800dbaa:	493f      	ldr	r1, [pc, #252]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dbac:	0013      	movs	r3, r2
 800dbae:	00db      	lsls	r3, r3, #3
 800dbb0:	1a9b      	subs	r3, r3, r2
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	585b      	ldr	r3, [r3, r1]
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	0018      	movs	r0, r3
 800dbba:	f7ff fc9d 	bl	800d4f8 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800dbbe:	1dfb      	adds	r3, r7, #7
 800dbc0:	781a      	ldrb	r2, [r3, #0]
 800dbc2:	4939      	ldr	r1, [pc, #228]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dbc4:	0013      	movs	r3, r2
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	1a9b      	subs	r3, r3, r2
 800dbca:	00db      	lsls	r3, r3, #3
 800dbcc:	585b      	ldr	r3, [r3, r1]
 800dbce:	0018      	movs	r0, r3
 800dbd0:	f7ff fca6 	bl	800d520 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 800dbd4:	1dfb      	adds	r3, r7, #7
 800dbd6:	781a      	ldrb	r2, [r3, #0]
 800dbd8:	4933      	ldr	r1, [pc, #204]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dbda:	0013      	movs	r3, r2
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	1a9b      	subs	r3, r3, r2
 800dbe0:	00db      	lsls	r3, r3, #3
 800dbe2:	18cb      	adds	r3, r1, r3
 800dbe4:	3334      	adds	r3, #52	; 0x34
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10e      	bne.n	800dc0a <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800dbec:	1dfb      	adds	r3, r7, #7
 800dbee:	781a      	ldrb	r2, [r3, #0]
 800dbf0:	492d      	ldr	r1, [pc, #180]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dbf2:	0013      	movs	r3, r2
 800dbf4:	00db      	lsls	r3, r3, #3
 800dbf6:	1a9b      	subs	r3, r3, r2
 800dbf8:	00db      	lsls	r3, r3, #3
 800dbfa:	585b      	ldr	r3, [r3, r1]
 800dbfc:	22c0      	movs	r2, #192	; 0xc0
 800dbfe:	0112      	lsls	r2, r2, #4
 800dc00:	0011      	movs	r1, r2
 800dc02:	0018      	movs	r0, r3
 800dc04:	f7ff fc78 	bl	800d4f8 <LL_UCPD_SetccEnable>
 800dc08:	e01b      	b.n	800dc42 <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800dc0a:	1dfb      	adds	r3, r7, #7
 800dc0c:	781a      	ldrb	r2, [r3, #0]
 800dc0e:	4926      	ldr	r1, [pc, #152]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dc10:	0013      	movs	r3, r2
 800dc12:	00db      	lsls	r3, r3, #3
 800dc14:	1a9b      	subs	r3, r3, r2
 800dc16:	00db      	lsls	r3, r3, #3
 800dc18:	5858      	ldr	r0, [r3, r1]
 800dc1a:	1dfb      	adds	r3, r7, #7
 800dc1c:	781a      	ldrb	r2, [r3, #0]
 800dc1e:	4922      	ldr	r1, [pc, #136]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dc20:	0013      	movs	r3, r2
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	1a9b      	subs	r3, r3, r2
 800dc26:	00db      	lsls	r3, r3, #3
 800dc28:	18cb      	adds	r3, r1, r3
 800dc2a:	3334      	adds	r3, #52	; 0x34
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d102      	bne.n	800dc38 <USBPDM1_AssertRd+0xd0>
 800dc32:	2380      	movs	r3, #128	; 0x80
 800dc34:	00db      	lsls	r3, r3, #3
 800dc36:	e001      	b.n	800dc3c <USBPDM1_AssertRd+0xd4>
 800dc38:	2380      	movs	r3, #128	; 0x80
 800dc3a:	011b      	lsls	r3, r3, #4
 800dc3c:	0019      	movs	r1, r3
 800dc3e:	f7ff fc5b 	bl	800d4f8 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800dc42:	4b1a      	ldr	r3, [pc, #104]	; (800dcac <USBPDM1_AssertRd+0x144>)
 800dc44:	6819      	ldr	r1, [r3, #0]
 800dc46:	1dfb      	adds	r3, r7, #7
 800dc48:	781a      	ldrb	r2, [r3, #0]
 800dc4a:	4817      	ldr	r0, [pc, #92]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dc4c:	0013      	movs	r3, r2
 800dc4e:	00db      	lsls	r3, r3, #3
 800dc50:	1a9b      	subs	r3, r3, r2
 800dc52:	00db      	lsls	r3, r3, #3
 800dc54:	581b      	ldr	r3, [r3, r0]
 800dc56:	4a16      	ldr	r2, [pc, #88]	; (800dcb0 <USBPDM1_AssertRd+0x148>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d102      	bne.n	800dc62 <USBPDM1_AssertRd+0xfa>
 800dc5c:	2380      	movs	r3, #128	; 0x80
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	e001      	b.n	800dc66 <USBPDM1_AssertRd+0xfe>
 800dc62:	2380      	movs	r3, #128	; 0x80
 800dc64:	00db      	lsls	r3, r3, #3
 800dc66:	4a11      	ldr	r2, [pc, #68]	; (800dcac <USBPDM1_AssertRd+0x144>)
 800dc68:	430b      	orrs	r3, r1
 800dc6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 800dc6c:	2001      	movs	r0, #1
 800dc6e:	f7f9 fbc3 	bl	80073f8 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 800dc72:	1dfb      	adds	r3, r7, #7
 800dc74:	781a      	ldrb	r2, [r3, #0]
 800dc76:	490c      	ldr	r1, [pc, #48]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dc78:	0013      	movs	r3, r2
 800dc7a:	00db      	lsls	r3, r3, #3
 800dc7c:	1a9b      	subs	r3, r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	585b      	ldr	r3, [r3, r1]
 800dc82:	0018      	movs	r0, r3
 800dc84:	f7ff fbda 	bl	800d43c <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 800dc88:	1dfb      	adds	r3, r7, #7
 800dc8a:	781a      	ldrb	r2, [r3, #0]
 800dc8c:	4906      	ldr	r1, [pc, #24]	; (800dca8 <USBPDM1_AssertRd+0x140>)
 800dc8e:	0013      	movs	r3, r2
 800dc90:	00db      	lsls	r3, r3, #3
 800dc92:	1a9b      	subs	r3, r3, r2
 800dc94:	00db      	lsls	r3, r3, #3
 800dc96:	585b      	ldr	r3, [r3, r1]
 800dc98:	0018      	movs	r0, r3
 800dc9a:	f7ff fbef 	bl	800d47c <LL_UCPD_TypeCDetectionCC1Enable>
#endif
}
 800dc9e:	46c0      	nop			; (mov r8, r8)
 800dca0:	46bd      	mov	sp, r7
 800dca2:	b002      	add	sp, #8
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	46c0      	nop			; (mov r8, r8)
 800dca8:	20001bcc 	.word	0x20001bcc
 800dcac:	40010000 	.word	0x40010000
 800dcb0:	4000a000 	.word	0x4000a000

0800dcb4 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	0002      	movs	r2, r0
 800dcbc:	1dfb      	adds	r3, r7, #7
 800dcbe:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800dcc0:	46c0      	nop			; (mov r8, r8)
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	b002      	add	sp, #8
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	0002      	movs	r2, r0
 800dcd0:	1dfb      	adds	r3, r7, #7
 800dcd2:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800dcd4:	2001      	movs	r0, #1
 800dcd6:	f7ff fb7d 	bl	800d3d4 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800dcda:	1dfb      	adds	r3, r7, #7
 800dcdc:	781a      	ldrb	r2, [r3, #0]
 800dcde:	4922      	ldr	r1, [pc, #136]	; (800dd68 <USBPDM1_EnterErrorRecovery+0xa0>)
 800dce0:	0013      	movs	r3, r2
 800dce2:	00db      	lsls	r3, r3, #3
 800dce4:	1a9b      	subs	r3, r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	585b      	ldr	r3, [r3, r1]
 800dcea:	0018      	movs	r0, r3
 800dcec:	f7ff fc28 	bl	800d540 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 800dcf0:	1dfb      	adds	r3, r7, #7
 800dcf2:	781a      	ldrb	r2, [r3, #0]
 800dcf4:	491c      	ldr	r1, [pc, #112]	; (800dd68 <USBPDM1_EnterErrorRecovery+0xa0>)
 800dcf6:	0013      	movs	r3, r2
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	1a9b      	subs	r3, r3, r2
 800dcfc:	00db      	lsls	r3, r3, #3
 800dcfe:	585b      	ldr	r3, [r3, r1]
 800dd00:	2100      	movs	r1, #0
 800dd02:	0018      	movs	r0, r3
 800dd04:	f7ff fc2c 	bl	800d560 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800dd08:	1dfb      	adds	r3, r7, #7
 800dd0a:	781a      	ldrb	r2, [r3, #0]
 800dd0c:	4916      	ldr	r1, [pc, #88]	; (800dd68 <USBPDM1_EnterErrorRecovery+0xa0>)
 800dd0e:	0013      	movs	r3, r2
 800dd10:	00db      	lsls	r3, r3, #3
 800dd12:	1a9b      	subs	r3, r3, r2
 800dd14:	00db      	lsls	r3, r3, #3
 800dd16:	585b      	ldr	r3, [r3, r1]
 800dd18:	2100      	movs	r1, #0
 800dd1a:	0018      	movs	r0, r3
 800dd1c:	f7ff fbec 	bl	800d4f8 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 800dd20:	4b12      	ldr	r3, [pc, #72]	; (800dd6c <USBPDM1_EnterErrorRecovery+0xa4>)
 800dd22:	6819      	ldr	r1, [r3, #0]
 800dd24:	1dfb      	adds	r3, r7, #7
 800dd26:	781a      	ldrb	r2, [r3, #0]
 800dd28:	480f      	ldr	r0, [pc, #60]	; (800dd68 <USBPDM1_EnterErrorRecovery+0xa0>)
 800dd2a:	0013      	movs	r3, r2
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	1a9b      	subs	r3, r3, r2
 800dd30:	00db      	lsls	r3, r3, #3
 800dd32:	581b      	ldr	r3, [r3, r0]
 800dd34:	4a0e      	ldr	r2, [pc, #56]	; (800dd70 <USBPDM1_EnterErrorRecovery+0xa8>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d102      	bne.n	800dd40 <USBPDM1_EnterErrorRecovery+0x78>
 800dd3a:	2380      	movs	r3, #128	; 0x80
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	e001      	b.n	800dd44 <USBPDM1_EnterErrorRecovery+0x7c>
 800dd40:	2380      	movs	r3, #128	; 0x80
 800dd42:	00db      	lsls	r3, r3, #3
 800dd44:	4a09      	ldr	r2, [pc, #36]	; (800dd6c <USBPDM1_EnterErrorRecovery+0xa4>)
 800dd46:	430b      	orrs	r3, r1
 800dd48:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800dd4a:	1dfb      	adds	r3, r7, #7
 800dd4c:	781a      	ldrb	r2, [r3, #0]
 800dd4e:	4906      	ldr	r1, [pc, #24]	; (800dd68 <USBPDM1_EnterErrorRecovery+0xa0>)
 800dd50:	0013      	movs	r3, r2
 800dd52:	00db      	lsls	r3, r3, #3
 800dd54:	1a9b      	subs	r3, r3, r2
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	585b      	ldr	r3, [r3, r1]
 800dd5a:	0018      	movs	r0, r3
 800dd5c:	f7ff fc34 	bl	800d5c8 <LL_UCPD_RxDisable>
}
 800dd60:	46c0      	nop			; (mov r8, r8)
 800dd62:	46bd      	mov	sp, r7
 800dd64:	b002      	add	sp, #8
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	20001bcc 	.word	0x20001bcc
 800dd6c:	40010000 	.word	0x40010000
 800dd70:	4000a000 	.word	0x4000a000

0800dd74 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	0002      	movs	r2, r0
 800dd7c:	1dfb      	adds	r3, r7, #7
 800dd7e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 800dd80:	1dfb      	adds	r3, r7, #7
 800dd82:	781a      	ldrb	r2, [r3, #0]
 800dd84:	4906      	ldr	r1, [pc, #24]	; (800dda0 <USBPD_HW_IF_EnableRX+0x2c>)
 800dd86:	0013      	movs	r3, r2
 800dd88:	00db      	lsls	r3, r3, #3
 800dd8a:	1a9b      	subs	r3, r3, r2
 800dd8c:	00db      	lsls	r3, r3, #3
 800dd8e:	585b      	ldr	r3, [r3, r1]
 800dd90:	0018      	movs	r0, r3
 800dd92:	f7ff fc0b 	bl	800d5ac <LL_UCPD_RxEnable>
}
 800dd96:	46c0      	nop			; (mov r8, r8)
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	b002      	add	sp, #8
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	46c0      	nop			; (mov r8, r8)
 800dda0:	20001bcc 	.word	0x20001bcc

0800dda4 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	0002      	movs	r2, r0
 800ddac:	1dfb      	adds	r3, r7, #7
 800ddae:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800ddb0:	1dfb      	adds	r3, r7, #7
 800ddb2:	781a      	ldrb	r2, [r3, #0]
 800ddb4:	4906      	ldr	r1, [pc, #24]	; (800ddd0 <USBPD_HW_IF_DisableRX+0x2c>)
 800ddb6:	0013      	movs	r3, r2
 800ddb8:	00db      	lsls	r3, r3, #3
 800ddba:	1a9b      	subs	r3, r3, r2
 800ddbc:	00db      	lsls	r3, r3, #3
 800ddbe:	585b      	ldr	r3, [r3, r1]
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	f7ff fc01 	bl	800d5c8 <LL_UCPD_RxDisable>
}
 800ddc6:	46c0      	nop			; (mov r8, r8)
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	b002      	add	sp, #8
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	46c0      	nop			; (mov r8, r8)
 800ddd0:	20001bcc 	.word	0x20001bcc

0800ddd4 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 800ddd4:	b590      	push	{r4, r7, lr}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	0002      	movs	r2, r0
 800dddc:	6039      	str	r1, [r7, #0]
 800ddde:	1dfb      	adds	r3, r7, #7
 800dde0:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 800dde2:	f000 fc49 	bl	800e678 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 800dde6:	1dfb      	adds	r3, r7, #7
 800dde8:	781c      	ldrb	r4, [r3, #0]
 800ddea:	1dfb      	adds	r3, r7, #7
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	0018      	movs	r0, r3
 800ddf0:	f7fe fdf6 	bl	800c9e0 <USBPD_HW_Init_DMATxInstance>
 800ddf4:	0001      	movs	r1, r0
 800ddf6:	4aa6      	ldr	r2, [pc, #664]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800ddf8:	0023      	movs	r3, r4
 800ddfa:	00db      	lsls	r3, r3, #3
 800ddfc:	1b1b      	subs	r3, r3, r4
 800ddfe:	00db      	lsls	r3, r3, #3
 800de00:	18d3      	adds	r3, r2, r3
 800de02:	3304      	adds	r3, #4
 800de04:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 800de06:	1dfb      	adds	r3, r7, #7
 800de08:	781c      	ldrb	r4, [r3, #0]
 800de0a:	1dfb      	adds	r3, r7, #7
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	0018      	movs	r0, r3
 800de10:	f7fe fd96 	bl	800c940 <USBPD_HW_Init_DMARxInstance>
 800de14:	0001      	movs	r1, r0
 800de16:	4a9e      	ldr	r2, [pc, #632]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800de18:	0023      	movs	r3, r4
 800de1a:	00db      	lsls	r3, r3, #3
 800de1c:	1b1b      	subs	r3, r3, r4
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	18d3      	adds	r3, r2, r3
 800de22:	3308      	adds	r3, #8
 800de24:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 800de26:	1dfb      	adds	r3, r7, #7
 800de28:	781a      	ldrb	r2, [r3, #0]
 800de2a:	4999      	ldr	r1, [pc, #612]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800de2c:	0013      	movs	r3, r2
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	1a9b      	subs	r3, r3, r2
 800de32:	00db      	lsls	r3, r3, #3
 800de34:	585b      	ldr	r3, [r3, r1]
 800de36:	3330      	adds	r3, #48	; 0x30
 800de38:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 800de3a:	1dfb      	adds	r3, r7, #7
 800de3c:	781a      	ldrb	r2, [r3, #0]
 800de3e:	4994      	ldr	r1, [pc, #592]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800de40:	0013      	movs	r3, r2
 800de42:	00db      	lsls	r3, r3, #3
 800de44:	1a9b      	subs	r3, r3, r2
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	18cb      	adds	r3, r1, r3
 800de4a:	3308      	adds	r3, #8
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800de52:	1dfb      	adds	r3, r7, #7
 800de54:	781a      	ldrb	r2, [r3, #0]
 800de56:	498e      	ldr	r1, [pc, #568]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800de58:	0013      	movs	r3, r2
 800de5a:	00db      	lsls	r3, r3, #3
 800de5c:	1a9b      	subs	r3, r3, r2
 800de5e:	00db      	lsls	r3, r3, #3
 800de60:	18cb      	adds	r3, r1, r3
 800de62:	3330      	adds	r3, #48	; 0x30
 800de64:	6818      	ldr	r0, [r3, #0]
 800de66:	1dfb      	adds	r3, r7, #7
 800de68:	781a      	ldrb	r2, [r3, #0]
 800de6a:	4989      	ldr	r1, [pc, #548]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800de6c:	0013      	movs	r3, r2
 800de6e:	00db      	lsls	r3, r3, #3
 800de70:	1a9b      	subs	r3, r3, r2
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	18cb      	adds	r3, r1, r3
 800de76:	3308      	adds	r3, #8
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	0002      	movs	r2, r0
 800de7c:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 800de7e:	1dfb      	adds	r3, r7, #7
 800de80:	781a      	ldrb	r2, [r3, #0]
 800de82:	4983      	ldr	r1, [pc, #524]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800de84:	0013      	movs	r3, r2
 800de86:	00db      	lsls	r3, r3, #3
 800de88:	1a9b      	subs	r3, r3, r2
 800de8a:	00db      	lsls	r3, r3, #3
 800de8c:	18cb      	adds	r3, r1, r3
 800de8e:	3308      	adds	r3, #8
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2284      	movs	r2, #132	; 0x84
 800de94:	0052      	lsls	r2, r2, #1
 800de96:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 800de98:	1dfb      	adds	r3, r7, #7
 800de9a:	781a      	ldrb	r2, [r3, #0]
 800de9c:	497c      	ldr	r1, [pc, #496]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800de9e:	0013      	movs	r3, r2
 800dea0:	00db      	lsls	r3, r3, #3
 800dea2:	1a9b      	subs	r3, r3, r2
 800dea4:	00db      	lsls	r3, r3, #3
 800dea6:	18cb      	adds	r3, r1, r3
 800dea8:	3308      	adds	r3, #8
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	6819      	ldr	r1, [r3, #0]
 800deae:	1dfb      	adds	r3, r7, #7
 800deb0:	781a      	ldrb	r2, [r3, #0]
 800deb2:	4877      	ldr	r0, [pc, #476]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800deb4:	0013      	movs	r3, r2
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	1a9b      	subs	r3, r3, r2
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	18c3      	adds	r3, r0, r3
 800debe:	3308      	adds	r3, #8
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2201      	movs	r2, #1
 800dec4:	430a      	orrs	r2, r1
 800dec6:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 800dec8:	1dfb      	adds	r3, r7, #7
 800deca:	781a      	ldrb	r2, [r3, #0]
 800decc:	4970      	ldr	r1, [pc, #448]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800dece:	0013      	movs	r3, r2
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	1a9b      	subs	r3, r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	585b      	ldr	r3, [r3, r1]
 800ded8:	3324      	adds	r3, #36	; 0x24
 800deda:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 800dedc:	1dfb      	adds	r3, r7, #7
 800dede:	781a      	ldrb	r2, [r3, #0]
 800dee0:	496b      	ldr	r1, [pc, #428]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800dee2:	0013      	movs	r3, r2
 800dee4:	00db      	lsls	r3, r3, #3
 800dee6:	1a9b      	subs	r3, r3, r2
 800dee8:	00db      	lsls	r3, r3, #3
 800deea:	18cb      	adds	r3, r1, r3
 800deec:	3304      	adds	r3, #4
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	609a      	str	r2, [r3, #8]

  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE | UCPD_IMR_TXMSGABTIE |\
                        UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE    | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 800def4:	1dfb      	adds	r3, r7, #7
 800def6:	781a      	ldrb	r2, [r3, #0]
 800def8:	4965      	ldr	r1, [pc, #404]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800defa:	0013      	movs	r3, r2
 800defc:	00db      	lsls	r3, r3, #3
 800defe:	1a9b      	subs	r3, r3, r2
 800df00:	00db      	lsls	r3, r3, #3
 800df02:	585b      	ldr	r3, [r3, r1]
 800df04:	6919      	ldr	r1, [r3, #16]
 800df06:	1dfb      	adds	r3, r7, #7
 800df08:	781a      	ldrb	r2, [r3, #0]
 800df0a:	4861      	ldr	r0, [pc, #388]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800df0c:	0013      	movs	r3, r2
 800df0e:	00db      	lsls	r3, r3, #3
 800df10:	1a9b      	subs	r3, r3, r2
 800df12:	00db      	lsls	r3, r3, #3
 800df14:	581b      	ldr	r3, [r3, r0]
 800df16:	4a5f      	ldr	r2, [pc, #380]	; (800e094 <HW_SignalAttachement+0x2c0>)
 800df18:	430a      	orrs	r2, r1
 800df1a:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

#if !defined(USBPDCORE_LIB_NO_PD)||defined(USBPD_TYPE_STATE_MACHINE)
  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 800df1c:	1dfb      	adds	r3, r7, #7
 800df1e:	781a      	ldrb	r2, [r3, #0]
 800df20:	495b      	ldr	r1, [pc, #364]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800df22:	0013      	movs	r3, r2
 800df24:	00db      	lsls	r3, r3, #3
 800df26:	1a9b      	subs	r3, r3, r2
 800df28:	00db      	lsls	r3, r3, #3
 800df2a:	18cb      	adds	r3, r1, r3
 800df2c:	3334      	adds	r3, #52	; 0x34
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	601a      	str	r2, [r3, #0]
#endif /* !USBPDCORE_LIB_NO_PD || USBPD_TYPE_STATE_MACHINE */

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 800df32:	1dfb      	adds	r3, r7, #7
 800df34:	781a      	ldrb	r2, [r3, #0]
 800df36:	4956      	ldr	r1, [pc, #344]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800df38:	0013      	movs	r3, r2
 800df3a:	00db      	lsls	r3, r3, #3
 800df3c:	1a9b      	subs	r3, r3, r2
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	5858      	ldr	r0, [r3, r1]
 800df42:	1dfb      	adds	r3, r7, #7
 800df44:	781a      	ldrb	r2, [r3, #0]
 800df46:	4952      	ldr	r1, [pc, #328]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800df48:	0013      	movs	r3, r2
 800df4a:	00db      	lsls	r3, r3, #3
 800df4c:	1a9b      	subs	r3, r3, r2
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	18cb      	adds	r3, r1, r3
 800df52:	3334      	adds	r3, #52	; 0x34
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b01      	cmp	r3, #1
 800df58:	d101      	bne.n	800df5e <HW_SignalAttachement+0x18a>
 800df5a:	2300      	movs	r3, #0
 800df5c:	e000      	b.n	800df60 <HW_SignalAttachement+0x18c>
 800df5e:	2340      	movs	r3, #64	; 0x40
 800df60:	0019      	movs	r1, r3
 800df62:	f7ff fb11 	bl	800d588 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 800df66:	1dfb      	adds	r3, r7, #7
 800df68:	781a      	ldrb	r2, [r3, #0]
 800df6a:	4949      	ldr	r1, [pc, #292]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800df6c:	0013      	movs	r3, r2
 800df6e:	00db      	lsls	r3, r3, #3
 800df70:	1a9b      	subs	r3, r3, r2
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	18cb      	adds	r3, r1, r3
 800df76:	330c      	adds	r3, #12
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	7a1b      	ldrb	r3, [r3, #8]
 800df7c:	2202      	movs	r2, #2
 800df7e:	4013      	ands	r3, r2
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	d034      	beq.n	800dff0 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 800df86:	1dfb      	adds	r3, r7, #7
 800df88:	781a      	ldrb	r2, [r3, #0]
 800df8a:	4941      	ldr	r1, [pc, #260]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800df8c:	0013      	movs	r3, r2
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	1a9b      	subs	r3, r3, r2
 800df92:	00db      	lsls	r3, r3, #3
 800df94:	18cb      	adds	r3, r1, r3
 800df96:	3334      	adds	r3, #52	; 0x34
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d101      	bne.n	800dfa2 <HW_SignalAttachement+0x1ce>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e000      	b.n	800dfa4 <HW_SignalAttachement+0x1d0>
 800dfa2:	2302      	movs	r3, #2
 800dfa4:	1dfa      	adds	r2, r7, #7
 800dfa6:	7812      	ldrb	r2, [r2, #0]
 800dfa8:	0019      	movs	r1, r3
 800dfaa:	0010      	movs	r0, r2
 800dfac:	f7fe fd68 	bl	800ca80 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 800dfb0:	1dfb      	adds	r3, r7, #7
 800dfb2:	781a      	ldrb	r2, [r3, #0]
 800dfb4:	4936      	ldr	r1, [pc, #216]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800dfb6:	0013      	movs	r3, r2
 800dfb8:	00db      	lsls	r3, r3, #3
 800dfba:	1a9b      	subs	r3, r3, r2
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	585b      	ldr	r3, [r3, r1]
 800dfc0:	0018      	movs	r0, r3
 800dfc2:	f7ff fa89 	bl	800d4d8 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 800dfc6:	1dfb      	adds	r3, r7, #7
 800dfc8:	781a      	ldrb	r2, [r3, #0]
 800dfca:	4931      	ldr	r1, [pc, #196]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800dfcc:	0013      	movs	r3, r2
 800dfce:	00db      	lsls	r3, r3, #3
 800dfd0:	1a9b      	subs	r3, r3, r2
 800dfd2:	00db      	lsls	r3, r3, #3
 800dfd4:	585b      	ldr	r3, [r3, r1]
 800dfd6:	6919      	ldr	r1, [r3, #16]
 800dfd8:	1dfb      	adds	r3, r7, #7
 800dfda:	781a      	ldrb	r2, [r3, #0]
 800dfdc:	482c      	ldr	r0, [pc, #176]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800dfde:	0013      	movs	r3, r2
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	1a9b      	subs	r3, r3, r2
 800dfe4:	00db      	lsls	r3, r3, #3
 800dfe6:	581b      	ldr	r3, [r3, r0]
 800dfe8:	2280      	movs	r2, #128	; 0x80
 800dfea:	0352      	lsls	r2, r2, #13
 800dfec:	430a      	orrs	r2, r1
 800dfee:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  (Ports[PortNum].CCx == CC1) ? LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1) : LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 800dff0:	1dfb      	adds	r3, r7, #7
 800dff2:	781a      	ldrb	r2, [r3, #0]
 800dff4:	4926      	ldr	r1, [pc, #152]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800dff6:	0013      	movs	r3, r2
 800dff8:	00db      	lsls	r3, r3, #3
 800dffa:	1a9b      	subs	r3, r3, r2
 800dffc:	00db      	lsls	r3, r3, #3
 800dffe:	18cb      	adds	r3, r1, r3
 800e000:	3334      	adds	r3, #52	; 0x34
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b01      	cmp	r3, #1
 800e006:	d10e      	bne.n	800e026 <HW_SignalAttachement+0x252>
 800e008:	1dfb      	adds	r3, r7, #7
 800e00a:	781a      	ldrb	r2, [r3, #0]
 800e00c:	4920      	ldr	r1, [pc, #128]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800e00e:	0013      	movs	r3, r2
 800e010:	00db      	lsls	r3, r3, #3
 800e012:	1a9b      	subs	r3, r3, r2
 800e014:	00db      	lsls	r3, r3, #3
 800e016:	585b      	ldr	r3, [r3, r1]
 800e018:	2280      	movs	r2, #128	; 0x80
 800e01a:	00d2      	lsls	r2, r2, #3
 800e01c:	0011      	movs	r1, r2
 800e01e:	0018      	movs	r0, r3
 800e020:	f7ff fa6a 	bl	800d4f8 <LL_UCPD_SetccEnable>
 800e024:	e00d      	b.n	800e042 <HW_SignalAttachement+0x26e>
 800e026:	1dfb      	adds	r3, r7, #7
 800e028:	781a      	ldrb	r2, [r3, #0]
 800e02a:	4919      	ldr	r1, [pc, #100]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800e02c:	0013      	movs	r3, r2
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	1a9b      	subs	r3, r3, r2
 800e032:	00db      	lsls	r3, r3, #3
 800e034:	585b      	ldr	r3, [r3, r1]
 800e036:	2280      	movs	r2, #128	; 0x80
 800e038:	0112      	lsls	r2, r2, #4
 800e03a:	0011      	movs	r1, r2
 800e03c:	0018      	movs	r0, r3
 800e03e:	f7ff fa5b 	bl	800d4f8 <LL_UCPD_SetccEnable>

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 800e042:	1dfb      	adds	r3, r7, #7
 800e044:	781a      	ldrb	r2, [r3, #0]
 800e046:	4912      	ldr	r1, [pc, #72]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800e048:	0013      	movs	r3, r2
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	1a9b      	subs	r3, r3, r2
 800e04e:	00db      	lsls	r3, r3, #3
 800e050:	585b      	ldr	r3, [r3, r1]
 800e052:	2100      	movs	r1, #0
 800e054:	0018      	movs	r0, r3
 800e056:	f7ff fac6 	bl	800d5e6 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 800e05a:	1dfb      	adds	r3, r7, #7
 800e05c:	781a      	ldrb	r2, [r3, #0]
 800e05e:	490c      	ldr	r1, [pc, #48]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800e060:	0013      	movs	r3, r2
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	1a9b      	subs	r3, r3, r2
 800e066:	00db      	lsls	r3, r3, #3
 800e068:	585b      	ldr	r3, [r3, r1]
 800e06a:	0018      	movs	r0, r3
 800e06c:	f7ff fafb 	bl	800d666 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 800e070:	1dfb      	adds	r3, r7, #7
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	4906      	ldr	r1, [pc, #24]	; (800e090 <HW_SignalAttachement+0x2bc>)
 800e076:	0013      	movs	r3, r2
 800e078:	00db      	lsls	r3, r3, #3
 800e07a:	1a9b      	subs	r3, r3, r2
 800e07c:	00db      	lsls	r3, r3, #3
 800e07e:	585b      	ldr	r3, [r3, r1]
 800e080:	0018      	movs	r0, r3
 800e082:	f7ff fb0f 	bl	800d6a4 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800e086:	46c0      	nop			; (mov r8, r8)
 800e088:	46bd      	mov	sp, r7
 800e08a:	b005      	add	sp, #20
 800e08c:	bd90      	pop	{r4, r7, pc}
 800e08e:	46c0      	nop			; (mov r8, r8)
 800e090:	20001bcc 	.word	0x20001bcc
 800e094:	00001e7e 	.word	0x00001e7e

0800e098 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	0002      	movs	r2, r0
 800e0a0:	1dfb      	adds	r3, r7, #7
 800e0a2:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 800e0a4:	1dfb      	adds	r3, r7, #7
 800e0a6:	781a      	ldrb	r2, [r3, #0]
 800e0a8:	4933      	ldr	r1, [pc, #204]	; (800e178 <HW_SignalDetachment+0xe0>)
 800e0aa:	0013      	movs	r3, r2
 800e0ac:	00db      	lsls	r3, r3, #3
 800e0ae:	1a9b      	subs	r3, r3, r2
 800e0b0:	00db      	lsls	r3, r3, #3
 800e0b2:	585b      	ldr	r3, [r3, r1]
 800e0b4:	0018      	movs	r0, r3
 800e0b6:	f7ff fae5 	bl	800d684 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 800e0ba:	1dfb      	adds	r3, r7, #7
 800e0bc:	781a      	ldrb	r2, [r3, #0]
 800e0be:	492e      	ldr	r1, [pc, #184]	; (800e178 <HW_SignalDetachment+0xe0>)
 800e0c0:	0013      	movs	r3, r2
 800e0c2:	00db      	lsls	r3, r3, #3
 800e0c4:	1a9b      	subs	r3, r3, r2
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	585b      	ldr	r3, [r3, r1]
 800e0ca:	0018      	movs	r0, r3
 800e0cc:	f7ff fafa 	bl	800d6c4 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800e0d0:	1dfb      	adds	r3, r7, #7
 800e0d2:	781a      	ldrb	r2, [r3, #0]
 800e0d4:	4928      	ldr	r1, [pc, #160]	; (800e178 <HW_SignalDetachment+0xe0>)
 800e0d6:	0013      	movs	r3, r2
 800e0d8:	00db      	lsls	r3, r3, #3
 800e0da:	1a9b      	subs	r3, r3, r2
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	585b      	ldr	r3, [r3, r1]
 800e0e0:	0018      	movs	r0, r3
 800e0e2:	f7ff fa71 	bl	800d5c8 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 800e0e6:	1dfb      	adds	r3, r7, #7
 800e0e8:	781a      	ldrb	r2, [r3, #0]
 800e0ea:	4923      	ldr	r1, [pc, #140]	; (800e178 <HW_SignalDetachment+0xe0>)
 800e0ec:	0013      	movs	r3, r2
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	1a9b      	subs	r3, r3, r2
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	585b      	ldr	r3, [r3, r1]
 800e0f6:	22c0      	movs	r2, #192	; 0xc0
 800e0f8:	0212      	lsls	r2, r2, #8
 800e0fa:	611a      	str	r2, [r3, #16]
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 800e0fc:	1dfb      	adds	r3, r7, #7
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	0018      	movs	r0, r3
 800e102:	f7fe fcb3 	bl	800ca6c <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 800e106:	1dfb      	adds	r3, r7, #7
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	0018      	movs	r0, r3
 800e10c:	f7fe fc5e 	bl	800c9cc <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800e110:	1dfb      	adds	r3, r7, #7
 800e112:	781a      	ldrb	r2, [r3, #0]
 800e114:	4918      	ldr	r1, [pc, #96]	; (800e178 <HW_SignalDetachment+0xe0>)
 800e116:	0013      	movs	r3, r2
 800e118:	00db      	lsls	r3, r3, #3
 800e11a:	1a9b      	subs	r3, r3, r2
 800e11c:	00db      	lsls	r3, r3, #3
 800e11e:	585b      	ldr	r3, [r3, r1]
 800e120:	22c0      	movs	r2, #192	; 0xc0
 800e122:	0112      	lsls	r2, r2, #4
 800e124:	0011      	movs	r1, r2
 800e126:	0018      	movs	r0, r3
 800e128:	f7ff f9e6 	bl	800d4f8 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 800e12c:	1dfb      	adds	r3, r7, #7
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	4911      	ldr	r1, [pc, #68]	; (800e178 <HW_SignalDetachment+0xe0>)
 800e132:	0013      	movs	r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	1a9b      	subs	r3, r3, r2
 800e138:	00db      	lsls	r3, r3, #3
 800e13a:	18cb      	adds	r3, r1, r3
 800e13c:	3310      	adds	r3, #16
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	2204      	movs	r2, #4
 800e144:	4013      	ands	r3, r2
 800e146:	b2db      	uxtb	r3, r3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d104      	bne.n	800e156 <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif
    /* DeInitialise VBUS power */
  (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800e14c:	1dfb      	adds	r3, r7, #7
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	0018      	movs	r0, r3
 800e152:	f002 f94d 	bl	80103f0 <BSP_USBPD_PWR_VBUSDeInit>
  }
#endif /* !USBPDCORE_LIB_NO_PD */
#if !defined(USBPDCORE_LIB_NO_PD)||defined(USBPD_TYPE_STATE_MACHINE)
  Ports[PortNum].CCx = CCNONE;
 800e156:	1dfb      	adds	r3, r7, #7
 800e158:	781a      	ldrb	r2, [r3, #0]
 800e15a:	4907      	ldr	r1, [pc, #28]	; (800e178 <HW_SignalDetachment+0xe0>)
 800e15c:	0013      	movs	r3, r2
 800e15e:	00db      	lsls	r3, r3, #3
 800e160:	1a9b      	subs	r3, r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	18cb      	adds	r3, r1, r3
 800e166:	3334      	adds	r3, #52	; 0x34
 800e168:	2200      	movs	r2, #0
 800e16a:	601a      	str	r2, [r3, #0]
#endif /* !USBPDCORE_LIB_NO_PD || USBPD_TYPE_STATE_MACHINE */
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 800e16c:	f000 fb1e 	bl	800e7ac <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 800e170:	46c0      	nop			; (mov r8, r8)
 800e172:	46bd      	mov	sp, r7
 800e174:	b002      	add	sp, #8
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20001bcc 	.word	0x20001bcc

0800e17c <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	0002      	movs	r2, r0
 800e184:	1dfb      	adds	r3, r7, #7
 800e186:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800e188:	1dfb      	adds	r3, r7, #7
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	4907      	ldr	r1, [pc, #28]	; (800e1ac <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 800e18e:	0013      	movs	r3, r2
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	00db      	lsls	r3, r3, #3
 800e196:	585b      	ldr	r3, [r3, r1]
 800e198:	2280      	movs	r2, #128	; 0x80
 800e19a:	0052      	lsls	r2, r2, #1
 800e19c:	0011      	movs	r1, r2
 800e19e:	0018      	movs	r0, r3
 800e1a0:	f7ff f9de 	bl	800d560 <LL_UCPD_SetRpResistor>
}
 800e1a4:	46c0      	nop			; (mov r8, r8)
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	b002      	add	sp, #8
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	20001bcc 	.word	0x20001bcc

0800e1b0 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	0002      	movs	r2, r0
 800e1b8:	1dfb      	adds	r3, r7, #7
 800e1ba:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800e1bc:	1dfb      	adds	r3, r7, #7
 800e1be:	781a      	ldrb	r2, [r3, #0]
 800e1c0:	4907      	ldr	r1, [pc, #28]	; (800e1e0 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 800e1c2:	0013      	movs	r3, r2
 800e1c4:	00db      	lsls	r3, r3, #3
 800e1c6:	1a9b      	subs	r3, r3, r2
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	585b      	ldr	r3, [r3, r1]
 800e1cc:	22c0      	movs	r2, #192	; 0xc0
 800e1ce:	0052      	lsls	r2, r2, #1
 800e1d0:	0011      	movs	r1, r2
 800e1d2:	0018      	movs	r0, r3
 800e1d4:	f7ff f9c4 	bl	800d560 <LL_UCPD_SetRpResistor>
}
 800e1d8:	46c0      	nop			; (mov r8, r8)
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	b002      	add	sp, #8
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	20001bcc 	.word	0x20001bcc

0800e1e4 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	0002      	movs	r2, r0
 800e1ec:	1dfb      	adds	r3, r7, #7
 800e1ee:	701a      	strb	r2, [r3, #0]
  switch (Ports[PortNum].CCx)
 800e1f0:	1dfb      	adds	r3, r7, #7
 800e1f2:	781a      	ldrb	r2, [r3, #0]
 800e1f4:	491c      	ldr	r1, [pc, #112]	; (800e268 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800e1f6:	0013      	movs	r3, r2
 800e1f8:	00db      	lsls	r3, r3, #3
 800e1fa:	1a9b      	subs	r3, r3, r2
 800e1fc:	00db      	lsls	r3, r3, #3
 800e1fe:	18cb      	adds	r3, r1, r3
 800e200:	3334      	adds	r3, #52	; 0x34
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d002      	beq.n	800e20e <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d012      	beq.n	800e232 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 800e20c:	e026      	b.n	800e25c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 800e20e:	1dfb      	adds	r3, r7, #7
 800e210:	781a      	ldrb	r2, [r3, #0]
 800e212:	4915      	ldr	r1, [pc, #84]	; (800e268 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800e214:	0013      	movs	r3, r2
 800e216:	00db      	lsls	r3, r3, #3
 800e218:	1a9b      	subs	r3, r3, r2
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	585b      	ldr	r3, [r3, r1]
 800e21e:	695a      	ldr	r2, [r3, #20]
 800e220:	23c0      	movs	r3, #192	; 0xc0
 800e222:	029b      	lsls	r3, r3, #10
 800e224:	401a      	ands	r2, r3
 800e226:	23c0      	movs	r3, #192	; 0xc0
 800e228:	029b      	lsls	r3, r3, #10
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d113      	bne.n	800e256 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 800e22e:	2301      	movs	r3, #1
 800e230:	e015      	b.n	800e25e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 800e232:	1dfb      	adds	r3, r7, #7
 800e234:	781a      	ldrb	r2, [r3, #0]
 800e236:	490c      	ldr	r1, [pc, #48]	; (800e268 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 800e238:	0013      	movs	r3, r2
 800e23a:	00db      	lsls	r3, r3, #3
 800e23c:	1a9b      	subs	r3, r3, r2
 800e23e:	00db      	lsls	r3, r3, #3
 800e240:	585b      	ldr	r3, [r3, r1]
 800e242:	695a      	ldr	r2, [r3, #20]
 800e244:	23c0      	movs	r3, #192	; 0xc0
 800e246:	031b      	lsls	r3, r3, #12
 800e248:	401a      	ands	r2, r3
 800e24a:	23c0      	movs	r3, #192	; 0xc0
 800e24c:	031b      	lsls	r3, r3, #12
 800e24e:	429a      	cmp	r2, r3
 800e250:	d103      	bne.n	800e25a <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 800e252:	2301      	movs	r3, #1
 800e254:	e003      	b.n	800e25e <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 800e256:	46c0      	nop			; (mov r8, r8)
 800e258:	e000      	b.n	800e25c <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 800e25a:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	0018      	movs	r0, r3
 800e260:	46bd      	mov	sp, r7
 800e262:	b002      	add	sp, #8
 800e264:	bd80      	pop	{r7, pc}
 800e266:	46c0      	nop			; (mov r8, r8)
 800e268:	20001bcc 	.word	0x20001bcc

0800e26c <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	0002      	movs	r2, r0
 800e274:	1dfb      	adds	r3, r7, #7
 800e276:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 800e278:	1dfb      	adds	r3, r7, #7
 800e27a:	781a      	ldrb	r2, [r3, #0]
 800e27c:	4906      	ldr	r1, [pc, #24]	; (800e298 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 800e27e:	0013      	movs	r3, r2
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	1a9b      	subs	r3, r3, r2
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	585b      	ldr	r3, [r3, r1]
 800e288:	0018      	movs	r0, r3
 800e28a:	f7ff f916 	bl	800d4ba <LL_UCPD_SignalFRSTX>
}
 800e28e:	46c0      	nop			; (mov r8, r8)
 800e290:	46bd      	mov	sp, r7
 800e292:	b002      	add	sp, #8
 800e294:	bd80      	pop	{r7, pc}
 800e296:	46c0      	nop			; (mov r8, r8)
 800e298:	20001bcc 	.word	0x20001bcc

0800e29c <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	0002      	movs	r2, r0
 800e2a4:	1dfb      	adds	r3, r7, #7
 800e2a6:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 800e2a8:	1dfb      	adds	r3, r7, #7
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	220c      	movs	r2, #12
 800e2ae:	18ba      	adds	r2, r7, r2
 800e2b0:	0011      	movs	r1, r2
 800e2b2:	0018      	movs	r0, r3
 800e2b4:	f002 f8ba 	bl	801042c <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	b29b      	uxth	r3, r3
}
 800e2bc:	0018      	movs	r0, r3
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	b004      	add	sp, #16
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	0002      	movs	r2, r0
 800e2cc:	1dfb      	adds	r3, r7, #7
 800e2ce:	701a      	strb	r2, [r3, #0]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 800e2d0:	1dfb      	adds	r3, r7, #7
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	220c      	movs	r2, #12
 800e2d6:	18ba      	adds	r2, r7, r2
 800e2d8:	0011      	movs	r1, r2
 800e2da:	0018      	movs	r0, r3
 800e2dc:	f002 f8e4 	bl	80104a8 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	b21b      	sxth	r3, r3
}
 800e2e4:	0018      	movs	r0, r3
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	b004      	add	sp, #16
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <LL_APB2_GRP1_EnableClock>:
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800e2f4:	4b07      	ldr	r3, [pc, #28]	; (800e314 <LL_APB2_GRP1_EnableClock+0x28>)
 800e2f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e2f8:	4b06      	ldr	r3, [pc, #24]	; (800e314 <LL_APB2_GRP1_EnableClock+0x28>)
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	430a      	orrs	r2, r1
 800e2fe:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800e300:	4b04      	ldr	r3, [pc, #16]	; (800e314 <LL_APB2_GRP1_EnableClock+0x28>)
 800e302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	4013      	ands	r3, r2
 800e308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e30a:	68fb      	ldr	r3, [r7, #12]
}
 800e30c:	46c0      	nop			; (mov r8, r8)
 800e30e:	46bd      	mov	sp, r7
 800e310:	b004      	add	sp, #16
 800e312:	bd80      	pop	{r7, pc}
 800e314:	40021000 	.word	0x40021000

0800e318 <LL_APB2_GRP1_DisableClock>:
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 800e320:	4b05      	ldr	r3, [pc, #20]	; (800e338 <LL_APB2_GRP1_DisableClock+0x20>)
 800e322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	43d9      	mvns	r1, r3
 800e328:	4b03      	ldr	r3, [pc, #12]	; (800e338 <LL_APB2_GRP1_DisableClock+0x20>)
 800e32a:	400a      	ands	r2, r1
 800e32c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e32e:	46c0      	nop			; (mov r8, r8)
 800e330:	46bd      	mov	sp, r7
 800e332:	b002      	add	sp, #8
 800e334:	bd80      	pop	{r7, pc}
 800e336:	46c0      	nop			; (mov r8, r8)
 800e338:	40021000 	.word	0x40021000

0800e33c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2201      	movs	r2, #1
 800e34a:	431a      	orrs	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	601a      	str	r2, [r3, #0]
}
 800e350:	46c0      	nop			; (mov r8, r8)
 800e352:	46bd      	mov	sp, r7
 800e354:	b002      	add	sp, #8
 800e356:	bd80      	pop	{r7, pc}

0800e358 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2270      	movs	r2, #112	; 0x70
 800e368:	4393      	bics	r3, r2
 800e36a:	001a      	movs	r2, r3
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	431a      	orrs	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	601a      	str	r2, [r3, #0]
}
 800e374:	46c0      	nop			; (mov r8, r8)
 800e376:	46bd      	mov	sp, r7
 800e378:	b002      	add	sp, #8
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	683a      	ldr	r2, [r7, #0]
 800e38a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e38c:	46c0      	nop			; (mov r8, r8)
 800e38e:	46bd      	mov	sp, r7
 800e390:	b002      	add	sp, #8
 800e392:	bd80      	pop	{r7, pc}

0800e394 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800e3a0:	0018      	movs	r0, r3
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	b002      	add	sp, #8
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e3b8:	46c0      	nop			; (mov r8, r8)
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	b002      	add	sp, #8
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASSYMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d02c      	beq.n	800e42c <LL_TIM_OC_SetMode+0x6c>
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	2b04      	cmp	r3, #4
 800e3d6:	d027      	beq.n	800e428 <LL_TIM_OC_SetMode+0x68>
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	2b10      	cmp	r3, #16
 800e3dc:	d022      	beq.n	800e424 <LL_TIM_OC_SetMode+0x64>
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	2b40      	cmp	r3, #64	; 0x40
 800e3e2:	d01d      	beq.n	800e420 <LL_TIM_OC_SetMode+0x60>
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	2380      	movs	r3, #128	; 0x80
 800e3e8:	005b      	lsls	r3, r3, #1
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d016      	beq.n	800e41c <LL_TIM_OC_SetMode+0x5c>
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	2380      	movs	r3, #128	; 0x80
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d00f      	beq.n	800e418 <LL_TIM_OC_SetMode+0x58>
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	2380      	movs	r3, #128	; 0x80
 800e3fc:	015b      	lsls	r3, r3, #5
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d008      	beq.n	800e414 <LL_TIM_OC_SetMode+0x54>
 800e402:	68ba      	ldr	r2, [r7, #8]
 800e404:	2380      	movs	r3, #128	; 0x80
 800e406:	025b      	lsls	r3, r3, #9
 800e408:	429a      	cmp	r2, r3
 800e40a:	d101      	bne.n	800e410 <LL_TIM_OC_SetMode+0x50>
 800e40c:	2307      	movs	r3, #7
 800e40e:	e00e      	b.n	800e42e <LL_TIM_OC_SetMode+0x6e>
 800e410:	2308      	movs	r3, #8
 800e412:	e00c      	b.n	800e42e <LL_TIM_OC_SetMode+0x6e>
 800e414:	2306      	movs	r3, #6
 800e416:	e00a      	b.n	800e42e <LL_TIM_OC_SetMode+0x6e>
 800e418:	2305      	movs	r3, #5
 800e41a:	e008      	b.n	800e42e <LL_TIM_OC_SetMode+0x6e>
 800e41c:	2304      	movs	r3, #4
 800e41e:	e006      	b.n	800e42e <LL_TIM_OC_SetMode+0x6e>
 800e420:	2303      	movs	r3, #3
 800e422:	e004      	b.n	800e42e <LL_TIM_OC_SetMode+0x6e>
 800e424:	2302      	movs	r3, #2
 800e426:	e002      	b.n	800e42e <LL_TIM_OC_SetMode+0x6e>
 800e428:	2301      	movs	r3, #1
 800e42a:	e000      	b.n	800e42e <LL_TIM_OC_SetMode+0x6e>
 800e42c:	2300      	movs	r3, #0
 800e42e:	2017      	movs	r0, #23
 800e430:	183a      	adds	r2, r7, r0
 800e432:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3318      	adds	r3, #24
 800e438:	0019      	movs	r1, r3
 800e43a:	183b      	adds	r3, r7, r0
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	4a0e      	ldr	r2, [pc, #56]	; (800e478 <LL_TIM_OC_SetMode+0xb8>)
 800e440:	5cd3      	ldrb	r3, [r2, r3]
 800e442:	18cb      	adds	r3, r1, r3
 800e444:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	183a      	adds	r2, r7, r0
 800e44c:	7812      	ldrb	r2, [r2, #0]
 800e44e:	490b      	ldr	r1, [pc, #44]	; (800e47c <LL_TIM_OC_SetMode+0xbc>)
 800e450:	5c8a      	ldrb	r2, [r1, r2]
 800e452:	0011      	movs	r1, r2
 800e454:	4a0a      	ldr	r2, [pc, #40]	; (800e480 <LL_TIM_OC_SetMode+0xc0>)
 800e456:	408a      	lsls	r2, r1
 800e458:	43d2      	mvns	r2, r2
 800e45a:	401a      	ands	r2, r3
 800e45c:	183b      	adds	r3, r7, r0
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	4906      	ldr	r1, [pc, #24]	; (800e47c <LL_TIM_OC_SetMode+0xbc>)
 800e462:	5ccb      	ldrb	r3, [r1, r3]
 800e464:	0019      	movs	r1, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	408b      	lsls	r3, r1
 800e46a:	431a      	orrs	r2, r3
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	601a      	str	r2, [r3, #0]
}
 800e470:	46c0      	nop			; (mov r8, r8)
 800e472:	46bd      	mov	sp, r7
 800e474:	b006      	add	sp, #24
 800e476:	bd80      	pop	{r7, pc}
 800e478:	08016850 	.word	0x08016850
 800e47c:	0801685c 	.word	0x0801685c
 800e480:	00010073 	.word	0x00010073

0800e484 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	2b01      	cmp	r3, #1
 800e494:	d02c      	beq.n	800e4f0 <LL_TIM_OC_SetPolarity+0x6c>
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2b04      	cmp	r3, #4
 800e49a:	d027      	beq.n	800e4ec <LL_TIM_OC_SetPolarity+0x68>
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b10      	cmp	r3, #16
 800e4a0:	d022      	beq.n	800e4e8 <LL_TIM_OC_SetPolarity+0x64>
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2b40      	cmp	r3, #64	; 0x40
 800e4a6:	d01d      	beq.n	800e4e4 <LL_TIM_OC_SetPolarity+0x60>
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	2380      	movs	r3, #128	; 0x80
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d016      	beq.n	800e4e0 <LL_TIM_OC_SetPolarity+0x5c>
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	2380      	movs	r3, #128	; 0x80
 800e4b6:	00db      	lsls	r3, r3, #3
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d00f      	beq.n	800e4dc <LL_TIM_OC_SetPolarity+0x58>
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	2380      	movs	r3, #128	; 0x80
 800e4c0:	015b      	lsls	r3, r3, #5
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d008      	beq.n	800e4d8 <LL_TIM_OC_SetPolarity+0x54>
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	2380      	movs	r3, #128	; 0x80
 800e4ca:	025b      	lsls	r3, r3, #9
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d101      	bne.n	800e4d4 <LL_TIM_OC_SetPolarity+0x50>
 800e4d0:	2307      	movs	r3, #7
 800e4d2:	e00e      	b.n	800e4f2 <LL_TIM_OC_SetPolarity+0x6e>
 800e4d4:	2308      	movs	r3, #8
 800e4d6:	e00c      	b.n	800e4f2 <LL_TIM_OC_SetPolarity+0x6e>
 800e4d8:	2306      	movs	r3, #6
 800e4da:	e00a      	b.n	800e4f2 <LL_TIM_OC_SetPolarity+0x6e>
 800e4dc:	2305      	movs	r3, #5
 800e4de:	e008      	b.n	800e4f2 <LL_TIM_OC_SetPolarity+0x6e>
 800e4e0:	2304      	movs	r3, #4
 800e4e2:	e006      	b.n	800e4f2 <LL_TIM_OC_SetPolarity+0x6e>
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	e004      	b.n	800e4f2 <LL_TIM_OC_SetPolarity+0x6e>
 800e4e8:	2302      	movs	r3, #2
 800e4ea:	e002      	b.n	800e4f2 <LL_TIM_OC_SetPolarity+0x6e>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e000      	b.n	800e4f2 <LL_TIM_OC_SetPolarity+0x6e>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	2017      	movs	r0, #23
 800e4f4:	183a      	adds	r2, r7, r0
 800e4f6:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6a1b      	ldr	r3, [r3, #32]
 800e4fc:	183a      	adds	r2, r7, r0
 800e4fe:	7812      	ldrb	r2, [r2, #0]
 800e500:	490a      	ldr	r1, [pc, #40]	; (800e52c <LL_TIM_OC_SetPolarity+0xa8>)
 800e502:	5c8a      	ldrb	r2, [r1, r2]
 800e504:	0011      	movs	r1, r2
 800e506:	2202      	movs	r2, #2
 800e508:	408a      	lsls	r2, r1
 800e50a:	43d2      	mvns	r2, r2
 800e50c:	401a      	ands	r2, r3
 800e50e:	183b      	adds	r3, r7, r0
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	4906      	ldr	r1, [pc, #24]	; (800e52c <LL_TIM_OC_SetPolarity+0xa8>)
 800e514:	5ccb      	ldrb	r3, [r1, r3]
 800e516:	0019      	movs	r1, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	408b      	lsls	r3, r1
 800e51c:	431a      	orrs	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	621a      	str	r2, [r3, #32]
}
 800e522:	46c0      	nop			; (mov r8, r8)
 800e524:	46bd      	mov	sp, r7
 800e526:	b006      	add	sp, #24
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	46c0      	nop			; (mov r8, r8)
 800e52c:	08016868 	.word	0x08016868

0800e530 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	635a      	str	r2, [r3, #52]	; 0x34
}
 800e540:	46c0      	nop			; (mov r8, r8)
 800e542:	46bd      	mov	sp, r7
 800e544:	b002      	add	sp, #8
 800e546:	bd80      	pop	{r7, pc}

0800e548 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	683a      	ldr	r2, [r7, #0]
 800e556:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e558:	46c0      	nop			; (mov r8, r8)
 800e55a:	46bd      	mov	sp, r7
 800e55c:	b002      	add	sp, #8
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e570:	46c0      	nop			; (mov r8, r8)
 800e572:	46bd      	mov	sp, r7
 800e574:	b002      	add	sp, #8
 800e576:	bd80      	pop	{r7, pc}

0800e578 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e588:	46c0      	nop			; (mov r8, r8)
 800e58a:	46bd      	mov	sp, r7
 800e58c:	b002      	add	sp, #8
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2203      	movs	r2, #3
 800e59c:	4252      	negs	r2, r2
 800e59e:	611a      	str	r2, [r3, #16]
}
 800e5a0:	46c0      	nop			; (mov r8, r8)
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	b002      	add	sp, #8
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	2202      	movs	r2, #2
 800e5b6:	4013      	ands	r3, r2
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	d101      	bne.n	800e5c0 <LL_TIM_IsActiveFlag_CC1+0x18>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e000      	b.n	800e5c2 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	b002      	add	sp, #8
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b082      	sub	sp, #8
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2205      	movs	r2, #5
 800e5d6:	4252      	negs	r2, r2
 800e5d8:	611a      	str	r2, [r3, #16]
}
 800e5da:	46c0      	nop			; (mov r8, r8)
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	b002      	add	sp, #8
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b082      	sub	sp, #8
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	691b      	ldr	r3, [r3, #16]
 800e5ee:	2204      	movs	r2, #4
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	2b04      	cmp	r3, #4
 800e5f4:	d101      	bne.n	800e5fa <LL_TIM_IsActiveFlag_CC2+0x18>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e000      	b.n	800e5fc <LL_TIM_IsActiveFlag_CC2+0x1a>
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	0018      	movs	r0, r3
 800e5fe:	46bd      	mov	sp, r7
 800e600:	b002      	add	sp, #8
 800e602:	bd80      	pop	{r7, pc}

0800e604 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2209      	movs	r2, #9
 800e610:	4252      	negs	r2, r2
 800e612:	611a      	str	r2, [r3, #16]
}
 800e614:	46c0      	nop			; (mov r8, r8)
 800e616:	46bd      	mov	sp, r7
 800e618:	b002      	add	sp, #8
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	2208      	movs	r2, #8
 800e62a:	4013      	ands	r3, r2
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	d101      	bne.n	800e634 <LL_TIM_IsActiveFlag_CC3+0x18>
 800e630:	2301      	movs	r3, #1
 800e632:	e000      	b.n	800e636 <LL_TIM_IsActiveFlag_CC3+0x1a>
 800e634:	2300      	movs	r3, #0
}
 800e636:	0018      	movs	r0, r3
 800e638:	46bd      	mov	sp, r7
 800e63a:	b002      	add	sp, #8
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b082      	sub	sp, #8
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2211      	movs	r2, #17
 800e64a:	4252      	negs	r2, r2
 800e64c:	611a      	str	r2, [r3, #16]
}
 800e64e:	46c0      	nop			; (mov r8, r8)
 800e650:	46bd      	mov	sp, r7
 800e652:	b002      	add	sp, #8
 800e654:	bd80      	pop	{r7, pc}

0800e656 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b082      	sub	sp, #8
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	2210      	movs	r2, #16
 800e664:	4013      	ands	r3, r2
 800e666:	2b10      	cmp	r3, #16
 800e668:	d101      	bne.n	800e66e <LL_TIM_IsActiveFlag_CC4+0x18>
 800e66a:	2301      	movs	r3, #1
 800e66c:	e000      	b.n	800e670 <LL_TIM_IsActiveFlag_CC4+0x1a>
 800e66e:	2300      	movs	r3, #0
}
 800e670:	0018      	movs	r0, r3
 800e672:	46bd      	mov	sp, r7
 800e674:	b002      	add	sp, #8
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 800e678:	b5b0      	push	{r4, r5, r7, lr}
 800e67a:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 800e67c:	4b46      	ldr	r3, [pc, #280]	; (800e798 <USBPD_TIM_Init+0x120>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	b25b      	sxtb	r3, r3
 800e682:	2b00      	cmp	r3, #0
 800e684:	d000      	beq.n	800e688 <USBPD_TIM_Init+0x10>
 800e686:	e07b      	b.n	800e780 <USBPD_TIM_Init+0x108>
  {
    TIMX_CLK_ENABLE;
 800e688:	2380      	movs	r3, #128	; 0x80
 800e68a:	011b      	lsls	r3, r3, #4
 800e68c:	0018      	movs	r0, r3
 800e68e:	f7ff fe2d 	bl	800e2ec <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 800e692:	4b42      	ldr	r3, [pc, #264]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e694:	2100      	movs	r1, #0
 800e696:	0018      	movs	r0, r3
 800e698:	f7ff fe5e 	bl	800e358 <LL_TIM_SetCounterMode>
    
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 800e69c:	4b40      	ldr	r3, [pc, #256]	; (800e7a0 <USBPD_TIM_Init+0x128>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a40      	ldr	r2, [pc, #256]	; (800e7a4 <USBPD_TIM_Init+0x12c>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d908      	bls.n	800e6b8 <USBPD_TIM_Init+0x40>
 800e6a6:	4b3e      	ldr	r3, [pc, #248]	; (800e7a0 <USBPD_TIM_Init+0x128>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	493f      	ldr	r1, [pc, #252]	; (800e7a8 <USBPD_TIM_Init+0x130>)
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	f7f7 fd51 	bl	8006154 <__udivsi3>
 800e6b2:	0003      	movs	r3, r0
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	e000      	b.n	800e6ba <USBPD_TIM_Init+0x42>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	4a38      	ldr	r2, [pc, #224]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e6bc:	0019      	movs	r1, r3
 800e6be:	0010      	movs	r0, r2
 800e6c0:	f7ff fe5c 	bl	800e37c <LL_TIM_SetPrescaler>
    
    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 800e6c4:	4b36      	ldr	r3, [pc, #216]	; (800e7a0 <USBPD_TIM_Init+0x128>)
 800e6c6:	681c      	ldr	r4, [r3, #0]
 800e6c8:	4b34      	ldr	r3, [pc, #208]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e6ca:	0018      	movs	r0, r3
 800e6cc:	f7ff fe62 	bl	800e394 <LL_TIM_GetPrescaler>
 800e6d0:	0003      	movs	r3, r0
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	0019      	movs	r1, r3
 800e6d6:	0020      	movs	r0, r4
 800e6d8:	f7f7 fd3c 	bl	8006154 <__udivsi3>
 800e6dc:	0003      	movs	r3, r0
 800e6de:	2b63      	cmp	r3, #99	; 0x63
 800e6e0:	d910      	bls.n	800e704 <USBPD_TIM_Init+0x8c>
 800e6e2:	4b2f      	ldr	r3, [pc, #188]	; (800e7a0 <USBPD_TIM_Init+0x128>)
 800e6e4:	681c      	ldr	r4, [r3, #0]
 800e6e6:	4b2d      	ldr	r3, [pc, #180]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e6e8:	0018      	movs	r0, r3
 800e6ea:	f7ff fe53 	bl	800e394 <LL_TIM_GetPrescaler>
 800e6ee:	0003      	movs	r3, r0
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	2264      	movs	r2, #100	; 0x64
 800e6f4:	4353      	muls	r3, r2
 800e6f6:	0019      	movs	r1, r3
 800e6f8:	0020      	movs	r0, r4
 800e6fa:	f7f7 fd2b 	bl	8006154 <__udivsi3>
 800e6fe:	0003      	movs	r3, r0
 800e700:	3b01      	subs	r3, #1
 800e702:	e000      	b.n	800e706 <USBPD_TIM_Init+0x8e>
 800e704:	2300      	movs	r3, #0
 800e706:	4a25      	ldr	r2, [pc, #148]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e708:	0019      	movs	r1, r3
 800e70a:	0010      	movs	r0, r2
 800e70c:	f7ff fe4c 	bl	800e3a8 <LL_TIM_SetAutoReload>
    
    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 800e710:	4b22      	ldr	r3, [pc, #136]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e712:	2230      	movs	r2, #48	; 0x30
 800e714:	2101      	movs	r1, #1
 800e716:	0018      	movs	r0, r3
 800e718:	f7ff fe52 	bl	800e3c0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 800e71c:	4b1f      	ldr	r3, [pc, #124]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e71e:	2230      	movs	r2, #48	; 0x30
 800e720:	2110      	movs	r1, #16
 800e722:	0018      	movs	r0, r3
 800e724:	f7ff fe4c 	bl	800e3c0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 800e728:	2380      	movs	r3, #128	; 0x80
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	481b      	ldr	r0, [pc, #108]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e72e:	2230      	movs	r2, #48	; 0x30
 800e730:	0019      	movs	r1, r3
 800e732:	f7ff fe45 	bl	800e3c0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 800e736:	2380      	movs	r3, #128	; 0x80
 800e738:	015b      	lsls	r3, r3, #5
 800e73a:	4818      	ldr	r0, [pc, #96]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e73c:	2230      	movs	r2, #48	; 0x30
 800e73e:	0019      	movs	r1, r3
 800e740:	f7ff fe3e 	bl	800e3c0 <LL_TIM_OC_SetMode>
    
    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 800e744:	4b15      	ldr	r3, [pc, #84]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e746:	2200      	movs	r2, #0
 800e748:	2101      	movs	r1, #1
 800e74a:	0018      	movs	r0, r3
 800e74c:	f7ff fe9a 	bl	800e484 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 800e750:	4b12      	ldr	r3, [pc, #72]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e752:	2200      	movs	r2, #0
 800e754:	2110      	movs	r1, #16
 800e756:	0018      	movs	r0, r3
 800e758:	f7ff fe94 	bl	800e484 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 800e75c:	2380      	movs	r3, #128	; 0x80
 800e75e:	005b      	lsls	r3, r3, #1
 800e760:	480e      	ldr	r0, [pc, #56]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e762:	2200      	movs	r2, #0
 800e764:	0019      	movs	r1, r3
 800e766:	f7ff fe8d 	bl	800e484 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 800e76a:	2380      	movs	r3, #128	; 0x80
 800e76c:	015b      	lsls	r3, r3, #5
 800e76e:	480b      	ldr	r0, [pc, #44]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e770:	2200      	movs	r2, #0
 800e772:	0019      	movs	r1, r3
 800e774:	f7ff fe86 	bl	800e484 <LL_TIM_OC_SetPolarity>
    
    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 800e778:	4b08      	ldr	r3, [pc, #32]	; (800e79c <USBPD_TIM_Init+0x124>)
 800e77a:	0018      	movs	r0, r3
 800e77c:	f7ff fdde 	bl	800e33c <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 800e780:	4b05      	ldr	r3, [pc, #20]	; (800e798 <USBPD_TIM_Init+0x120>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	b25b      	sxtb	r3, r3
 800e786:	b2db      	uxtb	r3, r3
 800e788:	3301      	adds	r3, #1
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	b25a      	sxtb	r2, r3
 800e78e:	4b02      	ldr	r3, [pc, #8]	; (800e798 <USBPD_TIM_Init+0x120>)
 800e790:	701a      	strb	r2, [r3, #0]
}
 800e792:	46c0      	nop			; (mov r8, r8)
 800e794:	46bd      	mov	sp, r7
 800e796:	bdb0      	pop	{r4, r5, r7, pc}
 800e798:	200016fc 	.word	0x200016fc
 800e79c:	40012c00 	.word	0x40012c00
 800e7a0:	20000004 	.word	0x20000004
 800e7a4:	000f423f 	.word	0x000f423f
 800e7a8:	000f4240 	.word	0x000f4240

0800e7ac <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
  timer_initcounter--;
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <USBPD_TIM_DeInit+0x30>)
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	b25b      	sxtb	r3, r3
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	3b01      	subs	r3, #1
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	b25a      	sxtb	r2, r3
 800e7be:	4b07      	ldr	r3, [pc, #28]	; (800e7dc <USBPD_TIM_DeInit+0x30>)
 800e7c0:	701a      	strb	r2, [r3, #0]
  if(0 == timer_initcounter)
 800e7c2:	4b06      	ldr	r3, [pc, #24]	; (800e7dc <USBPD_TIM_DeInit+0x30>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	b25b      	sxtb	r3, r3
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d104      	bne.n	800e7d6 <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 800e7cc:	2380      	movs	r3, #128	; 0x80
 800e7ce:	011b      	lsls	r3, r3, #4
 800e7d0:	0018      	movs	r0, r3
 800e7d2:	f7ff fda1 	bl	800e318 <LL_APB2_GRP1_DisableClock>
  }
}
 800e7d6:	46c0      	nop			; (mov r8, r8)
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	200016fc 	.word	0x200016fc

0800e7e0 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	0002      	movs	r2, r0
 800e7e8:	6039      	str	r1, [r7, #0]
 800e7ea:	1dfb      	adds	r3, r7, #7
 800e7ec:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 800e7ee:	1dfb      	adds	r3, r7, #7
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	d044      	beq.n	800e880 <USBPD_TIM_Start+0xa0>
 800e7f6:	dc57      	bgt.n	800e8a8 <USBPD_TIM_Start+0xc8>
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d02d      	beq.n	800e858 <USBPD_TIM_Start+0x78>
 800e7fc:	dc54      	bgt.n	800e8a8 <USBPD_TIM_Start+0xc8>
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d002      	beq.n	800e808 <USBPD_TIM_Start+0x28>
 800e802:	2b01      	cmp	r3, #1
 800e804:	d014      	beq.n	800e830 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 800e806:	e04f      	b.n	800e8a8 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 800e808:	4b2a      	ldr	r3, [pc, #168]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e80a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	18d3      	adds	r3, r2, r3
 800e810:	4929      	ldr	r1, [pc, #164]	; (800e8b8 <USBPD_TIM_Start+0xd8>)
 800e812:	0018      	movs	r0, r3
 800e814:	f7f7 fd24 	bl	8006260 <__aeabi_uidivmod>
 800e818:	000b      	movs	r3, r1
 800e81a:	001a      	movs	r2, r3
 800e81c:	4b25      	ldr	r3, [pc, #148]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e81e:	0011      	movs	r1, r2
 800e820:	0018      	movs	r0, r3
 800e822:	f7ff fe85 	bl	800e530 <LL_TIM_OC_SetCompareCH1>
 800e826:	4b23      	ldr	r3, [pc, #140]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e828:	0018      	movs	r0, r3
 800e82a:	f7ff feb1 	bl	800e590 <LL_TIM_ClearFlag_CC1>
      break;
 800e82e:	e03c      	b.n	800e8aa <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 800e830:	4b20      	ldr	r3, [pc, #128]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	18d3      	adds	r3, r2, r3
 800e838:	491f      	ldr	r1, [pc, #124]	; (800e8b8 <USBPD_TIM_Start+0xd8>)
 800e83a:	0018      	movs	r0, r3
 800e83c:	f7f7 fd10 	bl	8006260 <__aeabi_uidivmod>
 800e840:	000b      	movs	r3, r1
 800e842:	001a      	movs	r2, r3
 800e844:	4b1b      	ldr	r3, [pc, #108]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e846:	0011      	movs	r1, r2
 800e848:	0018      	movs	r0, r3
 800e84a:	f7ff fe7d 	bl	800e548 <LL_TIM_OC_SetCompareCH2>
 800e84e:	4b19      	ldr	r3, [pc, #100]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e850:	0018      	movs	r0, r3
 800e852:	f7ff feba 	bl	800e5ca <LL_TIM_ClearFlag_CC2>
      break;
 800e856:	e028      	b.n	800e8aa <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 800e858:	4b16      	ldr	r3, [pc, #88]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	18d3      	adds	r3, r2, r3
 800e860:	4915      	ldr	r1, [pc, #84]	; (800e8b8 <USBPD_TIM_Start+0xd8>)
 800e862:	0018      	movs	r0, r3
 800e864:	f7f7 fcfc 	bl	8006260 <__aeabi_uidivmod>
 800e868:	000b      	movs	r3, r1
 800e86a:	001a      	movs	r2, r3
 800e86c:	4b11      	ldr	r3, [pc, #68]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e86e:	0011      	movs	r1, r2
 800e870:	0018      	movs	r0, r3
 800e872:	f7ff fe75 	bl	800e560 <LL_TIM_OC_SetCompareCH3>
 800e876:	4b0f      	ldr	r3, [pc, #60]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e878:	0018      	movs	r0, r3
 800e87a:	f7ff fec3 	bl	800e604 <LL_TIM_ClearFlag_CC3>
      break;
 800e87e:	e014      	b.n	800e8aa <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 800e880:	4b0c      	ldr	r3, [pc, #48]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	18d3      	adds	r3, r2, r3
 800e888:	490b      	ldr	r1, [pc, #44]	; (800e8b8 <USBPD_TIM_Start+0xd8>)
 800e88a:	0018      	movs	r0, r3
 800e88c:	f7f7 fce8 	bl	8006260 <__aeabi_uidivmod>
 800e890:	000b      	movs	r3, r1
 800e892:	001a      	movs	r2, r3
 800e894:	4b07      	ldr	r3, [pc, #28]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e896:	0011      	movs	r1, r2
 800e898:	0018      	movs	r0, r3
 800e89a:	f7ff fe6d 	bl	800e578 <LL_TIM_OC_SetCompareCH4>
 800e89e:	4b05      	ldr	r3, [pc, #20]	; (800e8b4 <USBPD_TIM_Start+0xd4>)
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	f7ff fecc 	bl	800e63e <LL_TIM_ClearFlag_CC4>
      break;
 800e8a6:	e000      	b.n	800e8aa <USBPD_TIM_Start+0xca>
      break;
 800e8a8:	46c0      	nop			; (mov r8, r8)
  }
}
 800e8aa:	46c0      	nop			; (mov r8, r8)
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	b002      	add	sp, #8
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	46c0      	nop			; (mov r8, r8)
 800e8b4:	40012c00 	.word	0x40012c00
 800e8b8:	00002710 	.word	0x00002710

0800e8bc <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	0002      	movs	r2, r0
 800e8c4:	1dfb      	adds	r3, r7, #7
 800e8c6:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	60fb      	str	r3, [r7, #12]
  switch (Id)
 800e8cc:	1dfb      	adds	r3, r7, #7
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	2b03      	cmp	r3, #3
 800e8d2:	d01d      	beq.n	800e910 <USBPD_TIM_IsExpired+0x54>
 800e8d4:	dc23      	bgt.n	800e91e <USBPD_TIM_IsExpired+0x62>
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d013      	beq.n	800e902 <USBPD_TIM_IsExpired+0x46>
 800e8da:	dc20      	bgt.n	800e91e <USBPD_TIM_IsExpired+0x62>
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d002      	beq.n	800e8e6 <USBPD_TIM_IsExpired+0x2a>
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	d007      	beq.n	800e8f4 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 800e8e4:	e01b      	b.n	800e91e <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 800e8e6:	4b11      	ldr	r3, [pc, #68]	; (800e92c <USBPD_TIM_IsExpired+0x70>)
 800e8e8:	0018      	movs	r0, r3
 800e8ea:	f7ff fe5d 	bl	800e5a8 <LL_TIM_IsActiveFlag_CC1>
 800e8ee:	0003      	movs	r3, r0
 800e8f0:	60fb      	str	r3, [r7, #12]
      break;
 800e8f2:	e015      	b.n	800e920 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 800e8f4:	4b0d      	ldr	r3, [pc, #52]	; (800e92c <USBPD_TIM_IsExpired+0x70>)
 800e8f6:	0018      	movs	r0, r3
 800e8f8:	f7ff fe73 	bl	800e5e2 <LL_TIM_IsActiveFlag_CC2>
 800e8fc:	0003      	movs	r3, r0
 800e8fe:	60fb      	str	r3, [r7, #12]
      break;
 800e900:	e00e      	b.n	800e920 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 800e902:	4b0a      	ldr	r3, [pc, #40]	; (800e92c <USBPD_TIM_IsExpired+0x70>)
 800e904:	0018      	movs	r0, r3
 800e906:	f7ff fe89 	bl	800e61c <LL_TIM_IsActiveFlag_CC3>
 800e90a:	0003      	movs	r3, r0
 800e90c:	60fb      	str	r3, [r7, #12]
      break;
 800e90e:	e007      	b.n	800e920 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 800e910:	4b06      	ldr	r3, [pc, #24]	; (800e92c <USBPD_TIM_IsExpired+0x70>)
 800e912:	0018      	movs	r0, r3
 800e914:	f7ff fe9f 	bl	800e656 <LL_TIM_IsActiveFlag_CC4>
 800e918:	0003      	movs	r3, r0
 800e91a:	60fb      	str	r3, [r7, #12]
      break;
 800e91c:	e000      	b.n	800e920 <USBPD_TIM_IsExpired+0x64>
      break;
 800e91e:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 800e920:	68fb      	ldr	r3, [r7, #12]
}
 800e922:	0018      	movs	r0, r3
 800e924:	46bd      	mov	sp, r7
 800e926:	b004      	add	sp, #16
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	46c0      	nop			; (mov r8, r8)
 800e92c:	40012c00 	.word	0x40012c00

0800e930 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	af00      	add	r7, sp, #0
#if defined(_TRACE)
  /* initialize tracer module */
  TRACER_EMB_Init();
 800e934:	f005 fc56 	bl	80141e4 <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 800e938:	4b06      	ldr	r3, [pc, #24]	; (800e954 <USBPD_TRACE_Init+0x24>)
 800e93a:	2103      	movs	r1, #3
 800e93c:	0018      	movs	r0, r3
 800e93e:	f7f2 fd1f 	bl	8001380 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, sizeof(OverFlow_String));
 800e942:	4b05      	ldr	r3, [pc, #20]	; (800e958 <USBPD_TRACE_Init+0x28>)
 800e944:	2123      	movs	r1, #35	; 0x23
 800e946:	0018      	movs	r0, r3
 800e948:	f005 fcca 	bl	80142e0 <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif
}
 800e94c:	46c0      	nop			; (mov r8, r8)
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	46c0      	nop			; (mov r8, r8)
 800e954:	0800e95d 	.word	0x0800e95d
 800e958:	08016874 	.word	0x08016874

0800e95c <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 800e95c:	b590      	push	{r4, r7, lr}
 800e95e:	b087      	sub	sp, #28
 800e960:	af00      	add	r7, sp, #0
 800e962:	0004      	movs	r4, r0
 800e964:	0008      	movs	r0, r1
 800e966:	0011      	movs	r1, r2
 800e968:	603b      	str	r3, [r7, #0]
 800e96a:	1dfb      	adds	r3, r7, #7
 800e96c:	1c22      	adds	r2, r4, #0
 800e96e:	701a      	strb	r2, [r3, #0]
 800e970:	1dbb      	adds	r3, r7, #6
 800e972:	1c02      	adds	r2, r0, #0
 800e974:	701a      	strb	r2, [r3, #0]
 800e976:	1d7b      	adds	r3, r7, #5
 800e978:	1c0a      	adds	r2, r1, #0
 800e97a:	701a      	strb	r2, [r3, #0]
  uint32_t _time;
  int32_t _writepos;
  uint32_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 800e97c:	f7f8 fd32 	bl	80073e4 <HAL_GetTick>
 800e980:	0003      	movs	r3, r0
 800e982:	60fb      	str	r3, [r7, #12]

  TRACER_EMB_Lock();
 800e984:	f005 fd10 	bl	80143a8 <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _writepos = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE + TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	3314      	adds	r3, #20
 800e98c:	0018      	movs	r0, r3
 800e98e:	f005 fda3 	bl	80144d8 <TRACER_EMB_AllocateBufer>
 800e992:	0003      	movs	r3, r0
 800e994:	617b      	str	r3, [r7, #20]

  /* Check allocation */
  if (_writepos  != -1)
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	3301      	adds	r3, #1
 800e99a:	d100      	bne.n	800e99e <USBPD_TRACE_Add+0x42>
 800e99c:	e0cc      	b.n	800eb38 <USBPD_TRACE_Add+0x1dc>
  {
    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800e99e:	2300      	movs	r3, #0
 800e9a0:	613b      	str	r3, [r7, #16]
 800e9a2:	e00b      	b.n	800e9bc <USBPD_TRACE_Add+0x60>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	21fd      	movs	r1, #253	; 0xfd
 800e9aa:	0018      	movs	r0, r3
 800e9ac:	f005 fc72 	bl	8014294 <TRACER_EMB_WriteData>
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	617b      	str	r3, [r7, #20]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	613b      	str	r3, [r7, #16]
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	2b03      	cmp	r3, #3
 800e9c0:	d9f0      	bls.n	800e9a4 <USBPD_TRACE_Add+0x48>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, __TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	1dbb      	adds	r3, r7, #6
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	015b      	lsls	r3, r3, #5
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2112      	movs	r1, #18
 800e9d4:	430b      	orrs	r3, r1
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	0019      	movs	r1, r3
 800e9da:	0010      	movs	r0, r2
 800e9dc:	f005 fc5a 	bl	8014294 <TRACER_EMB_WriteData>
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	617b      	str	r3, [r7, #20]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	b29a      	uxth	r2, r3
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	3309      	adds	r3, #9
 800e9ee:	0a1b      	lsrs	r3, r3, #8
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	0019      	movs	r1, r3
 800e9f4:	0010      	movs	r0, r2
 800e9f6:	f005 fc4d 	bl	8014294 <TRACER_EMB_WriteData>
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size+ TRACE_SIZE_HEADER_TRACE));
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	3309      	adds	r3, #9
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	0019      	movs	r1, r3
 800ea0e:	0010      	movs	r0, r2
 800ea10:	f005 fc40 	bl	8014294 <TRACER_EMB_WriteData>
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	3301      	adds	r3, #1
 800ea18:	617b      	str	r3, [r7, #20]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	1dfb      	adds	r3, r7, #7
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	0019      	movs	r1, r3
 800ea24:	0010      	movs	r0, r2
 800ea26:	f005 fc35 	bl	8014294 <TRACER_EMB_WriteData>
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	617b      	str	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	b2d2      	uxtb	r2, r2
 800ea38:	0011      	movs	r1, r2
 800ea3a:	0018      	movs	r0, r3
 800ea3c:	f005 fc2a 	bl	8014294 <TRACER_EMB_WriteData>
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	3301      	adds	r3, #1
 800ea44:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	0a1b      	lsrs	r3, r3, #8
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	0019      	movs	r1, r3
 800ea52:	0010      	movs	r0, r2
 800ea54:	f005 fc1e 	bl	8014294 <TRACER_EMB_WriteData>
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	0c1b      	lsrs	r3, r3, #16
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	0019      	movs	r1, r3
 800ea6a:	0010      	movs	r0, r2
 800ea6c:	f005 fc12 	bl	8014294 <TRACER_EMB_WriteData>
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	3301      	adds	r3, #1
 800ea74:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	0e1b      	lsrs	r3, r3, #24
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	0019      	movs	r1, r3
 800ea82:	0010      	movs	r0, r2
 800ea84:	f005 fc06 	bl	8014294 <TRACER_EMB_WriteData>
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	617b      	str	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	1dbb      	adds	r3, r7, #6
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	0019      	movs	r1, r3
 800ea98:	0010      	movs	r0, r2
 800ea9a:	f005 fbfb 	bl	8014294 <TRACER_EMB_WriteData>
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	1d7b      	adds	r3, r7, #5
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	0019      	movs	r1, r3
 800eaae:	0010      	movs	r0, r2
 800eab0:	f005 fbf0 	bl	8014294 <TRACER_EMB_WriteData>
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	3301      	adds	r3, #1
 800eab8:	617b      	str	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac0:	0a1b      	lsrs	r3, r3, #8
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	0019      	movs	r1, r3
 800eac6:	0010      	movs	r0, r2
 800eac8:	f005 fbe4 	bl	8014294 <TRACER_EMB_WriteData>
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	3301      	adds	r3, #1
 800ead0:	617b      	str	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ead8:	b2d2      	uxtb	r2, r2
 800eada:	0011      	movs	r1, r2
 800eadc:	0018      	movs	r0, r3
 800eade:	f005 fbd9 	bl	8014294 <TRACER_EMB_WriteData>
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	3301      	adds	r3, #1
 800eae6:	617b      	str	r3, [r7, #20]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 800eae8:	2300      	movs	r3, #0
 800eaea:	613b      	str	r3, [r7, #16]
 800eaec:	e00e      	b.n	800eb0c <USBPD_TRACE_Add+0x1b0>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	b298      	uxth	r0, r3
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	18d3      	adds	r3, r2, r3
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	0019      	movs	r1, r3
 800eafc:	f005 fbca 	bl	8014294 <TRACER_EMB_WriteData>
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	3301      	adds	r3, #1
 800eb04:	617b      	str	r3, [r7, #20]
    for (index = 0u; index < Size; index++)
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	613b      	str	r3, [r7, #16]
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d3ec      	bcc.n	800eaee <USBPD_TRACE_Add+0x192>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800eb14:	2300      	movs	r3, #0
 800eb16:	613b      	str	r3, [r7, #16]
 800eb18:	e00b      	b.n	800eb32 <USBPD_TRACE_Add+0x1d6>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	21a5      	movs	r1, #165	; 0xa5
 800eb20:	0018      	movs	r0, r3
 800eb22:	f005 fbb7 	bl	8014294 <TRACER_EMB_WriteData>
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	617b      	str	r3, [r7, #20]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	613b      	str	r3, [r7, #16]
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	2b03      	cmp	r3, #3
 800eb36:	d9f0      	bls.n	800eb1a <USBPD_TRACE_Add+0x1be>
    }
  }

  TRACER_EMB_UnLock();
 800eb38:	f005 fc54 	bl	80143e4 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 800eb3c:	f005 fc70 	bl	8014420 <TRACER_EMB_SendData>
#else
  return;
#endif
}
 800eb40:	46c0      	nop			; (mov r8, r8)
 800eb42:	46bd      	mov	sp, r7
 800eb44:	b007      	add	sp, #28
 800eb46:	bd90      	pop	{r4, r7, pc}

0800eb48 <MX_USBPD_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* USBPD init function */
void MX_USBPD_Init(void)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 800eb4c:	f7fe fde2 	bl	800d714 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 800eb50:	f000 f830 	bl	800ebb4 <USBPD_DPM_InitCore>
 800eb54:	1e03      	subs	r3, r0, #0
 800eb56:	d000      	beq.n	800eb5a <MX_USBPD_Init+0x12>
  {
    while(1);
 800eb58:	e7fe      	b.n	800eb58 <MX_USBPD_Init+0x10>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 800eb5a:	4b0a      	ldr	r3, [pc, #40]	; (800eb84 <MX_USBPD_Init+0x3c>)
 800eb5c:	4a0a      	ldr	r2, [pc, #40]	; (800eb88 <MX_USBPD_Init+0x40>)
 800eb5e:	490b      	ldr	r1, [pc, #44]	; (800eb8c <MX_USBPD_Init+0x44>)
 800eb60:	480b      	ldr	r0, [pc, #44]	; (800eb90 <MX_USBPD_Init+0x48>)
 800eb62:	f002 faf9 	bl	8011158 <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 800eb66:	f000 fa6b 	bl	800f040 <USBPD_DPM_UserInit>
 800eb6a:	1e03      	subs	r3, r0, #0
 800eb6c:	d000      	beq.n	800eb70 <MX_USBPD_Init+0x28>
  {
    while(1);
 800eb6e:	e7fe      	b.n	800eb6e <MX_USBPD_Init+0x26>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 800eb70:	f000 f8f6 	bl	800ed60 <USBPD_DPM_InitOS>
 800eb74:	1e03      	subs	r3, r0, #0
 800eb76:	d000      	beq.n	800eb7a <MX_USBPD_Init+0x32>
  {
    while(1);
 800eb78:	e7fe      	b.n	800eb78 <MX_USBPD_Init+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 800eb7a:	b662      	cpsie	i
}
 800eb7c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 800eb7e:	46c0      	nop			; (mov r8, r8)
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	0800e2c5 	.word	0x0800e2c5
 800eb88:	0800e29d 	.word	0x0800e29d
 800eb8c:	0800eba5 	.word	0x0800eba5
 800eb90:	0800eb95 	.word	0x0800eb95

0800eb94 <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 800eb98:	4b01      	ldr	r3, [pc, #4]	; (800eba0 <BSP_GetBoardName+0xc>)
}
 800eb9a:	0018      	movs	r0, r3
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	08015ac8 	.word	0x08015ac8

0800eba4 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 800eba8:	4b01      	ldr	r3, [pc, #4]	; (800ebb0 <BSP_GetBoardID+0xc>)
}
 800ebaa:	0018      	movs	r0, r3
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	08015ad4 	.word	0x08015ad4

0800ebb4 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 800ebb4:	b5b0      	push	{r4, r5, r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 800ebba:	1dfb      	adds	r3, r7, #7
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 800ebc0:	4b62      	ldr	r3, [pc, #392]	; (800ed4c <USBPD_DPM_InitCore+0x198>)
 800ebc2:	0018      	movs	r0, r3
 800ebc4:	f7f2 fbe2 	bl	800138c <USBPD_PE_CheckLIB>
 800ebc8:	0003      	movs	r3, r0
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d001      	beq.n	800ebd2 <USBPD_DPM_InitCore+0x1e>
  {
    return USBPD_ERROR;
 800ebce:	2302      	movs	r3, #2
 800ebd0:	e0b8      	b.n	800ed44 <USBPD_DPM_InitCore+0x190>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 800ebd2:	f7f2 fbe9 	bl	80013a8 <USBPD_PE_GetMemoryConsumption>
 800ebd6:	0003      	movs	r3, r0
 800ebd8:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 800ebda:	f7ff fea9 	bl	800e930 <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 800ebde:	1dbb      	adds	r3, r7, #6
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	701a      	strb	r2, [r3, #0]
 800ebe4:	e0a7      	b.n	800ed36 <USBPD_DPM_InitCore+0x182>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 800ebe6:	1dbb      	adds	r3, r7, #6
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	4a59      	ldr	r2, [pc, #356]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ebec:	00db      	lsls	r3, r3, #3
 800ebee:	18d3      	adds	r3, r2, r3
 800ebf0:	785a      	ldrb	r2, [r3, #1]
 800ebf2:	2108      	movs	r1, #8
 800ebf4:	438a      	bics	r2, r1
 800ebf6:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 800ebf8:	1dbb      	adds	r3, r7, #6
 800ebfa:	781a      	ldrb	r2, [r3, #0]
 800ebfc:	1dbb      	adds	r3, r7, #6
 800ebfe:	7818      	ldrb	r0, [r3, #0]
 800ec00:	4954      	ldr	r1, [pc, #336]	; (800ed54 <USBPD_DPM_InitCore+0x1a0>)
 800ec02:	0013      	movs	r3, r2
 800ec04:	005b      	lsls	r3, r3, #1
 800ec06:	189b      	adds	r3, r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	18cb      	adds	r3, r1, r3
 800ec0c:	791b      	ldrb	r3, [r3, #4]
 800ec0e:	079b      	lsls	r3, r3, #30
 800ec10:	0f9b      	lsrs	r3, r3, #30
 800ec12:	b2d9      	uxtb	r1, r3
 800ec14:	4b4e      	ldr	r3, [pc, #312]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ec16:	00c2      	lsls	r2, r0, #3
 800ec18:	2003      	movs	r0, #3
 800ec1a:	4001      	ands	r1, r0
 800ec1c:	000c      	movs	r4, r1
 800ec1e:	5cd1      	ldrb	r1, [r2, r3]
 800ec20:	2003      	movs	r0, #3
 800ec22:	4381      	bics	r1, r0
 800ec24:	1c08      	adds	r0, r1, #0
 800ec26:	1c21      	adds	r1, r4, #0
 800ec28:	4301      	orrs	r1, r0
 800ec2a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 800ec2c:	1dbb      	adds	r3, r7, #6
 800ec2e:	781a      	ldrb	r2, [r3, #0]
 800ec30:	1dbb      	adds	r3, r7, #6
 800ec32:	7818      	ldrb	r0, [r3, #0]
 800ec34:	4947      	ldr	r1, [pc, #284]	; (800ed54 <USBPD_DPM_InitCore+0x1a0>)
 800ec36:	0013      	movs	r3, r2
 800ec38:	005b      	lsls	r3, r3, #1
 800ec3a:	189b      	adds	r3, r3, r2
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	18cb      	adds	r3, r1, r3
 800ec40:	791b      	ldrb	r3, [r3, #4]
 800ec42:	075b      	lsls	r3, r3, #29
 800ec44:	0fdb      	lsrs	r3, r3, #31
 800ec46:	b2d9      	uxtb	r1, r3
 800ec48:	4b41      	ldr	r3, [pc, #260]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ec4a:	00c2      	lsls	r2, r0, #3
 800ec4c:	2001      	movs	r0, #1
 800ec4e:	4001      	ands	r1, r0
 800ec50:	008c      	lsls	r4, r1, #2
 800ec52:	5cd1      	ldrb	r1, [r2, r3]
 800ec54:	2004      	movs	r0, #4
 800ec56:	4381      	bics	r1, r0
 800ec58:	1c08      	adds	r0, r1, #0
 800ec5a:	1c21      	adds	r1, r4, #0
 800ec5c:	4301      	orrs	r1, r0
 800ec5e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 800ec60:	1dbb      	adds	r3, r7, #6
 800ec62:	781a      	ldrb	r2, [r3, #0]
 800ec64:	4b3a      	ldr	r3, [pc, #232]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ec66:	00d2      	lsls	r2, r2, #3
 800ec68:	5cd1      	ldrb	r1, [r2, r3]
 800ec6a:	2010      	movs	r0, #16
 800ec6c:	4381      	bics	r1, r0
 800ec6e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 800ec70:	1dbb      	adds	r3, r7, #6
 800ec72:	781a      	ldrb	r2, [r3, #0]
 800ec74:	4b36      	ldr	r3, [pc, #216]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ec76:	00d2      	lsls	r2, r2, #3
 800ec78:	5cd1      	ldrb	r1, [r2, r3]
 800ec7a:	203f      	movs	r0, #63	; 0x3f
 800ec7c:	4001      	ands	r1, r0
 800ec7e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 800ec80:	1dbb      	adds	r3, r7, #6
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	4a32      	ldr	r2, [pc, #200]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ec86:	00db      	lsls	r3, r3, #3
 800ec88:	18d3      	adds	r3, r2, r3
 800ec8a:	785a      	ldrb	r2, [r3, #1]
 800ec8c:	2160      	movs	r1, #96	; 0x60
 800ec8e:	438a      	bics	r2, r1
 800ec90:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 800ec92:	1dbb      	adds	r3, r7, #6
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	4a2e      	ldr	r2, [pc, #184]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ec98:	00db      	lsls	r3, r3, #3
 800ec9a:	18d3      	adds	r3, r2, r3
 800ec9c:	785a      	ldrb	r2, [r3, #1]
 800ec9e:	217f      	movs	r1, #127	; 0x7f
 800eca0:	400a      	ands	r2, r1
 800eca2:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 800eca4:	1dbb      	adds	r3, r7, #6
 800eca6:	781a      	ldrb	r2, [r3, #0]
 800eca8:	0013      	movs	r3, r2
 800ecaa:	005b      	lsls	r3, r3, #1
 800ecac:	189b      	adds	r3, r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4a28      	ldr	r2, [pc, #160]	; (800ed54 <USBPD_DPM_InitCore+0x1a0>)
 800ecb2:	189c      	adds	r4, r3, r2
 800ecb4:	1dbb      	adds	r3, r7, #6
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	00da      	lsls	r2, r3, #3
 800ecba:	4b25      	ldr	r3, [pc, #148]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ecbc:	18d2      	adds	r2, r2, r3
 800ecbe:	4926      	ldr	r1, [pc, #152]	; (800ed58 <USBPD_DPM_InitCore+0x1a4>)
 800ecc0:	1dbb      	adds	r3, r7, #6
 800ecc2:	7818      	ldrb	r0, [r3, #0]
 800ecc4:	0013      	movs	r3, r2
 800ecc6:	0022      	movs	r2, r4
 800ecc8:	f7f1 fa1e 	bl	8000108 <USBPD_CAD_Init>
 800eccc:	1e03      	subs	r3, r0, #0
 800ecce:	d001      	beq.n	800ecd4 <USBPD_DPM_InitCore+0x120>
 800ecd0:	2302      	movs	r3, #2
 800ecd2:	e037      	b.n	800ed44 <USBPD_DPM_InitCore+0x190>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 800ecd4:	1dbb      	adds	r3, r7, #6
 800ecd6:	781a      	ldrb	r2, [r3, #0]
 800ecd8:	0013      	movs	r3, r2
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	189b      	adds	r3, r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	4a1c      	ldr	r2, [pc, #112]	; (800ed54 <USBPD_DPM_InitCore+0x1a0>)
 800ece2:	1899      	adds	r1, r3, r2
 800ece4:	1dbb      	adds	r3, r7, #6
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	00da      	lsls	r2, r3, #3
 800ecea:	4b19      	ldr	r3, [pc, #100]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ecec:	18d2      	adds	r2, r2, r3
 800ecee:	1dfc      	adds	r4, r7, #7
 800ecf0:	4d1a      	ldr	r5, [pc, #104]	; (800ed5c <USBPD_DPM_InitCore+0x1a8>)
 800ecf2:	1dbb      	adds	r3, r7, #6
 800ecf4:	7818      	ldrb	r0, [r3, #0]
 800ecf6:	002b      	movs	r3, r5
 800ecf8:	f7f1 fb1c 	bl	8000334 <USBPD_PE_Init>
 800ecfc:	0003      	movs	r3, r0
 800ecfe:	7023      	strb	r3, [r4, #0]
 800ed00:	1dfb      	adds	r3, r7, #7
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <USBPD_DPM_InitCore+0x15a>
 800ed08:	1dfb      	adds	r3, r7, #7
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	e01a      	b.n	800ed44 <USBPD_DPM_InitCore+0x190>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 800ed0e:	1dbb      	adds	r3, r7, #6
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	4a0f      	ldr	r2, [pc, #60]	; (800ed50 <USBPD_DPM_InitCore+0x19c>)
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	18d3      	adds	r3, r2, r3
 800ed18:	785a      	ldrb	r2, [r3, #1]
 800ed1a:	2108      	movs	r1, #8
 800ed1c:	430a      	orrs	r2, r1
 800ed1e:	705a      	strb	r2, [r3, #1]

    /* Enable CAD */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 800ed20:	1dbb      	adds	r3, r7, #6
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	2101      	movs	r1, #1
 800ed26:	0018      	movs	r0, r3
 800ed28:	f7f1 fa45 	bl	80001b6 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 800ed2c:	1dbb      	adds	r3, r7, #6
 800ed2e:	1dba      	adds	r2, r7, #6
 800ed30:	7812      	ldrb	r2, [r2, #0]
 800ed32:	3201      	adds	r2, #1
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	1dbb      	adds	r3, r7, #6
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d100      	bne.n	800ed40 <USBPD_DPM_InitCore+0x18c>
 800ed3e:	e752      	b.n	800ebe6 <USBPD_DPM_InitCore+0x32>
  }

  return _retr;
 800ed40:	1dfb      	adds	r3, r7, #7
 800ed42:	781b      	ldrb	r3, [r3, #0]
}
 800ed44:	0018      	movs	r0, r3
 800ed46:	46bd      	mov	sp, r7
 800ed48:	b002      	add	sp, #8
 800ed4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ed4c:	30320000 	.word	0x30320000
 800ed50:	20001c04 	.word	0x20001c04
 800ed54:	20000014 	.word	0x20000014
 800ed58:	080168e4 	.word	0x080168e4
 800ed5c:	080168ec 	.word	0x080168ec

0800ed60 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
 800ed64:	4b0f      	ldr	r3, [pc, #60]	; (800eda4 <USBPD_DPM_InitOS+0x44>)
 800ed66:	2100      	movs	r1, #0
 800ed68:	0018      	movs	r0, r3
 800ed6a:	f7fb f9fa 	bl	800a162 <osMessageCreate>
 800ed6e:	0002      	movs	r2, r0
 800ed70:	4b0d      	ldr	r3, [pc, #52]	; (800eda8 <USBPD_DPM_InitOS+0x48>)
 800ed72:	601a      	str	r2, [r3, #0]
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
 800ed74:	4b0d      	ldr	r3, [pc, #52]	; (800edac <USBPD_DPM_InitOS+0x4c>)
 800ed76:	2100      	movs	r1, #0
 800ed78:	0018      	movs	r0, r3
 800ed7a:	f7fb f9a9 	bl	800a0d0 <osThreadCreate>
 800ed7e:	1e03      	subs	r3, r0, #0
 800ed80:	d101      	bne.n	800ed86 <USBPD_DPM_InitOS+0x26>
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 800ed82:	2302      	movs	r3, #2
 800ed84:	e00b      	b.n	800ed9e <USBPD_DPM_InitOS+0x3e>
  }

  /* Create the queue corresponding to PE task */
#if (osCMSIS < 0x20000U)
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
 800ed86:	4b0a      	ldr	r3, [pc, #40]	; (800edb0 <USBPD_DPM_InitOS+0x50>)
 800ed88:	2100      	movs	r1, #0
 800ed8a:	0018      	movs	r0, r3
 800ed8c:	f7fb f9e9 	bl	800a162 <osMessageCreate>
 800ed90:	0002      	movs	r2, r0
 800ed92:	4b08      	ldr	r3, [pc, #32]	; (800edb4 <USBPD_DPM_InitOS+0x54>)
 800ed94:	601a      	str	r2, [r3, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 800ed96:	4b08      	ldr	r3, [pc, #32]	; (800edb8 <USBPD_DPM_InitOS+0x58>)
 800ed98:	2200      	movs	r2, #0
 800ed9a:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	0018      	movs	r0, r3
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	080168dc 	.word	0x080168dc
 800eda8:	20001704 	.word	0x20001704
 800edac:	080168c8 	.word	0x080168c8
 800edb0:	080168c0 	.word	0x080168c0
 800edb4:	20001708 	.word	0x20001708
 800edb8:	20001700 	.word	0x20001700

0800edbc <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 800edc0:	4b09      	ldr	r3, [pc, #36]	; (800ede8 <USBPD_DPM_TimerCounter+0x2c>)
 800edc2:	785b      	ldrb	r3, [r3, #1]
 800edc4:	2208      	movs	r2, #8
 800edc6:	4013      	ands	r3, r2
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d008      	beq.n	800ede0 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 800edce:	2000      	movs	r0, #0
 800edd0:	f000 f9b0 	bl	800f134 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 800edd4:	2000      	movs	r0, #0
 800edd6:	f7f1 fb12 	bl	80003fe <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 800edda:	2000      	movs	r0, #0
 800eddc:	f7f6 fbc2 	bl	8005564 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 800ede0:	46c0      	nop			; (mov r8, r8)
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	46c0      	nop			; (mov r8, r8)
 800ede8:	20001c04 	.word	0x20001c04

0800edec <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	0002      	movs	r2, r0
 800edf4:	1dfb      	adds	r3, r7, #7
 800edf6:	701a      	strb	r2, [r3, #0]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
 800edf8:	1dfb      	adds	r3, r7, #7
 800edfa:	781a      	ldrb	r2, [r3, #0]
 800edfc:	4b05      	ldr	r3, [pc, #20]	; (800ee14 <USBPD_PE_TaskWakeUp+0x28>)
 800edfe:	0092      	lsls	r2, r2, #2
 800ee00:	58d3      	ldr	r3, [r2, r3]
 800ee02:	4905      	ldr	r1, [pc, #20]	; (800ee18 <USBPD_PE_TaskWakeUp+0x2c>)
 800ee04:	2200      	movs	r2, #0
 800ee06:	0018      	movs	r0, r3
 800ee08:	f7fb f9be 	bl	800a188 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 800ee0c:	46c0      	nop			; (mov r8, r8)
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	b002      	add	sp, #8
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	20001708 	.word	0x20001708
 800ee18:	0000ffff 	.word	0x0000ffff

0800ee1c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 800ee20:	4b04      	ldr	r3, [pc, #16]	; (800ee34 <USBPD_DPM_CADTaskWakeUp+0x18>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4904      	ldr	r1, [pc, #16]	; (800ee38 <USBPD_DPM_CADTaskWakeUp+0x1c>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	0018      	movs	r0, r3
 800ee2a:	f7fb f9ad 	bl	800a188 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 800ee2e:	46c0      	nop			; (mov r8, r8)
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	20001704 	.word	0x20001704
 800ee38:	0000ffff 	.word	0x0000ffff

0800ee3c <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task(void const *argument)
{
 800ee3c:	b590      	push	{r4, r7, lr}
 800ee3e:	b089      	sub	sp, #36	; 0x24
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	231f      	movs	r3, #31
 800ee48:	18fb      	adds	r3, r7, r3
 800ee4a:	701a      	strb	r2, [r3, #0]
  uint32_t _timing;

  for(;;)
  {
    _timing = USBPD_PE_StateMachine_SNK(_port);
 800ee4c:	241f      	movs	r4, #31
 800ee4e:	193b      	adds	r3, r7, r4
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	0018      	movs	r0, r3
 800ee54:	f7f2 ff28 	bl	8001ca8 <USBPD_PE_StateMachine_SNK>
 800ee58:	0003      	movs	r3, r0
 800ee5a:	61bb      	str	r3, [r7, #24]
    osMessageGet(PEQueueId[_port],_timing);
 800ee5c:	193b      	adds	r3, r7, r4
 800ee5e:	781a      	ldrb	r2, [r3, #0]
 800ee60:	4b04      	ldr	r3, [pc, #16]	; (800ee74 <USBPD_PE_Task+0x38>)
 800ee62:	0092      	lsls	r2, r2, #2
 800ee64:	58d1      	ldr	r1, [r2, r3]
 800ee66:	003b      	movs	r3, r7
 800ee68:	69ba      	ldr	r2, [r7, #24]
 800ee6a:	0018      	movs	r0, r3
 800ee6c:	f7fb f9c8 	bl	800a200 <osMessageGet>
    _timing = USBPD_PE_StateMachine_SNK(_port);
 800ee70:	e7ec      	b.n	800ee4c <USBPD_PE_Task+0x10>
 800ee72:	46c0      	nop			; (mov r8, r8)
 800ee74:	20001708 	.word	0x20001708

0800ee78 <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 800ee78:	b590      	push	{r4, r7, lr}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6178      	str	r0, [r7, #20]
  for (;;)
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
 800ee80:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <USBPD_CAD_Task+0x20>)
 800ee82:	681c      	ldr	r4, [r3, #0]
 800ee84:	f7f1 f99f 	bl	80001c6 <USBPD_CAD_Process>
 800ee88:	0002      	movs	r2, r0
 800ee8a:	003b      	movs	r3, r7
 800ee8c:	0021      	movs	r1, r4
 800ee8e:	0018      	movs	r0, r3
 800ee90:	f7fb f9b6 	bl	800a200 <osMessageGet>
 800ee94:	e7f4      	b.n	800ee80 <USBPD_CAD_Task+0x8>
 800ee96:	46c0      	nop			; (mov r8, r8)
 800ee98:	20001704 	.word	0x20001704

0800ee9c <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af02      	add	r7, sp, #8
 800eea2:	603a      	str	r2, [r7, #0]
 800eea4:	1dfb      	adds	r3, r7, #7
 800eea6:	1c02      	adds	r2, r0, #0
 800eea8:	701a      	strb	r2, [r3, #0]
 800eeaa:	1dbb      	adds	r3, r7, #6
 800eeac:	1c0a      	adds	r2, r1, #0
 800eeae:	701a      	strb	r2, [r3, #0]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 800eeb0:	1dbb      	adds	r3, r7, #6
 800eeb2:	781a      	ldrb	r2, [r3, #0]
 800eeb4:	1dfb      	adds	r3, r7, #7
 800eeb6:	7819      	ldrb	r1, [r3, #0]
 800eeb8:	2300      	movs	r3, #0
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	2300      	movs	r3, #0
 800eebe:	2003      	movs	r0, #3
 800eec0:	f7ff fd4c 	bl	800e95c <USBPD_TRACE_Add>

  switch (State)
 800eec4:	1dbb      	adds	r3, r7, #6
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	2b04      	cmp	r3, #4
 800eeca:	d008      	beq.n	800eede <USBPD_DPM_CADCallback+0x42>
 800eecc:	dc56      	bgt.n	800ef7c <USBPD_DPM_CADCallback+0xe0>
 800eece:	2b03      	cmp	r3, #3
 800eed0:	d017      	beq.n	800ef02 <USBPD_DPM_CADCallback+0x66>
 800eed2:	dc53      	bgt.n	800ef7c <USBPD_DPM_CADCallback+0xe0>
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d014      	beq.n	800ef02 <USBPD_DPM_CADCallback+0x66>
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d009      	beq.n	800eef0 <USBPD_DPM_CADCallback+0x54>
#endif /* _VCONN_SUPPORT */
      break;
    }
    default :
      /* nothing to do */
      break;
 800eedc:	e04e      	b.n	800ef7c <USBPD_DPM_CADCallback+0xe0>
      DPM_ManageAttachedState(PortNum, State, Cc);
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	1dbb      	adds	r3, r7, #6
 800eee2:	7819      	ldrb	r1, [r3, #0]
 800eee4:	1dfb      	adds	r3, r7, #7
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	0018      	movs	r0, r3
 800eeea:	f000 f851 	bl	800ef90 <DPM_ManageAttachedState>
      break;
 800eeee:	e046      	b.n	800ef7e <USBPD_DPM_CADCallback+0xe2>
      DPM_ManageAttachedState(PortNum, State, Cc);
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	1dbb      	adds	r3, r7, #6
 800eef4:	7819      	ldrb	r1, [r3, #0]
 800eef6:	1dfb      	adds	r3, r7, #7
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	0018      	movs	r0, r3
 800eefc:	f000 f848 	bl	800ef90 <DPM_ManageAttachedState>
      break;
 800ef00:	e03d      	b.n	800ef7e <USBPD_DPM_CADCallback+0xe2>
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 800ef02:	1dfb      	adds	r3, r7, #7
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	2100      	movs	r1, #0
 800ef08:	0018      	movs	r0, r3
 800ef0a:	f7f1 facb 	bl	80004a4 <USBPD_PE_IsCableConnected>
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 800ef0e:	1dfb      	adds	r3, r7, #7
 800ef10:	781a      	ldrb	r2, [r3, #0]
 800ef12:	4b1d      	ldr	r3, [pc, #116]	; (800ef88 <USBPD_DPM_CADCallback+0xec>)
 800ef14:	0092      	lsls	r2, r2, #2
 800ef16:	58d3      	ldr	r3, [r2, r3]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00d      	beq.n	800ef38 <USBPD_DPM_CADCallback+0x9c>
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 800ef1c:	1dfb      	adds	r3, r7, #7
 800ef1e:	781a      	ldrb	r2, [r3, #0]
 800ef20:	4b19      	ldr	r3, [pc, #100]	; (800ef88 <USBPD_DPM_CADCallback+0xec>)
 800ef22:	0092      	lsls	r2, r2, #2
 800ef24:	58d3      	ldr	r3, [r2, r3]
 800ef26:	0018      	movs	r0, r3
 800ef28:	f7fb f8fa 	bl	800a120 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 800ef2c:	1dfb      	adds	r3, r7, #7
 800ef2e:	781a      	ldrb	r2, [r3, #0]
 800ef30:	4b15      	ldr	r3, [pc, #84]	; (800ef88 <USBPD_DPM_CADCallback+0xec>)
 800ef32:	0092      	lsls	r2, r2, #2
 800ef34:	2100      	movs	r1, #0
 800ef36:	50d1      	str	r1, [r2, r3]
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 800ef38:	1dfb      	adds	r3, r7, #7
 800ef3a:	781a      	ldrb	r2, [r3, #0]
 800ef3c:	4b13      	ldr	r3, [pc, #76]	; (800ef8c <USBPD_DPM_CADCallback+0xf0>)
 800ef3e:	00d2      	lsls	r2, r2, #3
 800ef40:	5cd1      	ldrb	r1, [r2, r3]
 800ef42:	2010      	movs	r0, #16
 800ef44:	4381      	bics	r1, r0
 800ef46:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 800ef48:	1dfb      	adds	r3, r7, #7
 800ef4a:	781a      	ldrb	r2, [r3, #0]
 800ef4c:	4b0f      	ldr	r3, [pc, #60]	; (800ef8c <USBPD_DPM_CADCallback+0xf0>)
 800ef4e:	00d2      	lsls	r2, r2, #3
 800ef50:	5cd1      	ldrb	r1, [r2, r3]
 800ef52:	203f      	movs	r0, #63	; 0x3f
 800ef54:	4001      	ands	r1, r0
 800ef56:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 800ef58:	1dfb      	adds	r3, r7, #7
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	4a0b      	ldr	r2, [pc, #44]	; (800ef8c <USBPD_DPM_CADCallback+0xf0>)
 800ef5e:	00db      	lsls	r3, r3, #3
 800ef60:	18d3      	adds	r3, r2, r3
 800ef62:	785a      	ldrb	r2, [r3, #1]
 800ef64:	2107      	movs	r1, #7
 800ef66:	438a      	bics	r2, r1
 800ef68:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 800ef6a:	1dbb      	adds	r3, r7, #6
 800ef6c:	781a      	ldrb	r2, [r3, #0]
 800ef6e:	1dfb      	adds	r3, r7, #7
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	0011      	movs	r1, r2
 800ef74:	0018      	movs	r0, r3
 800ef76:	f000 f883 	bl	800f080 <USBPD_DPM_UserCableDetection>
      break;
 800ef7a:	e000      	b.n	800ef7e <USBPD_DPM_CADCallback+0xe2>
      break;
 800ef7c:	46c0      	nop			; (mov r8, r8)
  }
}
 800ef7e:	46c0      	nop			; (mov r8, r8)
 800ef80:	46bd      	mov	sp, r7
 800ef82:	b002      	add	sp, #8
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	46c0      	nop			; (mov r8, r8)
 800ef88:	20001700 	.word	0x20001700
 800ef8c:	20001c04 	.word	0x20001c04

0800ef90 <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 800ef90:	b590      	push	{r4, r7, lr}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	603a      	str	r2, [r7, #0]
 800ef98:	1dfb      	adds	r3, r7, #7
 800ef9a:	1c02      	adds	r2, r0, #0
 800ef9c:	701a      	strb	r2, [r3, #0]
 800ef9e:	1dbb      	adds	r3, r7, #6
 800efa0:	1c0a      	adds	r2, r1, #0
 800efa2:	701a      	strb	r2, [r3, #0]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 800efa4:	1dfb      	adds	r3, r7, #7
 800efa6:	781a      	ldrb	r2, [r3, #0]
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	1c19      	adds	r1, r3, #0
 800efac:	2303      	movs	r3, #3
 800efae:	400b      	ands	r3, r1
 800efb0:	b2d9      	uxtb	r1, r3
 800efb2:	4b1f      	ldr	r3, [pc, #124]	; (800f030 <DPM_ManageAttachedState+0xa0>)
 800efb4:	00d2      	lsls	r2, r2, #3
 800efb6:	018c      	lsls	r4, r1, #6
 800efb8:	5cd1      	ldrb	r1, [r2, r3]
 800efba:	203f      	movs	r0, #63	; 0x3f
 800efbc:	4001      	ands	r1, r0
 800efbe:	1c08      	adds	r0, r1, #0
 800efc0:	1c21      	adds	r1, r4, #0
 800efc2:	4301      	orrs	r1, r0
 800efc4:	54d1      	strb	r1, [r2, r3]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 800efc6:	1dfb      	adds	r3, r7, #7
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	2101      	movs	r1, #1
 800efcc:	0018      	movs	r0, r3
 800efce:	f7f1 fa69 	bl	80004a4 <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 800efd2:	1dbb      	adds	r3, r7, #6
 800efd4:	781a      	ldrb	r2, [r3, #0]
 800efd6:	1dfb      	adds	r3, r7, #7
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	0011      	movs	r1, r2
 800efdc:	0018      	movs	r0, r3
 800efde:	f000 f84f 	bl	800f080 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 800efe2:	1dfb      	adds	r3, r7, #7
 800efe4:	781a      	ldrb	r2, [r3, #0]
 800efe6:	4b13      	ldr	r3, [pc, #76]	; (800f034 <DPM_ManageAttachedState+0xa4>)
 800efe8:	0092      	lsls	r2, r2, #2
 800efea:	58d3      	ldr	r3, [r2, r3]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d11a      	bne.n	800f026 <DPM_ManageAttachedState+0x96>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
 800eff0:	1dfb      	adds	r3, r7, #7
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d101      	bne.n	800effc <DPM_ManageAttachedState+0x6c>
 800eff8:	4b0f      	ldr	r3, [pc, #60]	; (800f038 <DPM_ManageAttachedState+0xa8>)
 800effa:	e000      	b.n	800effe <DPM_ManageAttachedState+0x6e>
 800effc:	4b0f      	ldr	r3, [pc, #60]	; (800f03c <DPM_ManageAttachedState+0xac>)
 800effe:	1dfa      	adds	r2, r7, #7
 800f000:	7812      	ldrb	r2, [r2, #0]
 800f002:	0011      	movs	r1, r2
 800f004:	1dfa      	adds	r2, r7, #7
 800f006:	7814      	ldrb	r4, [r2, #0]
 800f008:	0018      	movs	r0, r3
 800f00a:	f7fb f861 	bl	800a0d0 <osThreadCreate>
 800f00e:	0001      	movs	r1, r0
 800f010:	4b08      	ldr	r3, [pc, #32]	; (800f034 <DPM_ManageAttachedState+0xa4>)
 800f012:	00a2      	lsls	r2, r4, #2
 800f014:	50d1      	str	r1, [r2, r3]
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 800f016:	1dfb      	adds	r3, r7, #7
 800f018:	781a      	ldrb	r2, [r3, #0]
 800f01a:	4b06      	ldr	r3, [pc, #24]	; (800f034 <DPM_ManageAttachedState+0xa4>)
 800f01c:	0092      	lsls	r2, r2, #2
 800f01e:	58d3      	ldr	r3, [r2, r3]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d100      	bne.n	800f026 <DPM_ManageAttachedState+0x96>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 800f024:	e7fe      	b.n	800f024 <DPM_ManageAttachedState+0x94>
    }
  }
}
 800f026:	46c0      	nop			; (mov r8, r8)
 800f028:	46bd      	mov	sp, r7
 800f02a:	b003      	add	sp, #12
 800f02c:	bd90      	pop	{r4, r7, pc}
 800f02e:	46c0      	nop			; (mov r8, r8)
 800f030:	20001c04 	.word	0x20001c04
 800f034:	20001700 	.word	0x20001700
 800f038:	08016898 	.word	0x08016898
 800f03c:	080168ac 	.word	0x080168ac

0800f040 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 800f044:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 800f046:	0018      	movs	r0, r3
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 800f058:	4b06      	ldr	r3, [pc, #24]	; (800f074 <USBPD_DPM_SetNotification_GUI+0x28>)
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	601a      	str	r2, [r3, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 800f05e:	4b06      	ldr	r3, [pc, #24]	; (800f078 <USBPD_DPM_SetNotification_GUI+0x2c>)
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	601a      	str	r2, [r3, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 800f064:	4b05      	ldr	r3, [pc, #20]	; (800f07c <USBPD_DPM_SetNotification_GUI+0x30>)
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	601a      	str	r2, [r3, #0]
}
 800f06a:	46c0      	nop			; (mov r8, r8)
 800f06c:	46bd      	mov	sp, r7
 800f06e:	b004      	add	sp, #16
 800f070:	bd80      	pop	{r7, pc}
 800f072:	46c0      	nop			; (mov r8, r8)
 800f074:	2000170c 	.word	0x2000170c
 800f078:	20001710 	.word	0x20001710
 800f07c:	20001714 	.word	0x20001714

0800f080 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 800f080:	b590      	push	{r4, r7, lr}
 800f082:	b093      	sub	sp, #76	; 0x4c
 800f084:	af02      	add	r7, sp, #8
 800f086:	0002      	movs	r2, r0
 800f088:	1dfb      	adds	r3, r7, #7
 800f08a:	701a      	strb	r2, [r3, #0]
 800f08c:	1dbb      	adds	r3, r7, #6
 800f08e:	1c0a      	adds	r2, r1, #0
 800f090:	701a      	strb	r2, [r3, #0]
  switch(State)
 800f092:	1dbb      	adds	r3, r7, #6
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	2b02      	cmp	r3, #2
 800f098:	d001      	beq.n	800f09e <USBPD_DPM_UserCableDetection+0x1e>
 800f09a:	2b04      	cmp	r3, #4
 800f09c:	d10b      	bne.n	800f0b6 <USBPD_DPM_UserCableDetection+0x36>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 800f09e:	4b22      	ldr	r3, [pc, #136]	; (800f128 <USBPD_DPM_UserCableDetection+0xa8>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d013      	beq.n	800f0ce <USBPD_DPM_UserCableDetection+0x4e>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 800f0a6:	4b20      	ldr	r3, [pc, #128]	; (800f128 <USBPD_DPM_UserCableDetection+0xa8>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	1dfa      	adds	r2, r7, #7
 800f0ac:	7810      	ldrb	r0, [r2, #0]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	2120      	movs	r1, #32
 800f0b2:	4798      	blx	r3
    }
    break;
 800f0b4:	e00b      	b.n	800f0ce <USBPD_DPM_UserCableDetection+0x4e>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 800f0b6:	4b1c      	ldr	r3, [pc, #112]	; (800f128 <USBPD_DPM_UserCableDetection+0xa8>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d008      	beq.n	800f0d0 <USBPD_DPM_UserCableDetection+0x50>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 800f0be:	4b1a      	ldr	r3, [pc, #104]	; (800f128 <USBPD_DPM_UserCableDetection+0xa8>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	1dfa      	adds	r2, r7, #7
 800f0c4:	7810      	ldrb	r0, [r2, #0]
 800f0c6:	4919      	ldr	r1, [pc, #100]	; (800f12c <USBPD_DPM_UserCableDetection+0xac>)
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	4798      	blx	r3
 800f0cc:	e000      	b.n	800f0d0 <USBPD_DPM_UserCableDetection+0x50>
    break;
 800f0ce:	46c0      	nop			; (mov r8, r8)
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 800f0d0:	4a17      	ldr	r2, [pc, #92]	; (800f130 <USBPD_DPM_UserCableDetection+0xb0>)
 800f0d2:	240c      	movs	r4, #12
 800f0d4:	193b      	adds	r3, r7, r4
 800f0d6:	2132      	movs	r1, #50	; 0x32
 800f0d8:	0018      	movs	r0, r3
 800f0da:	f006 f953 	bl	8015384 <sniprintf>
 800f0de:	0002      	movs	r2, r0
 800f0e0:	213f      	movs	r1, #63	; 0x3f
 800f0e2:	187b      	adds	r3, r7, r1
 800f0e4:	701a      	strb	r2, [r3, #0]
 800f0e6:	187b      	adds	r3, r7, r1
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	2b31      	cmp	r3, #49	; 0x31
 800f0ec:	d80d      	bhi.n	800f10a <USBPD_DPM_UserCableDetection+0x8a>
 800f0ee:	193b      	adds	r3, r7, r4
 800f0f0:	0018      	movs	r0, r3
 800f0f2:	f7f7 f81d 	bl	8006130 <strlen>
 800f0f6:	193a      	adds	r2, r7, r4
 800f0f8:	1dfb      	adds	r3, r7, #7
 800f0fa:	7819      	ldrb	r1, [r3, #0]
 800f0fc:	9000      	str	r0, [sp, #0]
 800f0fe:	0013      	movs	r3, r2
 800f100:	2200      	movs	r2, #0
 800f102:	2006      	movs	r0, #6
 800f104:	f7ff fc2a 	bl	800e95c <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 800f108:	e00a      	b.n	800f120 <USBPD_DPM_UserCableDetection+0xa0>
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 800f10a:	230c      	movs	r3, #12
 800f10c:	18fa      	adds	r2, r7, r3
 800f10e:	1dfb      	adds	r3, r7, #7
 800f110:	7819      	ldrb	r1, [r3, #0]
 800f112:	2332      	movs	r3, #50	; 0x32
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	0013      	movs	r3, r2
 800f118:	2200      	movs	r2, #0
 800f11a:	2006      	movs	r0, #6
 800f11c:	f7ff fc1e 	bl	800e95c <USBPD_TRACE_Add>
}
 800f120:	46c0      	nop			; (mov r8, r8)
 800f122:	46bd      	mov	sp, r7
 800f124:	b011      	add	sp, #68	; 0x44
 800f126:	bd90      	pop	{r4, r7, pc}
 800f128:	20001710 	.word	0x20001710
 800f12c:	00008020 	.word	0x00008020
 800f130:	08015af0 	.word	0x08015af0

0800f134 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	0002      	movs	r2, r0
 800f13c:	1dfb      	adds	r3, r7, #7
 800f13e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 800f140:	46c0      	nop			; (mov r8, r8)
 800f142:	46bd      	mov	sp, r7
 800f144:	b002      	add	sp, #8
 800f146:	bd80      	pop	{r7, pc}

0800f148 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 800f148:	b590      	push	{r4, r7, lr}
 800f14a:	b093      	sub	sp, #76	; 0x4c
 800f14c:	af02      	add	r7, sp, #8
 800f14e:	6039      	str	r1, [r7, #0]
 800f150:	0011      	movs	r1, r2
 800f152:	1dfb      	adds	r3, r7, #7
 800f154:	1c02      	adds	r2, r0, #0
 800f156:	701a      	strb	r2, [r3, #0]
 800f158:	1dbb      	adds	r3, r7, #6
 800f15a:	1c0a      	adds	r2, r1, #0
 800f15c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 800f15e:	4a16      	ldr	r2, [pc, #88]	; (800f1b8 <USBPD_DPM_HardReset+0x70>)
 800f160:	240c      	movs	r4, #12
 800f162:	193b      	adds	r3, r7, r4
 800f164:	2132      	movs	r1, #50	; 0x32
 800f166:	0018      	movs	r0, r3
 800f168:	f006 f90c 	bl	8015384 <sniprintf>
 800f16c:	0002      	movs	r2, r0
 800f16e:	213f      	movs	r1, #63	; 0x3f
 800f170:	187b      	adds	r3, r7, r1
 800f172:	701a      	strb	r2, [r3, #0]
 800f174:	187b      	adds	r3, r7, r1
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	2b31      	cmp	r3, #49	; 0x31
 800f17a:	d80d      	bhi.n	800f198 <USBPD_DPM_HardReset+0x50>
 800f17c:	193b      	adds	r3, r7, r4
 800f17e:	0018      	movs	r0, r3
 800f180:	f7f6 ffd6 	bl	8006130 <strlen>
 800f184:	193a      	adds	r2, r7, r4
 800f186:	1dfb      	adds	r3, r7, #7
 800f188:	7819      	ldrb	r1, [r3, #0]
 800f18a:	9000      	str	r0, [sp, #0]
 800f18c:	0013      	movs	r3, r2
 800f18e:	2200      	movs	r2, #0
 800f190:	2006      	movs	r0, #6
 800f192:	f7ff fbe3 	bl	800e95c <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_HardReset */
}
 800f196:	e00a      	b.n	800f1ae <USBPD_DPM_HardReset+0x66>
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 800f198:	230c      	movs	r3, #12
 800f19a:	18fa      	adds	r2, r7, r3
 800f19c:	1dfb      	adds	r3, r7, #7
 800f19e:	7819      	ldrb	r1, [r3, #0]
 800f1a0:	2332      	movs	r3, #50	; 0x32
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	0013      	movs	r3, r2
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	2006      	movs	r0, #6
 800f1aa:	f7ff fbd7 	bl	800e95c <USBPD_TRACE_Add>
}
 800f1ae:	46c0      	nop			; (mov r8, r8)
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	b011      	add	sp, #68	; 0x44
 800f1b4:	bd90      	pop	{r4, r7, pc}
 800f1b6:	46c0      	nop			; (mov r8, r8)
 800f1b8:	08015b1c 	.word	0x08015b1c

0800f1bc <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	0002      	movs	r2, r0
 800f1c4:	1dfb      	adds	r3, r7, #7
 800f1c6:	701a      	strb	r2, [r3, #0]
 800f1c8:	1dbb      	adds	r3, r7, #6
 800f1ca:	1c0a      	adds	r2, r1, #0
 800f1cc:	701a      	strb	r2, [r3, #0]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 800f1ce:	4b08      	ldr	r3, [pc, #32]	; (800f1f0 <USBPD_DPM_Notification+0x34>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d008      	beq.n	800f1e8 <USBPD_DPM_Notification+0x2c>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 800f1d6:	4b06      	ldr	r3, [pc, #24]	; (800f1f0 <USBPD_DPM_Notification+0x34>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	1dba      	adds	r2, r7, #6
 800f1dc:	7812      	ldrb	r2, [r2, #0]
 800f1de:	b291      	uxth	r1, r2
 800f1e0:	1dfa      	adds	r2, r7, #7
 800f1e2:	7812      	ldrb	r2, [r2, #0]
 800f1e4:	0010      	movs	r0, r2
 800f1e6:	4798      	blx	r3
  }
/* USER CODE BEGIN USBPD_DPM_Notification */

/* USER CODE END USBPD_DPM_Notification */
}
 800f1e8:	46c0      	nop			; (mov r8, r8)
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	b002      	add	sp, #8
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	2000170c 	.word	0x2000170c

0800f1f4 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 800f1f4:	b5b0      	push	{r4, r5, r7, lr}
 800f1f6:	b094      	sub	sp, #80	; 0x50
 800f1f8:	af02      	add	r7, sp, #8
 800f1fa:	60ba      	str	r2, [r7, #8]
 800f1fc:	607b      	str	r3, [r7, #4]
 800f1fe:	250f      	movs	r5, #15
 800f200:	197b      	adds	r3, r7, r5
 800f202:	1c02      	adds	r2, r0, #0
 800f204:	701a      	strb	r2, [r3, #0]
 800f206:	200e      	movs	r0, #14
 800f208:	183b      	adds	r3, r7, r0
 800f20a:	1c0a      	adds	r2, r1, #0
 800f20c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 800f20e:	0001      	movs	r1, r0
 800f210:	187b      	adds	r3, r7, r1
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d10e      	bne.n	800f236 <USBPD_DPM_GetDataInfo+0x42>
  {
  case USBPD_CORE_DATATYPE_SNK_PDO: /*!< Handling of port Sink PDO, requested by get sinkcapa*/
   USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 800f218:	687c      	ldr	r4, [r7, #4]
 800f21a:	68ba      	ldr	r2, [r7, #8]
 800f21c:	187b      	adds	r3, r7, r1
 800f21e:	7819      	ldrb	r1, [r3, #0]
 800f220:	197b      	adds	r3, r7, r5
 800f222:	7818      	ldrb	r0, [r3, #0]
 800f224:	0023      	movs	r3, r4
 800f226:	f001 f83b 	bl	80102a0 <USBPD_PWR_IF_GetPortPDOs>
   *Size *= 4;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	009a      	lsls	r2, r3, #2
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	601a      	str	r2, [r3, #0]
   break;
 800f234:	e02c      	b.n	800f290 <USBPD_DPM_GetDataInfo+0x9c>
//  case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content          */
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 800f236:	230e      	movs	r3, #14
 800f238:	18fb      	adds	r3, r7, r3
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	4a16      	ldr	r2, [pc, #88]	; (800f298 <USBPD_DPM_GetDataInfo+0xa4>)
 800f23e:	2414      	movs	r4, #20
 800f240:	1938      	adds	r0, r7, r4
 800f242:	2132      	movs	r1, #50	; 0x32
 800f244:	f006 f89e 	bl	8015384 <sniprintf>
 800f248:	0002      	movs	r2, r0
 800f24a:	2147      	movs	r1, #71	; 0x47
 800f24c:	187b      	adds	r3, r7, r1
 800f24e:	701a      	strb	r2, [r3, #0]
 800f250:	187b      	adds	r3, r7, r1
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	2b31      	cmp	r3, #49	; 0x31
 800f256:	d80e      	bhi.n	800f276 <USBPD_DPM_GetDataInfo+0x82>
 800f258:	193b      	adds	r3, r7, r4
 800f25a:	0018      	movs	r0, r3
 800f25c:	f7f6 ff68 	bl	8006130 <strlen>
 800f260:	193a      	adds	r2, r7, r4
 800f262:	230f      	movs	r3, #15
 800f264:	18fb      	adds	r3, r7, r3
 800f266:	7819      	ldrb	r1, [r3, #0]
 800f268:	9000      	str	r0, [sp, #0]
 800f26a:	0013      	movs	r3, r2
 800f26c:	2200      	movs	r2, #0
 800f26e:	2006      	movs	r0, #6
 800f270:	f7ff fb74 	bl	800e95c <USBPD_TRACE_Add>
    break;
 800f274:	e00b      	b.n	800f28e <USBPD_DPM_GetDataInfo+0x9a>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 800f276:	2314      	movs	r3, #20
 800f278:	18fa      	adds	r2, r7, r3
 800f27a:	230f      	movs	r3, #15
 800f27c:	18fb      	adds	r3, r7, r3
 800f27e:	7819      	ldrb	r1, [r3, #0]
 800f280:	2332      	movs	r3, #50	; 0x32
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	0013      	movs	r3, r2
 800f286:	2200      	movs	r2, #0
 800f288:	2006      	movs	r0, #6
 800f28a:	f7ff fb67 	bl	800e95c <USBPD_TRACE_Add>
    break;
 800f28e:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 800f290:	46c0      	nop			; (mov r8, r8)
 800f292:	46bd      	mov	sp, r7
 800f294:	b012      	add	sp, #72	; 0x48
 800f296:	bdb0      	pop	{r4, r5, r7, pc}
 800f298:	08015b40 	.word	0x08015b40

0800f29c <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 800f29c:	b5b0      	push	{r4, r5, r7, lr}
 800f29e:	b094      	sub	sp, #80	; 0x50
 800f2a0:	af02      	add	r7, sp, #8
 800f2a2:	60ba      	str	r2, [r7, #8]
 800f2a4:	607b      	str	r3, [r7, #4]
 800f2a6:	250f      	movs	r5, #15
 800f2a8:	197b      	adds	r3, r7, r5
 800f2aa:	1c02      	adds	r2, r0, #0
 800f2ac:	701a      	strb	r2, [r3, #0]
 800f2ae:	200e      	movs	r0, #14
 800f2b0:	183b      	adds	r3, r7, r0
 800f2b2:	1c0a      	adds	r2, r1, #0
 800f2b4:	701a      	strb	r2, [r3, #0]
//  case USBPD_CORE_GET_BATTERY_CAPABILITY:     /*!< Storing of received Get Battery capability message content*/
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 800f2b6:	183b      	adds	r3, r7, r0
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	4a1e      	ldr	r2, [pc, #120]	; (800f334 <USBPD_DPM_SetDataInfo+0x98>)
 800f2bc:	2414      	movs	r4, #20
 800f2be:	1938      	adds	r0, r7, r4
 800f2c0:	2132      	movs	r1, #50	; 0x32
 800f2c2:	f006 f85f 	bl	8015384 <sniprintf>
 800f2c6:	0002      	movs	r2, r0
 800f2c8:	2147      	movs	r1, #71	; 0x47
 800f2ca:	187b      	adds	r3, r7, r1
 800f2cc:	701a      	strb	r2, [r3, #0]
 800f2ce:	187b      	adds	r3, r7, r1
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	2b31      	cmp	r3, #49	; 0x31
 800f2d4:	d80d      	bhi.n	800f2f2 <USBPD_DPM_SetDataInfo+0x56>
 800f2d6:	193b      	adds	r3, r7, r4
 800f2d8:	0018      	movs	r0, r3
 800f2da:	f7f6 ff29 	bl	8006130 <strlen>
 800f2de:	193a      	adds	r2, r7, r4
 800f2e0:	197b      	adds	r3, r7, r5
 800f2e2:	7819      	ldrb	r1, [r3, #0]
 800f2e4:	9000      	str	r0, [sp, #0]
 800f2e6:	0013      	movs	r3, r2
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	2006      	movs	r0, #6
 800f2ec:	f7ff fb36 	bl	800e95c <USBPD_TRACE_Add>
    break;
 800f2f0:	e00b      	b.n	800f30a <USBPD_DPM_SetDataInfo+0x6e>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 800f2f2:	2314      	movs	r3, #20
 800f2f4:	18fa      	adds	r2, r7, r3
 800f2f6:	230f      	movs	r3, #15
 800f2f8:	18fb      	adds	r3, r7, r3
 800f2fa:	7819      	ldrb	r1, [r3, #0]
 800f2fc:	2332      	movs	r3, #50	; 0x32
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	0013      	movs	r3, r2
 800f302:	2200      	movs	r2, #0
 800f304:	2006      	movs	r0, #6
 800f306:	f7ff fb29 	bl	800e95c <USBPD_TRACE_Add>
    break;
 800f30a:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 800f30c:	4b0a      	ldr	r3, [pc, #40]	; (800f338 <USBPD_DPM_SetDataInfo+0x9c>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00b      	beq.n	800f32c <USBPD_DPM_SetDataInfo+0x90>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 800f314:	4b08      	ldr	r3, [pc, #32]	; (800f338 <USBPD_DPM_SetDataInfo+0x9c>)
 800f316:	681c      	ldr	r4, [r3, #0]
 800f318:	687d      	ldr	r5, [r7, #4]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	230e      	movs	r3, #14
 800f31e:	18fb      	adds	r3, r7, r3
 800f320:	7819      	ldrb	r1, [r3, #0]
 800f322:	230f      	movs	r3, #15
 800f324:	18fb      	adds	r3, r7, r3
 800f326:	7818      	ldrb	r0, [r3, #0]
 800f328:	002b      	movs	r3, r5
 800f32a:	47a0      	blx	r4
  }
}
 800f32c:	46c0      	nop			; (mov r8, r8)
 800f32e:	46bd      	mov	sp, r7
 800f330:	b012      	add	sp, #72	; 0x48
 800f332:	bdb0      	pop	{r4, r5, r7, pc}
 800f334:	08015b68 	.word	0x08015b68
 800f338:	20001714 	.word	0x20001714

0800f33c <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b086      	sub	sp, #24
 800f340:	af00      	add	r7, sp, #0
 800f342:	60b9      	str	r1, [r7, #8]
 800f344:	607a      	str	r2, [r7, #4]
 800f346:	230f      	movs	r3, #15
 800f348:	18fb      	adds	r3, r7, r3
 800f34a:	1c02      	adds	r2, r0, #0
 800f34c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
	 USBPD_SNKRDO_TypeDef rdo;
	 /* Initialize RDO */
	 rdo.d32 = 0;
 800f34e:	2300      	movs	r3, #0
 800f350:	617b      	str	r3, [r7, #20]
	 /* Prepare the requested pdo */
	 rdo.FixedVariableRDO.ObjectPosition = 1;
 800f352:	2017      	movs	r0, #23
 800f354:	183b      	adds	r3, r7, r0
 800f356:	781a      	ldrb	r2, [r3, #0]
 800f358:	2170      	movs	r1, #112	; 0x70
 800f35a:	438a      	bics	r2, r1
 800f35c:	1c11      	adds	r1, r2, #0
 800f35e:	2210      	movs	r2, #16
 800f360:	430a      	orrs	r2, r1
 800f362:	701a      	strb	r2, [r3, #0]
	 rdo.FixedVariableRDO.OperatingCurrentIn10mAunits = 50;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	4a0f      	ldr	r2, [pc, #60]	; (800f3a4 <USBPD_DPM_SNK_EvaluateCapabilities+0x68>)
 800f368:	4013      	ands	r3, r2
 800f36a:	22c8      	movs	r2, #200	; 0xc8
 800f36c:	0212      	lsls	r2, r2, #8
 800f36e:	4313      	orrs	r3, r2
 800f370:	617b      	str	r3, [r7, #20]
	 rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = 50;
 800f372:	2314      	movs	r3, #20
 800f374:	18fb      	adds	r3, r7, r3
 800f376:	881a      	ldrh	r2, [r3, #0]
 800f378:	0a92      	lsrs	r2, r2, #10
 800f37a:	0292      	lsls	r2, r2, #10
 800f37c:	1c11      	adds	r1, r2, #0
 800f37e:	2232      	movs	r2, #50	; 0x32
 800f380:	430a      	orrs	r2, r1
 800f382:	801a      	strh	r2, [r3, #0]
	 rdo.FixedVariableRDO.CapabilityMismatch = 0;
 800f384:	183b      	adds	r3, r7, r0
 800f386:	781a      	ldrb	r2, [r3, #0]
 800f388:	2104      	movs	r1, #4
 800f38a:	438a      	bics	r2, r1
 800f38c:	701a      	strb	r2, [r3, #0]

	 *PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	601a      	str	r2, [r3, #0]
	 *PtrRequestData = rdo.d32;
 800f394:	697a      	ldr	r2, [r7, #20]
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	601a      	str	r2, [r3, #0]

/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 800f39a:	46c0      	nop			; (mov r8, r8)
 800f39c:	46bd      	mov	sp, r7
 800f39e:	b006      	add	sp, #24
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	46c0      	nop			; (mov r8, r8)
 800f3a4:	fff003ff 	.word	0xfff003ff

0800f3a8 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 800f3a8:	b590      	push	{r4, r7, lr}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	0004      	movs	r4, r0
 800f3b0:	0008      	movs	r0, r1
 800f3b2:	603a      	str	r2, [r7, #0]
 800f3b4:	0019      	movs	r1, r3
 800f3b6:	1dfb      	adds	r3, r7, #7
 800f3b8:	1c22      	adds	r2, r4, #0
 800f3ba:	701a      	strb	r2, [r3, #0]
 800f3bc:	1dbb      	adds	r3, r7, #6
 800f3be:	1c02      	adds	r2, r0, #0
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	1d3b      	adds	r3, r7, #4
 800f3c4:	1c0a      	adds	r2, r1, #0
 800f3c6:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 800f3c8:	46c0      	nop			; (mov r8, r8)
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	b003      	add	sp, #12
 800f3ce:	bd90      	pop	{r4, r7, pc}

0800f3d0 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	0002      	movs	r2, r0
 800f3d8:	1dfb      	adds	r3, r7, #7
 800f3da:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 800f3dc:	1dfb      	adds	r3, r7, #7
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	0018      	movs	r0, r3
 800f3e2:	f7f0 ff95 	bl	8000310 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 800f3e6:	46c0      	nop			; (mov r8, r8)
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	b002      	add	sp, #8
 800f3ec:	bd80      	pop	{r7, pc}
	...

0800f3f0 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	0002      	movs	r2, r0
 800f3f8:	1dfb      	adds	r3, r7, #7
 800f3fa:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 800f3fc:	230f      	movs	r3, #15
 800f3fe:	18fb      	adds	r3, r7, r3
 800f400:	220c      	movs	r2, #12
 800f402:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 800f404:	1dfb      	adds	r3, r7, #7
 800f406:	781a      	ldrb	r2, [r3, #0]
 800f408:	4b2c      	ldr	r3, [pc, #176]	; (800f4bc <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 800f40a:	2174      	movs	r1, #116	; 0x74
 800f40c:	434a      	muls	r2, r1
 800f40e:	5cd3      	ldrb	r3, [r2, r3]
 800f410:	07db      	lsls	r3, r3, #31
 800f412:	0fdb      	lsrs	r3, r3, #31
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d015      	beq.n	800f446 <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 800f41a:	1dfb      	adds	r3, r7, #7
 800f41c:	781a      	ldrb	r2, [r3, #0]
 800f41e:	4b27      	ldr	r3, [pc, #156]	; (800f4bc <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 800f420:	2174      	movs	r1, #116	; 0x74
 800f422:	434a      	muls	r2, r1
 800f424:	5cd3      	ldrb	r3, [r2, r3]
 800f426:	075b      	lsls	r3, r3, #29
 800f428:	0fdb      	lsrs	r3, r3, #31
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10f      	bne.n	800f450 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 800f430:	1dfb      	adds	r3, r7, #7
 800f432:	781a      	ldrb	r2, [r3, #0]
 800f434:	4b21      	ldr	r3, [pc, #132]	; (800f4bc <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 800f436:	2174      	movs	r1, #116	; 0x74
 800f438:	434a      	muls	r2, r1
 800f43a:	5cd3      	ldrb	r3, [r2, r3]
 800f43c:	071b      	lsls	r3, r3, #28
 800f43e:	0fdb      	lsrs	r3, r3, #31
 800f440:	b2db      	uxtb	r3, r3
 800f442:	2b00      	cmp	r3, #0
 800f444:	d104      	bne.n	800f450 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 800f446:	230f      	movs	r3, #15
 800f448:	18fb      	adds	r3, r7, r3
 800f44a:	2201      	movs	r2, #1
 800f44c:	701a      	strb	r2, [r3, #0]
 800f44e:	e02d      	b.n	800f4ac <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 800f450:	1dfb      	adds	r3, r7, #7
 800f452:	781a      	ldrb	r2, [r3, #0]
 800f454:	4b19      	ldr	r3, [pc, #100]	; (800f4bc <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 800f456:	2174      	movs	r1, #116	; 0x74
 800f458:	434a      	muls	r2, r1
 800f45a:	5cd3      	ldrb	r3, [r2, r3]
 800f45c:	075b      	lsls	r3, r3, #29
 800f45e:	0fdb      	lsrs	r3, r3, #31
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b01      	cmp	r3, #1
 800f464:	d109      	bne.n	800f47a <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 800f466:	1dfb      	adds	r3, r7, #7
 800f468:	781a      	ldrb	r2, [r3, #0]
 800f46a:	4b15      	ldr	r3, [pc, #84]	; (800f4c0 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 800f46c:	00d2      	lsls	r2, r2, #3
 800f46e:	5cd3      	ldrb	r3, [r2, r3]
 800f470:	071b      	lsls	r3, r3, #28
 800f472:	0fdb      	lsrs	r3, r3, #31
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d014      	beq.n	800f4a4 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 800f47a:	1dfb      	adds	r3, r7, #7
 800f47c:	781a      	ldrb	r2, [r3, #0]
 800f47e:	4b0f      	ldr	r3, [pc, #60]	; (800f4bc <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 800f480:	2174      	movs	r1, #116	; 0x74
 800f482:	434a      	muls	r2, r1
 800f484:	5cd3      	ldrb	r3, [r2, r3]
 800f486:	071b      	lsls	r3, r3, #28
 800f488:	0fdb      	lsrs	r3, r3, #31
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d10d      	bne.n	800f4ac <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 800f490:	1dfb      	adds	r3, r7, #7
 800f492:	781a      	ldrb	r2, [r3, #0]
 800f494:	4b0a      	ldr	r3, [pc, #40]	; (800f4c0 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 800f496:	00d2      	lsls	r2, r2, #3
 800f498:	5cd3      	ldrb	r3, [r2, r3]
 800f49a:	071b      	lsls	r3, r3, #28
 800f49c:	0fdb      	lsrs	r3, r3, #31
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d103      	bne.n	800f4ac <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 800f4a4:	230f      	movs	r3, #15
 800f4a6:	18fb      	adds	r3, r7, r3
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 800f4ac:	230f      	movs	r3, #15
 800f4ae:	18fb      	adds	r3, r7, r3
 800f4b0:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 800f4b2:	0018      	movs	r0, r3
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	b004      	add	sp, #16
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	46c0      	nop			; (mov r8, r8)
 800f4bc:	20000028 	.word	0x20000028
 800f4c0:	20001c04 	.word	0x20001c04

0800f4c4 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	0002      	movs	r2, r0
 800f4cc:	1dfb      	adds	r3, r7, #7
 800f4ce:	701a      	strb	r2, [r3, #0]
 800f4d0:	1dbb      	adds	r3, r7, #6
 800f4d2:	1c0a      	adds	r2, r1, #0
 800f4d4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 800f4d6:	1dbb      	adds	r3, r7, #6
 800f4d8:	781a      	ldrb	r2, [r3, #0]
 800f4da:	1dfb      	adds	r3, r7, #7
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	0011      	movs	r1, r2
 800f4e0:	0018      	movs	r0, r3
 800f4e2:	f000 fecf 	bl	8010284 <USBPD_PWR_IF_SupplyReady>
 800f4e6:	0003      	movs	r3, r0
 800f4e8:	425a      	negs	r2, r3
 800f4ea:	4153      	adcs	r3, r2
 800f4ec:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	b002      	add	sp, #8
 800f4f4:	bd80      	pop	{r7, pc}
	...

0800f4f8 <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 800f4f8:	b5b0      	push	{r4, r5, r7, lr}
 800f4fa:	b092      	sub	sp, #72	; 0x48
 800f4fc:	af02      	add	r7, sp, #8
 800f4fe:	0002      	movs	r2, r0
 800f500:	1dfb      	adds	r3, r7, #7
 800f502:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 800f504:	253f      	movs	r5, #63	; 0x3f
 800f506:	197c      	adds	r4, r7, r5
 800f508:	1dfb      	adds	r3, r7, #7
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	0018      	movs	r0, r3
 800f50e:	f7f0 ffee 	bl	80004ee <USBPD_PE_Request_HardReset>
 800f512:	0003      	movs	r3, r0
 800f514:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 800f516:	197b      	adds	r3, r7, r5
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d027      	beq.n	800f56e <USBPD_DPM_RequestHardReset+0x76>
 800f51e:	4a17      	ldr	r2, [pc, #92]	; (800f57c <USBPD_DPM_RequestHardReset+0x84>)
 800f520:	240c      	movs	r4, #12
 800f522:	193b      	adds	r3, r7, r4
 800f524:	2132      	movs	r1, #50	; 0x32
 800f526:	0018      	movs	r0, r3
 800f528:	f005 ff2c 	bl	8015384 <sniprintf>
 800f52c:	0002      	movs	r2, r0
 800f52e:	213e      	movs	r1, #62	; 0x3e
 800f530:	187b      	adds	r3, r7, r1
 800f532:	701a      	strb	r2, [r3, #0]
 800f534:	187b      	adds	r3, r7, r1
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	2b31      	cmp	r3, #49	; 0x31
 800f53a:	d80d      	bhi.n	800f558 <USBPD_DPM_RequestHardReset+0x60>
 800f53c:	193b      	adds	r3, r7, r4
 800f53e:	0018      	movs	r0, r3
 800f540:	f7f6 fdf6 	bl	8006130 <strlen>
 800f544:	193a      	adds	r2, r7, r4
 800f546:	1dfb      	adds	r3, r7, #7
 800f548:	7819      	ldrb	r1, [r3, #0]
 800f54a:	9000      	str	r0, [sp, #0]
 800f54c:	0013      	movs	r3, r2
 800f54e:	2200      	movs	r2, #0
 800f550:	2006      	movs	r0, #6
 800f552:	f7ff fa03 	bl	800e95c <USBPD_TRACE_Add>
 800f556:	e00a      	b.n	800f56e <USBPD_DPM_RequestHardReset+0x76>
 800f558:	230c      	movs	r3, #12
 800f55a:	18fa      	adds	r2, r7, r3
 800f55c:	1dfb      	adds	r3, r7, #7
 800f55e:	7819      	ldrb	r1, [r3, #0]
 800f560:	2332      	movs	r3, #50	; 0x32
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	0013      	movs	r3, r2
 800f566:	2200      	movs	r2, #0
 800f568:	2006      	movs	r0, #6
 800f56a:	f7ff f9f7 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800f56e:	233f      	movs	r3, #63	; 0x3f
 800f570:	18fb      	adds	r3, r7, r3
 800f572:	781b      	ldrb	r3, [r3, #0]
}
 800f574:	0018      	movs	r0, r3
 800f576:	46bd      	mov	sp, r7
 800f578:	b010      	add	sp, #64	; 0x40
 800f57a:	bdb0      	pop	{r4, r5, r7, pc}
 800f57c:	08015b90 	.word	0x08015b90

0800f580 <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 800f580:	b5b0      	push	{r4, r5, r7, lr}
 800f582:	b092      	sub	sp, #72	; 0x48
 800f584:	af02      	add	r7, sp, #8
 800f586:	0002      	movs	r2, r0
 800f588:	1dfb      	adds	r3, r7, #7
 800f58a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 800f58c:	253f      	movs	r5, #63	; 0x3f
 800f58e:	197c      	adds	r4, r7, r5
 800f590:	1dfb      	adds	r3, r7, #7
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	0018      	movs	r0, r3
 800f596:	f7f0 ffb6 	bl	8000506 <USBPD_PE_Request_CableReset>
 800f59a:	0003      	movs	r3, r0
 800f59c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 800f59e:	197b      	adds	r3, r7, r5
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d027      	beq.n	800f5f6 <USBPD_DPM_RequestCableReset+0x76>
 800f5a6:	4a17      	ldr	r2, [pc, #92]	; (800f604 <USBPD_DPM_RequestCableReset+0x84>)
 800f5a8:	240c      	movs	r4, #12
 800f5aa:	193b      	adds	r3, r7, r4
 800f5ac:	2132      	movs	r1, #50	; 0x32
 800f5ae:	0018      	movs	r0, r3
 800f5b0:	f005 fee8 	bl	8015384 <sniprintf>
 800f5b4:	0002      	movs	r2, r0
 800f5b6:	213e      	movs	r1, #62	; 0x3e
 800f5b8:	187b      	adds	r3, r7, r1
 800f5ba:	701a      	strb	r2, [r3, #0]
 800f5bc:	187b      	adds	r3, r7, r1
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	2b31      	cmp	r3, #49	; 0x31
 800f5c2:	d80d      	bhi.n	800f5e0 <USBPD_DPM_RequestCableReset+0x60>
 800f5c4:	193b      	adds	r3, r7, r4
 800f5c6:	0018      	movs	r0, r3
 800f5c8:	f7f6 fdb2 	bl	8006130 <strlen>
 800f5cc:	193a      	adds	r2, r7, r4
 800f5ce:	1dfb      	adds	r3, r7, #7
 800f5d0:	7819      	ldrb	r1, [r3, #0]
 800f5d2:	9000      	str	r0, [sp, #0]
 800f5d4:	0013      	movs	r3, r2
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	2006      	movs	r0, #6
 800f5da:	f7ff f9bf 	bl	800e95c <USBPD_TRACE_Add>
 800f5de:	e00a      	b.n	800f5f6 <USBPD_DPM_RequestCableReset+0x76>
 800f5e0:	230c      	movs	r3, #12
 800f5e2:	18fa      	adds	r2, r7, r3
 800f5e4:	1dfb      	adds	r3, r7, #7
 800f5e6:	7819      	ldrb	r1, [r3, #0]
 800f5e8:	2332      	movs	r3, #50	; 0x32
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	0013      	movs	r3, r2
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	2006      	movs	r0, #6
 800f5f2:	f7ff f9b3 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800f5f6:	233f      	movs	r3, #63	; 0x3f
 800f5f8:	18fb      	adds	r3, r7, r3
 800f5fa:	781b      	ldrb	r3, [r3, #0]
}
 800f5fc:	0018      	movs	r0, r3
 800f5fe:	46bd      	mov	sp, r7
 800f600:	b010      	add	sp, #64	; 0x40
 800f602:	bdb0      	pop	{r4, r5, r7, pc}
 800f604:	08015bb8 	.word	0x08015bb8

0800f608 <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 800f608:	b5b0      	push	{r4, r5, r7, lr}
 800f60a:	b092      	sub	sp, #72	; 0x48
 800f60c:	af02      	add	r7, sp, #8
 800f60e:	0002      	movs	r2, r0
 800f610:	1dfb      	adds	r3, r7, #7
 800f612:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 800f614:	253f      	movs	r5, #63	; 0x3f
 800f616:	197c      	adds	r4, r7, r5
 800f618:	1dfb      	adds	r3, r7, #7
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2200      	movs	r2, #0
 800f61e:	2102      	movs	r1, #2
 800f620:	0018      	movs	r0, r3
 800f622:	f7f0 ff87 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800f626:	0003      	movs	r3, r0
 800f628:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 800f62a:	197b      	adds	r3, r7, r5
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d027      	beq.n	800f682 <USBPD_DPM_RequestGotoMin+0x7a>
 800f632:	4a17      	ldr	r2, [pc, #92]	; (800f690 <USBPD_DPM_RequestGotoMin+0x88>)
 800f634:	240c      	movs	r4, #12
 800f636:	193b      	adds	r3, r7, r4
 800f638:	2132      	movs	r1, #50	; 0x32
 800f63a:	0018      	movs	r0, r3
 800f63c:	f005 fea2 	bl	8015384 <sniprintf>
 800f640:	0002      	movs	r2, r0
 800f642:	213e      	movs	r1, #62	; 0x3e
 800f644:	187b      	adds	r3, r7, r1
 800f646:	701a      	strb	r2, [r3, #0]
 800f648:	187b      	adds	r3, r7, r1
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	2b31      	cmp	r3, #49	; 0x31
 800f64e:	d80d      	bhi.n	800f66c <USBPD_DPM_RequestGotoMin+0x64>
 800f650:	193b      	adds	r3, r7, r4
 800f652:	0018      	movs	r0, r3
 800f654:	f7f6 fd6c 	bl	8006130 <strlen>
 800f658:	193a      	adds	r2, r7, r4
 800f65a:	1dfb      	adds	r3, r7, #7
 800f65c:	7819      	ldrb	r1, [r3, #0]
 800f65e:	9000      	str	r0, [sp, #0]
 800f660:	0013      	movs	r3, r2
 800f662:	2200      	movs	r2, #0
 800f664:	2006      	movs	r0, #6
 800f666:	f7ff f979 	bl	800e95c <USBPD_TRACE_Add>
 800f66a:	e00a      	b.n	800f682 <USBPD_DPM_RequestGotoMin+0x7a>
 800f66c:	230c      	movs	r3, #12
 800f66e:	18fa      	adds	r2, r7, r3
 800f670:	1dfb      	adds	r3, r7, #7
 800f672:	7819      	ldrb	r1, [r3, #0]
 800f674:	2332      	movs	r3, #50	; 0x32
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	0013      	movs	r3, r2
 800f67a:	2200      	movs	r2, #0
 800f67c:	2006      	movs	r0, #6
 800f67e:	f7ff f96d 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800f682:	233f      	movs	r3, #63	; 0x3f
 800f684:	18fb      	adds	r3, r7, r3
 800f686:	781b      	ldrb	r3, [r3, #0]
}
 800f688:	0018      	movs	r0, r3
 800f68a:	46bd      	mov	sp, r7
 800f68c:	b010      	add	sp, #64	; 0x40
 800f68e:	bdb0      	pop	{r4, r5, r7, pc}
 800f690:	08015be0 	.word	0x08015be0

0800f694 <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 800f694:	b5b0      	push	{r4, r5, r7, lr}
 800f696:	b092      	sub	sp, #72	; 0x48
 800f698:	af02      	add	r7, sp, #8
 800f69a:	0002      	movs	r2, r0
 800f69c:	1dfb      	adds	r3, r7, #7
 800f69e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 800f6a0:	253f      	movs	r5, #63	; 0x3f
 800f6a2:	197c      	adds	r4, r7, r5
 800f6a4:	1dfb      	adds	r3, r7, #7
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	2105      	movs	r1, #5
 800f6ac:	0018      	movs	r0, r3
 800f6ae:	f7f0 ff41 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800f6b2:	0003      	movs	r3, r0
 800f6b4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 800f6b6:	197b      	adds	r3, r7, r5
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d027      	beq.n	800f70e <USBPD_DPM_RequestPing+0x7a>
 800f6be:	4a17      	ldr	r2, [pc, #92]	; (800f71c <USBPD_DPM_RequestPing+0x88>)
 800f6c0:	240c      	movs	r4, #12
 800f6c2:	193b      	adds	r3, r7, r4
 800f6c4:	2132      	movs	r1, #50	; 0x32
 800f6c6:	0018      	movs	r0, r3
 800f6c8:	f005 fe5c 	bl	8015384 <sniprintf>
 800f6cc:	0002      	movs	r2, r0
 800f6ce:	213e      	movs	r1, #62	; 0x3e
 800f6d0:	187b      	adds	r3, r7, r1
 800f6d2:	701a      	strb	r2, [r3, #0]
 800f6d4:	187b      	adds	r3, r7, r1
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	2b31      	cmp	r3, #49	; 0x31
 800f6da:	d80d      	bhi.n	800f6f8 <USBPD_DPM_RequestPing+0x64>
 800f6dc:	193b      	adds	r3, r7, r4
 800f6de:	0018      	movs	r0, r3
 800f6e0:	f7f6 fd26 	bl	8006130 <strlen>
 800f6e4:	193a      	adds	r2, r7, r4
 800f6e6:	1dfb      	adds	r3, r7, #7
 800f6e8:	7819      	ldrb	r1, [r3, #0]
 800f6ea:	9000      	str	r0, [sp, #0]
 800f6ec:	0013      	movs	r3, r2
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	2006      	movs	r0, #6
 800f6f2:	f7ff f933 	bl	800e95c <USBPD_TRACE_Add>
 800f6f6:	e00a      	b.n	800f70e <USBPD_DPM_RequestPing+0x7a>
 800f6f8:	230c      	movs	r3, #12
 800f6fa:	18fa      	adds	r2, r7, r3
 800f6fc:	1dfb      	adds	r3, r7, #7
 800f6fe:	7819      	ldrb	r1, [r3, #0]
 800f700:	2332      	movs	r3, #50	; 0x32
 800f702:	9300      	str	r3, [sp, #0]
 800f704:	0013      	movs	r3, r2
 800f706:	2200      	movs	r2, #0
 800f708:	2006      	movs	r0, #6
 800f70a:	f7ff f927 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800f70e:	233f      	movs	r3, #63	; 0x3f
 800f710:	18fb      	adds	r3, r7, r3
 800f712:	781b      	ldrb	r3, [r3, #0]
}
 800f714:	0018      	movs	r0, r3
 800f716:	46bd      	mov	sp, r7
 800f718:	b010      	add	sp, #64	; 0x40
 800f71a:	bdb0      	pop	{r4, r5, r7, pc}
 800f71c:	08015c04 	.word	0x08015c04

0800f720 <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 800f720:	b590      	push	{r4, r7, lr}
 800f722:	b093      	sub	sp, #76	; 0x4c
 800f724:	af02      	add	r7, sp, #8
 800f726:	0004      	movs	r4, r0
 800f728:	0008      	movs	r0, r1
 800f72a:	0011      	movs	r1, r2
 800f72c:	1dfb      	adds	r3, r7, #7
 800f72e:	1c22      	adds	r2, r4, #0
 800f730:	701a      	strb	r2, [r3, #0]
 800f732:	1dbb      	adds	r3, r7, #6
 800f734:	1c02      	adds	r2, r0, #0
 800f736:	701a      	strb	r2, [r3, #0]
 800f738:	1d3b      	adds	r3, r7, #4
 800f73a:	1c0a      	adds	r2, r1, #0
 800f73c:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 800f73e:	233f      	movs	r3, #63	; 0x3f
 800f740:	18fb      	adds	r3, r7, r3
 800f742:	2202      	movs	r2, #2
 800f744:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_RequestMessageRequest */
  /* To be adapted to call the PE function */
  /*       _status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);*/
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_RequestMessageRequest");
 800f746:	4a2e      	ldr	r2, [pc, #184]	; (800f800 <USBPD_DPM_RequestMessageRequest+0xe0>)
 800f748:	2408      	movs	r4, #8
 800f74a:	193b      	adds	r3, r7, r4
 800f74c:	2132      	movs	r1, #50	; 0x32
 800f74e:	0018      	movs	r0, r3
 800f750:	f005 fe18 	bl	8015384 <sniprintf>
 800f754:	0002      	movs	r2, r0
 800f756:	213e      	movs	r1, #62	; 0x3e
 800f758:	187b      	adds	r3, r7, r1
 800f75a:	701a      	strb	r2, [r3, #0]
 800f75c:	187b      	adds	r3, r7, r1
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	2b31      	cmp	r3, #49	; 0x31
 800f762:	d80d      	bhi.n	800f780 <USBPD_DPM_RequestMessageRequest+0x60>
 800f764:	193b      	adds	r3, r7, r4
 800f766:	0018      	movs	r0, r3
 800f768:	f7f6 fce2 	bl	8006130 <strlen>
 800f76c:	193a      	adds	r2, r7, r4
 800f76e:	1dfb      	adds	r3, r7, #7
 800f770:	7819      	ldrb	r1, [r3, #0]
 800f772:	9000      	str	r0, [sp, #0]
 800f774:	0013      	movs	r3, r2
 800f776:	2200      	movs	r2, #0
 800f778:	2006      	movs	r0, #6
 800f77a:	f7ff f8ef 	bl	800e95c <USBPD_TRACE_Add>
 800f77e:	e00a      	b.n	800f796 <USBPD_DPM_RequestMessageRequest+0x76>
 800f780:	2308      	movs	r3, #8
 800f782:	18fa      	adds	r2, r7, r3
 800f784:	1dfb      	adds	r3, r7, #7
 800f786:	7819      	ldrb	r1, [r3, #0]
 800f788:	2332      	movs	r3, #50	; 0x32
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	0013      	movs	r3, r2
 800f78e:	2200      	movs	r2, #0
 800f790:	2006      	movs	r0, #6
 800f792:	f7ff f8e3 	bl	800e95c <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 800f796:	233f      	movs	r3, #63	; 0x3f
 800f798:	18fb      	adds	r3, r7, r3
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d027      	beq.n	800f7f0 <USBPD_DPM_RequestMessageRequest+0xd0>
 800f7a0:	4a18      	ldr	r2, [pc, #96]	; (800f804 <USBPD_DPM_RequestMessageRequest+0xe4>)
 800f7a2:	2408      	movs	r4, #8
 800f7a4:	193b      	adds	r3, r7, r4
 800f7a6:	2132      	movs	r1, #50	; 0x32
 800f7a8:	0018      	movs	r0, r3
 800f7aa:	f005 fdeb 	bl	8015384 <sniprintf>
 800f7ae:	0002      	movs	r2, r0
 800f7b0:	213d      	movs	r1, #61	; 0x3d
 800f7b2:	187b      	adds	r3, r7, r1
 800f7b4:	701a      	strb	r2, [r3, #0]
 800f7b6:	187b      	adds	r3, r7, r1
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	2b31      	cmp	r3, #49	; 0x31
 800f7bc:	d80d      	bhi.n	800f7da <USBPD_DPM_RequestMessageRequest+0xba>
 800f7be:	193b      	adds	r3, r7, r4
 800f7c0:	0018      	movs	r0, r3
 800f7c2:	f7f6 fcb5 	bl	8006130 <strlen>
 800f7c6:	193a      	adds	r2, r7, r4
 800f7c8:	1dfb      	adds	r3, r7, #7
 800f7ca:	7819      	ldrb	r1, [r3, #0]
 800f7cc:	9000      	str	r0, [sp, #0]
 800f7ce:	0013      	movs	r3, r2
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	2006      	movs	r0, #6
 800f7d4:	f7ff f8c2 	bl	800e95c <USBPD_TRACE_Add>
 800f7d8:	e00a      	b.n	800f7f0 <USBPD_DPM_RequestMessageRequest+0xd0>
 800f7da:	2308      	movs	r3, #8
 800f7dc:	18fa      	adds	r2, r7, r3
 800f7de:	1dfb      	adds	r3, r7, #7
 800f7e0:	7819      	ldrb	r1, [r3, #0]
 800f7e2:	2332      	movs	r3, #50	; 0x32
 800f7e4:	9300      	str	r3, [sp, #0]
 800f7e6:	0013      	movs	r3, r2
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	2006      	movs	r0, #6
 800f7ec:	f7ff f8b6 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800f7f0:	233f      	movs	r3, #63	; 0x3f
 800f7f2:	18fb      	adds	r3, r7, r3
 800f7f4:	781b      	ldrb	r3, [r3, #0]
}
 800f7f6:	0018      	movs	r0, r3
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	b011      	add	sp, #68	; 0x44
 800f7fc:	bd90      	pop	{r4, r7, pc}
 800f7fe:	46c0      	nop			; (mov r8, r8)
 800f800:	08015c24 	.word	0x08015c24
 800f804:	08015c54 	.word	0x08015c54

0800f808 <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 800f808:	b5b0      	push	{r4, r5, r7, lr}
 800f80a:	b092      	sub	sp, #72	; 0x48
 800f80c:	af02      	add	r7, sp, #8
 800f80e:	0002      	movs	r2, r0
 800f810:	1dfb      	adds	r3, r7, #7
 800f812:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 800f814:	253f      	movs	r5, #63	; 0x3f
 800f816:	197c      	adds	r4, r7, r5
 800f818:	1dfb      	adds	r3, r7, #7
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2200      	movs	r2, #0
 800f81e:	2107      	movs	r1, #7
 800f820:	0018      	movs	r0, r3
 800f822:	f7f0 fe87 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800f826:	0003      	movs	r3, r0
 800f828:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 800f82a:	197b      	adds	r3, r7, r5
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d027      	beq.n	800f882 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 800f832:	4a17      	ldr	r2, [pc, #92]	; (800f890 <USBPD_DPM_RequestGetSourceCapability+0x88>)
 800f834:	240c      	movs	r4, #12
 800f836:	193b      	adds	r3, r7, r4
 800f838:	2132      	movs	r1, #50	; 0x32
 800f83a:	0018      	movs	r0, r3
 800f83c:	f005 fda2 	bl	8015384 <sniprintf>
 800f840:	0002      	movs	r2, r0
 800f842:	213e      	movs	r1, #62	; 0x3e
 800f844:	187b      	adds	r3, r7, r1
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	187b      	adds	r3, r7, r1
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	2b31      	cmp	r3, #49	; 0x31
 800f84e:	d80d      	bhi.n	800f86c <USBPD_DPM_RequestGetSourceCapability+0x64>
 800f850:	193b      	adds	r3, r7, r4
 800f852:	0018      	movs	r0, r3
 800f854:	f7f6 fc6c 	bl	8006130 <strlen>
 800f858:	193a      	adds	r2, r7, r4
 800f85a:	1dfb      	adds	r3, r7, #7
 800f85c:	7819      	ldrb	r1, [r3, #0]
 800f85e:	9000      	str	r0, [sp, #0]
 800f860:	0013      	movs	r3, r2
 800f862:	2200      	movs	r2, #0
 800f864:	2006      	movs	r0, #6
 800f866:	f7ff f879 	bl	800e95c <USBPD_TRACE_Add>
 800f86a:	e00a      	b.n	800f882 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 800f86c:	230c      	movs	r3, #12
 800f86e:	18fa      	adds	r2, r7, r3
 800f870:	1dfb      	adds	r3, r7, #7
 800f872:	7819      	ldrb	r1, [r3, #0]
 800f874:	2332      	movs	r3, #50	; 0x32
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	0013      	movs	r3, r2
 800f87a:	2200      	movs	r2, #0
 800f87c:	2006      	movs	r0, #6
 800f87e:	f7ff f86d 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800f882:	233f      	movs	r3, #63	; 0x3f
 800f884:	18fb      	adds	r3, r7, r3
 800f886:	781b      	ldrb	r3, [r3, #0]
}
 800f888:	0018      	movs	r0, r3
 800f88a:	46bd      	mov	sp, r7
 800f88c:	b010      	add	sp, #64	; 0x40
 800f88e:	bdb0      	pop	{r4, r5, r7, pc}
 800f890:	08015c78 	.word	0x08015c78

0800f894 <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 800f894:	b5b0      	push	{r4, r5, r7, lr}
 800f896:	b092      	sub	sp, #72	; 0x48
 800f898:	af02      	add	r7, sp, #8
 800f89a:	0002      	movs	r2, r0
 800f89c:	1dfb      	adds	r3, r7, #7
 800f89e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 800f8a0:	253f      	movs	r5, #63	; 0x3f
 800f8a2:	197c      	adds	r4, r7, r5
 800f8a4:	1dfb      	adds	r3, r7, #7
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	2108      	movs	r1, #8
 800f8ac:	0018      	movs	r0, r3
 800f8ae:	f7f0 fe41 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800f8b2:	0003      	movs	r3, r0
 800f8b4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 800f8b6:	197b      	adds	r3, r7, r5
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d027      	beq.n	800f90e <USBPD_DPM_RequestGetSinkCapability+0x7a>
 800f8be:	4a17      	ldr	r2, [pc, #92]	; (800f91c <USBPD_DPM_RequestGetSinkCapability+0x88>)
 800f8c0:	240c      	movs	r4, #12
 800f8c2:	193b      	adds	r3, r7, r4
 800f8c4:	2132      	movs	r1, #50	; 0x32
 800f8c6:	0018      	movs	r0, r3
 800f8c8:	f005 fd5c 	bl	8015384 <sniprintf>
 800f8cc:	0002      	movs	r2, r0
 800f8ce:	213e      	movs	r1, #62	; 0x3e
 800f8d0:	187b      	adds	r3, r7, r1
 800f8d2:	701a      	strb	r2, [r3, #0]
 800f8d4:	187b      	adds	r3, r7, r1
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	2b31      	cmp	r3, #49	; 0x31
 800f8da:	d80d      	bhi.n	800f8f8 <USBPD_DPM_RequestGetSinkCapability+0x64>
 800f8dc:	193b      	adds	r3, r7, r4
 800f8de:	0018      	movs	r0, r3
 800f8e0:	f7f6 fc26 	bl	8006130 <strlen>
 800f8e4:	193a      	adds	r2, r7, r4
 800f8e6:	1dfb      	adds	r3, r7, #7
 800f8e8:	7819      	ldrb	r1, [r3, #0]
 800f8ea:	9000      	str	r0, [sp, #0]
 800f8ec:	0013      	movs	r3, r2
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	2006      	movs	r0, #6
 800f8f2:	f7ff f833 	bl	800e95c <USBPD_TRACE_Add>
 800f8f6:	e00a      	b.n	800f90e <USBPD_DPM_RequestGetSinkCapability+0x7a>
 800f8f8:	230c      	movs	r3, #12
 800f8fa:	18fa      	adds	r2, r7, r3
 800f8fc:	1dfb      	adds	r3, r7, #7
 800f8fe:	7819      	ldrb	r1, [r3, #0]
 800f900:	2332      	movs	r3, #50	; 0x32
 800f902:	9300      	str	r3, [sp, #0]
 800f904:	0013      	movs	r3, r2
 800f906:	2200      	movs	r2, #0
 800f908:	2006      	movs	r0, #6
 800f90a:	f7ff f827 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800f90e:	233f      	movs	r3, #63	; 0x3f
 800f910:	18fb      	adds	r3, r7, r3
 800f912:	781b      	ldrb	r3, [r3, #0]
}
 800f914:	0018      	movs	r0, r3
 800f916:	46bd      	mov	sp, r7
 800f918:	b010      	add	sp, #64	; 0x40
 800f91a:	bdb0      	pop	{r4, r5, r7, pc}
 800f91c:	08015ca0 	.word	0x08015ca0

0800f920 <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 800f920:	b5b0      	push	{r4, r5, r7, lr}
 800f922:	b092      	sub	sp, #72	; 0x48
 800f924:	af02      	add	r7, sp, #8
 800f926:	0002      	movs	r2, r0
 800f928:	1dfb      	adds	r3, r7, #7
 800f92a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 800f92c:	253f      	movs	r5, #63	; 0x3f
 800f92e:	197c      	adds	r4, r7, r5
 800f930:	1dfb      	adds	r3, r7, #7
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	2200      	movs	r2, #0
 800f936:	2109      	movs	r1, #9
 800f938:	0018      	movs	r0, r3
 800f93a:	f7f0 fdfb 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800f93e:	0003      	movs	r3, r0
 800f940:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 800f942:	197b      	adds	r3, r7, r5
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d027      	beq.n	800f99a <USBPD_DPM_RequestDataRoleSwap+0x7a>
 800f94a:	4a17      	ldr	r2, [pc, #92]	; (800f9a8 <USBPD_DPM_RequestDataRoleSwap+0x88>)
 800f94c:	240c      	movs	r4, #12
 800f94e:	193b      	adds	r3, r7, r4
 800f950:	2132      	movs	r1, #50	; 0x32
 800f952:	0018      	movs	r0, r3
 800f954:	f005 fd16 	bl	8015384 <sniprintf>
 800f958:	0002      	movs	r2, r0
 800f95a:	213e      	movs	r1, #62	; 0x3e
 800f95c:	187b      	adds	r3, r7, r1
 800f95e:	701a      	strb	r2, [r3, #0]
 800f960:	187b      	adds	r3, r7, r1
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b31      	cmp	r3, #49	; 0x31
 800f966:	d80d      	bhi.n	800f984 <USBPD_DPM_RequestDataRoleSwap+0x64>
 800f968:	193b      	adds	r3, r7, r4
 800f96a:	0018      	movs	r0, r3
 800f96c:	f7f6 fbe0 	bl	8006130 <strlen>
 800f970:	193a      	adds	r2, r7, r4
 800f972:	1dfb      	adds	r3, r7, #7
 800f974:	7819      	ldrb	r1, [r3, #0]
 800f976:	9000      	str	r0, [sp, #0]
 800f978:	0013      	movs	r3, r2
 800f97a:	2200      	movs	r2, #0
 800f97c:	2006      	movs	r0, #6
 800f97e:	f7fe ffed 	bl	800e95c <USBPD_TRACE_Add>
 800f982:	e00a      	b.n	800f99a <USBPD_DPM_RequestDataRoleSwap+0x7a>
 800f984:	230c      	movs	r3, #12
 800f986:	18fa      	adds	r2, r7, r3
 800f988:	1dfb      	adds	r3, r7, #7
 800f98a:	7819      	ldrb	r1, [r3, #0]
 800f98c:	2332      	movs	r3, #50	; 0x32
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	0013      	movs	r3, r2
 800f992:	2200      	movs	r2, #0
 800f994:	2006      	movs	r0, #6
 800f996:	f7fe ffe1 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800f99a:	233f      	movs	r3, #63	; 0x3f
 800f99c:	18fb      	adds	r3, r7, r3
 800f99e:	781b      	ldrb	r3, [r3, #0]
}
 800f9a0:	0018      	movs	r0, r3
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	b010      	add	sp, #64	; 0x40
 800f9a6:	bdb0      	pop	{r4, r5, r7, pc}
 800f9a8:	08015cc8 	.word	0x08015cc8

0800f9ac <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 800f9ac:	b590      	push	{r4, r7, lr}
 800f9ae:	b093      	sub	sp, #76	; 0x4c
 800f9b0:	af02      	add	r7, sp, #8
 800f9b2:	0002      	movs	r2, r0
 800f9b4:	1dfb      	adds	r3, r7, #7
 800f9b6:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 800f9b8:	4a16      	ldr	r2, [pc, #88]	; (800fa14 <USBPD_DPM_RequestPowerRoleSwap+0x68>)
 800f9ba:	240c      	movs	r4, #12
 800f9bc:	193b      	adds	r3, r7, r4
 800f9be:	2132      	movs	r1, #50	; 0x32
 800f9c0:	0018      	movs	r0, r3
 800f9c2:	f005 fcdf 	bl	8015384 <sniprintf>
 800f9c6:	0002      	movs	r2, r0
 800f9c8:	213f      	movs	r1, #63	; 0x3f
 800f9ca:	187b      	adds	r3, r7, r1
 800f9cc:	701a      	strb	r2, [r3, #0]
 800f9ce:	187b      	adds	r3, r7, r1
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	2b31      	cmp	r3, #49	; 0x31
 800f9d4:	d80d      	bhi.n	800f9f2 <USBPD_DPM_RequestPowerRoleSwap+0x46>
 800f9d6:	193b      	adds	r3, r7, r4
 800f9d8:	0018      	movs	r0, r3
 800f9da:	f7f6 fba9 	bl	8006130 <strlen>
 800f9de:	193a      	adds	r2, r7, r4
 800f9e0:	1dfb      	adds	r3, r7, #7
 800f9e2:	7819      	ldrb	r1, [r3, #0]
 800f9e4:	9000      	str	r0, [sp, #0]
 800f9e6:	0013      	movs	r3, r2
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	2006      	movs	r0, #6
 800f9ec:	f7fe ffb6 	bl	800e95c <USBPD_TRACE_Add>
 800f9f0:	e00a      	b.n	800fa08 <USBPD_DPM_RequestPowerRoleSwap+0x5c>
 800f9f2:	230c      	movs	r3, #12
 800f9f4:	18fa      	adds	r2, r7, r3
 800f9f6:	1dfb      	adds	r3, r7, #7
 800f9f8:	7819      	ldrb	r1, [r3, #0]
 800f9fa:	2332      	movs	r3, #50	; 0x32
 800f9fc:	9300      	str	r3, [sp, #0]
 800f9fe:	0013      	movs	r3, r2
 800fa00:	2200      	movs	r2, #0
 800fa02:	2006      	movs	r0, #6
 800fa04:	f7fe ffaa 	bl	800e95c <USBPD_TRACE_Add>
  return USBPD_ERROR;
 800fa08:	2302      	movs	r3, #2
}
 800fa0a:	0018      	movs	r0, r3
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	b011      	add	sp, #68	; 0x44
 800fa10:	bd90      	pop	{r4, r7, pc}
 800fa12:	46c0      	nop			; (mov r8, r8)
 800fa14:	08015ce8 	.word	0x08015ce8

0800fa18 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 800fa18:	b5b0      	push	{r4, r5, r7, lr}
 800fa1a:	b092      	sub	sp, #72	; 0x48
 800fa1c:	af02      	add	r7, sp, #8
 800fa1e:	0002      	movs	r2, r0
 800fa20:	1dfb      	adds	r3, r7, #7
 800fa22:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 800fa24:	253f      	movs	r5, #63	; 0x3f
 800fa26:	197c      	adds	r4, r7, r5
 800fa28:	1dfb      	adds	r3, r7, #7
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	210b      	movs	r1, #11
 800fa30:	0018      	movs	r0, r3
 800fa32:	f7f0 fd7f 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800fa36:	0003      	movs	r3, r0
 800fa38:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 800fa3a:	197b      	adds	r3, r7, r5
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d027      	beq.n	800fa92 <USBPD_DPM_RequestVconnSwap+0x7a>
 800fa42:	4a17      	ldr	r2, [pc, #92]	; (800faa0 <USBPD_DPM_RequestVconnSwap+0x88>)
 800fa44:	240c      	movs	r4, #12
 800fa46:	193b      	adds	r3, r7, r4
 800fa48:	2132      	movs	r1, #50	; 0x32
 800fa4a:	0018      	movs	r0, r3
 800fa4c:	f005 fc9a 	bl	8015384 <sniprintf>
 800fa50:	0002      	movs	r2, r0
 800fa52:	213e      	movs	r1, #62	; 0x3e
 800fa54:	187b      	adds	r3, r7, r1
 800fa56:	701a      	strb	r2, [r3, #0]
 800fa58:	187b      	adds	r3, r7, r1
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	2b31      	cmp	r3, #49	; 0x31
 800fa5e:	d80d      	bhi.n	800fa7c <USBPD_DPM_RequestVconnSwap+0x64>
 800fa60:	193b      	adds	r3, r7, r4
 800fa62:	0018      	movs	r0, r3
 800fa64:	f7f6 fb64 	bl	8006130 <strlen>
 800fa68:	193a      	adds	r2, r7, r4
 800fa6a:	1dfb      	adds	r3, r7, #7
 800fa6c:	7819      	ldrb	r1, [r3, #0]
 800fa6e:	9000      	str	r0, [sp, #0]
 800fa70:	0013      	movs	r3, r2
 800fa72:	2200      	movs	r2, #0
 800fa74:	2006      	movs	r0, #6
 800fa76:	f7fe ff71 	bl	800e95c <USBPD_TRACE_Add>
 800fa7a:	e00a      	b.n	800fa92 <USBPD_DPM_RequestVconnSwap+0x7a>
 800fa7c:	230c      	movs	r3, #12
 800fa7e:	18fa      	adds	r2, r7, r3
 800fa80:	1dfb      	adds	r3, r7, #7
 800fa82:	7819      	ldrb	r1, [r3, #0]
 800fa84:	2332      	movs	r3, #50	; 0x32
 800fa86:	9300      	str	r3, [sp, #0]
 800fa88:	0013      	movs	r3, r2
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	2006      	movs	r0, #6
 800fa8e:	f7fe ff65 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800fa92:	233f      	movs	r3, #63	; 0x3f
 800fa94:	18fb      	adds	r3, r7, r3
 800fa96:	781b      	ldrb	r3, [r3, #0]
}
 800fa98:	0018      	movs	r0, r3
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	b010      	add	sp, #64	; 0x40
 800fa9e:	bdb0      	pop	{r4, r5, r7, pc}
 800faa0:	08015d08 	.word	0x08015d08

0800faa4 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 800faa4:	b5b0      	push	{r4, r5, r7, lr}
 800faa6:	b092      	sub	sp, #72	; 0x48
 800faa8:	af02      	add	r7, sp, #8
 800faaa:	0002      	movs	r2, r0
 800faac:	1dfb      	adds	r3, r7, #7
 800faae:	701a      	strb	r2, [r3, #0]
 800fab0:	1dbb      	adds	r3, r7, #6
 800fab2:	1c0a      	adds	r2, r1, #0
 800fab4:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 800fab6:	253f      	movs	r5, #63	; 0x3f
 800fab8:	197c      	adds	r4, r7, r5
 800faba:	1dbb      	adds	r3, r7, #6
 800fabc:	781a      	ldrb	r2, [r3, #0]
 800fabe:	1dfb      	adds	r3, r7, #7
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	210d      	movs	r1, #13
 800fac4:	0018      	movs	r0, r3
 800fac6:	f7f0 fd35 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800faca:	0003      	movs	r3, r0
 800facc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 800face:	197b      	adds	r3, r7, r5
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d027      	beq.n	800fb26 <USBPD_DPM_RequestSoftReset+0x82>
 800fad6:	4a17      	ldr	r2, [pc, #92]	; (800fb34 <USBPD_DPM_RequestSoftReset+0x90>)
 800fad8:	240c      	movs	r4, #12
 800fada:	193b      	adds	r3, r7, r4
 800fadc:	2132      	movs	r1, #50	; 0x32
 800fade:	0018      	movs	r0, r3
 800fae0:	f005 fc50 	bl	8015384 <sniprintf>
 800fae4:	0002      	movs	r2, r0
 800fae6:	213e      	movs	r1, #62	; 0x3e
 800fae8:	187b      	adds	r3, r7, r1
 800faea:	701a      	strb	r2, [r3, #0]
 800faec:	187b      	adds	r3, r7, r1
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b31      	cmp	r3, #49	; 0x31
 800faf2:	d80d      	bhi.n	800fb10 <USBPD_DPM_RequestSoftReset+0x6c>
 800faf4:	193b      	adds	r3, r7, r4
 800faf6:	0018      	movs	r0, r3
 800faf8:	f7f6 fb1a 	bl	8006130 <strlen>
 800fafc:	193a      	adds	r2, r7, r4
 800fafe:	1dfb      	adds	r3, r7, #7
 800fb00:	7819      	ldrb	r1, [r3, #0]
 800fb02:	9000      	str	r0, [sp, #0]
 800fb04:	0013      	movs	r3, r2
 800fb06:	2200      	movs	r2, #0
 800fb08:	2006      	movs	r0, #6
 800fb0a:	f7fe ff27 	bl	800e95c <USBPD_TRACE_Add>
 800fb0e:	e00a      	b.n	800fb26 <USBPD_DPM_RequestSoftReset+0x82>
 800fb10:	230c      	movs	r3, #12
 800fb12:	18fa      	adds	r2, r7, r3
 800fb14:	1dfb      	adds	r3, r7, #7
 800fb16:	7819      	ldrb	r1, [r3, #0]
 800fb18:	2332      	movs	r3, #50	; 0x32
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	0013      	movs	r3, r2
 800fb1e:	2200      	movs	r2, #0
 800fb20:	2006      	movs	r0, #6
 800fb22:	f7fe ff1b 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800fb26:	233f      	movs	r3, #63	; 0x3f
 800fb28:	18fb      	adds	r3, r7, r3
 800fb2a:	781b      	ldrb	r3, [r3, #0]
}
 800fb2c:	0018      	movs	r0, r3
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	b010      	add	sp, #64	; 0x40
 800fb32:	bdb0      	pop	{r4, r5, r7, pc}
 800fb34:	08015d28 	.word	0x08015d28

0800fb38 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 800fb38:	b5b0      	push	{r4, r5, r7, lr}
 800fb3a:	b092      	sub	sp, #72	; 0x48
 800fb3c:	af02      	add	r7, sp, #8
 800fb3e:	0002      	movs	r2, r0
 800fb40:	1dfb      	adds	r3, r7, #7
 800fb42:	701a      	strb	r2, [r3, #0]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 800fb44:	253f      	movs	r5, #63	; 0x3f
 800fb46:	197c      	adds	r4, r7, r5
 800fb48:	1dfb      	adds	r3, r7, #7
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	2101      	movs	r1, #1
 800fb50:	0018      	movs	r0, r3
 800fb52:	f7f0 fd8f 	bl	8000674 <USBPD_PE_Request_DataMessage>
 800fb56:	0003      	movs	r3, r0
 800fb58:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 800fb5a:	197b      	adds	r3, r7, r5
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d027      	beq.n	800fbb2 <USBPD_DPM_RequestSourceCapability+0x7a>
 800fb62:	4a17      	ldr	r2, [pc, #92]	; (800fbc0 <USBPD_DPM_RequestSourceCapability+0x88>)
 800fb64:	240c      	movs	r4, #12
 800fb66:	193b      	adds	r3, r7, r4
 800fb68:	2132      	movs	r1, #50	; 0x32
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	f005 fc0a 	bl	8015384 <sniprintf>
 800fb70:	0002      	movs	r2, r0
 800fb72:	213e      	movs	r1, #62	; 0x3e
 800fb74:	187b      	adds	r3, r7, r1
 800fb76:	701a      	strb	r2, [r3, #0]
 800fb78:	187b      	adds	r3, r7, r1
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	2b31      	cmp	r3, #49	; 0x31
 800fb7e:	d80d      	bhi.n	800fb9c <USBPD_DPM_RequestSourceCapability+0x64>
 800fb80:	193b      	adds	r3, r7, r4
 800fb82:	0018      	movs	r0, r3
 800fb84:	f7f6 fad4 	bl	8006130 <strlen>
 800fb88:	193a      	adds	r2, r7, r4
 800fb8a:	1dfb      	adds	r3, r7, #7
 800fb8c:	7819      	ldrb	r1, [r3, #0]
 800fb8e:	9000      	str	r0, [sp, #0]
 800fb90:	0013      	movs	r3, r2
 800fb92:	2200      	movs	r2, #0
 800fb94:	2006      	movs	r0, #6
 800fb96:	f7fe fee1 	bl	800e95c <USBPD_TRACE_Add>
 800fb9a:	e00a      	b.n	800fbb2 <USBPD_DPM_RequestSourceCapability+0x7a>
 800fb9c:	230c      	movs	r3, #12
 800fb9e:	18fa      	adds	r2, r7, r3
 800fba0:	1dfb      	adds	r3, r7, #7
 800fba2:	7819      	ldrb	r1, [r3, #0]
 800fba4:	2332      	movs	r3, #50	; 0x32
 800fba6:	9300      	str	r3, [sp, #0]
 800fba8:	0013      	movs	r3, r2
 800fbaa:	2200      	movs	r2, #0
 800fbac:	2006      	movs	r0, #6
 800fbae:	f7fe fed5 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800fbb2:	233f      	movs	r3, #63	; 0x3f
 800fbb4:	18fb      	adds	r3, r7, r3
 800fbb6:	781b      	ldrb	r3, [r3, #0]
}
 800fbb8:	0018      	movs	r0, r3
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	b010      	add	sp, #64	; 0x40
 800fbbe:	bdb0      	pop	{r4, r5, r7, pc}
 800fbc0:	08015d50 	.word	0x08015d50

0800fbc4 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 800fbc4:	b5b0      	push	{r4, r5, r7, lr}
 800fbc6:	b092      	sub	sp, #72	; 0x48
 800fbc8:	af02      	add	r7, sp, #8
 800fbca:	0002      	movs	r2, r0
 800fbcc:	6039      	str	r1, [r7, #0]
 800fbce:	1dfb      	adds	r3, r7, #7
 800fbd0:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 800fbd2:	253f      	movs	r5, #63	; 0x3f
 800fbd4:	197c      	adds	r4, r7, r5
 800fbd6:	003a      	movs	r2, r7
 800fbd8:	1dfb      	adds	r3, r7, #7
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	2106      	movs	r1, #6
 800fbde:	0018      	movs	r0, r3
 800fbe0:	f7f0 fd48 	bl	8000674 <USBPD_PE_Request_DataMessage>
 800fbe4:	0003      	movs	r3, r0
 800fbe6:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 800fbe8:	197b      	adds	r3, r7, r5
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d027      	beq.n	800fc40 <USBPD_DPM_RequestAlert+0x7c>
 800fbf0:	4a17      	ldr	r2, [pc, #92]	; (800fc50 <USBPD_DPM_RequestAlert+0x8c>)
 800fbf2:	240c      	movs	r4, #12
 800fbf4:	193b      	adds	r3, r7, r4
 800fbf6:	2132      	movs	r1, #50	; 0x32
 800fbf8:	0018      	movs	r0, r3
 800fbfa:	f005 fbc3 	bl	8015384 <sniprintf>
 800fbfe:	0002      	movs	r2, r0
 800fc00:	213e      	movs	r1, #62	; 0x3e
 800fc02:	187b      	adds	r3, r7, r1
 800fc04:	701a      	strb	r2, [r3, #0]
 800fc06:	187b      	adds	r3, r7, r1
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	2b31      	cmp	r3, #49	; 0x31
 800fc0c:	d80d      	bhi.n	800fc2a <USBPD_DPM_RequestAlert+0x66>
 800fc0e:	193b      	adds	r3, r7, r4
 800fc10:	0018      	movs	r0, r3
 800fc12:	f7f6 fa8d 	bl	8006130 <strlen>
 800fc16:	193a      	adds	r2, r7, r4
 800fc18:	1dfb      	adds	r3, r7, #7
 800fc1a:	7819      	ldrb	r1, [r3, #0]
 800fc1c:	9000      	str	r0, [sp, #0]
 800fc1e:	0013      	movs	r3, r2
 800fc20:	2200      	movs	r2, #0
 800fc22:	2006      	movs	r0, #6
 800fc24:	f7fe fe9a 	bl	800e95c <USBPD_TRACE_Add>
 800fc28:	e00a      	b.n	800fc40 <USBPD_DPM_RequestAlert+0x7c>
 800fc2a:	230c      	movs	r3, #12
 800fc2c:	18fa      	adds	r2, r7, r3
 800fc2e:	1dfb      	adds	r3, r7, #7
 800fc30:	7819      	ldrb	r1, [r3, #0]
 800fc32:	2332      	movs	r3, #50	; 0x32
 800fc34:	9300      	str	r3, [sp, #0]
 800fc36:	0013      	movs	r3, r2
 800fc38:	2200      	movs	r2, #0
 800fc3a:	2006      	movs	r0, #6
 800fc3c:	f7fe fe8e 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800fc40:	233f      	movs	r3, #63	; 0x3f
 800fc42:	18fb      	adds	r3, r7, r3
 800fc44:	781b      	ldrb	r3, [r3, #0]
}
 800fc46:	0018      	movs	r0, r3
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	b010      	add	sp, #64	; 0x40
 800fc4c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc4e:	46c0      	nop			; (mov r8, r8)
 800fc50:	08015ee0 	.word	0x08015ee0

0800fc54 <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 800fc54:	b5b0      	push	{r4, r5, r7, lr}
 800fc56:	b092      	sub	sp, #72	; 0x48
 800fc58:	af02      	add	r7, sp, #8
 800fc5a:	0002      	movs	r2, r0
 800fc5c:	1dfb      	adds	r3, r7, #7
 800fc5e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 800fc60:	253f      	movs	r5, #63	; 0x3f
 800fc62:	197c      	adds	r4, r7, r5
 800fc64:	1dfb      	adds	r3, r7, #7
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	2111      	movs	r1, #17
 800fc6c:	0018      	movs	r0, r3
 800fc6e:	f7f0 fc61 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800fc72:	0003      	movs	r3, r0
 800fc74:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 800fc76:	197b      	adds	r3, r7, r5
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d027      	beq.n	800fcce <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 800fc7e:	4a17      	ldr	r2, [pc, #92]	; (800fcdc <USBPD_DPM_RequestGetSourceCapabilityExt+0x88>)
 800fc80:	240c      	movs	r4, #12
 800fc82:	193b      	adds	r3, r7, r4
 800fc84:	2132      	movs	r1, #50	; 0x32
 800fc86:	0018      	movs	r0, r3
 800fc88:	f005 fb7c 	bl	8015384 <sniprintf>
 800fc8c:	0002      	movs	r2, r0
 800fc8e:	213e      	movs	r1, #62	; 0x3e
 800fc90:	187b      	adds	r3, r7, r1
 800fc92:	701a      	strb	r2, [r3, #0]
 800fc94:	187b      	adds	r3, r7, r1
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2b31      	cmp	r3, #49	; 0x31
 800fc9a:	d80d      	bhi.n	800fcb8 <USBPD_DPM_RequestGetSourceCapabilityExt+0x64>
 800fc9c:	193b      	adds	r3, r7, r4
 800fc9e:	0018      	movs	r0, r3
 800fca0:	f7f6 fa46 	bl	8006130 <strlen>
 800fca4:	193a      	adds	r2, r7, r4
 800fca6:	1dfb      	adds	r3, r7, #7
 800fca8:	7819      	ldrb	r1, [r3, #0]
 800fcaa:	9000      	str	r0, [sp, #0]
 800fcac:	0013      	movs	r3, r2
 800fcae:	2200      	movs	r2, #0
 800fcb0:	2006      	movs	r0, #6
 800fcb2:	f7fe fe53 	bl	800e95c <USBPD_TRACE_Add>
 800fcb6:	e00a      	b.n	800fcce <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 800fcb8:	230c      	movs	r3, #12
 800fcba:	18fa      	adds	r2, r7, r3
 800fcbc:	1dfb      	adds	r3, r7, #7
 800fcbe:	7819      	ldrb	r1, [r3, #0]
 800fcc0:	2332      	movs	r3, #50	; 0x32
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	0013      	movs	r3, r2
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	2006      	movs	r0, #6
 800fcca:	f7fe fe47 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800fcce:	233f      	movs	r3, #63	; 0x3f
 800fcd0:	18fb      	adds	r3, r7, r3
 800fcd2:	781b      	ldrb	r3, [r3, #0]
}
 800fcd4:	0018      	movs	r0, r3
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	b010      	add	sp, #64	; 0x40
 800fcda:	bdb0      	pop	{r4, r5, r7, pc}
 800fcdc:	08015f00 	.word	0x08015f00

0800fce0 <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 800fce0:	b5b0      	push	{r4, r5, r7, lr}
 800fce2:	b092      	sub	sp, #72	; 0x48
 800fce4:	af02      	add	r7, sp, #8
 800fce6:	0002      	movs	r2, r0
 800fce8:	1dfb      	adds	r3, r7, #7
 800fcea:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAPEXT, USBPD_SOPTYPE_SOP);
 800fcec:	253f      	movs	r5, #63	; 0x3f
 800fcee:	197c      	adds	r4, r7, r5
 800fcf0:	1dfb      	adds	r3, r7, #7
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	2116      	movs	r1, #22
 800fcf8:	0018      	movs	r0, r3
 800fcfa:	f7f0 fc1b 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800fcfe:	0003      	movs	r3, r0
 800fd00:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA_EXT not accepted by the stack");
 800fd02:	197b      	adds	r3, r7, r5
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d027      	beq.n	800fd5a <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 800fd0a:	4a17      	ldr	r2, [pc, #92]	; (800fd68 <USBPD_DPM_RequestGetSinkCapabilityExt+0x88>)
 800fd0c:	240c      	movs	r4, #12
 800fd0e:	193b      	adds	r3, r7, r4
 800fd10:	2132      	movs	r1, #50	; 0x32
 800fd12:	0018      	movs	r0, r3
 800fd14:	f005 fb36 	bl	8015384 <sniprintf>
 800fd18:	0002      	movs	r2, r0
 800fd1a:	213e      	movs	r1, #62	; 0x3e
 800fd1c:	187b      	adds	r3, r7, r1
 800fd1e:	701a      	strb	r2, [r3, #0]
 800fd20:	187b      	adds	r3, r7, r1
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	2b31      	cmp	r3, #49	; 0x31
 800fd26:	d80d      	bhi.n	800fd44 <USBPD_DPM_RequestGetSinkCapabilityExt+0x64>
 800fd28:	193b      	adds	r3, r7, r4
 800fd2a:	0018      	movs	r0, r3
 800fd2c:	f7f6 fa00 	bl	8006130 <strlen>
 800fd30:	193a      	adds	r2, r7, r4
 800fd32:	1dfb      	adds	r3, r7, #7
 800fd34:	7819      	ldrb	r1, [r3, #0]
 800fd36:	9000      	str	r0, [sp, #0]
 800fd38:	0013      	movs	r3, r2
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	2006      	movs	r0, #6
 800fd3e:	f7fe fe0d 	bl	800e95c <USBPD_TRACE_Add>
 800fd42:	e00a      	b.n	800fd5a <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 800fd44:	230c      	movs	r3, #12
 800fd46:	18fa      	adds	r2, r7, r3
 800fd48:	1dfb      	adds	r3, r7, #7
 800fd4a:	7819      	ldrb	r1, [r3, #0]
 800fd4c:	2332      	movs	r3, #50	; 0x32
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	0013      	movs	r3, r2
 800fd52:	2200      	movs	r2, #0
 800fd54:	2006      	movs	r0, #6
 800fd56:	f7fe fe01 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800fd5a:	233f      	movs	r3, #63	; 0x3f
 800fd5c:	18fb      	adds	r3, r7, r3
 800fd5e:	781b      	ldrb	r3, [r3, #0]
}
 800fd60:	0018      	movs	r0, r3
 800fd62:	46bd      	mov	sp, r7
 800fd64:	b010      	add	sp, #64	; 0x40
 800fd66:	bdb0      	pop	{r4, r5, r7, pc}
 800fd68:	08015f2c 	.word	0x08015f2c

0800fd6c <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 800fd6c:	b590      	push	{r4, r7, lr}
 800fd6e:	b093      	sub	sp, #76	; 0x4c
 800fd70:	af02      	add	r7, sp, #8
 800fd72:	603a      	str	r2, [r7, #0]
 800fd74:	1dfb      	adds	r3, r7, #7
 800fd76:	1c02      	adds	r2, r0, #0
 800fd78:	701a      	strb	r2, [r3, #0]
 800fd7a:	1dbb      	adds	r3, r7, #6
 800fd7c:	1c0a      	adds	r2, r1, #0
 800fd7e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 800fd80:	213f      	movs	r1, #63	; 0x3f
 800fd82:	187b      	adds	r3, r7, r1
 800fd84:	2202      	movs	r2, #2
 800fd86:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_SOP == SOPType)
 800fd88:	1dbb      	adds	r3, r7, #6
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10d      	bne.n	800fdac <USBPD_DPM_RequestGetManufacturerInfo+0x40>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 800fd90:	187c      	adds	r4, r7, r1
 800fd92:	683a      	ldr	r2, [r7, #0]
 800fd94:	1dbb      	adds	r3, r7, #6
 800fd96:	7819      	ldrb	r1, [r3, #0]
 800fd98:	1dfb      	adds	r3, r7, #7
 800fd9a:	7818      	ldrb	r0, [r3, #0]
 800fd9c:	2302      	movs	r3, #2
 800fd9e:	9300      	str	r3, [sp, #0]
 800fda0:	0013      	movs	r3, r2
 800fda2:	2206      	movs	r2, #6
 800fda4:	f7f0 fcec 	bl	8000780 <USBPD_PE_SendExtendedMessage>
 800fda8:	0003      	movs	r3, r0
 800fdaa:	7023      	strb	r3, [r4, #0]
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 800fdac:	233f      	movs	r3, #63	; 0x3f
 800fdae:	18fb      	adds	r3, r7, r3
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d027      	beq.n	800fe06 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 800fdb6:	4a17      	ldr	r2, [pc, #92]	; (800fe14 <USBPD_DPM_RequestGetManufacturerInfo+0xa8>)
 800fdb8:	240c      	movs	r4, #12
 800fdba:	193b      	adds	r3, r7, r4
 800fdbc:	2132      	movs	r1, #50	; 0x32
 800fdbe:	0018      	movs	r0, r3
 800fdc0:	f005 fae0 	bl	8015384 <sniprintf>
 800fdc4:	0002      	movs	r2, r0
 800fdc6:	213e      	movs	r1, #62	; 0x3e
 800fdc8:	187b      	adds	r3, r7, r1
 800fdca:	701a      	strb	r2, [r3, #0]
 800fdcc:	187b      	adds	r3, r7, r1
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	2b31      	cmp	r3, #49	; 0x31
 800fdd2:	d80d      	bhi.n	800fdf0 <USBPD_DPM_RequestGetManufacturerInfo+0x84>
 800fdd4:	193b      	adds	r3, r7, r4
 800fdd6:	0018      	movs	r0, r3
 800fdd8:	f7f6 f9aa 	bl	8006130 <strlen>
 800fddc:	193a      	adds	r2, r7, r4
 800fdde:	1dfb      	adds	r3, r7, #7
 800fde0:	7819      	ldrb	r1, [r3, #0]
 800fde2:	9000      	str	r0, [sp, #0]
 800fde4:	0013      	movs	r3, r2
 800fde6:	2200      	movs	r2, #0
 800fde8:	2006      	movs	r0, #6
 800fdea:	f7fe fdb7 	bl	800e95c <USBPD_TRACE_Add>
 800fdee:	e00a      	b.n	800fe06 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 800fdf0:	230c      	movs	r3, #12
 800fdf2:	18fa      	adds	r2, r7, r3
 800fdf4:	1dfb      	adds	r3, r7, #7
 800fdf6:	7819      	ldrb	r1, [r3, #0]
 800fdf8:	2332      	movs	r3, #50	; 0x32
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	0013      	movs	r3, r2
 800fdfe:	2200      	movs	r2, #0
 800fe00:	2006      	movs	r0, #6
 800fe02:	f7fe fdab 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800fe06:	233f      	movs	r3, #63	; 0x3f
 800fe08:	18fb      	adds	r3, r7, r3
 800fe0a:	781b      	ldrb	r3, [r3, #0]
}
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	b011      	add	sp, #68	; 0x44
 800fe12:	bd90      	pop	{r4, r7, pc}
 800fe14:	08015f58 	.word	0x08015f58

0800fe18 <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 800fe18:	b5b0      	push	{r4, r5, r7, lr}
 800fe1a:	b092      	sub	sp, #72	; 0x48
 800fe1c:	af02      	add	r7, sp, #8
 800fe1e:	0002      	movs	r2, r0
 800fe20:	1dfb      	adds	r3, r7, #7
 800fe22:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 800fe24:	253f      	movs	r5, #63	; 0x3f
 800fe26:	197c      	adds	r4, r7, r5
 800fe28:	1dfb      	adds	r3, r7, #7
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	2114      	movs	r1, #20
 800fe30:	0018      	movs	r0, r3
 800fe32:	f7f0 fb7f 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800fe36:	0003      	movs	r3, r0
 800fe38:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 800fe3a:	197b      	adds	r3, r7, r5
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d027      	beq.n	800fe92 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 800fe42:	4a17      	ldr	r2, [pc, #92]	; (800fea0 <USBPD_DPM_RequestGetPPS_Status+0x88>)
 800fe44:	240c      	movs	r4, #12
 800fe46:	193b      	adds	r3, r7, r4
 800fe48:	2132      	movs	r1, #50	; 0x32
 800fe4a:	0018      	movs	r0, r3
 800fe4c:	f005 fa9a 	bl	8015384 <sniprintf>
 800fe50:	0002      	movs	r2, r0
 800fe52:	213e      	movs	r1, #62	; 0x3e
 800fe54:	187b      	adds	r3, r7, r1
 800fe56:	701a      	strb	r2, [r3, #0]
 800fe58:	187b      	adds	r3, r7, r1
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	2b31      	cmp	r3, #49	; 0x31
 800fe5e:	d80d      	bhi.n	800fe7c <USBPD_DPM_RequestGetPPS_Status+0x64>
 800fe60:	193b      	adds	r3, r7, r4
 800fe62:	0018      	movs	r0, r3
 800fe64:	f7f6 f964 	bl	8006130 <strlen>
 800fe68:	193a      	adds	r2, r7, r4
 800fe6a:	1dfb      	adds	r3, r7, #7
 800fe6c:	7819      	ldrb	r1, [r3, #0]
 800fe6e:	9000      	str	r0, [sp, #0]
 800fe70:	0013      	movs	r3, r2
 800fe72:	2200      	movs	r2, #0
 800fe74:	2006      	movs	r0, #6
 800fe76:	f7fe fd71 	bl	800e95c <USBPD_TRACE_Add>
 800fe7a:	e00a      	b.n	800fe92 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 800fe7c:	230c      	movs	r3, #12
 800fe7e:	18fa      	adds	r2, r7, r3
 800fe80:	1dfb      	adds	r3, r7, #7
 800fe82:	7819      	ldrb	r1, [r3, #0]
 800fe84:	2332      	movs	r3, #50	; 0x32
 800fe86:	9300      	str	r3, [sp, #0]
 800fe88:	0013      	movs	r3, r2
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	2006      	movs	r0, #6
 800fe8e:	f7fe fd65 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800fe92:	233f      	movs	r3, #63	; 0x3f
 800fe94:	18fb      	adds	r3, r7, r3
 800fe96:	781b      	ldrb	r3, [r3, #0]
}
 800fe98:	0018      	movs	r0, r3
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	b010      	add	sp, #64	; 0x40
 800fe9e:	bdb0      	pop	{r4, r5, r7, pc}
 800fea0:	08015f80 	.word	0x08015f80

0800fea4 <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 800fea4:	b5b0      	push	{r4, r5, r7, lr}
 800fea6:	b092      	sub	sp, #72	; 0x48
 800fea8:	af02      	add	r7, sp, #8
 800feaa:	0002      	movs	r2, r0
 800feac:	1dfb      	adds	r3, r7, #7
 800feae:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 800feb0:	253f      	movs	r5, #63	; 0x3f
 800feb2:	197c      	adds	r4, r7, r5
 800feb4:	1dfb      	adds	r3, r7, #7
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	2200      	movs	r2, #0
 800feba:	2112      	movs	r1, #18
 800febc:	0018      	movs	r0, r3
 800febe:	f7f0 fb39 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800fec2:	0003      	movs	r3, r0
 800fec4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 800fec6:	197b      	adds	r3, r7, r5
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d027      	beq.n	800ff1e <USBPD_DPM_RequestGetStatus+0x7a>
 800fece:	4a17      	ldr	r2, [pc, #92]	; (800ff2c <USBPD_DPM_RequestGetStatus+0x88>)
 800fed0:	240c      	movs	r4, #12
 800fed2:	193b      	adds	r3, r7, r4
 800fed4:	2132      	movs	r1, #50	; 0x32
 800fed6:	0018      	movs	r0, r3
 800fed8:	f005 fa54 	bl	8015384 <sniprintf>
 800fedc:	0002      	movs	r2, r0
 800fede:	213e      	movs	r1, #62	; 0x3e
 800fee0:	187b      	adds	r3, r7, r1
 800fee2:	701a      	strb	r2, [r3, #0]
 800fee4:	187b      	adds	r3, r7, r1
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	2b31      	cmp	r3, #49	; 0x31
 800feea:	d80d      	bhi.n	800ff08 <USBPD_DPM_RequestGetStatus+0x64>
 800feec:	193b      	adds	r3, r7, r4
 800feee:	0018      	movs	r0, r3
 800fef0:	f7f6 f91e 	bl	8006130 <strlen>
 800fef4:	193a      	adds	r2, r7, r4
 800fef6:	1dfb      	adds	r3, r7, #7
 800fef8:	7819      	ldrb	r1, [r3, #0]
 800fefa:	9000      	str	r0, [sp, #0]
 800fefc:	0013      	movs	r3, r2
 800fefe:	2200      	movs	r2, #0
 800ff00:	2006      	movs	r0, #6
 800ff02:	f7fe fd2b 	bl	800e95c <USBPD_TRACE_Add>
 800ff06:	e00a      	b.n	800ff1e <USBPD_DPM_RequestGetStatus+0x7a>
 800ff08:	230c      	movs	r3, #12
 800ff0a:	18fa      	adds	r2, r7, r3
 800ff0c:	1dfb      	adds	r3, r7, #7
 800ff0e:	7819      	ldrb	r1, [r3, #0]
 800ff10:	2332      	movs	r3, #50	; 0x32
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	0013      	movs	r3, r2
 800ff16:	2200      	movs	r2, #0
 800ff18:	2006      	movs	r0, #6
 800ff1a:	f7fe fd1f 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800ff1e:	233f      	movs	r3, #63	; 0x3f
 800ff20:	18fb      	adds	r3, r7, r3
 800ff22:	781b      	ldrb	r3, [r3, #0]
}
 800ff24:	0018      	movs	r0, r3
 800ff26:	46bd      	mov	sp, r7
 800ff28:	b010      	add	sp, #64	; 0x40
 800ff2a:	bdb0      	pop	{r4, r5, r7, pc}
 800ff2c:	08015fac 	.word	0x08015fac

0800ff30 <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 800ff30:	b5b0      	push	{r4, r5, r7, lr}
 800ff32:	b092      	sub	sp, #72	; 0x48
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	0002      	movs	r2, r0
 800ff38:	1dfb      	adds	r3, r7, #7
 800ff3a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 800ff3c:	253f      	movs	r5, #63	; 0x3f
 800ff3e:	197c      	adds	r4, r7, r5
 800ff40:	1dfb      	adds	r3, r7, #7
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	2200      	movs	r2, #0
 800ff46:	2113      	movs	r1, #19
 800ff48:	0018      	movs	r0, r3
 800ff4a:	f7f0 faf3 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800ff4e:	0003      	movs	r3, r0
 800ff50:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 800ff52:	197b      	adds	r3, r7, r5
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d027      	beq.n	800ffaa <USBPD_DPM_RequestFastRoleSwap+0x7a>
 800ff5a:	4a17      	ldr	r2, [pc, #92]	; (800ffb8 <USBPD_DPM_RequestFastRoleSwap+0x88>)
 800ff5c:	240c      	movs	r4, #12
 800ff5e:	193b      	adds	r3, r7, r4
 800ff60:	2132      	movs	r1, #50	; 0x32
 800ff62:	0018      	movs	r0, r3
 800ff64:	f005 fa0e 	bl	8015384 <sniprintf>
 800ff68:	0002      	movs	r2, r0
 800ff6a:	213e      	movs	r1, #62	; 0x3e
 800ff6c:	187b      	adds	r3, r7, r1
 800ff6e:	701a      	strb	r2, [r3, #0]
 800ff70:	187b      	adds	r3, r7, r1
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	2b31      	cmp	r3, #49	; 0x31
 800ff76:	d80d      	bhi.n	800ff94 <USBPD_DPM_RequestFastRoleSwap+0x64>
 800ff78:	193b      	adds	r3, r7, r4
 800ff7a:	0018      	movs	r0, r3
 800ff7c:	f7f6 f8d8 	bl	8006130 <strlen>
 800ff80:	193a      	adds	r2, r7, r4
 800ff82:	1dfb      	adds	r3, r7, #7
 800ff84:	7819      	ldrb	r1, [r3, #0]
 800ff86:	9000      	str	r0, [sp, #0]
 800ff88:	0013      	movs	r3, r2
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	2006      	movs	r0, #6
 800ff8e:	f7fe fce5 	bl	800e95c <USBPD_TRACE_Add>
 800ff92:	e00a      	b.n	800ffaa <USBPD_DPM_RequestFastRoleSwap+0x7a>
 800ff94:	230c      	movs	r3, #12
 800ff96:	18fa      	adds	r2, r7, r3
 800ff98:	1dfb      	adds	r3, r7, #7
 800ff9a:	7819      	ldrb	r1, [r3, #0]
 800ff9c:	2332      	movs	r3, #50	; 0x32
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	0013      	movs	r3, r2
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	2006      	movs	r0, #6
 800ffa6:	f7fe fcd9 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 800ffaa:	233f      	movs	r3, #63	; 0x3f
 800ffac:	18fb      	adds	r3, r7, r3
 800ffae:	781b      	ldrb	r3, [r3, #0]
}
 800ffb0:	0018      	movs	r0, r3
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	b010      	add	sp, #64	; 0x40
 800ffb6:	bdb0      	pop	{r4, r5, r7, pc}
 800ffb8:	08015fd4 	.word	0x08015fd4

0800ffbc <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 800ffbc:	b5b0      	push	{r4, r5, r7, lr}
 800ffbe:	b092      	sub	sp, #72	; 0x48
 800ffc0:	af02      	add	r7, sp, #8
 800ffc2:	0002      	movs	r2, r0
 800ffc4:	1dfb      	adds	r3, r7, #7
 800ffc6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 800ffc8:	253f      	movs	r5, #63	; 0x3f
 800ffca:	197c      	adds	r4, r7, r5
 800ffcc:	1dfb      	adds	r3, r7, #7
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	2115      	movs	r1, #21
 800ffd4:	0018      	movs	r0, r3
 800ffd6:	f7f0 faad 	bl	8000534 <USBPD_PE_Request_CtrlMessage>
 800ffda:	0003      	movs	r3, r0
 800ffdc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 800ffde:	197b      	adds	r3, r7, r5
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d027      	beq.n	8010036 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 800ffe6:	4a17      	ldr	r2, [pc, #92]	; (8010044 <USBPD_DPM_RequestGetCountryCodes+0x88>)
 800ffe8:	240c      	movs	r4, #12
 800ffea:	193b      	adds	r3, r7, r4
 800ffec:	2132      	movs	r1, #50	; 0x32
 800ffee:	0018      	movs	r0, r3
 800fff0:	f005 f9c8 	bl	8015384 <sniprintf>
 800fff4:	0002      	movs	r2, r0
 800fff6:	213e      	movs	r1, #62	; 0x3e
 800fff8:	187b      	adds	r3, r7, r1
 800fffa:	701a      	strb	r2, [r3, #0]
 800fffc:	187b      	adds	r3, r7, r1
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	2b31      	cmp	r3, #49	; 0x31
 8010002:	d80d      	bhi.n	8010020 <USBPD_DPM_RequestGetCountryCodes+0x64>
 8010004:	193b      	adds	r3, r7, r4
 8010006:	0018      	movs	r0, r3
 8010008:	f7f6 f892 	bl	8006130 <strlen>
 801000c:	193a      	adds	r2, r7, r4
 801000e:	1dfb      	adds	r3, r7, #7
 8010010:	7819      	ldrb	r1, [r3, #0]
 8010012:	9000      	str	r0, [sp, #0]
 8010014:	0013      	movs	r3, r2
 8010016:	2200      	movs	r2, #0
 8010018:	2006      	movs	r0, #6
 801001a:	f7fe fc9f 	bl	800e95c <USBPD_TRACE_Add>
 801001e:	e00a      	b.n	8010036 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 8010020:	230c      	movs	r3, #12
 8010022:	18fa      	adds	r2, r7, r3
 8010024:	1dfb      	adds	r3, r7, #7
 8010026:	7819      	ldrb	r1, [r3, #0]
 8010028:	2332      	movs	r3, #50	; 0x32
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	0013      	movs	r3, r2
 801002e:	2200      	movs	r2, #0
 8010030:	2006      	movs	r0, #6
 8010032:	f7fe fc93 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 8010036:	233f      	movs	r3, #63	; 0x3f
 8010038:	18fb      	adds	r3, r7, r3
 801003a:	781b      	ldrb	r3, [r3, #0]
}
 801003c:	0018      	movs	r0, r3
 801003e:	46bd      	mov	sp, r7
 8010040:	b010      	add	sp, #64	; 0x40
 8010042:	bdb0      	pop	{r4, r5, r7, pc}
 8010044:	08015ff4 	.word	0x08015ff4

08010048 <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 8010048:	b5b0      	push	{r4, r5, r7, lr}
 801004a:	b092      	sub	sp, #72	; 0x48
 801004c:	af02      	add	r7, sp, #8
 801004e:	0002      	movs	r2, r0
 8010050:	1dfb      	adds	r3, r7, #7
 8010052:	701a      	strb	r2, [r3, #0]
 8010054:	1d3b      	adds	r3, r7, #4
 8010056:	1c0a      	adds	r2, r1, #0
 8010058:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 801005a:	253f      	movs	r5, #63	; 0x3f
 801005c:	197c      	adds	r4, r7, r5
 801005e:	1d3a      	adds	r2, r7, #4
 8010060:	1dfb      	adds	r3, r7, #7
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2107      	movs	r1, #7
 8010066:	0018      	movs	r0, r3
 8010068:	f7f0 fb04 	bl	8000674 <USBPD_PE_Request_DataMessage>
 801006c:	0003      	movs	r3, r0
 801006e:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 8010070:	197b      	adds	r3, r7, r5
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d027      	beq.n	80100c8 <USBPD_DPM_RequestGetCountryInfo+0x80>
 8010078:	4a17      	ldr	r2, [pc, #92]	; (80100d8 <USBPD_DPM_RequestGetCountryInfo+0x90>)
 801007a:	240c      	movs	r4, #12
 801007c:	193b      	adds	r3, r7, r4
 801007e:	2132      	movs	r1, #50	; 0x32
 8010080:	0018      	movs	r0, r3
 8010082:	f005 f97f 	bl	8015384 <sniprintf>
 8010086:	0002      	movs	r2, r0
 8010088:	213e      	movs	r1, #62	; 0x3e
 801008a:	187b      	adds	r3, r7, r1
 801008c:	701a      	strb	r2, [r3, #0]
 801008e:	187b      	adds	r3, r7, r1
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	2b31      	cmp	r3, #49	; 0x31
 8010094:	d80d      	bhi.n	80100b2 <USBPD_DPM_RequestGetCountryInfo+0x6a>
 8010096:	193b      	adds	r3, r7, r4
 8010098:	0018      	movs	r0, r3
 801009a:	f7f6 f849 	bl	8006130 <strlen>
 801009e:	193a      	adds	r2, r7, r4
 80100a0:	1dfb      	adds	r3, r7, #7
 80100a2:	7819      	ldrb	r1, [r3, #0]
 80100a4:	9000      	str	r0, [sp, #0]
 80100a6:	0013      	movs	r3, r2
 80100a8:	2200      	movs	r2, #0
 80100aa:	2006      	movs	r0, #6
 80100ac:	f7fe fc56 	bl	800e95c <USBPD_TRACE_Add>
 80100b0:	e00a      	b.n	80100c8 <USBPD_DPM_RequestGetCountryInfo+0x80>
 80100b2:	230c      	movs	r3, #12
 80100b4:	18fa      	adds	r2, r7, r3
 80100b6:	1dfb      	adds	r3, r7, #7
 80100b8:	7819      	ldrb	r1, [r3, #0]
 80100ba:	2332      	movs	r3, #50	; 0x32
 80100bc:	9300      	str	r3, [sp, #0]
 80100be:	0013      	movs	r3, r2
 80100c0:	2200      	movs	r2, #0
 80100c2:	2006      	movs	r0, #6
 80100c4:	f7fe fc4a 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 80100c8:	233f      	movs	r3, #63	; 0x3f
 80100ca:	18fb      	adds	r3, r7, r3
 80100cc:	781b      	ldrb	r3, [r3, #0]
}
 80100ce:	0018      	movs	r0, r3
 80100d0:	46bd      	mov	sp, r7
 80100d2:	b010      	add	sp, #64	; 0x40
 80100d4:	bdb0      	pop	{r4, r5, r7, pc}
 80100d6:	46c0      	nop			; (mov r8, r8)
 80100d8:	08016020 	.word	0x08016020

080100dc <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 80100dc:	b5b0      	push	{r4, r5, r7, lr}
 80100de:	b092      	sub	sp, #72	; 0x48
 80100e0:	af02      	add	r7, sp, #8
 80100e2:	0002      	movs	r2, r0
 80100e4:	6039      	str	r1, [r7, #0]
 80100e6:	1dfb      	adds	r3, r7, #7
 80100e8:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 80100ea:	253f      	movs	r5, #63	; 0x3f
 80100ec:	197c      	adds	r4, r7, r5
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	1dfb      	adds	r3, r7, #7
 80100f2:	7818      	ldrb	r0, [r3, #0]
 80100f4:	2301      	movs	r3, #1
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	0013      	movs	r3, r2
 80100fa:	2203      	movs	r2, #3
 80100fc:	2100      	movs	r1, #0
 80100fe:	f7f0 fb3f 	bl	8000780 <USBPD_PE_SendExtendedMessage>
 8010102:	0003      	movs	r3, r0
 8010104:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 8010106:	197b      	adds	r3, r7, r5
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d027      	beq.n	801015e <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801010e:	4a17      	ldr	r2, [pc, #92]	; (801016c <USBPD_DPM_RequestGetBatteryCapability+0x90>)
 8010110:	240c      	movs	r4, #12
 8010112:	193b      	adds	r3, r7, r4
 8010114:	2132      	movs	r1, #50	; 0x32
 8010116:	0018      	movs	r0, r3
 8010118:	f005 f934 	bl	8015384 <sniprintf>
 801011c:	0002      	movs	r2, r0
 801011e:	213e      	movs	r1, #62	; 0x3e
 8010120:	187b      	adds	r3, r7, r1
 8010122:	701a      	strb	r2, [r3, #0]
 8010124:	187b      	adds	r3, r7, r1
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	2b31      	cmp	r3, #49	; 0x31
 801012a:	d80d      	bhi.n	8010148 <USBPD_DPM_RequestGetBatteryCapability+0x6c>
 801012c:	193b      	adds	r3, r7, r4
 801012e:	0018      	movs	r0, r3
 8010130:	f7f5 fffe 	bl	8006130 <strlen>
 8010134:	193a      	adds	r2, r7, r4
 8010136:	1dfb      	adds	r3, r7, #7
 8010138:	7819      	ldrb	r1, [r3, #0]
 801013a:	9000      	str	r0, [sp, #0]
 801013c:	0013      	movs	r3, r2
 801013e:	2200      	movs	r2, #0
 8010140:	2006      	movs	r0, #6
 8010142:	f7fe fc0b 	bl	800e95c <USBPD_TRACE_Add>
 8010146:	e00a      	b.n	801015e <USBPD_DPM_RequestGetBatteryCapability+0x82>
 8010148:	230c      	movs	r3, #12
 801014a:	18fa      	adds	r2, r7, r3
 801014c:	1dfb      	adds	r3, r7, #7
 801014e:	7819      	ldrb	r1, [r3, #0]
 8010150:	2332      	movs	r3, #50	; 0x32
 8010152:	9300      	str	r3, [sp, #0]
 8010154:	0013      	movs	r3, r2
 8010156:	2200      	movs	r2, #0
 8010158:	2006      	movs	r0, #6
 801015a:	f7fe fbff 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 801015e:	233f      	movs	r3, #63	; 0x3f
 8010160:	18fb      	adds	r3, r7, r3
 8010162:	781b      	ldrb	r3, [r3, #0]
}
 8010164:	0018      	movs	r0, r3
 8010166:	46bd      	mov	sp, r7
 8010168:	b010      	add	sp, #64	; 0x40
 801016a:	bdb0      	pop	{r4, r5, r7, pc}
 801016c:	0801604c 	.word	0x0801604c

08010170 <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 8010170:	b5b0      	push	{r4, r5, r7, lr}
 8010172:	b092      	sub	sp, #72	; 0x48
 8010174:	af02      	add	r7, sp, #8
 8010176:	0002      	movs	r2, r0
 8010178:	6039      	str	r1, [r7, #0]
 801017a:	1dfb      	adds	r3, r7, #7
 801017c:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 801017e:	253f      	movs	r5, #63	; 0x3f
 8010180:	197c      	adds	r4, r7, r5
 8010182:	683a      	ldr	r2, [r7, #0]
 8010184:	1dfb      	adds	r3, r7, #7
 8010186:	7818      	ldrb	r0, [r3, #0]
 8010188:	2301      	movs	r3, #1
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	0013      	movs	r3, r2
 801018e:	2204      	movs	r2, #4
 8010190:	2100      	movs	r1, #0
 8010192:	f7f0 faf5 	bl	8000780 <USBPD_PE_SendExtendedMessage>
 8010196:	0003      	movs	r3, r0
 8010198:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 801019a:	197b      	adds	r3, r7, r5
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d027      	beq.n	80101f2 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 80101a2:	4a17      	ldr	r2, [pc, #92]	; (8010200 <USBPD_DPM_RequestGetBatteryStatus+0x90>)
 80101a4:	240c      	movs	r4, #12
 80101a6:	193b      	adds	r3, r7, r4
 80101a8:	2132      	movs	r1, #50	; 0x32
 80101aa:	0018      	movs	r0, r3
 80101ac:	f005 f8ea 	bl	8015384 <sniprintf>
 80101b0:	0002      	movs	r2, r0
 80101b2:	213e      	movs	r1, #62	; 0x3e
 80101b4:	187b      	adds	r3, r7, r1
 80101b6:	701a      	strb	r2, [r3, #0]
 80101b8:	187b      	adds	r3, r7, r1
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b31      	cmp	r3, #49	; 0x31
 80101be:	d80d      	bhi.n	80101dc <USBPD_DPM_RequestGetBatteryStatus+0x6c>
 80101c0:	193b      	adds	r3, r7, r4
 80101c2:	0018      	movs	r0, r3
 80101c4:	f7f5 ffb4 	bl	8006130 <strlen>
 80101c8:	193a      	adds	r2, r7, r4
 80101ca:	1dfb      	adds	r3, r7, #7
 80101cc:	7819      	ldrb	r1, [r3, #0]
 80101ce:	9000      	str	r0, [sp, #0]
 80101d0:	0013      	movs	r3, r2
 80101d2:	2200      	movs	r2, #0
 80101d4:	2006      	movs	r0, #6
 80101d6:	f7fe fbc1 	bl	800e95c <USBPD_TRACE_Add>
 80101da:	e00a      	b.n	80101f2 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 80101dc:	230c      	movs	r3, #12
 80101de:	18fa      	adds	r2, r7, r3
 80101e0:	1dfb      	adds	r3, r7, #7
 80101e2:	7819      	ldrb	r1, [r3, #0]
 80101e4:	2332      	movs	r3, #50	; 0x32
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	0013      	movs	r3, r2
 80101ea:	2200      	movs	r2, #0
 80101ec:	2006      	movs	r0, #6
 80101ee:	f7fe fbb5 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 80101f2:	233f      	movs	r3, #63	; 0x3f
 80101f4:	18fb      	adds	r3, r7, r3
 80101f6:	781b      	ldrb	r3, [r3, #0]
}
 80101f8:	0018      	movs	r0, r3
 80101fa:	46bd      	mov	sp, r7
 80101fc:	b010      	add	sp, #64	; 0x40
 80101fe:	bdb0      	pop	{r4, r5, r7, pc}
 8010200:	08016078 	.word	0x08016078

08010204 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 8010204:	b590      	push	{r4, r7, lr}
 8010206:	b093      	sub	sp, #76	; 0x4c
 8010208:	af02      	add	r7, sp, #8
 801020a:	0002      	movs	r2, r0
 801020c:	1dfb      	adds	r3, r7, #7
 801020e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 8010210:	213f      	movs	r1, #63	; 0x3f
 8010212:	187b      	adds	r3, r7, r1
 8010214:	2202      	movs	r2, #2
 8010216:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 8010218:	187b      	adds	r3, r7, r1
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d027      	beq.n	8010270 <USBPD_DPM_RequestSecurityRequest+0x6c>
 8010220:	4a17      	ldr	r2, [pc, #92]	; (8010280 <USBPD_DPM_RequestSecurityRequest+0x7c>)
 8010222:	240c      	movs	r4, #12
 8010224:	193b      	adds	r3, r7, r4
 8010226:	2132      	movs	r1, #50	; 0x32
 8010228:	0018      	movs	r0, r3
 801022a:	f005 f8ab 	bl	8015384 <sniprintf>
 801022e:	0002      	movs	r2, r0
 8010230:	213e      	movs	r1, #62	; 0x3e
 8010232:	187b      	adds	r3, r7, r1
 8010234:	701a      	strb	r2, [r3, #0]
 8010236:	187b      	adds	r3, r7, r1
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	2b31      	cmp	r3, #49	; 0x31
 801023c:	d80d      	bhi.n	801025a <USBPD_DPM_RequestSecurityRequest+0x56>
 801023e:	193b      	adds	r3, r7, r4
 8010240:	0018      	movs	r0, r3
 8010242:	f7f5 ff75 	bl	8006130 <strlen>
 8010246:	193a      	adds	r2, r7, r4
 8010248:	1dfb      	adds	r3, r7, #7
 801024a:	7819      	ldrb	r1, [r3, #0]
 801024c:	9000      	str	r0, [sp, #0]
 801024e:	0013      	movs	r3, r2
 8010250:	2200      	movs	r2, #0
 8010252:	2006      	movs	r0, #6
 8010254:	f7fe fb82 	bl	800e95c <USBPD_TRACE_Add>
 8010258:	e00a      	b.n	8010270 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801025a:	230c      	movs	r3, #12
 801025c:	18fa      	adds	r2, r7, r3
 801025e:	1dfb      	adds	r3, r7, #7
 8010260:	7819      	ldrb	r1, [r3, #0]
 8010262:	2332      	movs	r3, #50	; 0x32
 8010264:	9300      	str	r3, [sp, #0]
 8010266:	0013      	movs	r3, r2
 8010268:	2200      	movs	r2, #0
 801026a:	2006      	movs	r0, #6
 801026c:	f7fe fb76 	bl	800e95c <USBPD_TRACE_Add>
  return _status;
 8010270:	233f      	movs	r3, #63	; 0x3f
 8010272:	18fb      	adds	r3, r7, r3
 8010274:	781b      	ldrb	r3, [r3, #0]
}
 8010276:	0018      	movs	r0, r3
 8010278:	46bd      	mov	sp, r7
 801027a:	b011      	add	sp, #68	; 0x44
 801027c:	bd90      	pop	{r4, r7, pc}
 801027e:	46c0      	nop			; (mov r8, r8)
 8010280:	080160a8 	.word	0x080160a8

08010284 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	0002      	movs	r2, r0
 801028c:	1dfb      	adds	r3, r7, #7
 801028e:	701a      	strb	r2, [r3, #0]
 8010290:	1dbb      	adds	r3, r7, #6
 8010292:	1c0a      	adds	r2, r1, #0
 8010294:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  return USBPD_ERROR;
 8010296:	2302      	movs	r3, #2
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8010298:	0018      	movs	r0, r3
 801029a:	46bd      	mov	sp, r7
 801029c:	b002      	add	sp, #8
 801029e:	bd80      	pop	{r7, pc}

080102a0 <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60ba      	str	r2, [r7, #8]
 80102a8:	607b      	str	r3, [r7, #4]
 80102aa:	230f      	movs	r3, #15
 80102ac:	18fb      	adds	r3, r7, r3
 80102ae:	1c02      	adds	r2, r0, #0
 80102b0:	701a      	strb	r2, [r3, #0]
 80102b2:	230e      	movs	r3, #14
 80102b4:	18fb      	adds	r3, r7, r3
 80102b6:	1c0a      	adds	r2, r1, #0
 80102b8:	701a      	strb	r2, [r3, #0]
    {
      *Size = USBPD_NbPDO[0];
 80102ba:	4b08      	ldr	r3, [pc, #32]	; (80102dc <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	001a      	movs	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 80102c4:	4b05      	ldr	r3, [pc, #20]	; (80102dc <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	009a      	lsls	r2, r3, #2
 80102ca:	4905      	ldr	r1, [pc, #20]	; (80102e0 <USBPD_PWR_IF_GetPortPDOs+0x40>)
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	0018      	movs	r0, r3
 80102d0:	f004 ff8c 	bl	80151ec <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 80102d4:	46c0      	nop			; (mov r8, r8)
 80102d6:	46bd      	mov	sp, r7
 80102d8:	b004      	add	sp, #16
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	2000009c 	.word	0x2000009c
 80102e0:	200000a0 	.word	0x200000a0

080102e4 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	0002      	movs	r2, r0
 80102ec:	1dfb      	adds	r3, r7, #7
 80102ee:	701a      	strb	r2, [r3, #0]
 80102f0:	1dbb      	adds	r3, r7, #6
 80102f2:	1c0a      	adds	r2, r1, #0
 80102f4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 80102f6:	230f      	movs	r3, #15
 80102f8:	18fb      	adds	r3, r7, r3
 80102fa:	2200      	movs	r2, #0
 80102fc:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 80102fe:	1dfb      	adds	r3, r7, #7
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	0018      	movs	r0, r3
 8010304:	f7fd ffca 	bl	800e29c <HW_IF_PWR_GetVoltage>
 8010308:	0003      	movs	r3, r0
 801030a:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 801030c:	1dbb      	adds	r3, r7, #6
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	2b02      	cmp	r3, #2
 8010312:	d018      	beq.n	8010346 <USBPD_PWR_IF_GetVBUSStatus+0x62>
 8010314:	dc21      	bgt.n	801035a <USBPD_PWR_IF_GetVBUSStatus+0x76>
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 801031a:	2b01      	cmp	r3, #1
 801031c:	d009      	beq.n	8010332 <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801031e:	e01c      	b.n	801035a <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	4a15      	ldr	r2, [pc, #84]	; (8010378 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d81a      	bhi.n	801035e <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 8010328:	230f      	movs	r3, #15
 801032a:	18fb      	adds	r3, r7, r3
 801032c:	2201      	movs	r2, #1
 801032e:	701a      	strb	r2, [r3, #0]
    break;
 8010330:	e015      	b.n	801035e <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8010332:	68ba      	ldr	r2, [r7, #8]
 8010334:	23af      	movs	r3, #175	; 0xaf
 8010336:	011b      	lsls	r3, r3, #4
 8010338:	429a      	cmp	r2, r3
 801033a:	d312      	bcc.n	8010362 <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 801033c:	230f      	movs	r3, #15
 801033e:	18fb      	adds	r3, r7, r3
 8010340:	2201      	movs	r2, #1
 8010342:	701a      	strb	r2, [r3, #0]
    break;
 8010344:	e00d      	b.n	8010362 <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	23af      	movs	r3, #175	; 0xaf
 801034a:	011b      	lsls	r3, r3, #4
 801034c:	429a      	cmp	r2, r3
 801034e:	d20a      	bcs.n	8010366 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 8010350:	230f      	movs	r3, #15
 8010352:	18fb      	adds	r3, r7, r3
 8010354:	2201      	movs	r2, #1
 8010356:	701a      	strb	r2, [r3, #0]
    break;
 8010358:	e005      	b.n	8010366 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 801035a:	46c0      	nop			; (mov r8, r8)
 801035c:	e004      	b.n	8010368 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801035e:	46c0      	nop			; (mov r8, r8)
 8010360:	e002      	b.n	8010368 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8010362:	46c0      	nop			; (mov r8, r8)
 8010364:	e000      	b.n	8010368 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8010366:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 8010368:	230f      	movs	r3, #15
 801036a:	18fb      	adds	r3, r7, r3
 801036c:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801036e:	0018      	movs	r0, r3
 8010370:	46bd      	mov	sp, r7
 8010372:	b004      	add	sp, #16
 8010374:	bd80      	pop	{r7, pc}
 8010376:	46c0      	nop			; (mov r8, r8)
 8010378:	000002ed 	.word	0x000002ed

0801037c <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010388:	b29b      	uxth	r3, r3
}
 801038a:	0018      	movs	r0, r3
 801038c:	46bd      	mov	sp, r7
 801038e:	b002      	add	sp, #8
 8010390:	bd80      	pop	{r7, pc}

08010392 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8010392:	b580      	push	{r7, lr}
 8010394:	b084      	sub	sp, #16
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801039a:	2300      	movs	r3, #0
 801039c:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d902      	bls.n	80103aa <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80103a4:	2302      	movs	r3, #2
 80103a6:	425b      	negs	r3, r3
 80103a8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80103aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 80103ac:	0018      	movs	r0, r3
 80103ae:	46bd      	mov	sp, r7
 80103b0:	b004      	add	sp, #16
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af02      	add	r7, sp, #8
 80103ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80103bc:	2300      	movs	r3, #0
 80103be:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	d903      	bls.n	80103ce <BSP_USBPD_PWR_VBUSInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80103c6:	2302      	movs	r3, #2
 80103c8:	425b      	negs	r3, r3
 80103ca:	60fb      	str	r3, [r7, #12]
 80103cc:	e008      	b.n	80103e0 <BSP_USBPD_PWR_VBUSInit+0x2c>
  {
    /* !!!
      BSP_PWR_VBUSInit is obsolete. You may need to move your user code
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	b2d9      	uxtb	r1, r3
 80103d2:	4b06      	ldr	r3, [pc, #24]	; (80103ec <BSP_USBPD_PWR_VBUSInit+0x38>)
 80103d4:	2225      	movs	r2, #37	; 0x25
 80103d6:	9200      	str	r2, [sp, #0]
 80103d8:	2200      	movs	r2, #0
 80103da:	2006      	movs	r0, #6
 80103dc:	f7fe fabe 	bl	800e95c <USBPD_TRACE_Add>
  }

  return ret;
 80103e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 80103e2:	0018      	movs	r0, r3
 80103e4:	46bd      	mov	sp, r7
 80103e6:	b004      	add	sp, #16
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	46c0      	nop			; (mov r8, r8)
 80103ec:	080163bc 	.word	0x080163bc

080103f0 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af02      	add	r7, sp, #8
 80103f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80103f8:	230b      	movs	r3, #11
 80103fa:	425b      	negs	r3, r3
 80103fc:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b01      	cmp	r3, #1
 8010402:	d902      	bls.n	801040a <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010404:	2302      	movs	r3, #2
 8010406:	425b      	negs	r3, r3
 8010408:	60fb      	str	r3, [r7, #12]
  }
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	b2d9      	uxtb	r1, r3
 801040e:	4b06      	ldr	r3, [pc, #24]	; (8010428 <BSP_USBPD_PWR_VBUSDeInit+0x38>)
 8010410:	2227      	movs	r2, #39	; 0x27
 8010412:	9200      	str	r2, [sp, #0]
 8010414:	2200      	movs	r2, #0
 8010416:	2006      	movs	r0, #6
 8010418:	f7fe faa0 	bl	800e95c <USBPD_TRACE_Add>
  return ret;
 801041c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801041e:	0018      	movs	r0, r3
 8010420:	46bd      	mov	sp, r7
 8010422:	b004      	add	sp, #16
 8010424:	bd80      	pop	{r7, pc}
 8010426:	46c0      	nop			; (mov r8, r8)
 8010428:	080163e4 	.word	0x080163e4

0801042c <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b084      	sub	sp, #16
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
	int32_t ret = BSP_ERROR_NONE;
 8010436:	2300      	movs	r3, #0
 8010438:	60fb      	str	r3, [r7, #12]
	 if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b01      	cmp	r3, #1
 801043e:	d802      	bhi.n	8010446 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d106      	bne.n	8010454 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
	 {
	 ret = BSP_ERROR_WRONG_PARAM;
 8010446:	2302      	movs	r3, #2
 8010448:	425b      	negs	r3, r3
 801044a:	60fb      	str	r3, [r7, #12]
	 *pVoltage = 0;
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	2200      	movs	r2, #0
 8010450:	601a      	str	r2, [r3, #0]
 8010452:	e01b      	b.n	801048c <BSP_USBPD_PWR_VBUSGetVoltage+0x60>
	 }
	 else
	 {
	 uint32_t val;
	 val = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 8010454:	4b10      	ldr	r3, [pc, #64]	; (8010498 <BSP_USBPD_PWR_VBUSGetVoltage+0x6c>)
 8010456:	0018      	movs	r0, r3
 8010458:	f7ff ff90 	bl	801037c <LL_ADC_REG_ReadConversionData12>
 801045c:	0003      	movs	r3, r0
 801045e:	001a      	movs	r2, r3
 8010460:	4b0e      	ldr	r3, [pc, #56]	; (801049c <BSP_USBPD_PWR_VBUSGetVoltage+0x70>)
 8010462:	4353      	muls	r3, r2
 8010464:	490e      	ldr	r1, [pc, #56]	; (80104a0 <BSP_USBPD_PWR_VBUSGetVoltage+0x74>)
 8010466:	0018      	movs	r0, r3
 8010468:	f7f5 fe74 	bl	8006154 <__udivsi3>
 801046c:	0003      	movs	r3, r0
 801046e:	60bb      	str	r3, [r7, #8]
	 LL_ADC_REG_ReadConversionData12(ADC1), \
	 LL_ADC_RESOLUTION_12B); /* mV */
	 /* X-NUCLEO-USBPDM board is used */
	 /* Value is multiplied by 5.97 (Divider R6/R7 (40.2K/200K) for VSENSE) */
	 val *= 597;
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	4a0c      	ldr	r2, [pc, #48]	; (80104a4 <BSP_USBPD_PWR_VBUSGetVoltage+0x78>)
 8010474:	4353      	muls	r3, r2
 8010476:	60bb      	str	r3, [r7, #8]
	 val /= 100;
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	2164      	movs	r1, #100	; 0x64
 801047c:	0018      	movs	r0, r3
 801047e:	f7f5 fe69 	bl	8006154 <__udivsi3>
 8010482:	0003      	movs	r3, r0
 8010484:	60bb      	str	r3, [r7, #8]
	 *pVoltage = val;
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	68ba      	ldr	r2, [r7, #8]
 801048a:	601a      	str	r2, [r3, #0]
	 }
	 return BSP_ERROR_NONE;
 801048c:	2300      	movs	r3, #0
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801048e:	0018      	movs	r0, r3
 8010490:	46bd      	mov	sp, r7
 8010492:	b004      	add	sp, #16
 8010494:	bd80      	pop	{r7, pc}
 8010496:	46c0      	nop			; (mov r8, r8)
 8010498:	40012400 	.word	0x40012400
 801049c:	00000ce4 	.word	0x00000ce4
 80104a0:	00000fff 	.word	0x00000fff
 80104a4:	00000255 	.word	0x00000255

080104a8 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t Instance, int32_t *pCurrent)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af02      	add	r7, sp, #8
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d802      	bhi.n	80104be <BSP_USBPD_PWR_VBUSGetCurrent+0x16>
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d103      	bne.n	80104c6 <BSP_USBPD_PWR_VBUSGetCurrent+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80104be:	2302      	movs	r3, #2
 80104c0:	425b      	negs	r3, r3
 80104c2:	60fb      	str	r3, [r7, #12]
 80104c4:	e005      	b.n	80104d2 <BSP_USBPD_PWR_VBUSGetCurrent+0x2a>
  }
  else
  {
    *pCurrent = 0;
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	2200      	movs	r2, #0
 80104ca:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80104cc:	230b      	movs	r3, #11
 80104ce:	425b      	negs	r3, r3
 80104d0:	60fb      	str	r3, [r7, #12]
  }
  /* !!!
      BSP_PWR_VBUSGetCurrent is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetCurrent");
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	b2d9      	uxtb	r1, r3
 80104d6:	4b06      	ldr	r3, [pc, #24]	; (80104f0 <BSP_USBPD_PWR_VBUSGetCurrent+0x48>)
 80104d8:	222b      	movs	r2, #43	; 0x2b
 80104da:	9200      	str	r2, [sp, #0]
 80104dc:	2200      	movs	r2, #0
 80104de:	2006      	movs	r0, #6
 80104e0:	f7fe fa3c 	bl	800e95c <USBPD_TRACE_Add>
  return ret;
 80104e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 80104e6:	0018      	movs	r0, r3
 80104e8:	46bd      	mov	sp, r7
 80104ea:	b004      	add	sp, #16
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	46c0      	nop			; (mov r8, r8)
 80104f0:	0801652c 	.word	0x0801652c

080104f4 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t* pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 80104f4:	b590      	push	{r4, r7, lr}
 80104f6:	b087      	sub	sp, #28
 80104f8:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 80104fa:	230f      	movs	r3, #15
 80104fc:	18fb      	adds	r3, r7, r3
 80104fe:	2203      	movs	r2, #3
 8010500:	701a      	strb	r2, [r3, #0]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 8010502:	4b68      	ldr	r3, [pc, #416]	; (80106a4 <BSP_GUI_LoadDataFromFlash+0x1b0>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	029a      	lsls	r2, r3, #10
 8010508:	23ff      	movs	r3, #255	; 0xff
 801050a:	029b      	lsls	r3, r3, #10
 801050c:	4013      	ands	r3, r2
 801050e:	0adb      	lsrs	r3, r3, #11
 8010510:	4a65      	ldr	r2, [pc, #404]	; (80106a8 <BSP_GUI_LoadDataFromFlash+0x1b4>)
 8010512:	4694      	mov	ip, r2
 8010514:	4463      	add	r3, ip
 8010516:	02db      	lsls	r3, r3, #11
 8010518:	60bb      	str	r3, [r7, #8]
    goto _exit;
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
  if ((0xFFFFFFFFu != *((uint32_t*)_addr)) && (MagicNumber != *((uint64_t*)_addr)))
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	3301      	adds	r3, #1
 8010520:	d012      	beq.n	8010548 <BSP_GUI_LoadDataFromFlash+0x54>
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	6818      	ldr	r0, [r3, #0]
 8010526:	6859      	ldr	r1, [r3, #4]
 8010528:	4b60      	ldr	r3, [pc, #384]	; (80106ac <BSP_GUI_LoadDataFromFlash+0x1b8>)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	4290      	cmp	r0, r2
 8010530:	d101      	bne.n	8010536 <BSP_GUI_LoadDataFromFlash+0x42>
 8010532:	4299      	cmp	r1, r3
 8010534:	d008      	beq.n	8010548 <BSP_GUI_LoadDataFromFlash+0x54>
  {
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t*)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 8010536:	4b5e      	ldr	r3, [pc, #376]	; (80106b0 <BSP_GUI_LoadDataFromFlash+0x1bc>)
 8010538:	2218      	movs	r2, #24
 801053a:	9200      	str	r2, [sp, #0]
 801053c:	2200      	movs	r2, #0
 801053e:	2100      	movs	r1, #0
 8010540:	2006      	movs	r0, #6
 8010542:	f7fe fa0b 	bl	800e95c <USBPD_TRACE_Add>
    goto _exit;
 8010546:	e0a5      	b.n	8010694 <BSP_GUI_LoadDataFromFlash+0x1a0>
  }
  if (0xFFFFFFFFu == *((uint32_t*)_addr))
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	3301      	adds	r3, #1
 801054e:	d100      	bne.n	8010552 <BSP_GUI_LoadDataFromFlash+0x5e>
 8010550:	e09f      	b.n	8010692 <BSP_GUI_LoadDataFromFlash+0x19e>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 8010552:	4b54      	ldr	r3, [pc, #336]	; (80106a4 <BSP_GUI_LoadDataFromFlash+0x1b0>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	029a      	lsls	r2, r3, #10
 8010558:	23ff      	movs	r3, #255	; 0xff
 801055a:	029b      	lsls	r3, r3, #10
 801055c:	4013      	ands	r3, r2
 801055e:	0adb      	lsrs	r3, r3, #11
 8010560:	4a51      	ldr	r2, [pc, #324]	; (80106a8 <BSP_GUI_LoadDataFromFlash+0x1b4>)
 8010562:	4694      	mov	ip, r2
 8010564:	4463      	add	r3, ip
 8010566:	02db      	lsls	r3, r3, #11
 8010568:	3308      	adds	r3, #8
 801056a:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t* _ptr = (uint32_t*)USBPD_NbPDO;
 801056c:	4b51      	ldr	r3, [pc, #324]	; (80106b4 <BSP_GUI_LoadDataFromFlash+0x1c0>)
 801056e:	607b      	str	r3, [r7, #4]
    USPBPD_WRITE32 (_ptr,*((uint32_t*)_addr));
 8010570:	230e      	movs	r3, #14
 8010572:	18fb      	adds	r3, r7, r3
 8010574:	2200      	movs	r2, #0
 8010576:	701a      	strb	r2, [r3, #0]
 8010578:	e012      	b.n	80105a0 <BSP_GUI_LoadDataFromFlash+0xac>
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	200e      	movs	r0, #14
 8010580:	183b      	adds	r3, r7, r0
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	00db      	lsls	r3, r3, #3
 8010586:	40da      	lsrs	r2, r3
 8010588:	0011      	movs	r1, r2
 801058a:	183b      	adds	r3, r7, r0
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	18d3      	adds	r3, r2, r3
 8010592:	b2ca      	uxtb	r2, r1
 8010594:	701a      	strb	r2, [r3, #0]
 8010596:	183b      	adds	r3, r7, r0
 8010598:	781a      	ldrb	r2, [r3, #0]
 801059a:	183b      	adds	r3, r7, r0
 801059c:	3201      	adds	r2, #1
 801059e:	701a      	strb	r2, [r3, #0]
 80105a0:	230e      	movs	r3, #14
 80105a2:	18fb      	adds	r3, r7, r3
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	2b03      	cmp	r3, #3
 80105a8:	d9e7      	bls.n	801057a <BSP_GUI_LoadDataFromFlash+0x86>
    _status = GUI_OK;
 80105aa:	240f      	movs	r4, #15
 80105ac:	193b      	adds	r3, r7, r4
 80105ae:	2200      	movs	r2, #0
 80105b0:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
  /* Save PORT0_PDO_ListSNK */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 80105b2:	4b3c      	ldr	r3, [pc, #240]	; (80106a4 <BSP_GUI_LoadDataFromFlash+0x1b0>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	029a      	lsls	r2, r3, #10
 80105b8:	23ff      	movs	r3, #255	; 0xff
 80105ba:	029b      	lsls	r3, r3, #10
 80105bc:	4013      	ands	r3, r2
 80105be:	0adb      	lsrs	r3, r3, #11
 80105c0:	4a39      	ldr	r2, [pc, #228]	; (80106a8 <BSP_GUI_LoadDataFromFlash+0x1b4>)
 80105c2:	4694      	mov	ip, r2
 80105c4:	4463      	add	r3, ip
 80105c6:	02db      	lsls	r3, r3, #11
 80105c8:	3330      	adds	r3, #48	; 0x30
 80105ca:	4a3b      	ldr	r2, [pc, #236]	; (80106b8 <BSP_GUI_LoadDataFromFlash+0x1c4>)
 80105cc:	0011      	movs	r1, r2
 80105ce:	0018      	movs	r0, r3
 80105d0:	f000 fade 	bl	8010b90 <LoadPDOFromFlash>
 80105d4:	0003      	movs	r3, r0
 80105d6:	0019      	movs	r1, r3
 80105d8:	193b      	adds	r3, r7, r4
 80105da:	193a      	adds	r2, r7, r4
 80105dc:	7812      	ldrb	r2, [r2, #0]
 80105de:	430a      	orrs	r2, r1
 80105e0:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Save DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t*)DPM_Settings, sizeof(USBPD_SettingsTypeDef) * USBPD_PORT_COUNT);
 80105e2:	4b30      	ldr	r3, [pc, #192]	; (80106a4 <BSP_GUI_LoadDataFromFlash+0x1b0>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	029a      	lsls	r2, r3, #10
 80105e8:	23ff      	movs	r3, #255	; 0xff
 80105ea:	029b      	lsls	r3, r3, #10
 80105ec:	4013      	ands	r3, r2
 80105ee:	0adb      	lsrs	r3, r3, #11
 80105f0:	4a2d      	ldr	r2, [pc, #180]	; (80106a8 <BSP_GUI_LoadDataFromFlash+0x1b4>)
 80105f2:	4694      	mov	ip, r2
 80105f4:	4463      	add	r3, ip
 80105f6:	02db      	lsls	r3, r3, #11
 80105f8:	3390      	adds	r3, #144	; 0x90
 80105fa:	4930      	ldr	r1, [pc, #192]	; (80106bc <BSP_GUI_LoadDataFromFlash+0x1c8>)
 80105fc:	220c      	movs	r2, #12
 80105fe:	0018      	movs	r0, r3
 8010600:	f000 faee 	bl	8010be0 <LoadSettingsFromFlash>
 8010604:	0003      	movs	r3, r0
 8010606:	0019      	movs	r1, r3
 8010608:	193b      	adds	r3, r7, r4
 801060a:	193a      	adds	r2, r7, r4
 801060c:	7812      	ldrb	r2, [r2, #0]
 801060e:	430a      	orrs	r2, r1
 8010610:	701a      	strb	r2, [r3, #0]

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Save DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t*)DPM_ID_Settings, sizeof(USBPD_IdSettingsTypeDef) * USBPD_PORT_COUNT);
 8010612:	4b24      	ldr	r3, [pc, #144]	; (80106a4 <BSP_GUI_LoadDataFromFlash+0x1b0>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	029a      	lsls	r2, r3, #10
 8010618:	23ff      	movs	r3, #255	; 0xff
 801061a:	029b      	lsls	r3, r3, #10
 801061c:	4013      	ands	r3, r2
 801061e:	0adb      	lsrs	r3, r3, #11
 8010620:	4a21      	ldr	r2, [pc, #132]	; (80106a8 <BSP_GUI_LoadDataFromFlash+0x1b4>)
 8010622:	4694      	mov	ip, r2
 8010624:	4463      	add	r3, ip
 8010626:	02db      	lsls	r3, r3, #11
 8010628:	331d      	adds	r3, #29
 801062a:	33ff      	adds	r3, #255	; 0xff
 801062c:	4924      	ldr	r1, [pc, #144]	; (80106c0 <BSP_GUI_LoadDataFromFlash+0x1cc>)
 801062e:	2208      	movs	r2, #8
 8010630:	0018      	movs	r0, r3
 8010632:	f000 fad5 	bl	8010be0 <LoadSettingsFromFlash>
 8010636:	0003      	movs	r3, r0
 8010638:	0019      	movs	r1, r3
 801063a:	193b      	adds	r3, r7, r4
 801063c:	193a      	adds	r2, r7, r4
 801063e:	7812      	ldrb	r2, [r2, #0]
 8010640:	430a      	orrs	r2, r1
 8010642:	701a      	strb	r2, [r3, #0]
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Save DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t*)DPM_USER_Settings, sizeof(USBPD_USER_SettingsTypeDef) * USBPD_PORT_COUNT);
 8010644:	4b17      	ldr	r3, [pc, #92]	; (80106a4 <BSP_GUI_LoadDataFromFlash+0x1b0>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	029a      	lsls	r2, r3, #10
 801064a:	23ff      	movs	r3, #255	; 0xff
 801064c:	029b      	lsls	r3, r3, #10
 801064e:	4013      	ands	r3, r2
 8010650:	0adb      	lsrs	r3, r3, #11
 8010652:	4a15      	ldr	r2, [pc, #84]	; (80106a8 <BSP_GUI_LoadDataFromFlash+0x1b4>)
 8010654:	4694      	mov	ip, r2
 8010656:	4463      	add	r3, ip
 8010658:	02db      	lsls	r3, r3, #11
 801065a:	339c      	adds	r3, #156	; 0x9c
 801065c:	4919      	ldr	r1, [pc, #100]	; (80106c4 <BSP_GUI_LoadDataFromFlash+0x1d0>)
 801065e:	2274      	movs	r2, #116	; 0x74
 8010660:	0018      	movs	r0, r3
 8010662:	f000 fabd 	bl	8010be0 <LoadSettingsFromFlash>
 8010666:	0003      	movs	r3, r0
 8010668:	0019      	movs	r1, r3
 801066a:	193b      	adds	r3, r7, r4
 801066c:	193a      	adds	r2, r7, r4
 801066e:	7812      	ldrb	r2, [r2, #0]
 8010670:	430a      	orrs	r2, r1
 8010672:	701a      	strb	r2, [r3, #0]
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_1].VID;
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_1].PID;
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _SRC_CAPA_EXT && (_SRC || _DRP) */
#if defined(_SNK)||defined(_DRP)
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.XID = DPM_ID_Settings[USBPD_PORT_0].XID;
 8010674:	4b12      	ldr	r3, [pc, #72]	; (80106c0 <BSP_GUI_LoadDataFromFlash+0x1cc>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	4b12      	ldr	r3, [pc, #72]	; (80106c4 <BSP_GUI_LoadDataFromFlash+0x1d0>)
 801067a:	655a      	str	r2, [r3, #84]	; 0x54
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_0].VID;
 801067c:	4b10      	ldr	r3, [pc, #64]	; (80106c0 <BSP_GUI_LoadDataFromFlash+0x1cc>)
 801067e:	8899      	ldrh	r1, [r3, #4]
 8010680:	4b10      	ldr	r3, [pc, #64]	; (80106c4 <BSP_GUI_LoadDataFromFlash+0x1d0>)
 8010682:	2250      	movs	r2, #80	; 0x50
 8010684:	5299      	strh	r1, [r3, r2]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_0].PID;
 8010686:	4b0e      	ldr	r3, [pc, #56]	; (80106c0 <BSP_GUI_LoadDataFromFlash+0x1cc>)
 8010688:	88d9      	ldrh	r1, [r3, #6]
 801068a:	4b0e      	ldr	r3, [pc, #56]	; (80106c4 <BSP_GUI_LoadDataFromFlash+0x1d0>)
 801068c:	2252      	movs	r2, #82	; 0x52
 801068e:	5299      	strh	r1, [r3, r2]
 8010690:	e000      	b.n	8010694 <BSP_GUI_LoadDataFromFlash+0x1a0>
    goto _exit;
 8010692:	46c0      	nop			; (mov r8, r8)
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 8010694:	230f      	movs	r3, #15
 8010696:	18fb      	adds	r3, r7, r3
 8010698:	781b      	ldrb	r3, [r3, #0]
}
 801069a:	0018      	movs	r0, r3
 801069c:	46bd      	mov	sp, r7
 801069e:	b005      	add	sp, #20
 80106a0:	bd90      	pop	{r4, r7, pc}
 80106a2:	46c0      	nop			; (mov r8, r8)
 80106a4:	1fff75e0 	.word	0x1fff75e0
 80106a8:	0000ffff 	.word	0x0000ffff
 80106ac:	200000c0 	.word	0x200000c0
 80106b0:	080166ec 	.word	0x080166ec
 80106b4:	2000009c 	.word	0x2000009c
 80106b8:	200000a0 	.word	0x200000a0
 80106bc:	20000014 	.word	0x20000014
 80106c0:	20000020 	.word	0x20000020
 80106c4:	20000028 	.word	0x20000028

080106c8 <BSP_GUI_SaveDataInFlash>:

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 80106c8:	b5b0      	push	{r4, r5, r7, lr}
 80106ca:	b090      	sub	sp, #64	; 0x40
 80106cc:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_ERROR;
 80106ce:	2327      	movs	r3, #39	; 0x27
 80106d0:	2218      	movs	r2, #24
 80106d2:	4694      	mov	ip, r2
 80106d4:	44bc      	add	ip, r7
 80106d6:	4463      	add	r3, ip
 80106d8:	2203      	movs	r2, #3
 80106da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80106dc:	b672      	cpsid	i
}
 80106de:	46c0      	nop			; (mov r8, r8)

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  HAL_FLASH_Unlock();
 80106e0:	f7f7 fe88 	bl	80083f4 <HAL_FLASH_Unlock>

  /* Erase the page associated to the GUI parameters */
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 80106e4:	2108      	movs	r1, #8
 80106e6:	2018      	movs	r0, #24
 80106e8:	183b      	adds	r3, r7, r0
 80106ea:	185b      	adds	r3, r3, r1
 80106ec:	2202      	movs	r2, #2
 80106ee:	601a      	str	r2, [r3, #0]
#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress        = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 80106f0:	4b96      	ldr	r3, [pc, #600]	; (801094c <BSP_GUI_SaveDataInFlash+0x284>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	029a      	lsls	r2, r3, #10
 80106f6:	23ff      	movs	r3, #255	; 0xff
 80106f8:	029b      	lsls	r3, r3, #10
 80106fa:	4013      	ands	r3, r2
 80106fc:	0adb      	lsrs	r3, r3, #11
 80106fe:	1e5a      	subs	r2, r3, #1
 8010700:	183b      	adds	r3, r7, r0
 8010702:	185b      	adds	r3, r3, r1
 8010704:	609a      	str	r2, [r3, #8]
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 8010706:	183b      	adds	r3, r7, r0
 8010708:	185b      	adds	r3, r3, r1
 801070a:	2201      	movs	r2, #1
 801070c:	60da      	str	r2, [r3, #12]

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if(FLASH->SR != 0x00)
 801070e:	4b90      	ldr	r3, [pc, #576]	; (8010950 <BSP_GUI_SaveDataInFlash+0x288>)
 8010710:	691b      	ldr	r3, [r3, #16]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d003      	beq.n	801071e <BSP_GUI_SaveDataInFlash+0x56>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 8010716:	4b8e      	ldr	r3, [pc, #568]	; (8010950 <BSP_GUI_SaveDataInFlash+0x288>)
 8010718:	2280      	movs	r2, #128	; 0x80
 801071a:	0212      	lsls	r2, r2, #8
 801071c:	611a      	str	r2, [r3, #16]
  }
#endif
  status = (HAL_OK == HAL_FLASHEx_Erase(&erase_init, &page_error)) ? GUI_OK : GUI_ERASE_ERROR;
 801071e:	231c      	movs	r3, #28
 8010720:	18fa      	adds	r2, r7, r3
 8010722:	2308      	movs	r3, #8
 8010724:	2118      	movs	r1, #24
 8010726:	468c      	mov	ip, r1
 8010728:	44bc      	add	ip, r7
 801072a:	4463      	add	r3, ip
 801072c:	0011      	movs	r1, r2
 801072e:	0018      	movs	r0, r3
 8010730:	f7f7 ff0e 	bl	8008550 <HAL_FLASHEx_Erase>
 8010734:	0003      	movs	r3, r0
 8010736:	1e5a      	subs	r2, r3, #1
 8010738:	4193      	sbcs	r3, r2
 801073a:	b2da      	uxtb	r2, r3
 801073c:	2127      	movs	r1, #39	; 0x27
 801073e:	2018      	movs	r0, #24
 8010740:	183b      	adds	r3, r7, r0
 8010742:	185b      	adds	r3, r3, r1
 8010744:	701a      	strb	r2, [r3, #0]

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFF == page_error) && (GUI_OK == status))
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	3301      	adds	r3, #1
 801074a:	d000      	beq.n	801074e <BSP_GUI_SaveDataInFlash+0x86>
 801074c:	e0ef      	b.n	801092e <BSP_GUI_SaveDataInFlash+0x266>
 801074e:	183b      	adds	r3, r7, r0
 8010750:	185b      	adds	r3, r3, r1
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d000      	beq.n	801075a <BSP_GUI_SaveDataInFlash+0x92>
 8010758:	e0e9      	b.n	801092e <BSP_GUI_SaveDataInFlash+0x266>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
    status = (HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber)) ? GUI_OK : GUI_WRITE_ERROR;
 801075a:	4b7c      	ldr	r3, [pc, #496]	; (801094c <BSP_GUI_SaveDataInFlash+0x284>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	029a      	lsls	r2, r3, #10
 8010760:	23ff      	movs	r3, #255	; 0xff
 8010762:	029b      	lsls	r3, r3, #10
 8010764:	4013      	ands	r3, r2
 8010766:	0adb      	lsrs	r3, r3, #11
 8010768:	4a7a      	ldr	r2, [pc, #488]	; (8010954 <BSP_GUI_SaveDataInFlash+0x28c>)
 801076a:	4694      	mov	ip, r2
 801076c:	4463      	add	r3, ip
 801076e:	02d9      	lsls	r1, r3, #11
 8010770:	4b79      	ldr	r3, [pc, #484]	; (8010958 <BSP_GUI_SaveDataInFlash+0x290>)
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	2001      	movs	r0, #1
 8010778:	f7f7 fdee 	bl	8008358 <HAL_FLASH_Program>
 801077c:	1e03      	subs	r3, r0, #0
 801077e:	d101      	bne.n	8010784 <BSP_GUI_SaveDataInFlash+0xbc>
 8010780:	2200      	movs	r2, #0
 8010782:	e000      	b.n	8010786 <BSP_GUI_SaveDataInFlash+0xbe>
 8010784:	2202      	movs	r2, #2
 8010786:	2127      	movs	r1, #39	; 0x27
 8010788:	2018      	movs	r0, #24
 801078a:	183b      	adds	r3, r7, r0
 801078c:	185b      	adds	r3, r3, r1
 801078e:	701a      	strb	r2, [r3, #0]
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 8010790:	183b      	adds	r3, r7, r0
 8010792:	185b      	adds	r3, r3, r1
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d158      	bne.n	801084c <BSP_GUI_SaveDataInFlash+0x184>
    {
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 801079a:	2200      	movs	r2, #0
 801079c:	2300      	movs	r3, #0
 801079e:	633a      	str	r2, [r7, #48]	; 0x30
 80107a0:	637b      	str	r3, [r7, #52]	; 0x34
      value |= USBPD_NbPDO[0];
 80107a2:	4b6e      	ldr	r3, [pc, #440]	; (801095c <BSP_GUI_SaveDataInFlash+0x294>)
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	613b      	str	r3, [r7, #16]
 80107a8:	2300      	movs	r3, #0
 80107aa:	617b      	str	r3, [r7, #20]
 80107ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ae:	6939      	ldr	r1, [r7, #16]
 80107b0:	697a      	ldr	r2, [r7, #20]
 80107b2:	0008      	movs	r0, r1
 80107b4:	4303      	orrs	r3, r0
 80107b6:	633b      	str	r3, [r7, #48]	; 0x30
 80107b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ba:	4313      	orrs	r3, r2
 80107bc:	637b      	str	r3, [r7, #52]	; 0x34
      value |= (USBPD_NbPDO[1] << 8);
 80107be:	4b67      	ldr	r3, [pc, #412]	; (801095c <BSP_GUI_SaveDataInFlash+0x294>)
 80107c0:	785b      	ldrb	r3, [r3, #1]
 80107c2:	021b      	lsls	r3, r3, #8
 80107c4:	60bb      	str	r3, [r7, #8]
 80107c6:	17db      	asrs	r3, r3, #31
 80107c8:	60fb      	str	r3, [r7, #12]
 80107ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107cc:	68b9      	ldr	r1, [r7, #8]
 80107ce:	68fa      	ldr	r2, [r7, #12]
 80107d0:	0008      	movs	r0, r1
 80107d2:	4303      	orrs	r3, r0
 80107d4:	633b      	str	r3, [r7, #48]	; 0x30
 80107d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d8:	4313      	orrs	r3, r2
 80107da:	637b      	str	r3, [r7, #52]	; 0x34
      value |= (USBPD_NbPDO[2] << 16);
 80107dc:	4b5f      	ldr	r3, [pc, #380]	; (801095c <BSP_GUI_SaveDataInFlash+0x294>)
 80107de:	789b      	ldrb	r3, [r3, #2]
 80107e0:	041b      	lsls	r3, r3, #16
 80107e2:	603b      	str	r3, [r7, #0]
 80107e4:	17db      	asrs	r3, r3, #31
 80107e6:	607b      	str	r3, [r7, #4]
 80107e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	0008      	movs	r0, r1
 80107f0:	4303      	orrs	r3, r0
 80107f2:	633b      	str	r3, [r7, #48]	; 0x30
 80107f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f6:	4313      	orrs	r3, r2
 80107f8:	637b      	str	r3, [r7, #52]	; 0x34
      value |= (USBPD_NbPDO[3] << 24);
 80107fa:	4b58      	ldr	r3, [pc, #352]	; (801095c <BSP_GUI_SaveDataInFlash+0x294>)
 80107fc:	78db      	ldrb	r3, [r3, #3]
 80107fe:	061b      	lsls	r3, r3, #24
 8010800:	001c      	movs	r4, r3
 8010802:	17db      	asrs	r3, r3, #31
 8010804:	001d      	movs	r5, r3
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010808:	4323      	orrs	r3, r4
 801080a:	633b      	str	r3, [r7, #48]	; 0x30
 801080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080e:	432b      	orrs	r3, r5
 8010810:	637b      	str	r3, [r7, #52]	; 0x34
     status = (HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value)) ? GUI_OK : GUI_WRITE_ERROR;
 8010812:	4b4e      	ldr	r3, [pc, #312]	; (801094c <BSP_GUI_SaveDataInFlash+0x284>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	029a      	lsls	r2, r3, #10
 8010818:	23ff      	movs	r3, #255	; 0xff
 801081a:	029b      	lsls	r3, r3, #10
 801081c:	4013      	ands	r3, r2
 801081e:	0adb      	lsrs	r3, r3, #11
 8010820:	4a4c      	ldr	r2, [pc, #304]	; (8010954 <BSP_GUI_SaveDataInFlash+0x28c>)
 8010822:	4694      	mov	ip, r2
 8010824:	4463      	add	r3, ip
 8010826:	02db      	lsls	r3, r3, #11
 8010828:	3308      	adds	r3, #8
 801082a:	0019      	movs	r1, r3
 801082c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010830:	2001      	movs	r0, #1
 8010832:	f7f7 fd91 	bl	8008358 <HAL_FLASH_Program>
 8010836:	1e03      	subs	r3, r0, #0
 8010838:	d101      	bne.n	801083e <BSP_GUI_SaveDataInFlash+0x176>
 801083a:	2200      	movs	r2, #0
 801083c:	e000      	b.n	8010840 <BSP_GUI_SaveDataInFlash+0x178>
 801083e:	2202      	movs	r2, #2
 8010840:	2327      	movs	r3, #39	; 0x27
 8010842:	2118      	movs	r1, #24
 8010844:	468c      	mov	ip, r1
 8010846:	44bc      	add	ip, r7
 8010848:	4463      	add	r3, ip
 801084a:	701a      	strb	r2, [r3, #0]
    }
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
    /* Save PORT0_PDO_ListSNK */
    if (GUI_OK == status)
 801084c:	2127      	movs	r1, #39	; 0x27
 801084e:	2018      	movs	r0, #24
 8010850:	183b      	adds	r3, r7, r0
 8010852:	185b      	adds	r3, r3, r1
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d114      	bne.n	8010884 <BSP_GUI_SaveDataInFlash+0x1bc>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 801085a:	4b3c      	ldr	r3, [pc, #240]	; (801094c <BSP_GUI_SaveDataInFlash+0x284>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	029a      	lsls	r2, r3, #10
 8010860:	23ff      	movs	r3, #255	; 0xff
 8010862:	029b      	lsls	r3, r3, #10
 8010864:	4013      	ands	r3, r2
 8010866:	0adb      	lsrs	r3, r3, #11
 8010868:	4a3a      	ldr	r2, [pc, #232]	; (8010954 <BSP_GUI_SaveDataInFlash+0x28c>)
 801086a:	4694      	mov	ip, r2
 801086c:	4463      	add	r3, ip
 801086e:	02db      	lsls	r3, r3, #11
 8010870:	3330      	adds	r3, #48	; 0x30
 8010872:	183a      	adds	r2, r7, r0
 8010874:	1854      	adds	r4, r2, r1
 8010876:	4a3a      	ldr	r2, [pc, #232]	; (8010960 <BSP_GUI_SaveDataInFlash+0x298>)
 8010878:	0011      	movs	r1, r2
 801087a:	0018      	movs	r0, r3
 801087c:	f000 f878 	bl	8010970 <SavePDOInFlash>
 8010880:	0003      	movs	r3, r0
 8010882:	7023      	strb	r3, [r4, #0]
        }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8010884:	2127      	movs	r1, #39	; 0x27
 8010886:	2018      	movs	r0, #24
 8010888:	183b      	adds	r3, r7, r0
 801088a:	185b      	adds	r3, r3, r1
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d114      	bne.n	80108bc <BSP_GUI_SaveDataInFlash+0x1f4>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t*)DPM_Settings, sizeof(USBPD_SettingsTypeDef) * USBPD_PORT_COUNT);
 8010892:	4b2e      	ldr	r3, [pc, #184]	; (801094c <BSP_GUI_SaveDataInFlash+0x284>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	029a      	lsls	r2, r3, #10
 8010898:	23ff      	movs	r3, #255	; 0xff
 801089a:	029b      	lsls	r3, r3, #10
 801089c:	4013      	ands	r3, r2
 801089e:	0adb      	lsrs	r3, r3, #11
 80108a0:	4a2c      	ldr	r2, [pc, #176]	; (8010954 <BSP_GUI_SaveDataInFlash+0x28c>)
 80108a2:	4694      	mov	ip, r2
 80108a4:	4463      	add	r3, ip
 80108a6:	02db      	lsls	r3, r3, #11
 80108a8:	3390      	adds	r3, #144	; 0x90
 80108aa:	183a      	adds	r2, r7, r0
 80108ac:	1854      	adds	r4, r2, r1
 80108ae:	492d      	ldr	r1, [pc, #180]	; (8010964 <BSP_GUI_SaveDataInFlash+0x29c>)
 80108b0:	220c      	movs	r2, #12
 80108b2:	0018      	movs	r0, r3
 80108b4:	f000 f8d7 	bl	8010a66 <SaveSettingsInFlash>
 80108b8:	0003      	movs	r3, r0
 80108ba:	7023      	strb	r3, [r4, #0]
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 80108bc:	2127      	movs	r1, #39	; 0x27
 80108be:	2018      	movs	r0, #24
 80108c0:	183b      	adds	r3, r7, r0
 80108c2:	185b      	adds	r3, r3, r1
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d115      	bne.n	80108f6 <BSP_GUI_SaveDataInFlash+0x22e>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t*)DPM_ID_Settings, sizeof(USBPD_IdSettingsTypeDef));
 80108ca:	4b20      	ldr	r3, [pc, #128]	; (801094c <BSP_GUI_SaveDataInFlash+0x284>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	029a      	lsls	r2, r3, #10
 80108d0:	23ff      	movs	r3, #255	; 0xff
 80108d2:	029b      	lsls	r3, r3, #10
 80108d4:	4013      	ands	r3, r2
 80108d6:	0adb      	lsrs	r3, r3, #11
 80108d8:	4a1e      	ldr	r2, [pc, #120]	; (8010954 <BSP_GUI_SaveDataInFlash+0x28c>)
 80108da:	4694      	mov	ip, r2
 80108dc:	4463      	add	r3, ip
 80108de:	02db      	lsls	r3, r3, #11
 80108e0:	331d      	adds	r3, #29
 80108e2:	33ff      	adds	r3, #255	; 0xff
 80108e4:	183a      	adds	r2, r7, r0
 80108e6:	1854      	adds	r4, r2, r1
 80108e8:	491f      	ldr	r1, [pc, #124]	; (8010968 <BSP_GUI_SaveDataInFlash+0x2a0>)
 80108ea:	2208      	movs	r2, #8
 80108ec:	0018      	movs	r0, r3
 80108ee:	f000 f8ba 	bl	8010a66 <SaveSettingsInFlash>
 80108f2:	0003      	movs	r3, r0
 80108f4:	7023      	strb	r3, [r4, #0]
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 80108f6:	2127      	movs	r1, #39	; 0x27
 80108f8:	2018      	movs	r0, #24
 80108fa:	183b      	adds	r3, r7, r0
 80108fc:	185b      	adds	r3, r3, r1
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d114      	bne.n	801092e <BSP_GUI_SaveDataInFlash+0x266>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t*)DPM_USER_Settings, sizeof(USBPD_USER_SettingsTypeDef) * USBPD_PORT_COUNT);
 8010904:	4b11      	ldr	r3, [pc, #68]	; (801094c <BSP_GUI_SaveDataInFlash+0x284>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	029a      	lsls	r2, r3, #10
 801090a:	23ff      	movs	r3, #255	; 0xff
 801090c:	029b      	lsls	r3, r3, #10
 801090e:	4013      	ands	r3, r2
 8010910:	0adb      	lsrs	r3, r3, #11
 8010912:	4a10      	ldr	r2, [pc, #64]	; (8010954 <BSP_GUI_SaveDataInFlash+0x28c>)
 8010914:	4694      	mov	ip, r2
 8010916:	4463      	add	r3, ip
 8010918:	02db      	lsls	r3, r3, #11
 801091a:	339c      	adds	r3, #156	; 0x9c
 801091c:	183a      	adds	r2, r7, r0
 801091e:	1854      	adds	r4, r2, r1
 8010920:	4912      	ldr	r1, [pc, #72]	; (801096c <BSP_GUI_SaveDataInFlash+0x2a4>)
 8010922:	2274      	movs	r2, #116	; 0x74
 8010924:	0018      	movs	r0, r3
 8010926:	f000 f89e 	bl	8010a66 <SaveSettingsInFlash>
 801092a:	0003      	movs	r3, r0
 801092c:	7023      	strb	r3, [r4, #0]
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  HAL_FLASH_Lock();
 801092e:	f7f7 fd85 	bl	800843c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8010932:	b662      	cpsie	i
}
 8010934:	46c0      	nop			; (mov r8, r8)

  /* Enable interrupts */
  __enable_irq();

  return status;
 8010936:	2327      	movs	r3, #39	; 0x27
 8010938:	2218      	movs	r2, #24
 801093a:	4694      	mov	ip, r2
 801093c:	44bc      	add	ip, r7
 801093e:	4463      	add	r3, ip
 8010940:	781b      	ldrb	r3, [r3, #0]
}
 8010942:	0018      	movs	r0, r3
 8010944:	46bd      	mov	sp, r7
 8010946:	b010      	add	sp, #64	; 0x40
 8010948:	bdb0      	pop	{r4, r5, r7, pc}
 801094a:	46c0      	nop			; (mov r8, r8)
 801094c:	1fff75e0 	.word	0x1fff75e0
 8010950:	40022000 	.word	0x40022000
 8010954:	0000ffff 	.word	0x0000ffff
 8010958:	200000c0 	.word	0x200000c0
 801095c:	2000009c 	.word	0x2000009c
 8010960:	200000a0 	.word	0x200000a0
 8010964:	20000014 	.word	0x20000014
 8010968:	20000020 	.word	0x20000020
 801096c:	20000028 	.word	0x20000028

08010970 <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8010970:	b5b0      	push	{r4, r5, r7, lr}
 8010972:	b08e      	sub	sp, #56	; 0x38
 8010974:	af00      	add	r7, sp, #0
 8010976:	6178      	str	r0, [r7, #20]
 8010978:	6139      	str	r1, [r7, #16]
  uint64_t data_in_64;
  uint32_t index, index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 801097a:	231f      	movs	r3, #31
 801097c:	2210      	movs	r2, #16
 801097e:	4694      	mov	ip, r2
 8010980:	44bc      	add	ip, r7
 8010982:	4463      	add	r3, ip
 8010984:	2200      	movs	r2, #0
 8010986:	701a      	strb	r2, [r3, #0]

  for (index = 0, index_flash = 0; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index++, index_flash++)
 8010988:	2300      	movs	r3, #0
 801098a:	637b      	str	r3, [r7, #52]	; 0x34
 801098c:	2300      	movs	r3, #0
 801098e:	633b      	str	r3, [r7, #48]	; 0x30
 8010990:	e054      	b.n	8010a3c <SavePDOInFlash+0xcc>
  {
    value[0] = pListOfPDO[index];
 8010992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	18d3      	adds	r3, r2, r3
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	2108      	movs	r1, #8
 801099e:	2010      	movs	r0, #16
 80109a0:	183b      	adds	r3, r7, r0
 80109a2:	185b      	adds	r3, r3, r1
 80109a4:	601a      	str	r2, [r3, #0]
    index++;
 80109a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a8:	3301      	adds	r3, #1
 80109aa:	637b      	str	r3, [r7, #52]	; 0x34
    if (index < USBPD_MAX_NB_PDO)
 80109ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ae:	2b06      	cmp	r3, #6
 80109b0:	d808      	bhi.n	80109c4 <SavePDOInFlash+0x54>
    {
      value[1] = pListOfPDO[index];
 80109b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	693a      	ldr	r2, [r7, #16]
 80109b8:	18d3      	adds	r3, r2, r3
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	183b      	adds	r3, r7, r0
 80109be:	185b      	adds	r3, r3, r1
 80109c0:	605a      	str	r2, [r3, #4]
 80109c2:	e007      	b.n	80109d4 <SavePDOInFlash+0x64>
    }
    else
    {
      value[1] = (0xFFFFFFFF);
 80109c4:	2308      	movs	r3, #8
 80109c6:	2210      	movs	r2, #16
 80109c8:	4694      	mov	ip, r2
 80109ca:	44bc      	add	ip, r7
 80109cc:	4463      	add	r3, ip
 80109ce:	2201      	movs	r2, #1
 80109d0:	4252      	negs	r2, r2
 80109d2:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | (uint64_t)value[1] << 32;
 80109d4:	2208      	movs	r2, #8
 80109d6:	2110      	movs	r1, #16
 80109d8:	187b      	adds	r3, r7, r1
 80109da:	189b      	adds	r3, r3, r2
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	60bb      	str	r3, [r7, #8]
 80109e0:	2300      	movs	r3, #0
 80109e2:	60fb      	str	r3, [r7, #12]
 80109e4:	187b      	adds	r3, r7, r1
 80109e6:	189b      	adds	r3, r3, r2
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	603b      	str	r3, [r7, #0]
 80109ec:	2300      	movs	r3, #0
 80109ee:	607b      	str	r3, [r7, #4]
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	001d      	movs	r5, r3
 80109f4:	2300      	movs	r3, #0
 80109f6:	001c      	movs	r4, r3
 80109f8:	68b9      	ldr	r1, [r7, #8]
 80109fa:	68fa      	ldr	r2, [r7, #12]
 80109fc:	000b      	movs	r3, r1
 80109fe:	4323      	orrs	r3, r4
 8010a00:	623b      	str	r3, [r7, #32]
 8010a02:	0013      	movs	r3, r2
 8010a04:	432b      	orrs	r3, r5
 8010a06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Save in the FLASH */
    status = HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8 * index_flash)) , data_in_64) ? GUI_OK : GUI_WRITE_ERROR;
 8010a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0a:	00da      	lsls	r2, r3, #3
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	18d1      	adds	r1, r2, r3
 8010a10:	6a3a      	ldr	r2, [r7, #32]
 8010a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a14:	2001      	movs	r0, #1
 8010a16:	f7f7 fc9f 	bl	8008358 <HAL_FLASH_Program>
 8010a1a:	1e03      	subs	r3, r0, #0
 8010a1c:	d101      	bne.n	8010a22 <SavePDOInFlash+0xb2>
 8010a1e:	2200      	movs	r2, #0
 8010a20:	e000      	b.n	8010a24 <SavePDOInFlash+0xb4>
 8010a22:	2202      	movs	r2, #2
 8010a24:	231f      	movs	r3, #31
 8010a26:	2110      	movs	r1, #16
 8010a28:	468c      	mov	ip, r1
 8010a2a:	44bc      	add	ip, r7
 8010a2c:	4463      	add	r3, ip
 8010a2e:	701a      	strb	r2, [r3, #0]
  for (index = 0, index_flash = 0; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index++, index_flash++)
 8010a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a32:	3301      	adds	r3, #1
 8010a34:	637b      	str	r3, [r7, #52]	; 0x34
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	3301      	adds	r3, #1
 8010a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8010a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3e:	2b06      	cmp	r3, #6
 8010a40:	d807      	bhi.n	8010a52 <SavePDOInFlash+0xe2>
 8010a42:	231f      	movs	r3, #31
 8010a44:	2210      	movs	r2, #16
 8010a46:	4694      	mov	ip, r2
 8010a48:	44bc      	add	ip, r7
 8010a4a:	4463      	add	r3, ip
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d09f      	beq.n	8010992 <SavePDOInFlash+0x22>
  }
  return status;
 8010a52:	231f      	movs	r3, #31
 8010a54:	2210      	movs	r2, #16
 8010a56:	4694      	mov	ip, r2
 8010a58:	44bc      	add	ip, r7
 8010a5a:	4463      	add	r3, ip
 8010a5c:	781b      	ldrb	r3, [r3, #0]
}
 8010a5e:	0018      	movs	r0, r3
 8010a60:	46bd      	mov	sp, r7
 8010a62:	b00e      	add	sp, #56	; 0x38
 8010a64:	bdb0      	pop	{r4, r5, r7, pc}

08010a66 <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8010a66:	b5b0      	push	{r4, r5, r7, lr}
 8010a68:	b092      	sub	sp, #72	; 0x48
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	61f8      	str	r0, [r7, #28]
 8010a6e:	61b9      	str	r1, [r7, #24]
 8010a70:	617a      	str	r2, [r7, #20]
  uint64_t data_in_64;
  uint32_t index, index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 8010a72:	232f      	movs	r3, #47	; 0x2f
 8010a74:	2210      	movs	r2, #16
 8010a76:	4694      	mov	ip, r2
 8010a78:	44bc      	add	ip, r7
 8010a7a:	4463      	add	r3, ip
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	701a      	strb	r2, [r3, #0]

  uint32_t nb_double = ((Size * USBPD_PORT_COUNT) / 4);
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	089b      	lsrs	r3, r3, #2
 8010a84:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t remaining = ((Size * USBPD_PORT_COUNT) % 4);
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	2327      	movs	r3, #39	; 0x27
 8010a8c:	2110      	movs	r1, #16
 8010a8e:	468c      	mov	ip, r1
 8010a90:	44bc      	add	ip, r7
 8010a92:	4463      	add	r3, ip
 8010a94:	2103      	movs	r1, #3
 8010a96:	400a      	ands	r2, r1
 8010a98:	701a      	strb	r2, [r3, #0]

  /* Save Settings in the FLASH */
  for (index = 0, index_flash = 0; ((index < nb_double) && (GUI_OK == status)); index++, index_flash++)
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8010aa2:	e05f      	b.n	8010b64 <SaveSettingsInFlash+0xfe>
  {
    value[0] = pSettings[index];
 8010aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aa6:	009b      	lsls	r3, r3, #2
 8010aa8:	69ba      	ldr	r2, [r7, #24]
 8010aaa:	18d3      	adds	r3, r2, r3
 8010aac:	681a      	ldr	r2, [r3, #0]
 8010aae:	2110      	movs	r1, #16
 8010ab0:	2010      	movs	r0, #16
 8010ab2:	183b      	adds	r3, r7, r0
 8010ab4:	185b      	adds	r3, r3, r1
 8010ab6:	601a      	str	r2, [r3, #0]
    index++;
 8010ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aba:	3301      	adds	r3, #1
 8010abc:	647b      	str	r3, [r7, #68]	; 0x44
    if (index < nb_double)
 8010abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d208      	bcs.n	8010ad8 <SaveSettingsInFlash+0x72>
    {
      value[1] = pSettings[index];
 8010ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	69ba      	ldr	r2, [r7, #24]
 8010acc:	18d3      	adds	r3, r2, r3
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	183b      	adds	r3, r7, r0
 8010ad2:	185b      	adds	r3, r3, r1
 8010ad4:	605a      	str	r2, [r3, #4]
 8010ad6:	e011      	b.n	8010afc <SaveSettingsInFlash+0x96>
    }
    else
    {
      if (0 == remaining)
 8010ad8:	2327      	movs	r3, #39	; 0x27
 8010ada:	2210      	movs	r2, #16
 8010adc:	4694      	mov	ip, r2
 8010ade:	44bc      	add	ip, r7
 8010ae0:	4463      	add	r3, ip
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d108      	bne.n	8010afa <SaveSettingsInFlash+0x94>
        value[1] = (0xFFFFFFFF);
 8010ae8:	2310      	movs	r3, #16
 8010aea:	2210      	movs	r2, #16
 8010aec:	4694      	mov	ip, r2
 8010aee:	44bc      	add	ip, r7
 8010af0:	4463      	add	r3, ip
 8010af2:	2201      	movs	r2, #1
 8010af4:	4252      	negs	r2, r2
 8010af6:	605a      	str	r2, [r3, #4]
 8010af8:	e000      	b.n	8010afc <SaveSettingsInFlash+0x96>
      else
        while(1);
 8010afa:	e7fe      	b.n	8010afa <SaveSettingsInFlash+0x94>
    }

    data_in_64 = value[0] | (uint64_t)value[1] << 32;
 8010afc:	2210      	movs	r2, #16
 8010afe:	2110      	movs	r1, #16
 8010b00:	187b      	adds	r3, r7, r1
 8010b02:	189b      	adds	r3, r3, r2
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	60bb      	str	r3, [r7, #8]
 8010b08:	2300      	movs	r3, #0
 8010b0a:	60fb      	str	r3, [r7, #12]
 8010b0c:	187b      	adds	r3, r7, r1
 8010b0e:	189b      	adds	r3, r3, r2
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	603b      	str	r3, [r7, #0]
 8010b14:	2300      	movs	r3, #0
 8010b16:	607b      	str	r3, [r7, #4]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	001d      	movs	r5, r3
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	001c      	movs	r4, r3
 8010b20:	68b9      	ldr	r1, [r7, #8]
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	000b      	movs	r3, r1
 8010b26:	4323      	orrs	r3, r4
 8010b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b2a:	0013      	movs	r3, r2
 8010b2c:	432b      	orrs	r3, r5
 8010b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save in the FLASH */
    status = HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8 * index_flash)) , data_in_64)? GUI_OK : GUI_WRITE_ERROR;
 8010b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b32:	00da      	lsls	r2, r3, #3
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	18d1      	adds	r1, r2, r3
 8010b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3c:	2001      	movs	r0, #1
 8010b3e:	f7f7 fc0b 	bl	8008358 <HAL_FLASH_Program>
 8010b42:	1e03      	subs	r3, r0, #0
 8010b44:	d101      	bne.n	8010b4a <SaveSettingsInFlash+0xe4>
 8010b46:	2200      	movs	r2, #0
 8010b48:	e000      	b.n	8010b4c <SaveSettingsInFlash+0xe6>
 8010b4a:	2202      	movs	r2, #2
 8010b4c:	232f      	movs	r3, #47	; 0x2f
 8010b4e:	2110      	movs	r1, #16
 8010b50:	468c      	mov	ip, r1
 8010b52:	44bc      	add	ip, r7
 8010b54:	4463      	add	r3, ip
 8010b56:	701a      	strb	r2, [r3, #0]
  for (index = 0, index_flash = 0; ((index < nb_double) && (GUI_OK == status)); index++, index_flash++)
 8010b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8010b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b60:	3301      	adds	r3, #1
 8010b62:	643b      	str	r3, [r7, #64]	; 0x40
 8010b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d207      	bcs.n	8010b7c <SaveSettingsInFlash+0x116>
 8010b6c:	232f      	movs	r3, #47	; 0x2f
 8010b6e:	2210      	movs	r2, #16
 8010b70:	4694      	mov	ip, r2
 8010b72:	44bc      	add	ip, r7
 8010b74:	4463      	add	r3, ip
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d093      	beq.n	8010aa4 <SaveSettingsInFlash+0x3e>
  }
  return status;
 8010b7c:	232f      	movs	r3, #47	; 0x2f
 8010b7e:	2210      	movs	r2, #16
 8010b80:	4694      	mov	ip, r2
 8010b82:	44bc      	add	ip, r7
 8010b84:	4463      	add	r3, ip
 8010b86:	781b      	ldrb	r3, [r3, #0]
}
 8010b88:	0018      	movs	r0, r3
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	b012      	add	sp, #72	; 0x48
 8010b8e:	bdb0      	pop	{r4, r5, r7, pc}

08010b90 <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8010b9e:	230f      	movs	r3, #15
 8010ba0:	18fb      	adds	r3, r7, r3
 8010ba2:	2203      	movs	r2, #3
 8010ba4:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0; _index < USBPD_MAX_NB_PDO; _index++)
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	613b      	str	r3, [r7, #16]
 8010baa:	e00c      	b.n	8010bc6 <LoadPDOFromFlash+0x36>
    {
      pListOfPDO[_index] = *((uint32_t*)_addr);
 8010bac:	697a      	ldr	r2, [r7, #20]
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	18cb      	adds	r3, r1, r3
 8010bb6:	6812      	ldr	r2, [r2, #0]
 8010bb8:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4u;
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	617b      	str	r3, [r7, #20]
    for (_index = 0; _index < USBPD_MAX_NB_PDO; _index++)
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	613b      	str	r3, [r7, #16]
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	2b06      	cmp	r3, #6
 8010bca:	d9ef      	bls.n	8010bac <LoadPDOFromFlash+0x1c>
    }
    _status = GUI_OK;
 8010bcc:	210f      	movs	r1, #15
 8010bce:	187b      	adds	r3, r7, r1
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 8010bd4:	187b      	adds	r3, r7, r1
 8010bd6:	781b      	ldrb	r3, [r3, #0]
}
 8010bd8:	0018      	movs	r0, r3
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	b006      	add	sp, #24
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8010be0:	b590      	push	{r4, r7, lr}
 8010be2:	b087      	sub	sp, #28
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8010bf0:	2413      	movs	r4, #19
 8010bf2:	193b      	adds	r3, r7, r4
 8010bf4:	2203      	movs	r2, #3
 8010bf6:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    memcpy(pSettings, ((uint32_t*)_addr), Size);
 8010bf8:	6979      	ldr	r1, [r7, #20]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	0018      	movs	r0, r3
 8010c00:	f004 faf4 	bl	80151ec <memcpy>
    _status = GUI_OK;
 8010c04:	193b      	adds	r3, r7, r4
 8010c06:	2200      	movs	r2, #0
 8010c08:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 8010c0a:	193b      	adds	r3, r7, r4
 8010c0c:	781b      	ldrb	r3, [r3, #0]
}
 8010c0e:	0018      	movs	r0, r3
 8010c10:	46bd      	mov	sp, r7
 8010c12:	b007      	add	sp, #28
 8010c14:	bd90      	pop	{r4, r7, pc}

08010c16 <TLV_init_encode>:
  * @param    SizeMax      The maximal size of the instruction. Will be used to protect writing against overflow.
  * @param    Ptr          A pointer to the value. This function does not allocate memory, it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 8010c16:	b580      	push	{r7, lr}
 8010c18:	b084      	sub	sp, #16
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	60f8      	str	r0, [r7, #12]
 8010c1e:	0008      	movs	r0, r1
 8010c20:	0011      	movs	r1, r2
 8010c22:	607b      	str	r3, [r7, #4]
 8010c24:	230b      	movs	r3, #11
 8010c26:	18fb      	adds	r3, r7, r3
 8010c28:	1c02      	adds	r2, r0, #0
 8010c2a:	701a      	strb	r2, [r3, #0]
 8010c2c:	2308      	movs	r3, #8
 8010c2e:	18fb      	adds	r3, r7, r3
 8010c30:	1c0a      	adds	r2, r1, #0
 8010c32:	801a      	strh	r2, [r3, #0]
  if(Ptr == NULL) return 0xFF;                  /* Buffer is NULL*/
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <TLV_init_encode+0x28>
 8010c3a:	23ff      	movs	r3, #255	; 0xff
 8010c3c:	e04a      	b.n	8010cd4 <TLV_init_encode+0xbe>
  if(SizeMax < 11) return 0xFF;                 /* Because of his small max size, the buffer can't even receive one empty TLV*/
 8010c3e:	2308      	movs	r3, #8
 8010c40:	18fb      	adds	r3, r7, r3
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	2b0a      	cmp	r3, #10
 8010c46:	d801      	bhi.n	8010c4c <TLV_init_encode+0x36>
 8010c48:	23ff      	movs	r3, #255	; 0xff
 8010c4a:	e043      	b.n	8010cd4 <TLV_init_encode+0xbe>
  
  ToSendTLV->data = Ptr;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2208      	movs	r2, #8
 8010c56:	18ba      	adds	r2, r7, r2
 8010c58:	8812      	ldrh	r2, [r2, #0]
 8010c5a:	809a      	strh	r2, [r3, #4]
   
  ToSendTLV->data[0]
    = ToSendTLV->data[1]
      = ToSendTLV->data[2]
        = ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	3303      	adds	r3, #3
 8010c62:	22fd      	movs	r2, #253	; 0xfd
 8010c64:	701a      	strb	r2, [r3, #0]
      = ToSendTLV->data[2]
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	6812      	ldr	r2, [r2, #0]
 8010c6a:	3202      	adds	r2, #2
        = ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	7013      	strb	r3, [r2, #0]
    = ToSendTLV->data[1]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	3301      	adds	r3, #1
      = ToSendTLV->data[2]
 8010c76:	7812      	ldrb	r2, [r2, #0]
 8010c78:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[0]
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	6812      	ldr	r2, [r2, #0]
    = ToSendTLV->data[1]
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	7013      	strb	r3, [r2, #0]
  
  ToSendTLV->data[4] = Tag;                      /* Tag*/
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	3304      	adds	r3, #4
 8010c88:	220b      	movs	r2, #11
 8010c8a:	18ba      	adds	r2, r7, r2
 8010c8c:	7812      	ldrb	r2, [r2, #0]
 8010c8e:	701a      	strb	r2, [r3, #0]
  
  ToSendTLV->data[5]
    = ToSendTLV->data[6] = 0;                    /* Size*/
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	3306      	adds	r3, #6
 8010c96:	2200      	movs	r2, #0
 8010c98:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[5]
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	6812      	ldr	r2, [r2, #0]
 8010c9e:	3205      	adds	r2, #5
    = ToSendTLV->data[6] = 0;                    /* Size*/
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	7013      	strb	r3, [r2, #0]
  
  ToSendTLV->data[7]
    = ToSendTLV->data[8]
      = ToSendTLV->data[9]
        = ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	330a      	adds	r3, #10
 8010caa:	22a5      	movs	r2, #165	; 0xa5
 8010cac:	701a      	strb	r2, [r3, #0]
      = ToSendTLV->data[9]
 8010cae:	68fa      	ldr	r2, [r7, #12]
 8010cb0:	6812      	ldr	r2, [r2, #0]
 8010cb2:	3209      	adds	r2, #9
        = ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	7013      	strb	r3, [r2, #0]
    = ToSendTLV->data[8]
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	3308      	adds	r3, #8
      = ToSendTLV->data[9]
 8010cbe:	7812      	ldrb	r2, [r2, #0]
 8010cc0:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[7]
 8010cc2:	68fa      	ldr	r2, [r7, #12]
 8010cc4:	6812      	ldr	r2, [r2, #0]
 8010cc6:	3207      	adds	r2, #7
    = ToSendTLV->data[8]
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	7013      	strb	r3, [r2, #0]
  
  ToSendTLV->EOFposition = 7;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2207      	movs	r2, #7
 8010cd0:	80da      	strh	r2, [r3, #6]
  
  return 0;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	0018      	movs	r0, r3
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	b004      	add	sp, #16
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b086      	sub	sp, #24
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	0008      	movs	r0, r1
 8010ce6:	0011      	movs	r1, r2
 8010ce8:	607b      	str	r3, [r7, #4]
 8010cea:	230b      	movs	r3, #11
 8010cec:	18fb      	adds	r3, r7, r3
 8010cee:	1c02      	adds	r2, r0, #0
 8010cf0:	701a      	strb	r2, [r3, #0]
 8010cf2:	2308      	movs	r3, #8
 8010cf4:	18fb      	adds	r3, r7, r3
 8010cf6:	1c0a      	adds	r2, r1, #0
 8010cf8:	801a      	strh	r2, [r3, #0]
  if(ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)                return 0xFFFF;       /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	68fa      	ldr	r2, [r7, #12]
 8010d00:	88d2      	ldrh	r2, [r2, #6]
 8010d02:	189b      	adds	r3, r3, r2
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	2ba5      	cmp	r3, #165	; 0xa5
 8010d08:	d001      	beq.n	8010d0e <TLV_add+0x32>
 8010d0a:	4b5a      	ldr	r3, [pc, #360]	; (8010e74 <TLV_add+0x198>)
 8010d0c:	e0ad      	b.n	8010e6a <TLV_add+0x18e>
  if((ToSendTLV->EOFposition + 4 + 3 + Size) > ToSendTLV->maxSize)      return 0xFFFF;       /* Can't add this TLV, because it will overflow the provided buffer.*/
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	88db      	ldrh	r3, [r3, #6]
 8010d12:	1dda      	adds	r2, r3, #7
 8010d14:	2308      	movs	r3, #8
 8010d16:	18fb      	adds	r3, r7, r3
 8010d18:	881b      	ldrh	r3, [r3, #0]
 8010d1a:	18d3      	adds	r3, r2, r3
 8010d1c:	68fa      	ldr	r2, [r7, #12]
 8010d1e:	8892      	ldrh	r2, [r2, #4]
 8010d20:	4293      	cmp	r3, r2
 8010d22:	dd01      	ble.n	8010d28 <TLV_add+0x4c>
 8010d24:	4b53      	ldr	r3, [pc, #332]	; (8010e74 <TLV_add+0x198>)
 8010d26:	e0a0      	b.n	8010e6a <TLV_add+0x18e>
  if(ToSendTLV->data == NULL)                                          return 0xFFFF;        /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d101      	bne.n	8010d34 <TLV_add+0x58>
 8010d30:	4b50      	ldr	r3, [pc, #320]	; (8010e74 <TLV_add+0x198>)
 8010d32:	e09a      	b.n	8010e6a <TLV_add+0x18e>
  if(ToSendTLV->EOFposition == 0xFFFF)                                 return 0xFFFF;        /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	88db      	ldrh	r3, [r3, #6]
 8010d38:	4a4e      	ldr	r2, [pc, #312]	; (8010e74 <TLV_add+0x198>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d101      	bne.n	8010d42 <TLV_add+0x66>
 8010d3e:	4b4d      	ldr	r3, [pc, #308]	; (8010e74 <TLV_add+0x198>)
 8010d40:	e093      	b.n	8010e6a <TLV_add+0x18e>
  
  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	88d2      	ldrh	r2, [r2, #6]
 8010d4a:	189b      	adds	r3, r3, r2
 8010d4c:	220b      	movs	r2, #11
 8010d4e:	18ba      	adds	r2, r7, r2
 8010d50:	7812      	ldrb	r2, [r2, #0]
 8010d52:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	88db      	ldrh	r3, [r3, #6]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	88da      	ldrh	r2, [r3, #6]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	811a      	strh	r2, [r3, #8]
  
  ToSendTLV->data[ToSendTLV->EOFposition]   = (Size >> 8) & 0x00FF;        /* Size*/
 8010d68:	2008      	movs	r0, #8
 8010d6a:	183b      	adds	r3, r7, r0
 8010d6c:	881b      	ldrh	r3, [r3, #0]
 8010d6e:	0a1b      	lsrs	r3, r3, #8
 8010d70:	b299      	uxth	r1, r3
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	88d2      	ldrh	r2, [r2, #6]
 8010d7a:	189b      	adds	r3, r3, r2
 8010d7c:	b2ca      	uxtb	r2, r1
 8010d7e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition+1] = (Size     ) & 0x00FF;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	88db      	ldrh	r3, [r3, #6]
 8010d88:	3301      	adds	r3, #1
 8010d8a:	18d3      	adds	r3, r2, r3
 8010d8c:	183a      	adds	r2, r7, r0
 8010d8e:	8812      	ldrh	r2, [r2, #0]
 8010d90:	b2d2      	uxtb	r2, r2
 8010d92:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	88db      	ldrh	r3, [r3, #6]
 8010d98:	3302      	adds	r3, #2
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	80da      	strh	r2, [r3, #6]
  
  for(uint32_t index = 0; index < Size; index++)                                          /* Value*/
 8010da0:	2300      	movs	r3, #0
 8010da2:	617b      	str	r3, [r7, #20]
 8010da4:	e012      	b.n	8010dcc <TLV_add+0xf0>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	18d2      	adds	r2, r2, r3
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	68f9      	ldr	r1, [r7, #12]
 8010db2:	88c9      	ldrh	r1, [r1, #6]
 8010db4:	185b      	adds	r3, r3, r1
 8010db6:	7812      	ldrb	r2, [r2, #0]
 8010db8:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	88db      	ldrh	r3, [r3, #6]
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	80da      	strh	r2, [r3, #6]
  for(uint32_t index = 0; index < Size; index++)                                          /* Value*/
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	617b      	str	r3, [r7, #20]
 8010dcc:	2008      	movs	r0, #8
 8010dce:	183b      	adds	r3, r7, r0
 8010dd0:	881b      	ldrh	r3, [r3, #0]
 8010dd2:	697a      	ldr	r2, [r7, #20]
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d3e6      	bcc.n	8010da6 <TLV_add+0xca>
  }
  
  ToSendTLV->data[ToSendTLV->EOFposition]
    = ToSendTLV->data[ToSendTLV->EOFposition+1]
      = ToSendTLV->data[ToSendTLV->EOFposition+2]
        = ToSendTLV->data[ToSendTLV->EOFposition+3] = TLV_EOF;             /* EOF*/
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	88db      	ldrh	r3, [r3, #6]
 8010de0:	3303      	adds	r3, #3
 8010de2:	18d3      	adds	r3, r2, r3
 8010de4:	22a5      	movs	r2, #165	; 0xa5
 8010de6:	701a      	strb	r2, [r3, #0]
      = ToSendTLV->data[ToSendTLV->EOFposition+2]
 8010de8:	68fa      	ldr	r2, [r7, #12]
 8010dea:	6811      	ldr	r1, [r2, #0]
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	88d2      	ldrh	r2, [r2, #6]
 8010df0:	3202      	adds	r2, #2
 8010df2:	188a      	adds	r2, r1, r2
        = ToSendTLV->data[ToSendTLV->EOFposition+3] = TLV_EOF;             /* EOF*/
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	7013      	strb	r3, [r2, #0]
    = ToSendTLV->data[ToSendTLV->EOFposition+1]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6819      	ldr	r1, [r3, #0]
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	88db      	ldrh	r3, [r3, #6]
 8010e00:	3301      	adds	r3, #1
 8010e02:	18cb      	adds	r3, r1, r3
      = ToSendTLV->data[ToSendTLV->EOFposition+2]
 8010e04:	7812      	ldrb	r2, [r2, #0]
 8010e06:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition]
 8010e08:	68fa      	ldr	r2, [r7, #12]
 8010e0a:	6812      	ldr	r2, [r2, #0]
 8010e0c:	68f9      	ldr	r1, [r7, #12]
 8010e0e:	88c9      	ldrh	r1, [r1, #6]
 8010e10:	1852      	adds	r2, r2, r1
    = ToSendTLV->data[ToSendTLV->EOFposition+1]
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	7013      	strb	r3, [r2, #0]
  
  uint16_t total_lgth = (ToSendTLV->data[5] << 8) + ToSendTLV->data[6] + 3 + Size; /* Update of the top level Size marker*/
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	3305      	adds	r3, #5
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	021b      	lsls	r3, r3, #8
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	3306      	adds	r3, #6
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	18d3      	adds	r3, r2, r3
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	183b      	adds	r3, r7, r0
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	18d3      	adds	r3, r2, r3
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	2112      	movs	r1, #18
 8010e3c:	187b      	adds	r3, r7, r1
 8010e3e:	3203      	adds	r2, #3
 8010e40:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = total_lgth >> 8;
 8010e42:	187b      	adds	r3, r7, r1
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	0a1b      	lsrs	r3, r3, #8
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	3305      	adds	r3, #5
 8010e50:	b2d2      	uxtb	r2, r2
 8010e52:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = total_lgth;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	3306      	adds	r3, #6
 8010e5a:	187a      	adds	r2, r7, r1
 8010e5c:	8812      	ldrh	r2, [r2, #0]
 8010e5e:	b2d2      	uxtb	r2, r2
 8010e60:	701a      	strb	r2, [r3, #0]
  
  return 3 + Size;
 8010e62:	183b      	adds	r3, r7, r0
 8010e64:	881b      	ldrh	r3, [r3, #0]
 8010e66:	3303      	adds	r3, #3
 8010e68:	b29b      	uxth	r3, r3
}
 8010e6a:	0018      	movs	r0, r3
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	b006      	add	sp, #24
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	46c0      	nop			; (mov r8, r8)
 8010e74:	0000ffff 	.word	0x0000ffff

08010e78 <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b086      	sub	sp, #24
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	1dbb      	adds	r3, r7, #6
 8010e84:	801a      	strh	r2, [r3, #0]
  if(ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)                return 0xFFFF;       /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	68fa      	ldr	r2, [r7, #12]
 8010e8c:	88d2      	ldrh	r2, [r2, #6]
 8010e8e:	189b      	adds	r3, r3, r2
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	2ba5      	cmp	r3, #165	; 0xa5
 8010e94:	d001      	beq.n	8010e9a <TLV_addValue+0x22>
 8010e96:	4b41      	ldr	r3, [pc, #260]	; (8010f9c <TLV_addValue+0x124>)
 8010e98:	e07b      	b.n	8010f92 <TLV_addValue+0x11a>
  if((ToSendTLV->EOFposition + 4 + 3 + Size) > ToSendTLV->maxSize)      return 0xFFFF;       /* Can't add this TLV, because it will overflow the provided buffer.*/
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	88db      	ldrh	r3, [r3, #6]
 8010e9e:	1dda      	adds	r2, r3, #7
 8010ea0:	1dbb      	adds	r3, r7, #6
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	18d3      	adds	r3, r2, r3
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	8892      	ldrh	r2, [r2, #4]
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	dd01      	ble.n	8010eb2 <TLV_addValue+0x3a>
 8010eae:	4b3b      	ldr	r3, [pc, #236]	; (8010f9c <TLV_addValue+0x124>)
 8010eb0:	e06f      	b.n	8010f92 <TLV_addValue+0x11a>
  if(ToSendTLV->data == NULL)                                          return 0xFFFF;        /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d101      	bne.n	8010ebe <TLV_addValue+0x46>
 8010eba:	4b38      	ldr	r3, [pc, #224]	; (8010f9c <TLV_addValue+0x124>)
 8010ebc:	e069      	b.n	8010f92 <TLV_addValue+0x11a>
  if(ToSendTLV->EOFposition == 0xFFFF)                                 return 0xFFFF;        /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	88db      	ldrh	r3, [r3, #6]
 8010ec2:	4a36      	ldr	r2, [pc, #216]	; (8010f9c <TLV_addValue+0x124>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d101      	bne.n	8010ecc <TLV_addValue+0x54>
 8010ec8:	4b34      	ldr	r3, [pc, #208]	; (8010f9c <TLV_addValue+0x124>)
 8010eca:	e062      	b.n	8010f92 <TLV_addValue+0x11a>
  
  for(uint32_t index = 0; index < Size; index++)                                          /* Value*/
 8010ecc:	2300      	movs	r3, #0
 8010ece:	617b      	str	r3, [r7, #20]
 8010ed0:	e012      	b.n	8010ef8 <TLV_addValue+0x80>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	18d2      	adds	r2, r2, r3
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	68f9      	ldr	r1, [r7, #12]
 8010ede:	88c9      	ldrh	r1, [r1, #6]
 8010ee0:	185b      	adds	r3, r3, r1
 8010ee2:	7812      	ldrb	r2, [r2, #0]
 8010ee4:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	88db      	ldrh	r3, [r3, #6]
 8010eea:	3301      	adds	r3, #1
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	80da      	strh	r2, [r3, #6]
  for(uint32_t index = 0; index < Size; index++)                                          /* Value*/
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	617b      	str	r3, [r7, #20]
 8010ef8:	1dbb      	adds	r3, r7, #6
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	697a      	ldr	r2, [r7, #20]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d3e7      	bcc.n	8010ed2 <TLV_addValue+0x5a>
  }
  
  ToSendTLV->data[ToSendTLV->EOFposition]
    = ToSendTLV->data[ToSendTLV->EOFposition+1]
      = ToSendTLV->data[ToSendTLV->EOFposition+2]
        = ToSendTLV->data[ToSendTLV->EOFposition+3] = TLV_EOF;             /* EOF*/
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681a      	ldr	r2, [r3, #0]
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	88db      	ldrh	r3, [r3, #6]
 8010f0a:	3303      	adds	r3, #3
 8010f0c:	18d3      	adds	r3, r2, r3
 8010f0e:	22a5      	movs	r2, #165	; 0xa5
 8010f10:	701a      	strb	r2, [r3, #0]
      = ToSendTLV->data[ToSendTLV->EOFposition+2]
 8010f12:	68fa      	ldr	r2, [r7, #12]
 8010f14:	6811      	ldr	r1, [r2, #0]
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	88d2      	ldrh	r2, [r2, #6]
 8010f1a:	3202      	adds	r2, #2
 8010f1c:	188a      	adds	r2, r1, r2
        = ToSendTLV->data[ToSendTLV->EOFposition+3] = TLV_EOF;             /* EOF*/
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	7013      	strb	r3, [r2, #0]
    = ToSendTLV->data[ToSendTLV->EOFposition+1]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6819      	ldr	r1, [r3, #0]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	88db      	ldrh	r3, [r3, #6]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	18cb      	adds	r3, r1, r3
      = ToSendTLV->data[ToSendTLV->EOFposition+2]
 8010f2e:	7812      	ldrb	r2, [r2, #0]
 8010f30:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition]
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	6812      	ldr	r2, [r2, #0]
 8010f36:	68f9      	ldr	r1, [r7, #12]
 8010f38:	88c9      	ldrh	r1, [r1, #6]
 8010f3a:	1852      	adds	r2, r2, r1
    = ToSendTLV->data[ToSendTLV->EOFposition+1]
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	7013      	strb	r3, [r2, #0]
  
  uint16_t total_lgth = (ToSendTLV->data[5] << 8) + ToSendTLV->data[6] + Size; /* Update of the top level Size marker*/
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	3305      	adds	r3, #5
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	021b      	lsls	r3, r3, #8
 8010f4c:	b29a      	uxth	r2, r3
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	3306      	adds	r3, #6
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	18d3      	adds	r3, r2, r3
 8010f5a:	b299      	uxth	r1, r3
 8010f5c:	2012      	movs	r0, #18
 8010f5e:	183b      	adds	r3, r7, r0
 8010f60:	1dba      	adds	r2, r7, #6
 8010f62:	8812      	ldrh	r2, [r2, #0]
 8010f64:	188a      	adds	r2, r1, r2
 8010f66:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = total_lgth >> 8;
 8010f68:	0001      	movs	r1, r0
 8010f6a:	187b      	adds	r3, r7, r1
 8010f6c:	881b      	ldrh	r3, [r3, #0]
 8010f6e:	0a1b      	lsrs	r3, r3, #8
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	3305      	adds	r3, #5
 8010f78:	b2d2      	uxtb	r2, r2
 8010f7a:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = total_lgth;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	3306      	adds	r3, #6
 8010f82:	187a      	adds	r2, r7, r1
 8010f84:	8812      	ldrh	r2, [r2, #0]
 8010f86:	b2d2      	uxtb	r2, r2
 8010f88:	701a      	strb	r2, [r3, #0]
  
  return 3 + Size;
 8010f8a:	1dbb      	adds	r3, r7, #6
 8010f8c:	881b      	ldrh	r3, [r3, #0]
 8010f8e:	3303      	adds	r3, #3
 8010f90:	b29b      	uxth	r3, r3
}
 8010f92:	0018      	movs	r0, r3
 8010f94:	46bd      	mov	sp, r7
 8010f96:	b006      	add	sp, #24
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	46c0      	nop			; (mov r8, r8)
 8010f9c:	0000ffff 	.word	0x0000ffff

08010fa0 <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data *ToSendTLV)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2200      	movs	r2, #0
 8010fac:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	4252      	negs	r2, r2
 8010fb4:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	809a      	strh	r2, [r3, #4]
}
 8010fbc:	46c0      	nop			; (mov r8, r8)
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	b002      	add	sp, #8
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data that will be used.
  * @param    pReceivedString          The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data *ToProcessTLV, uint8_t *pReceivedString)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
  if(pReceivedString == NULL) return 0xFF;               /* Received string is NULL*/
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d101      	bne.n	8010fd8 <TLV_init_decode+0x14>
 8010fd4:	23ff      	movs	r3, #255	; 0xff
 8010fd6:	e01d      	b.n	8011014 <TLV_init_decode+0x50>
  if(  (pReceivedString[0] != TLV_SOF)
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	2bfd      	cmp	r3, #253	; 0xfd
 8010fde:	d10e      	bne.n	8010ffe <TLV_init_decode+0x3a>
     ||(pReceivedString[1] != TLV_SOF)
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	2bfd      	cmp	r3, #253	; 0xfd
 8010fe8:	d109      	bne.n	8010ffe <TLV_init_decode+0x3a>
     ||(pReceivedString[2] != TLV_SOF)
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	3302      	adds	r3, #2
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	2bfd      	cmp	r3, #253	; 0xfd
 8010ff2:	d104      	bne.n	8010ffe <TLV_init_decode+0x3a>
     ||(pReceivedString[3] != TLV_SOF)) return 0xFF;       /* Incorrect SOF*/
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	3303      	adds	r3, #3
 8010ff8:	781b      	ldrb	r3, [r3, #0]
 8010ffa:	2bfd      	cmp	r3, #253	; 0xfd
 8010ffc:	d001      	beq.n	8011002 <TLV_init_decode+0x3e>
 8010ffe:	23ff      	movs	r3, #255	; 0xff
 8011000:	e008      	b.n	8011014 <TLV_init_decode+0x50>
  
  ToProcessTLV->data = pReceivedString;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	683a      	ldr	r2, [r7, #0]
 8011006:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2207      	movs	r2, #7
 801100c:	809a      	strh	r2, [r3, #4]
  
  return ToProcessTLV->cursor;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	889b      	ldrh	r3, [r3, #4]
 8011012:	b2db      	uxtb	r3, r3
}
 8011014:	0018      	movs	r0, r3
 8011016:	46bd      	mov	sp, r7
 8011018:	b002      	add	sp, #8
 801101a:	bd80      	pop	{r7, pc}

0801101c <TLV_get>:
  * @param    Length            A pointer to where the decoded size should be stocked.
  * @param    Value            A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after, 1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
 8011028:	603b      	str	r3, [r7, #0]
  if(ToProcessTLV->data == NULL) return 0xFF;                           /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d101      	bne.n	8011036 <TLV_get+0x1a>
 8011032:	23ff      	movs	r3, #255	; 0xff
 8011034:	e048      	b.n	80110c8 <TLV_get+0xac>
  if(ToProcessTLV->cursor == 0)  return 0xFF;                           /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	889b      	ldrh	r3, [r3, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d101      	bne.n	8011042 <TLV_get+0x26>
 801103e:	23ff      	movs	r3, #255	; 0xff
 8011040:	e042      	b.n	80110c8 <TLV_get+0xac>
  if(ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF) return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	68fa      	ldr	r2, [r7, #12]
 8011048:	8892      	ldrh	r2, [r2, #4]
 801104a:	189b      	adds	r3, r3, r2
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	2ba5      	cmp	r3, #165	; 0xa5
 8011050:	d101      	bne.n	8011056 <TLV_get+0x3a>
 8011052:	23ff      	movs	r3, #255	; 0xff
 8011054:	e038      	b.n	80110c8 <TLV_get+0xac>

  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];                                                         /* Tag*/
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	8892      	ldrh	r2, [r2, #4]
 801105e:	189b      	adds	r3, r3, r2
 8011060:	781a      	ldrb	r2, [r3, #0]
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	889b      	ldrh	r3, [r3, #4]
 801106a:	3301      	adds	r3, #1
 801106c:	b29a      	uxth	r2, r3
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	809a      	strh	r2, [r3, #4]
  *Length = (ToProcessTLV->data[ToProcessTLV->cursor] << 8) + ToProcessTLV->data[ToProcessTLV->cursor+1];  /* Length*/
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68fa      	ldr	r2, [r7, #12]
 8011078:	8892      	ldrh	r2, [r2, #4]
 801107a:	189b      	adds	r3, r3, r2
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	b29b      	uxth	r3, r3
 8011080:	021b      	lsls	r3, r3, #8
 8011082:	b29a      	uxth	r2, r3
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	6819      	ldr	r1, [r3, #0]
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	889b      	ldrh	r3, [r3, #4]
 801108c:	3301      	adds	r3, #1
 801108e:	18cb      	adds	r3, r1, r3
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	b29b      	uxth	r3, r3
 8011094:	18d3      	adds	r3, r2, r3
 8011096:	b29a      	uxth	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	889b      	ldrh	r3, [r3, #4]
 80110a0:	3302      	adds	r3, #2
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	809a      	strh	r2, [r3, #4]
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];                                                      /* Value*/
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	68fa      	ldr	r2, [r7, #12]
 80110ae:	8892      	ldrh	r2, [r2, #4]
 80110b0:	189a      	adds	r2, r3, r2
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	889a      	ldrh	r2, [r3, #4]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	881b      	ldrh	r3, [r3, #0]
 80110be:	18d3      	adds	r3, r2, r3
 80110c0:	b29a      	uxth	r2, r3
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	809a      	strh	r2, [r3, #4]

  return 0;
 80110c6:	2300      	movs	r3, #0
}
 80110c8:	0018      	movs	r0, r3
 80110ca:	46bd      	mov	sp, r7
 80110cc:	b004      	add	sp, #16
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <TLV_deinit_decode>:
  *           This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data *ToProcessTLV)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2200      	movs	r2, #0
 80110e2:	809a      	strh	r2, [r3, #4]
}
 80110e4:	46c0      	nop			; (mov r8, r8)
 80110e6:	46bd      	mov	sp, r7
 80110e8:	b002      	add	sp, #8
 80110ea:	bd80      	pop	{r7, pc}

080110ec <TLV_get_string_length>:
  * @note     This function relies on the length marker in the string. Whether there is or not the SOF and/or the EOF, it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t* pString)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 80110f4:	230f      	movs	r3, #15
 80110f6:	18fb      	adds	r3, r7, r3
 80110f8:	2200      	movs	r2, #0
 80110fa:	701a      	strb	r2, [r3, #0]

  while(pString[start] == TLV_SOF)
 80110fc:	e005      	b.n	801110a <TLV_get_string_length+0x1e>
  {
    start++;
 80110fe:	210f      	movs	r1, #15
 8011100:	187b      	adds	r3, r7, r1
 8011102:	781a      	ldrb	r2, [r3, #0]
 8011104:	187b      	adds	r3, r7, r1
 8011106:	3201      	adds	r2, #1
 8011108:	701a      	strb	r2, [r3, #0]
  while(pString[start] == TLV_SOF)
 801110a:	210f      	movs	r1, #15
 801110c:	187b      	adds	r3, r7, r1
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	18d3      	adds	r3, r2, r3
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	2bfd      	cmp	r3, #253	; 0xfd
 8011118:	d0f1      	beq.n	80110fe <TLV_get_string_length+0x12>
  } /* start variable is now after the SOF if there is one.*/

  length =   (uint16_t)pString[start+1] << 8
 801111a:	187b      	adds	r3, r7, r1
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	3301      	adds	r3, #1
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	18d3      	adds	r3, r2, r3
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	021b      	lsls	r3, r3, #8
    |(uint16_t)pString[start+2];
 8011128:	b21a      	sxth	r2, r3
 801112a:	187b      	adds	r3, r7, r1
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	3302      	adds	r3, #2
 8011130:	6879      	ldr	r1, [r7, #4]
 8011132:	18cb      	adds	r3, r1, r3
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	b21b      	sxth	r3, r3
 8011138:	4313      	orrs	r3, r2
 801113a:	b21a      	sxth	r2, r3
  length =   (uint16_t)pString[start+1] << 8
 801113c:	210c      	movs	r1, #12
 801113e:	187b      	adds	r3, r7, r1
 8011140:	801a      	strh	r2, [r3, #0]
  length += 3;
 8011142:	187b      	adds	r3, r7, r1
 8011144:	187a      	adds	r2, r7, r1
 8011146:	8812      	ldrh	r2, [r2, #0]
 8011148:	3203      	adds	r2, #3
 801114a:	801a      	strh	r2, [r3, #0]
  
  return length;
 801114c:	187b      	adds	r3, r7, r1
 801114e:	881b      	ldrh	r3, [r3, #0]
}
 8011150:	0018      	movs	r0, r3
 8011152:	46bd      	mov	sp, r7
 8011154:	b004      	add	sp, #16
 8011156:	bd80      	pop	{r7, pc}

08011158 <GUI_Init>:
  * @param  CB_GetVoltage     BSP callback to retrieve VBUS voltage
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t* (*CB_HWBoardVersion)(void), const uint8_t* (*CB_HWPDType)(void), uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 8011158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801115a:	b08d      	sub	sp, #52	; 0x34
 801115c:	af00      	add	r7, sp, #0
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	607a      	str	r2, [r7, #4]
 8011164:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 8011166:	232f      	movs	r3, #47	; 0x2f
 8011168:	18fb      	adds	r3, r7, r3
 801116a:	2201      	movs	r2, #1
 801116c:	701a      	strb	r2, [r3, #0]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 801116e:	f7ff f9c1 	bl	80104f4 <BSP_GUI_LoadDataFromFlash>
 8011172:	0003      	movs	r3, r0
 8011174:	1e5a      	subs	r2, r3, #1
 8011176:	4193      	sbcs	r3, r2
 8011178:	b2db      	uxtb	r3, r3
 801117a:	001a      	movs	r2, r3
 801117c:	4b4d      	ldr	r3, [pc, #308]	; (80112b4 <GUI_Init+0x15c>)
 801117e:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 8011180:	4b4d      	ldr	r3, [pc, #308]	; (80112b8 <GUI_Init+0x160>)
 8011182:	799b      	ldrb	r3, [r3, #6]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d003      	beq.n	8011190 <GUI_Init+0x38>
 8011188:	4b4b      	ldr	r3, [pc, #300]	; (80112b8 <GUI_Init+0x160>)
 801118a:	79db      	ldrb	r3, [r3, #7]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d115      	bne.n	80111bc <GUI_Init+0x64>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 8011190:	4b4a      	ldr	r3, [pc, #296]	; (80112bc <GUI_Init+0x164>)
 8011192:	226b      	movs	r2, #107	; 0x6b
 8011194:	189b      	adds	r3, r3, r2
 8011196:	785a      	ldrb	r2, [r3, #1]
 8011198:	2101      	movs	r1, #1
 801119a:	400a      	ands	r2, r1
 801119c:	1c11      	adds	r1, r2, #0
 801119e:	2260      	movs	r2, #96	; 0x60
 80111a0:	4252      	negs	r2, r2
 80111a2:	430a      	orrs	r2, r1
 80111a4:	705a      	strb	r2, [r3, #1]
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 80111a6:	4b45      	ldr	r3, [pc, #276]	; (80112bc <GUI_Init+0x164>)
 80111a8:	226b      	movs	r2, #107	; 0x6b
 80111aa:	189b      	adds	r3, r3, r2
 80111ac:	789a      	ldrb	r2, [r3, #2]
 80111ae:	217f      	movs	r1, #127	; 0x7f
 80111b0:	438a      	bics	r2, r1
 80111b2:	1c11      	adds	r1, r2, #0
 80111b4:	2232      	movs	r2, #50	; 0x32
 80111b6:	430a      	orrs	r2, r1
 80111b8:	709a      	strb	r2, [r3, #2]
 80111ba:	e040      	b.n	801123e <GUI_Init+0xe6>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100) / (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime + DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 80111bc:	4b3e      	ldr	r3, [pc, #248]	; (80112b8 <GUI_Init+0x160>)
 80111be:	79db      	ldrb	r3, [r3, #7]
 80111c0:	001a      	movs	r2, r3
 80111c2:	2364      	movs	r3, #100	; 0x64
 80111c4:	435a      	muls	r2, r3
 80111c6:	4b3c      	ldr	r3, [pc, #240]	; (80112b8 <GUI_Init+0x160>)
 80111c8:	79db      	ldrb	r3, [r3, #7]
 80111ca:	0019      	movs	r1, r3
 80111cc:	4b3a      	ldr	r3, [pc, #232]	; (80112b8 <GUI_Init+0x160>)
 80111ce:	799b      	ldrb	r3, [r3, #6]
 80111d0:	18cb      	adds	r3, r1, r3
 80111d2:	0019      	movs	r1, r3
 80111d4:	0010      	movs	r0, r2
 80111d6:	f7f5 f847 	bl	8006268 <__divsi3>
 80111da:	0003      	movs	r3, r0
 80111dc:	1c1a      	adds	r2, r3, #0
 80111de:	237f      	movs	r3, #127	; 0x7f
 80111e0:	4013      	ands	r3, r2
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	4b35      	ldr	r3, [pc, #212]	; (80112bc <GUI_Init+0x164>)
 80111e6:	216b      	movs	r1, #107	; 0x6b
 80111e8:	185b      	adds	r3, r3, r1
 80111ea:	217f      	movs	r1, #127	; 0x7f
 80111ec:	400a      	ands	r2, r1
 80111ee:	0010      	movs	r0, r2
 80111f0:	789a      	ldrb	r2, [r3, #2]
 80111f2:	217f      	movs	r1, #127	; 0x7f
 80111f4:	438a      	bics	r2, r1
 80111f6:	1c11      	adds	r1, r2, #0
 80111f8:	1c02      	adds	r2, r0, #0
 80111fa:	430a      	orrs	r2, r1
 80111fc:	709a      	strb	r2, [r3, #2]
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100) / DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 80111fe:	4b2e      	ldr	r3, [pc, #184]	; (80112b8 <GUI_Init+0x160>)
 8011200:	79db      	ldrb	r3, [r3, #7]
 8011202:	001a      	movs	r2, r3
 8011204:	2364      	movs	r3, #100	; 0x64
 8011206:	435a      	muls	r2, r3
 8011208:	4b2c      	ldr	r3, [pc, #176]	; (80112bc <GUI_Init+0x164>)
 801120a:	216d      	movs	r1, #109	; 0x6d
 801120c:	5c5b      	ldrb	r3, [r3, r1]
 801120e:	065b      	lsls	r3, r3, #25
 8011210:	0e5b      	lsrs	r3, r3, #25
 8011212:	b2db      	uxtb	r3, r3
 8011214:	0019      	movs	r1, r3
 8011216:	0010      	movs	r0, r2
 8011218:	f7f5 f826 	bl	8006268 <__divsi3>
 801121c:	0003      	movs	r3, r0
 801121e:	1c1a      	adds	r2, r3, #0
 8011220:	237f      	movs	r3, #127	; 0x7f
 8011222:	4013      	ands	r3, r2
 8011224:	b2d9      	uxtb	r1, r3
 8011226:	4b25      	ldr	r3, [pc, #148]	; (80112bc <GUI_Init+0x164>)
 8011228:	226b      	movs	r2, #107	; 0x6b
 801122a:	189b      	adds	r3, r3, r2
 801122c:	1c0a      	adds	r2, r1, #0
 801122e:	1890      	adds	r0, r2, r2
 8011230:	785a      	ldrb	r2, [r3, #1]
 8011232:	2101      	movs	r1, #1
 8011234:	400a      	ands	r2, r1
 8011236:	1c11      	adds	r1, r2, #0
 8011238:	1c02      	adds	r2, r0, #0
 801123a:	430a      	orrs	r2, r1
 801123c:	705a      	strb	r2, [r3, #1]
    DPM_USER_Settings[USBPD_PORT_1].CAD_tDRP = (DPM_Settings[USBPD_PORT_1].CAD_SRCToggleTime * 100) / DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 801123e:	4b20      	ldr	r3, [pc, #128]	; (80112c0 <GUI_Init+0x168>)
 8011240:	68fa      	ldr	r2, [r7, #12]
 8011242:	601a      	str	r2, [r3, #0]
  pCB_HWPDType        = CB_HWPDType;
 8011244:	4b1f      	ldr	r3, [pc, #124]	; (80112c4 <GUI_Init+0x16c>)
 8011246:	68ba      	ldr	r2, [r7, #8]
 8011248:	601a      	str	r2, [r3, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 801124a:	4b1f      	ldr	r3, [pc, #124]	; (80112c8 <GUI_Init+0x170>)
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	601a      	str	r2, [r3, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 8011250:	4b1e      	ldr	r3, [pc, #120]	; (80112cc <GUI_Init+0x174>)
 8011252:	683a      	ldr	r2, [r7, #0]
 8011254:	601a      	str	r2, [r3, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 8011256:	4a1e      	ldr	r2, [pc, #120]	; (80112d0 <GUI_Init+0x178>)
 8011258:	491e      	ldr	r1, [pc, #120]	; (80112d4 <GUI_Init+0x17c>)
 801125a:	4b1f      	ldr	r3, [pc, #124]	; (80112d8 <GUI_Init+0x180>)
 801125c:	0018      	movs	r0, r3
 801125e:	f7fd fef5 	bl	800f04c <USBPD_DPM_SetNotification_GUI>

#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
  osMessageQDef(MsgBox, GUI_BOX_MESSAGES_MAX, uint32_t);
 8011262:	2124      	movs	r1, #36	; 0x24
 8011264:	187b      	adds	r3, r7, r1
 8011266:	4a1d      	ldr	r2, [pc, #116]	; (80112dc <GUI_Init+0x184>)
 8011268:	ca11      	ldmia	r2!, {r0, r4}
 801126a:	c311      	stmia	r3!, {r0, r4}
  osThreadDef(GUI, TaskGUI, FREERTOS_GUI_PRIORITY, 0, FREERTOS_GUI_STACK_SIZE);
 801126c:	2410      	movs	r4, #16
 801126e:	193b      	adds	r3, r7, r4
 8011270:	4a1b      	ldr	r2, [pc, #108]	; (80112e0 <GUI_Init+0x188>)
 8011272:	ca61      	ldmia	r2!, {r0, r5, r6}
 8011274:	c361      	stmia	r3!, {r0, r5, r6}
 8011276:	ca21      	ldmia	r2!, {r0, r5}
 8011278:	c321      	stmia	r3!, {r0, r5}
  GUIMsgBox = osMessageCreate(osMessageQ(MsgBox), NULL);
 801127a:	187b      	adds	r3, r7, r1
 801127c:	2100      	movs	r1, #0
 801127e:	0018      	movs	r0, r3
 8011280:	f7f8 ff6f 	bl	800a162 <osMessageCreate>
 8011284:	0002      	movs	r2, r0
 8011286:	4b17      	ldr	r3, [pc, #92]	; (80112e4 <GUI_Init+0x18c>)
 8011288:	601a      	str	r2, [r3, #0]
  if(NULL == osThreadCreate(osThread(GUI), &GUIMsgBox))
 801128a:	4a16      	ldr	r2, [pc, #88]	; (80112e4 <GUI_Init+0x18c>)
 801128c:	193b      	adds	r3, r7, r4
 801128e:	0011      	movs	r1, r2
 8011290:	0018      	movs	r0, r3
 8011292:	f7f8 ff1d 	bl	800a0d0 <osThreadCreate>
 8011296:	1e03      	subs	r3, r0, #0
 8011298:	d103      	bne.n	80112a2 <GUI_Init+0x14a>
#else
  GUIMsgBox = osMessageQueueNew (GUI_BOX_MESSAGES_MAX, sizeof(uint32_t), NULL);
  if (NULL == osThreadNew(TaskGUI, &GUIMsgBox, &GUI_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    _status = USBPD_DISABLE;
 801129a:	232f      	movs	r3, #47	; 0x2f
 801129c:	18fb      	adds	r3, r7, r3
 801129e:	2200      	movs	r2, #0
 80112a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80112a2:	b662      	cpsie	i
}
 80112a4:	46c0      	nop			; (mov r8, r8)
  UTIL_SEQ_RegTask(TASK_GUI, 0, GUI_Execute);
  UTIL_SEQ_SetTask(TASK_GUI, 0);
#endif /*USE_STM32_UTILITY_OS */
#endif /* _RTOS */

  return _status;
 80112a6:	232f      	movs	r3, #47	; 0x2f
 80112a8:	18fb      	adds	r3, r7, r3
 80112aa:	781b      	ldrb	r3, [r3, #0]
}
 80112ac:	0018      	movs	r0, r3
 80112ae:	46bd      	mov	sp, r7
 80112b0:	b00d      	add	sp, #52	; 0x34
 80112b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112b4:	20001e1c 	.word	0x20001e1c
 80112b8:	20000014 	.word	0x20000014
 80112bc:	20000028 	.word	0x20000028
 80112c0:	2000171c 	.word	0x2000171c
 80112c4:	20001720 	.word	0x20001720
 80112c8:	20001724 	.word	0x20001724
 80112cc:	20001728 	.word	0x20001728
 80112d0:	0801231d 	.word	0x0801231d
 80112d4:	08012251 	.word	0x08012251
 80112d8:	08011615 	.word	0x08011615
 80112dc:	08016708 	.word	0x08016708
 80112e0:	08016710 	.word	0x08016710
 80112e4:	20001d18 	.word	0x20001d18

080112e8 <GUI_Start>:

void GUI_Start(void)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 80112ec:	4b03      	ldr	r3, [pc, #12]	; (80112fc <GUI_Start+0x14>)
 80112ee:	0018      	movs	r0, r3
 80112f0:	f002 ffe8 	bl	80142c4 <TRACER_EMB_StartRX>
}
 80112f4:	46c0      	nop			; (mov r8, r8)
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	46c0      	nop			; (mov r8, r8)
 80112fc:	08011515 	.word	0x08011515

08011300 <TaskGUI>:
static void TaskGUI(void *pEvent)
#endif /* osCMSIS < 0x20000U */
#else
void GUI_Execute(void)
#endif /* _RTOS */
{
 8011300:	b590      	push	{r4, r7, lr}
 8011302:	b08b      	sub	sp, #44	; 0x2c
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
#ifdef _RTOS
  uint32_t _timing = osWaitForever;
 8011308:	2301      	movs	r3, #1
 801130a:	425b      	negs	r3, r3
 801130c:	627b      	str	r3, [r7, #36]	; 0x24
  osMessageQId  queue = *(osMessageQId *)pEvent;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	61fb      	str	r3, [r7, #28]

  GUI_Start();
 8011314:	f7ff ffe8 	bl	80112e8 <GUI_Start>
  do
  {
#if (osCMSIS < 0x20000U)
    osEvent event = osMessageGet(queue, _timing);
 8011318:	240c      	movs	r4, #12
 801131a:	193b      	adds	r3, r7, r4
 801131c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801131e:	69f9      	ldr	r1, [r7, #28]
 8011320:	0018      	movs	r0, r3
 8011322:	f7f8 ff6d 	bl	800a200 <osMessageGet>
    switch (((GUI_USER_EVENT)event.value.v & 0xF))
 8011326:	0021      	movs	r1, r4
 8011328:	187b      	adds	r3, r7, r1
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	b2db      	uxtb	r3, r3
 801132e:	001a      	movs	r2, r3
 8011330:	230f      	movs	r3, #15
 8011332:	4013      	ands	r3, r2
 8011334:	d00f      	beq.n	8011356 <TaskGUI+0x56>
 8011336:	2b01      	cmp	r3, #1
 8011338:	d000      	beq.n	801133c <TaskGUI+0x3c>
 801133a:	e08b      	b.n	8011454 <TaskGUI+0x154>
#endif /* osCMSIS < 0x20000U */
    {
    case GUI_USER_EVENT_GUI:
      {
#if (osCMSIS < 0x20000U)
        GUI_RXProcess((uint32_t)event.value.v);
 801133c:	187b      	adds	r3, r7, r1
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	0018      	movs	r0, r3
 8011342:	f000 f90f 	bl	8011564 <GUI_RXProcess>
#else
        GUI_RXProcess((uint32_t)event);
#endif /* osCMSIS < 0x20000U */
        /* Sent an event to check if measurement report has been requested */
#if (osCMSIS < 0x20000U)
        osMessagePut(GUIMsgBox, GUI_USER_EVENT_TIMER, 0);
 8011346:	4b46      	ldr	r3, [pc, #280]	; (8011460 <TaskGUI+0x160>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2200      	movs	r2, #0
 801134c:	2100      	movs	r1, #0
 801134e:	0018      	movs	r0, r3
 8011350:	f7f8 ff1a 	bl	800a188 <osMessagePut>
#else
        uint32_t event = GUI_USER_EVENT_TIMER;
        (void)osMessageQueuePut(GUIMsgBox, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
        break;
 8011354:	e07f      	b.n	8011456 <TaskGUI+0x156>
          default:
            break;
      }
      GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* !_RTOS */
      for(uint8_t _instance = 0; _instance < USBPD_PORT_COUNT; _instance++)
 8011356:	2323      	movs	r3, #35	; 0x23
 8011358:	18fb      	adds	r3, r7, r3
 801135a:	2200      	movs	r2, #0
 801135c:	701a      	strb	r2, [r3, #0]
 801135e:	e073      	b.n	8011448 <TaskGUI+0x148>
        /* -------------------------------------------------  */
        /* Check if timeout related to Measurement reporting  */
        /* -------------------------------------------------  */
        /* - Send a GUI Event only if PE is connected
           and Measurement report has been enabled          */
        if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 8011360:	2023      	movs	r0, #35	; 0x23
 8011362:	183b      	adds	r3, r7, r0
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	4a3f      	ldr	r2, [pc, #252]	; (8011464 <TaskGUI+0x164>)
 8011368:	00db      	lsls	r3, r3, #3
 801136a:	18d3      	adds	r3, r2, r3
 801136c:	785b      	ldrb	r3, [r3, #1]
 801136e:	06db      	lsls	r3, r3, #27
 8011370:	0fdb      	lsrs	r3, r3, #31
 8011372:	b2db      	uxtb	r3, r3
 8011374:	2b01      	cmp	r3, #1
 8011376:	d15a      	bne.n	801142e <TaskGUI+0x12e>
            && (1 == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 8011378:	183b      	adds	r3, r7, r0
 801137a:	781a      	ldrb	r2, [r3, #0]
 801137c:	493a      	ldr	r1, [pc, #232]	; (8011468 <TaskGUI+0x168>)
 801137e:	0013      	movs	r3, r2
 8011380:	005b      	lsls	r3, r3, #1
 8011382:	189b      	adds	r3, r3, r2
 8011384:	005b      	lsls	r3, r3, #1
 8011386:	18cb      	adds	r3, r1, r3
 8011388:	791b      	ldrb	r3, [r3, #4]
 801138a:	061b      	lsls	r3, r3, #24
 801138c:	0fdb      	lsrs	r3, r3, #31
 801138e:	b2db      	uxtb	r3, r3
 8011390:	2b01      	cmp	r3, #1
 8011392:	d14c      	bne.n	801142e <TaskGUI+0x12e>
              && (0 != GUI_USER_Params[_instance].u.d.MeasReportValue))
 8011394:	183b      	adds	r3, r7, r0
 8011396:	781a      	ldrb	r2, [r3, #0]
 8011398:	4933      	ldr	r1, [pc, #204]	; (8011468 <TaskGUI+0x168>)
 801139a:	0013      	movs	r3, r2
 801139c:	005b      	lsls	r3, r3, #1
 801139e:	189b      	adds	r3, r3, r2
 80113a0:	005b      	lsls	r3, r3, #1
 80113a2:	18cb      	adds	r3, r1, r3
 80113a4:	791b      	ldrb	r3, [r3, #4]
 80113a6:	065b      	lsls	r3, r3, #25
 80113a8:	0e5b      	lsrs	r3, r3, #25
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d03e      	beq.n	801142e <TaskGUI+0x12e>
        {
          /* Check if timer has expired */
          if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 80113b0:	183b      	adds	r3, r7, r0
 80113b2:	781a      	ldrb	r2, [r3, #0]
 80113b4:	4b2d      	ldr	r3, [pc, #180]	; (801146c <TaskGUI+0x16c>)
 80113b6:	0052      	lsls	r2, r2, #1
 80113b8:	5ad3      	ldrh	r3, [r2, r3]
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	2380      	movs	r3, #128	; 0x80
 80113be:	021b      	lsls	r3, r3, #8
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d109      	bne.n	80113d8 <TaskGUI+0xd8>
          {
            uint32_t event_mr = GUI_USER_EVENT_GUI | (_instance << GUI_PE_PORT_NUM_Pos) | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 80113c4:	183b      	adds	r3, r7, r0
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	061b      	lsls	r3, r3, #24
 80113ca:	4a29      	ldr	r2, [pc, #164]	; (8011470 <TaskGUI+0x170>)
 80113cc:	4313      	orrs	r3, r2
 80113ce:	61bb      	str	r3, [r7, #24]
            GUI_RXProcess(event_mr);
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	0018      	movs	r0, r3
 80113d4:	f000 f8c6 	bl	8011564 <GUI_RXProcess>
          }
          /* Start or Restart Measurement report timer */
          if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 80113d8:	2023      	movs	r0, #35	; 0x23
 80113da:	183b      	adds	r3, r7, r0
 80113dc:	781a      	ldrb	r2, [r3, #0]
 80113de:	4b23      	ldr	r3, [pc, #140]	; (801146c <TaskGUI+0x16c>)
 80113e0:	0052      	lsls	r2, r2, #1
 80113e2:	5ad3      	ldrh	r3, [r2, r3]
 80113e4:	b29b      	uxth	r3, r3
 80113e6:	045b      	lsls	r3, r3, #17
 80113e8:	0c5b      	lsrs	r3, r3, #17
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	dc26      	bgt.n	801143c <TaskGUI+0x13c>
          {
            GUI_START_TIMER(_instance, GUI_TimerMeasReport, (GUI_USER_Params[_instance].u.d.MeasReportValue * GUI_NOTIF_MEASUREMENT_STEP));
 80113ee:	183b      	adds	r3, r7, r0
 80113f0:	781a      	ldrb	r2, [r3, #0]
 80113f2:	491d      	ldr	r1, [pc, #116]	; (8011468 <TaskGUI+0x168>)
 80113f4:	0013      	movs	r3, r2
 80113f6:	005b      	lsls	r3, r3, #1
 80113f8:	189b      	adds	r3, r3, r2
 80113fa:	005b      	lsls	r3, r3, #1
 80113fc:	18cb      	adds	r3, r1, r3
 80113fe:	791b      	ldrb	r3, [r3, #4]
 8011400:	065b      	lsls	r3, r3, #25
 8011402:	0e5b      	lsrs	r3, r3, #25
 8011404:	b2db      	uxtb	r3, r3
 8011406:	b29b      	uxth	r3, r3
 8011408:	2228      	movs	r2, #40	; 0x28
 801140a:	4353      	muls	r3, r2
 801140c:	b29b      	uxth	r3, r3
 801140e:	183a      	adds	r2, r7, r0
 8011410:	7812      	ldrb	r2, [r2, #0]
 8011412:	4918      	ldr	r1, [pc, #96]	; (8011474 <TaskGUI+0x174>)
 8011414:	430b      	orrs	r3, r1
 8011416:	b299      	uxth	r1, r3
 8011418:	4b14      	ldr	r3, [pc, #80]	; (801146c <TaskGUI+0x16c>)
 801141a:	0052      	lsls	r2, r2, #1
 801141c:	52d1      	strh	r1, [r2, r3]
 801141e:	4b10      	ldr	r3, [pc, #64]	; (8011460 <TaskGUI+0x160>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	2200      	movs	r2, #0
 8011424:	2100      	movs	r1, #0
 8011426:	0018      	movs	r0, r3
 8011428:	f7f8 feae 	bl	800a188 <osMessagePut>
          if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 801142c:	e006      	b.n	801143c <TaskGUI+0x13c>
          }
        }
        else
        {
          /* Stop measurement report timer */
          GUI_TimerMeasReport[_instance] = 0;
 801142e:	2323      	movs	r3, #35	; 0x23
 8011430:	18fb      	adds	r3, r7, r3
 8011432:	781a      	ldrb	r2, [r3, #0]
 8011434:	4b0d      	ldr	r3, [pc, #52]	; (801146c <TaskGUI+0x16c>)
 8011436:	0052      	lsls	r2, r2, #1
 8011438:	2100      	movs	r1, #0
 801143a:	52d1      	strh	r1, [r2, r3]
      for(uint8_t _instance = 0; _instance < USBPD_PORT_COUNT; _instance++)
 801143c:	2123      	movs	r1, #35	; 0x23
 801143e:	187b      	adds	r3, r7, r1
 8011440:	781a      	ldrb	r2, [r3, #0]
 8011442:	187b      	adds	r3, r7, r1
 8011444:	3201      	adds	r2, #1
 8011446:	701a      	strb	r2, [r3, #0]
 8011448:	2323      	movs	r3, #35	; 0x23
 801144a:	18fb      	adds	r3, r7, r3
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d086      	beq.n	8011360 <TaskGUI+0x60>
        }
      }
#ifdef _RTOS
      break;
 8011452:	e000      	b.n	8011456 <TaskGUI+0x156>
    }

    default:
      break;
 8011454:	46c0      	nop			; (mov r8, r8)
    }
    _timing = CheckGUITimers();
 8011456:	f000 f80f 	bl	8011478 <CheckGUITimers>
 801145a:	0003      	movs	r3, r0
 801145c:	627b      	str	r3, [r7, #36]	; 0x24
  {
 801145e:	e75b      	b.n	8011318 <TaskGUI+0x18>
 8011460:	20001d18 	.word	0x20001d18
 8011464:	20001c04 	.word	0x20001c04
 8011468:	20001d10 	.word	0x20001d10
 801146c:	20001d0c 	.word	0x20001d0c
 8011470:	00000661 	.word	0x00000661
 8011474:	ffff8000 	.word	0xffff8000

08011478 <CheckGUITimers>:
#endif /* !_RTOS */
}

#ifdef _RTOS
static uint32_t CheckGUITimers(void)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
  uint32_t _timing = osWaitForever;
 801147e:	2301      	movs	r3, #1
 8011480:	425b      	negs	r3, r3
 8011482:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for(uint8_t instance = 0; instance < USBPD_PORT_COUNT; instance++)
 8011484:	230b      	movs	r3, #11
 8011486:	18fb      	adds	r3, r7, r3
 8011488:	2200      	movs	r2, #0
 801148a:	701a      	strb	r2, [r3, #0]
 801148c:	e018      	b.n	80114c0 <CheckGUITimers+0x48>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = GUI_TimerMeasReport[instance] & GUI_TIMER_READ_MSK;
 801148e:	230b      	movs	r3, #11
 8011490:	18fb      	adds	r3, r7, r3
 8011492:	781a      	ldrb	r2, [r3, #0]
 8011494:	4b0f      	ldr	r3, [pc, #60]	; (80114d4 <CheckGUITimers+0x5c>)
 8011496:	0052      	lsls	r2, r2, #1
 8011498:	5ad3      	ldrh	r3, [r2, r3]
 801149a:	b29b      	uxth	r3, r3
 801149c:	045b      	lsls	r3, r3, #17
 801149e:	0c5b      	lsrs	r3, r3, #17
 80114a0:	607b      	str	r3, [r7, #4]
    if(_current_timing > 0)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d005      	beq.n	80114b4 <CheckGUITimers+0x3c>
    {
      if (_current_timing < _timing)
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d201      	bcs.n	80114b4 <CheckGUITimers+0x3c>
      {
        _timing = _current_timing;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	60fb      	str	r3, [r7, #12]
  for(uint8_t instance = 0; instance < USBPD_PORT_COUNT; instance++)
 80114b4:	210b      	movs	r1, #11
 80114b6:	187b      	adds	r3, r7, r1
 80114b8:	781a      	ldrb	r2, [r3, #0]
 80114ba:	187b      	adds	r3, r7, r1
 80114bc:	3201      	adds	r2, #1
 80114be:	701a      	strb	r2, [r3, #0]
 80114c0:	230b      	movs	r3, #11
 80114c2:	18fb      	adds	r3, r7, r3
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d0e1      	beq.n	801148e <CheckGUITimers+0x16>
      }
    }
  }
  return _timing;
 80114ca:	68fb      	ldr	r3, [r7, #12]
}
 80114cc:	0018      	movs	r0, r3
 80114ce:	46bd      	mov	sp, r7
 80114d0:	b004      	add	sp, #16
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	20001d0c 	.word	0x20001d0c

080114d8 <GUI_TimerCounter>:
#endif /* !_RTOS */

void GUI_TimerCounter(void)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1 == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 80114dc:	4b0b      	ldr	r3, [pc, #44]	; (801150c <GUI_TimerCounter+0x34>)
 80114de:	791b      	ldrb	r3, [r3, #4]
 80114e0:	227f      	movs	r2, #127	; 0x7f
 80114e2:	4393      	bics	r3, r2
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d00d      	beq.n	8011506 <GUI_TimerCounter+0x2e>
  {
    if((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0)
 80114ea:	4b09      	ldr	r3, [pc, #36]	; (8011510 <GUI_TimerCounter+0x38>)
 80114ec:	881b      	ldrh	r3, [r3, #0]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	045b      	lsls	r3, r3, #17
 80114f2:	0c5b      	lsrs	r3, r3, #17
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	dd06      	ble.n	8011506 <GUI_TimerCounter+0x2e>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 80114f8:	4b05      	ldr	r3, [pc, #20]	; (8011510 <GUI_TimerCounter+0x38>)
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	3b01      	subs	r3, #1
 8011500:	b29a      	uxth	r2, r3
 8011502:	4b03      	ldr	r3, [pc, #12]	; (8011510 <GUI_TimerCounter+0x38>)
 8011504:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !_RTOS && USE_STM32_UTILITY_OS */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 8011506:	46c0      	nop			; (mov r8, r8)
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	20001d10 	.word	0x20001d10
 8011510:	20001d0c 	.word	0x20001d0c

08011514 <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	0002      	movs	r2, r0
 801151c:	1dfb      	adds	r3, r7, #7
 801151e:	701a      	strb	r2, [r3, #0]
 8011520:	1dbb      	adds	r3, r7, #6
 8011522:	1c0a      	adds	r2, r1, #0
 8011524:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8011526:	b672      	cpsid	i
}
 8011528:	46c0      	nop			; (mov r8, r8)
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 801152a:	1dbb      	adds	r3, r7, #6
 801152c:	781a      	ldrb	r2, [r3, #0]
 801152e:	1dfb      	adds	r3, r7, #7
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	0011      	movs	r1, r2
 8011534:	0018      	movs	r0, r3
 8011536:	f000 f88d 	bl	8011654 <GUI_GetMessage>
 801153a:	0003      	movs	r3, r0
 801153c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 801153e:	b662      	cpsie	i
}
 8011540:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
  if (event == 1)
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2b01      	cmp	r3, #1
 8011546:	d106      	bne.n	8011556 <GUI_CALLBACK_RX+0x42>
  {
#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(GUIMsgBox, GUI_USER_EVENT_GUI, 1);
 8011548:	4b05      	ldr	r3, [pc, #20]	; (8011560 <GUI_CALLBACK_RX+0x4c>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2201      	movs	r2, #1
 801154e:	2101      	movs	r1, #1
 8011550:	0018      	movs	r0, r3
 8011552:	f7f8 fe19 	bl	800a188 <osMessagePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8011556:	46c0      	nop			; (mov r8, r8)
 8011558:	46bd      	mov	sp, r7
 801155a:	b004      	add	sp, #16
 801155c:	bd80      	pop	{r7, pc}
 801155e:	46c0      	nop			; (mov r8, r8)
 8011560:	20001d18 	.word	0x20001d18

08011564 <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 8011564:	b5b0      	push	{r4, r5, r7, lr}
 8011566:	b086      	sub	sp, #24
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0 == (Event & GUI_PE_NOTIF_Msk))
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	23ff      	movs	r3, #255	; 0xff
 8011570:	011b      	lsls	r3, r3, #4
 8011572:	4013      	ands	r3, r2
 8011574:	d11f      	bne.n	80115b6 <GUI_RXProcess+0x52>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 8011576:	2515      	movs	r5, #21
 8011578:	197c      	adds	r4, r7, r5
 801157a:	230f      	movs	r3, #15
 801157c:	18fa      	adds	r2, r7, r3
 801157e:	2310      	movs	r3, #16
 8011580:	18fb      	adds	r3, r7, r3
 8011582:	0011      	movs	r1, r2
 8011584:	0018      	movs	r0, r3
 8011586:	f000 f967 	bl	8011858 <GUI_SendAnswer>
 801158a:	0003      	movs	r3, r0
 801158c:	7023      	strb	r3, [r4, #0]

    switch (state)
 801158e:	197b      	adds	r3, r7, r5
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d038      	beq.n	8011608 <GUI_RXProcess+0xa4>
 8011596:	2b02      	cmp	r3, #2
 8011598:	d104      	bne.n	80115a4 <GUI_RXProcess+0x40>
    {
    case GUI_STATE_RESET:
      /* DPM_RESET_REQ received by the device */
      /* Save parameters in FLASH */
      BSP_GUI_SaveDataInFlash();
 801159a:	f7ff f895 	bl	80106c8 <BSP_GUI_SaveDataInFlash>
      HAL_NVIC_SystemReset();
 801159e:	f7f6 feca 	bl	8008336 <HAL_NVIC_SystemReset>
      break;
 80115a2:	e032      	b.n	801160a <GUI_RXProcess+0xa6>
    case GUI_STATE_INIT:
      /* DPM_INIT_REQ received by the device */
      break;
    default:
      /* Another GUI messages received by the device */
      TRACER_EMB_Add(msg, size);
 80115a4:	693a      	ldr	r2, [r7, #16]
 80115a6:	230f      	movs	r3, #15
 80115a8:	18fb      	adds	r3, r7, r3
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	0019      	movs	r1, r3
 80115ae:	0010      	movs	r0, r2
 80115b0:	f002 fe2c 	bl	801420c <TRACER_EMB_Add>
      break;
 80115b4:	e029      	b.n	801160a <GUI_RXProcess+0xa6>
    }
  }
  else
  {
    uint16_t type_event = (Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	091b      	lsrs	r3, r3, #4
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	2016      	movs	r0, #22
 80115be:	183b      	adds	r3, r7, r0
 80115c0:	21ff      	movs	r1, #255	; 0xff
 80115c2:	400a      	ands	r2, r1
 80115c4:	801a      	strh	r2, [r3, #0]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 80115c6:	183b      	adds	r3, r7, r0
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	2b66      	cmp	r3, #102	; 0x66
 80115cc:	d10e      	bne.n	80115ec <GUI_RXProcess+0x88>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos), GUI_NOTIF_MEASUREREPORTING, HAL_GetTick());
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	0e1b      	lsrs	r3, r3, #24
 80115d2:	2203      	movs	r2, #3
 80115d4:	4013      	ands	r3, r2
 80115d6:	001c      	movs	r4, r3
 80115d8:	f7f5 ff04 	bl	80073e4 <HAL_GetTick>
 80115dc:	0002      	movs	r2, r0
 80115de:	2380      	movs	r3, #128	; 0x80
 80115e0:	011b      	lsls	r3, r3, #4
 80115e2:	0019      	movs	r1, r3
 80115e4:	0020      	movs	r0, r4
 80115e6:	f000 f815 	bl	8011614 <GUI_FormatAndSendNotification>
 80115ea:	e00e      	b.n	801160a <GUI_RXProcess+0xa6>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos), GUI_NOTIF_PE_EVENT, type_event);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	0e1b      	lsrs	r3, r3, #24
 80115f0:	2203      	movs	r2, #3
 80115f2:	4013      	ands	r3, r2
 80115f4:	0018      	movs	r0, r3
 80115f6:	2316      	movs	r3, #22
 80115f8:	18fb      	adds	r3, r7, r3
 80115fa:	881a      	ldrh	r2, [r3, #0]
 80115fc:	2380      	movs	r3, #128	; 0x80
 80115fe:	019b      	lsls	r3, r3, #6
 8011600:	0019      	movs	r1, r3
 8011602:	f000 f807 	bl	8011614 <GUI_FormatAndSendNotification>
 8011606:	e000      	b.n	801160a <GUI_RXProcess+0xa6>
      break;
 8011608:	46c0      	nop			; (mov r8, r8)
    }
  }
  return 0;
 801160a:	2300      	movs	r3, #0
}
 801160c:	0018      	movs	r0, r3
 801160e:	46bd      	mov	sp, r7
 8011610:	b006      	add	sp, #24
 8011612:	bdb0      	pop	{r4, r5, r7, pc}

08011614 <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 8011614:	b5b0      	push	{r4, r5, r7, lr}
 8011616:	b088      	sub	sp, #32
 8011618:	af02      	add	r7, sp, #8
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification(PortNum, &msg, &size, TypeNotification, Value))
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	b2d8      	uxtb	r0, r3
 8011624:	68bc      	ldr	r4, [r7, #8]
 8011626:	2513      	movs	r5, #19
 8011628:	197a      	adds	r2, r7, r5
 801162a:	2314      	movs	r3, #20
 801162c:	18f9      	adds	r1, r7, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	0023      	movs	r3, r4
 8011634:	f000 fa00 	bl	8011a38 <GUI_SendNotification>
 8011638:	1e03      	subs	r3, r0, #0
 801163a:	d006      	beq.n	801164a <GUI_FormatAndSendNotification+0x36>
  {
    TRACER_EMB_Add(msg, size);
 801163c:	697a      	ldr	r2, [r7, #20]
 801163e:	197b      	adds	r3, r7, r5
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	0019      	movs	r1, r3
 8011644:	0010      	movs	r0, r2
 8011646:	f002 fde1 	bl	801420c <TRACER_EMB_Add>
  }
  return 0;
 801164a:	2300      	movs	r3, #0
}
 801164c:	0018      	movs	r0, r3
 801164e:	46bd      	mov	sp, r7
 8011650:	b006      	add	sp, #24
 8011652:	bdb0      	pop	{r4, r5, r7, pc}

08011654 <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	0002      	movs	r2, r0
 801165c:	1dfb      	adds	r3, r7, #7
 801165e:	701a      	strb	r2, [r3, #0]
 8011660:	1dbb      	adds	r3, r7, #6
 8011662:	1c0a      	adds	r2, r1, #0
 8011664:	701a      	strb	r2, [r3, #0]
  uint32_t status = 0;
 8011666:	2300      	movs	r3, #0
 8011668:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if(cursor < TLV_SIZE_MAX)
 801166a:	4b75      	ldr	r3, [pc, #468]	; (8011840 <GUI_GetMessage+0x1ec>)
 801166c:	881b      	ldrh	r3, [r3, #0]
 801166e:	2bff      	cmp	r3, #255	; 0xff
 8011670:	d80b      	bhi.n	801168a <GUI_GetMessage+0x36>
  {
    PtrDataRx[cursor] = Character;
 8011672:	4b73      	ldr	r3, [pc, #460]	; (8011840 <GUI_GetMessage+0x1ec>)
 8011674:	881b      	ldrh	r3, [r3, #0]
 8011676:	0019      	movs	r1, r3
 8011678:	4b72      	ldr	r3, [pc, #456]	; (8011844 <GUI_GetMessage+0x1f0>)
 801167a:	1dfa      	adds	r2, r7, #7
 801167c:	7812      	ldrb	r2, [r2, #0]
 801167e:	545a      	strb	r2, [r3, r1]
    counter = 0;
    Rstate = Rstart;
    return 0;
  }

  if(Error) Rstate = Rerror;
 8011680:	1dbb      	adds	r3, r7, #6
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d00e      	beq.n	80116a6 <GUI_GetMessage+0x52>
 8011688:	e00a      	b.n	80116a0 <GUI_GetMessage+0x4c>
    cursor = 0;
 801168a:	4b6d      	ldr	r3, [pc, #436]	; (8011840 <GUI_GetMessage+0x1ec>)
 801168c:	2200      	movs	r2, #0
 801168e:	801a      	strh	r2, [r3, #0]
    counter = 0;
 8011690:	4b6d      	ldr	r3, [pc, #436]	; (8011848 <GUI_GetMessage+0x1f4>)
 8011692:	2200      	movs	r2, #0
 8011694:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 8011696:	4b6d      	ldr	r3, [pc, #436]	; (801184c <GUI_GetMessage+0x1f8>)
 8011698:	2200      	movs	r2, #0
 801169a:	701a      	strb	r2, [r3, #0]
    return 0;
 801169c:	2300      	movs	r3, #0
 801169e:	e0ca      	b.n	8011836 <GUI_GetMessage+0x1e2>
  if(Error) Rstate = Rerror;
 80116a0:	4b6a      	ldr	r3, [pc, #424]	; (801184c <GUI_GetMessage+0x1f8>)
 80116a2:	2204      	movs	r2, #4
 80116a4:	701a      	strb	r2, [r3, #0]

  switch(Rstate)
 80116a6:	4b69      	ldr	r3, [pc, #420]	; (801184c <GUI_GetMessage+0x1f8>)
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	2b04      	cmp	r3, #4
 80116ac:	d900      	bls.n	80116b0 <GUI_GetMessage+0x5c>
 80116ae:	e0bb      	b.n	8011828 <GUI_GetMessage+0x1d4>
 80116b0:	009a      	lsls	r2, r3, #2
 80116b2:	4b67      	ldr	r3, [pc, #412]	; (8011850 <GUI_GetMessage+0x1fc>)
 80116b4:	18d3      	adds	r3, r2, r3
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	469f      	mov	pc, r3
  {
  case Rstart :
    if(PtrDataRx[cursor] == TLV_SOF)
 80116ba:	4b61      	ldr	r3, [pc, #388]	; (8011840 <GUI_GetMessage+0x1ec>)
 80116bc:	881b      	ldrh	r3, [r3, #0]
 80116be:	001a      	movs	r2, r3
 80116c0:	4b60      	ldr	r3, [pc, #384]	; (8011844 <GUI_GetMessage+0x1f0>)
 80116c2:	5c9b      	ldrb	r3, [r3, r2]
 80116c4:	2bfd      	cmp	r3, #253	; 0xfd
 80116c6:	d106      	bne.n	80116d6 <GUI_GetMessage+0x82>
    {
      counter++;
 80116c8:	4b5f      	ldr	r3, [pc, #380]	; (8011848 <GUI_GetMessage+0x1f4>)
 80116ca:	881b      	ldrh	r3, [r3, #0]
 80116cc:	3301      	adds	r3, #1
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	4b5d      	ldr	r3, [pc, #372]	; (8011848 <GUI_GetMessage+0x1f4>)
 80116d2:	801a      	strh	r2, [r3, #0]
 80116d4:	e006      	b.n	80116e4 <GUI_GetMessage+0x90>
    }
    else
    {
      counter = 0;
 80116d6:	4b5c      	ldr	r3, [pc, #368]	; (8011848 <GUI_GetMessage+0x1f4>)
 80116d8:	2200      	movs	r2, #0
 80116da:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFF; /* cursor is unsigned, but it will inevitably increments at the end of function, and we need a 0 at the next pass here */
 80116dc:	4b58      	ldr	r3, [pc, #352]	; (8011840 <GUI_GetMessage+0x1ec>)
 80116de:	2201      	movs	r2, #1
 80116e0:	4252      	negs	r2, r2
 80116e2:	801a      	strh	r2, [r3, #0]
    }

    if(counter == 4) /* The whole SOF is received */
 80116e4:	4b58      	ldr	r3, [pc, #352]	; (8011848 <GUI_GetMessage+0x1f4>)
 80116e6:	881b      	ldrh	r3, [r3, #0]
 80116e8:	2b04      	cmp	r3, #4
 80116ea:	d000      	beq.n	80116ee <GUI_GetMessage+0x9a>
 80116ec:	e095      	b.n	801181a <GUI_GetMessage+0x1c6>
    {
      counter = 0;
 80116ee:	4b56      	ldr	r3, [pc, #344]	; (8011848 <GUI_GetMessage+0x1f4>)
 80116f0:	2200      	movs	r2, #0
 80116f2:	801a      	strh	r2, [r3, #0]
      Rstate = Rsize;
 80116f4:	4b55      	ldr	r3, [pc, #340]	; (801184c <GUI_GetMessage+0x1f8>)
 80116f6:	2202      	movs	r2, #2
 80116f8:	701a      	strb	r2, [r3, #0]
    }
    break;
 80116fa:	e08e      	b.n	801181a <GUI_GetMessage+0x1c6>
  case Rsize :
    counter++;
 80116fc:	4b52      	ldr	r3, [pc, #328]	; (8011848 <GUI_GetMessage+0x1f4>)
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	3301      	adds	r3, #1
 8011702:	b29a      	uxth	r2, r3
 8011704:	4b50      	ldr	r3, [pc, #320]	; (8011848 <GUI_GetMessage+0x1f4>)
 8011706:	801a      	strh	r2, [r3, #0]

    if(counter == 3) /* We have received the size */
 8011708:	4b4f      	ldr	r3, [pc, #316]	; (8011848 <GUI_GetMessage+0x1f4>)
 801170a:	881b      	ldrh	r3, [r3, #0]
 801170c:	2b03      	cmp	r3, #3
 801170e:	d000      	beq.n	8011712 <GUI_GetMessage+0xbe>
 8011710:	e085      	b.n	801181e <GUI_GetMessage+0x1ca>
    {
      currentSize = (PtrDataRx[cursor-1] << 8) + PtrDataRx[cursor];
 8011712:	4b4b      	ldr	r3, [pc, #300]	; (8011840 <GUI_GetMessage+0x1ec>)
 8011714:	881b      	ldrh	r3, [r3, #0]
 8011716:	3b01      	subs	r3, #1
 8011718:	4a4a      	ldr	r2, [pc, #296]	; (8011844 <GUI_GetMessage+0x1f0>)
 801171a:	5cd3      	ldrb	r3, [r2, r3]
 801171c:	b29b      	uxth	r3, r3
 801171e:	021b      	lsls	r3, r3, #8
 8011720:	b29a      	uxth	r2, r3
 8011722:	4b47      	ldr	r3, [pc, #284]	; (8011840 <GUI_GetMessage+0x1ec>)
 8011724:	881b      	ldrh	r3, [r3, #0]
 8011726:	0019      	movs	r1, r3
 8011728:	4b46      	ldr	r3, [pc, #280]	; (8011844 <GUI_GetMessage+0x1f0>)
 801172a:	5c5b      	ldrb	r3, [r3, r1]
 801172c:	b29b      	uxth	r3, r3
 801172e:	18d3      	adds	r3, r2, r3
 8011730:	b29a      	uxth	r2, r3
 8011732:	4b48      	ldr	r3, [pc, #288]	; (8011854 <GUI_GetMessage+0x200>)
 8011734:	801a      	strh	r2, [r3, #0]
      if (0 == currentSize)
 8011736:	4b47      	ldr	r3, [pc, #284]	; (8011854 <GUI_GetMessage+0x200>)
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d103      	bne.n	8011746 <GUI_GetMessage+0xf2>
      {
        Rstate = Rend;
 801173e:	4b43      	ldr	r3, [pc, #268]	; (801184c <GUI_GetMessage+0x1f8>)
 8011740:	2203      	movs	r2, #3
 8011742:	701a      	strb	r2, [r3, #0]
 8011744:	e002      	b.n	801174c <GUI_GetMessage+0xf8>
      }
      else
      {
        Rstate = RonGoing;
 8011746:	4b41      	ldr	r3, [pc, #260]	; (801184c <GUI_GetMessage+0x1f8>)
 8011748:	2201      	movs	r2, #1
 801174a:	701a      	strb	r2, [r3, #0]
      }
      counter = 0;
 801174c:	4b3e      	ldr	r3, [pc, #248]	; (8011848 <GUI_GetMessage+0x1f4>)
 801174e:	2200      	movs	r2, #0
 8011750:	801a      	strh	r2, [r3, #0]
    }
    break;
 8011752:	e064      	b.n	801181e <GUI_GetMessage+0x1ca>
  case RonGoing :
    counter++;
 8011754:	4b3c      	ldr	r3, [pc, #240]	; (8011848 <GUI_GetMessage+0x1f4>)
 8011756:	881b      	ldrh	r3, [r3, #0]
 8011758:	3301      	adds	r3, #1
 801175a:	b29a      	uxth	r2, r3
 801175c:	4b3a      	ldr	r3, [pc, #232]	; (8011848 <GUI_GetMessage+0x1f4>)
 801175e:	801a      	strh	r2, [r3, #0]

    if(counter == currentSize)
 8011760:	4b39      	ldr	r3, [pc, #228]	; (8011848 <GUI_GetMessage+0x1f4>)
 8011762:	881a      	ldrh	r2, [r3, #0]
 8011764:	4b3b      	ldr	r3, [pc, #236]	; (8011854 <GUI_GetMessage+0x200>)
 8011766:	881b      	ldrh	r3, [r3, #0]
 8011768:	429a      	cmp	r2, r3
 801176a:	d15a      	bne.n	8011822 <GUI_GetMessage+0x1ce>
    {
      /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
      counter = 0;
 801176c:	4b36      	ldr	r3, [pc, #216]	; (8011848 <GUI_GetMessage+0x1f4>)
 801176e:	2200      	movs	r2, #0
 8011770:	801a      	strh	r2, [r3, #0]
      Rstate = Rend;
 8011772:	4b36      	ldr	r3, [pc, #216]	; (801184c <GUI_GetMessage+0x1f8>)
 8011774:	2203      	movs	r2, #3
 8011776:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011778:	e053      	b.n	8011822 <GUI_GetMessage+0x1ce>
  case Rend :
    counter++;
 801177a:	4b33      	ldr	r3, [pc, #204]	; (8011848 <GUI_GetMessage+0x1f4>)
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	3301      	adds	r3, #1
 8011780:	b29a      	uxth	r2, r3
 8011782:	4b31      	ldr	r3, [pc, #196]	; (8011848 <GUI_GetMessage+0x1f4>)
 8011784:	801a      	strh	r2, [r3, #0]
    if(PtrDataRx[cursor] == TLV_EOF
 8011786:	4b2e      	ldr	r3, [pc, #184]	; (8011840 <GUI_GetMessage+0x1ec>)
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	001a      	movs	r2, r3
 801178c:	4b2d      	ldr	r3, [pc, #180]	; (8011844 <GUI_GetMessage+0x1f0>)
 801178e:	5c9b      	ldrb	r3, [r3, r2]
 8011790:	2ba5      	cmp	r3, #165	; 0xa5
 8011792:	d124      	bne.n	80117de <GUI_GetMessage+0x18a>
       && PtrDataRx[cursor-1] == TLV_EOF
 8011794:	4b2a      	ldr	r3, [pc, #168]	; (8011840 <GUI_GetMessage+0x1ec>)
 8011796:	881b      	ldrh	r3, [r3, #0]
 8011798:	3b01      	subs	r3, #1
 801179a:	4a2a      	ldr	r2, [pc, #168]	; (8011844 <GUI_GetMessage+0x1f0>)
 801179c:	5cd3      	ldrb	r3, [r2, r3]
 801179e:	2ba5      	cmp	r3, #165	; 0xa5
 80117a0:	d11d      	bne.n	80117de <GUI_GetMessage+0x18a>
         && PtrDataRx[cursor-2] == TLV_EOF
 80117a2:	4b27      	ldr	r3, [pc, #156]	; (8011840 <GUI_GetMessage+0x1ec>)
 80117a4:	881b      	ldrh	r3, [r3, #0]
 80117a6:	3b02      	subs	r3, #2
 80117a8:	4a26      	ldr	r2, [pc, #152]	; (8011844 <GUI_GetMessage+0x1f0>)
 80117aa:	5cd3      	ldrb	r3, [r2, r3]
 80117ac:	2ba5      	cmp	r3, #165	; 0xa5
 80117ae:	d116      	bne.n	80117de <GUI_GetMessage+0x18a>
           && PtrDataRx[cursor-3] == TLV_EOF)
 80117b0:	4b23      	ldr	r3, [pc, #140]	; (8011840 <GUI_GetMessage+0x1ec>)
 80117b2:	881b      	ldrh	r3, [r3, #0]
 80117b4:	3b03      	subs	r3, #3
 80117b6:	4a23      	ldr	r2, [pc, #140]	; (8011844 <GUI_GetMessage+0x1f0>)
 80117b8:	5cd3      	ldrb	r3, [r2, r3]
 80117ba:	2ba5      	cmp	r3, #165	; 0xa5
 80117bc:	d10f      	bne.n	80117de <GUI_GetMessage+0x18a>
    {
      /* The semaphore must be given only in this case, because otherwise it means we didn't receive the correct size of bytes */
      if(counter == 4)
 80117be:	4b22      	ldr	r3, [pc, #136]	; (8011848 <GUI_GetMessage+0x1f4>)
 80117c0:	881b      	ldrh	r3, [r3, #0]
 80117c2:	2b04      	cmp	r3, #4
 80117c4:	d101      	bne.n	80117ca <GUI_GetMessage+0x176>
      {
        status = 1;
 80117c6:	2301      	movs	r3, #1
 80117c8:	60fb      	str	r3, [r7, #12]
      }
      counter = 0;
 80117ca:	4b1f      	ldr	r3, [pc, #124]	; (8011848 <GUI_GetMessage+0x1f4>)
 80117cc:	2200      	movs	r2, #0
 80117ce:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFF;
 80117d0:	4b1b      	ldr	r3, [pc, #108]	; (8011840 <GUI_GetMessage+0x1ec>)
 80117d2:	2201      	movs	r2, #1
 80117d4:	4252      	negs	r2, r2
 80117d6:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 80117d8:	4b1c      	ldr	r3, [pc, #112]	; (801184c <GUI_GetMessage+0x1f8>)
 80117da:	2200      	movs	r2, #0
 80117dc:	701a      	strb	r2, [r3, #0]
    }

    if(cursor == currentSize + 11)
 80117de:	4b18      	ldr	r3, [pc, #96]	; (8011840 <GUI_GetMessage+0x1ec>)
 80117e0:	881b      	ldrh	r3, [r3, #0]
 80117e2:	001a      	movs	r2, r3
 80117e4:	4b1b      	ldr	r3, [pc, #108]	; (8011854 <GUI_GetMessage+0x200>)
 80117e6:	881b      	ldrh	r3, [r3, #0]
 80117e8:	330b      	adds	r3, #11
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d11b      	bne.n	8011826 <GUI_GetMessage+0x1d2>
    {
      /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
      counter = 0;
 80117ee:	4b16      	ldr	r3, [pc, #88]	; (8011848 <GUI_GetMessage+0x1f4>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFF;
 80117f4:	4b12      	ldr	r3, [pc, #72]	; (8011840 <GUI_GetMessage+0x1ec>)
 80117f6:	2201      	movs	r2, #1
 80117f8:	4252      	negs	r2, r2
 80117fa:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 80117fc:	4b13      	ldr	r3, [pc, #76]	; (801184c <GUI_GetMessage+0x1f8>)
 80117fe:	2200      	movs	r2, #0
 8011800:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011802:	e010      	b.n	8011826 <GUI_GetMessage+0x1d2>
  case Rerror :
    counter = 0;
 8011804:	4b10      	ldr	r3, [pc, #64]	; (8011848 <GUI_GetMessage+0x1f4>)
 8011806:	2200      	movs	r2, #0
 8011808:	801a      	strh	r2, [r3, #0]
    cursor = 0xFFFF;
 801180a:	4b0d      	ldr	r3, [pc, #52]	; (8011840 <GUI_GetMessage+0x1ec>)
 801180c:	2201      	movs	r2, #1
 801180e:	4252      	negs	r2, r2
 8011810:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 8011812:	4b0e      	ldr	r3, [pc, #56]	; (801184c <GUI_GetMessage+0x1f8>)
 8011814:	2200      	movs	r2, #0
 8011816:	701a      	strb	r2, [r3, #0]
    break;
 8011818:	e006      	b.n	8011828 <GUI_GetMessage+0x1d4>
    break;
 801181a:	46c0      	nop			; (mov r8, r8)
 801181c:	e004      	b.n	8011828 <GUI_GetMessage+0x1d4>
    break;
 801181e:	46c0      	nop			; (mov r8, r8)
 8011820:	e002      	b.n	8011828 <GUI_GetMessage+0x1d4>
    break;
 8011822:	46c0      	nop			; (mov r8, r8)
 8011824:	e000      	b.n	8011828 <GUI_GetMessage+0x1d4>
    break;
 8011826:	46c0      	nop			; (mov r8, r8)
  }

  cursor++;
 8011828:	4b05      	ldr	r3, [pc, #20]	; (8011840 <GUI_GetMessage+0x1ec>)
 801182a:	881b      	ldrh	r3, [r3, #0]
 801182c:	3301      	adds	r3, #1
 801182e:	b29a      	uxth	r2, r3
 8011830:	4b03      	ldr	r3, [pc, #12]	; (8011840 <GUI_GetMessage+0x1ec>)
 8011832:	801a      	strh	r2, [r3, #0]
  return status;
 8011834:	68fb      	ldr	r3, [r7, #12]
}
 8011836:	0018      	movs	r0, r3
 8011838:	46bd      	mov	sp, r7
 801183a:	b004      	add	sp, #16
 801183c:	bd80      	pop	{r7, pc}
 801183e:	46c0      	nop			; (mov r8, r8)
 8011840:	20001730 	.word	0x20001730
 8011844:	20001d1c 	.word	0x20001d1c
 8011848:	20001732 	.word	0x20001732
 801184c:	20001734 	.word	0x20001734
 8011850:	0801692c 	.word	0x0801692c
 8011854:	20001736 	.word	0x20001736

08011858 <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 8011858:	b590      	push	{r4, r7, lr}
 801185a:	b085      	sub	sp, #20
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 8011862:	4b70      	ldr	r3, [pc, #448]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 8011864:	791a      	ldrb	r2, [r3, #4]
 8011866:	230f      	movs	r3, #15
 8011868:	18fb      	adds	r3, r7, r3
 801186a:	0952      	lsrs	r2, r2, #5
 801186c:	701a      	strb	r2, [r3, #0]

  /* Do the appropriate treatment in response to what we have received */
  switch(PtrDataRx[TLV_TAG_POSITION] & 0x1F)
 801186e:	4b6d      	ldr	r3, [pc, #436]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 8011870:	791b      	ldrb	r3, [r3, #4]
 8011872:	001a      	movs	r2, r3
 8011874:	231f      	movs	r3, #31
 8011876:	4013      	ands	r3, r2
 8011878:	2b10      	cmp	r3, #16
 801187a:	d900      	bls.n	801187e <GUI_SendAnswer+0x26>
 801187c:	e0be      	b.n	80119fc <GUI_SendAnswer+0x1a4>
 801187e:	009a      	lsls	r2, r3, #2
 8011880:	4b69      	ldr	r3, [pc, #420]	; (8011a28 <GUI_SendAnswer+0x1d0>)
 8011882:	18d3      	adds	r3, r2, r3
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	469f      	mov	pc, r3
  {
  case DPM_RESET_REQ:
    /* Reset*/
    return GUI_STATE_RESET;
 8011888:	2302      	movs	r3, #2
 801188a:	e0c7      	b.n	8011a1c <GUI_SendAnswer+0x1c4>

  case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 801188c:	4a67      	ldr	r2, [pc, #412]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 801188e:	240f      	movs	r4, #15
 8011890:	193b      	adds	r3, r7, r4
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	0011      	movs	r1, r2
 8011896:	0018      	movs	r0, r3
 8011898:	f000 fe2e 	bl	80124f8 <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	4a63      	ldr	r2, [pc, #396]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 80118a0:	601a      	str	r2, [r3, #0]
      *pSizeMsg = TLV_get_string_length(Processed) + 8;
 80118a2:	4b62      	ldr	r3, [pc, #392]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 80118a4:	0018      	movs	r0, r3
 80118a6:	f7ff fc21 	bl	80110ec <TLV_get_string_length>
 80118aa:	0003      	movs	r3, r0
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	3308      	adds	r3, #8
 80118b0:	b2da      	uxtb	r2, r3
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	0019      	movs	r1, r3
 80118c0:	0010      	movs	r0, r2
 80118c2:	f002 fca3 	bl	801420c <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 80118c6:	4b5a      	ldr	r3, [pc, #360]	; (8011a30 <GUI_SendAnswer+0x1d8>)
 80118c8:	2201      	movs	r2, #1
 80118ca:	701a      	strb	r2, [r3, #0]
      if (0 == port)
 80118cc:	193b      	adds	r3, r7, r4
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d105      	bne.n	80118e0 <GUI_SendAnswer+0x88>
      {
        /* Send a notification all the port */
        GUI_FormatAndSendNotification(USBPD_PORT_0, GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP, USBPD_NOTIFY_ALL);
 80118d4:	4b57      	ldr	r3, [pc, #348]	; (8011a34 <GUI_SendAnswer+0x1dc>)
 80118d6:	2265      	movs	r2, #101	; 0x65
 80118d8:	0019      	movs	r1, r3
 80118da:	2000      	movs	r0, #0
 80118dc:	f7ff fe9a 	bl	8011614 <GUI_FormatAndSendNotification>
#if USBPD_PORT_COUNT==2
        GUI_FormatAndSendNotification(USBPD_PORT_1, GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP, USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 80118e0:	2300      	movs	r3, #0
 80118e2:	e09b      	b.n	8011a1c <GUI_SendAnswer+0x1c4>
    }

  case DPM_CONFIG_GET_REQ:
    if (0 != port)
 80118e4:	220f      	movs	r2, #15
 80118e6:	18bb      	adds	r3, r7, r2
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d009      	beq.n	8011902 <GUI_SendAnswer+0xaa>
    {
      Send_DpmConfigGetCnf((port - 1), PtrDataRx, Processed);
 80118ee:	18bb      	adds	r3, r7, r2
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	3b01      	subs	r3, #1
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	4a4d      	ldr	r2, [pc, #308]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 80118f8:	494a      	ldr	r1, [pc, #296]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 80118fa:	0018      	movs	r0, r3
 80118fc:	f001 ff56 	bl	80137ac <Send_DpmConfigGetCnf>
    }
    else
    {
      Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
    }
    break;
 8011900:	e07d      	b.n	80119fe <GUI_SendAnswer+0x1a6>
      Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8011902:	494a      	ldr	r1, [pc, #296]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 8011904:	230f      	movs	r3, #15
 8011906:	18fb      	adds	r3, r7, r3
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	2205      	movs	r2, #5
 801190c:	0018      	movs	r0, r3
 801190e:	f002 fa2d 	bl	8013d6c <Send_DpmConfigGetRej>
    break;
 8011912:	e074      	b.n	80119fe <GUI_SendAnswer+0x1a6>
  case DPM_CONFIG_SET_REQ:
    if (0 != port)
 8011914:	220f      	movs	r2, #15
 8011916:	18bb      	adds	r3, r7, r2
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d009      	beq.n	8011932 <GUI_SendAnswer+0xda>
    {
      Send_DpmConfigSetCnf((port - 1), PtrDataRx, Processed);
 801191e:	18bb      	adds	r3, r7, r2
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	3b01      	subs	r3, #1
 8011924:	b2db      	uxtb	r3, r3
 8011926:	4a41      	ldr	r2, [pc, #260]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 8011928:	493e      	ldr	r1, [pc, #248]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 801192a:	0018      	movs	r0, r3
 801192c:	f001 fad4 	bl	8012ed8 <Send_DpmConfigSetCnf>
    }
    else
    {
      Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
    }
    break;
 8011930:	e065      	b.n	80119fe <GUI_SendAnswer+0x1a6>
      Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8011932:	493e      	ldr	r1, [pc, #248]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 8011934:	230f      	movs	r3, #15
 8011936:	18fb      	adds	r3, r7, r3
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	2205      	movs	r2, #5
 801193c:	0018      	movs	r0, r3
 801193e:	f002 fa15 	bl	8013d6c <Send_DpmConfigGetRej>
    break;
 8011942:	e05c      	b.n	80119fe <GUI_SendAnswer+0x1a6>
  case DPM_MESSAGE_REQ:
    if (0 != port)
 8011944:	220f      	movs	r2, #15
 8011946:	18bb      	adds	r3, r7, r2
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d009      	beq.n	8011962 <GUI_SendAnswer+0x10a>
    {
      Request_MessageReq((port - 1), PtrDataRx, Processed);
 801194e:	18bb      	adds	r3, r7, r2
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	3b01      	subs	r3, #1
 8011954:	b2db      	uxtb	r3, r3
 8011956:	4a35      	ldr	r2, [pc, #212]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 8011958:	4932      	ldr	r1, [pc, #200]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 801195a:	0018      	movs	r0, r3
 801195c:	f000 ff7a 	bl	8012854 <Request_MessageReq>
    }
    else
    {
      Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
    }
    break;
 8011960:	e04d      	b.n	80119fe <GUI_SendAnswer+0x1a6>
      Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8011962:	4932      	ldr	r1, [pc, #200]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 8011964:	230f      	movs	r3, #15
 8011966:	18fb      	adds	r3, r7, r3
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	2205      	movs	r2, #5
 801196c:	0018      	movs	r0, r3
 801196e:	f002 fa1f 	bl	8013db0 <Send_DpmMessageRej>
    break;
 8011972:	e044      	b.n	80119fe <GUI_SendAnswer+0x1a6>
  case DPM_REGISTER_READ_REQ:
    if (0 != port)
 8011974:	220f      	movs	r2, #15
 8011976:	18bb      	adds	r3, r7, r2
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d01d      	beq.n	80119ba <GUI_SendAnswer+0x162>
    {
      /* If size is 0*/
      if(!PtrDataRx[TLV_LENGTH_HIGH_POSITION] && !PtrDataRx[TLV_LENGTH_LOW_POSITION])
 801197e:	4b29      	ldr	r3, [pc, #164]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 8011980:	795b      	ldrb	r3, [r3, #5]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d10d      	bne.n	80119a2 <GUI_SendAnswer+0x14a>
 8011986:	4b27      	ldr	r3, [pc, #156]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 8011988:	799b      	ldrb	r3, [r3, #6]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d109      	bne.n	80119a2 <GUI_SendAnswer+0x14a>
      {
        Send_DpmRegisterReadCnf((port - 1), Processed, 0xFF);
 801198e:	18bb      	adds	r3, r7, r2
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	3b01      	subs	r3, #1
 8011994:	b2db      	uxtb	r3, r3
 8011996:	4925      	ldr	r1, [pc, #148]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 8011998:	22ff      	movs	r2, #255	; 0xff
 801199a:	0018      	movs	r0, r3
 801199c:	f002 fa2a 	bl	8013df4 <Send_DpmRegisterReadCnf>
    }
    else
    {
      Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
    }
    break;
 80119a0:	e02d      	b.n	80119fe <GUI_SendAnswer+0x1a6>
        Send_DpmRegisterReadCnf((port - 1), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 80119a2:	230f      	movs	r3, #15
 80119a4:	18fb      	adds	r3, r7, r3
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	3b01      	subs	r3, #1
 80119aa:	b2d8      	uxtb	r0, r3
 80119ac:	4b1d      	ldr	r3, [pc, #116]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 80119ae:	79da      	ldrb	r2, [r3, #7]
 80119b0:	4b1e      	ldr	r3, [pc, #120]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 80119b2:	0019      	movs	r1, r3
 80119b4:	f002 fa1e 	bl	8013df4 <Send_DpmRegisterReadCnf>
    break;
 80119b8:	e021      	b.n	80119fe <GUI_SendAnswer+0x1a6>
      Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 80119ba:	491c      	ldr	r1, [pc, #112]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 80119bc:	230f      	movs	r3, #15
 80119be:	18fb      	adds	r3, r7, r3
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	2205      	movs	r2, #5
 80119c4:	0018      	movs	r0, r3
 80119c6:	f002 f9d1 	bl	8013d6c <Send_DpmConfigGetRej>
    break;
 80119ca:	e018      	b.n	80119fe <GUI_SendAnswer+0x1a6>
  case DPM_REGISTER_WRITE_REQ:
    if (0 != port)
 80119cc:	220f      	movs	r2, #15
 80119ce:	18bb      	adds	r3, r7, r2
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d009      	beq.n	80119ea <GUI_SendAnswer+0x192>
    {
      Send_DpmRegisterWriteCnf((port - 1), Processed, PtrDataRx);
 80119d6:	18bb      	adds	r3, r7, r2
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	3b01      	subs	r3, #1
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	4a11      	ldr	r2, [pc, #68]	; (8011a24 <GUI_SendAnswer+0x1cc>)
 80119e0:	4912      	ldr	r1, [pc, #72]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 80119e2:	0018      	movs	r0, r3
 80119e4:	f002 fa64 	bl	8013eb0 <Send_DpmRegisterWriteCnf>
    }
    else
    {
      Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
    }
    break;
 80119e8:	e009      	b.n	80119fe <GUI_SendAnswer+0x1a6>
      Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 80119ea:	4910      	ldr	r1, [pc, #64]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 80119ec:	230f      	movs	r3, #15
 80119ee:	18fb      	adds	r3, r7, r3
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	2205      	movs	r2, #5
 80119f4:	0018      	movs	r0, r3
 80119f6:	f002 f9b9 	bl	8013d6c <Send_DpmConfigGetRej>
    break;
 80119fa:	e000      	b.n	80119fe <GUI_SendAnswer+0x1a6>
  default :
    break;
 80119fc:	46c0      	nop			; (mov r8, r8)
  }

  *pMsgToSend = Processed;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	4a0a      	ldr	r2, [pc, #40]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 8011a02:	601a      	str	r2, [r3, #0]
  *pSizeMsg = TLV_get_string_length(Processed) + 8;
 8011a04:	4b09      	ldr	r3, [pc, #36]	; (8011a2c <GUI_SendAnswer+0x1d4>)
 8011a06:	0018      	movs	r0, r3
 8011a08:	f7ff fb70 	bl	80110ec <TLV_get_string_length>
 8011a0c:	0003      	movs	r3, r0
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	3308      	adds	r3, #8
 8011a12:	b2da      	uxtb	r2, r3
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 8011a18:	4b05      	ldr	r3, [pc, #20]	; (8011a30 <GUI_SendAnswer+0x1d8>)
 8011a1a:	781b      	ldrb	r3, [r3, #0]
}
 8011a1c:	0018      	movs	r0, r3
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	b005      	add	sp, #20
 8011a22:	bd90      	pop	{r4, r7, pc}
 8011a24:	20001d1c 	.word	0x20001d1c
 8011a28:	08016940 	.word	0x08016940
 8011a2c:	20001c0c 	.word	0x20001c0c
 8011a30:	20001718 	.word	0x20001718
 8011a34:	00006020 	.word	0x00006020

08011a38 <GUI_SendNotification>:
  * @param  TypeNotification  Type of the notification
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg, uint32_t TypeNotification, uint32_t Value)
{
 8011a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a3a:	b0a7      	sub	sp, #156	; 0x9c
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	60b9      	str	r1, [r7, #8]
 8011a40:	607a      	str	r2, [r7, #4]
 8011a42:	603b      	str	r3, [r7, #0]
 8011a44:	240f      	movs	r4, #15
 8011a46:	193b      	adds	r3, r7, r4
 8011a48:	1c02      	adds	r2, r0, #0
 8011a4a:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 8011a4c:	2397      	movs	r3, #151	; 0x97
 8011a4e:	18fb      	adds	r3, r7, r3
 8011a50:	2200      	movs	r2, #0
 8011a52:	701a      	strb	r2, [r3, #0]

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 8011a54:	4bc1      	ldr	r3, [pc, #772]	; (8011d5c <GUI_SendNotification+0x324>)
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d001      	beq.n	8011a60 <GUI_SendNotification+0x28>
 8011a5c:	f000 fbe9 	bl	8012232 <GUI_SendNotification+0x7fa>
  {
    TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 8011a60:	193b      	adds	r3, r7, r4
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	3301      	adds	r3, #1
 8011a66:	015b      	lsls	r3, r3, #5
 8011a68:	b25b      	sxtb	r3, r3
 8011a6a:	220c      	movs	r2, #12
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	b25b      	sxtb	r3, r3
 8011a70:	b2d9      	uxtb	r1, r3
 8011a72:	4bbb      	ldr	r3, [pc, #748]	; (8011d60 <GUI_SendNotification+0x328>)
 8011a74:	2280      	movs	r2, #128	; 0x80
 8011a76:	0052      	lsls	r2, r2, #1
 8011a78:	2584      	movs	r5, #132	; 0x84
 8011a7a:	1978      	adds	r0, r7, r5
 8011a7c:	f7ff f8cb 	bl	8010c16 <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	2220      	movs	r2, #32
 8011a84:	4013      	ands	r3, r2
 8011a86:	d100      	bne.n	8011a8a <GUI_SendNotification+0x52>
 8011a88:	e090      	b.n	8011bac <GUI_SendNotification+0x174>
    {
      /* Is Connected*/
      TLV_add(&send_tlv, GUI_IND_ISCONNECTED, 1, (uint8_t[]){DPM_Params[PortNum].PE_Power});
 8011a8a:	193b      	adds	r3, r7, r4
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	4ab5      	ldr	r2, [pc, #724]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011a90:	00db      	lsls	r3, r3, #3
 8011a92:	18d3      	adds	r3, r2, r3
 8011a94:	785b      	ldrb	r3, [r3, #1]
 8011a96:	075b      	lsls	r3, r3, #29
 8011a98:	0f5b      	lsrs	r3, r3, #29
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	001a      	movs	r2, r3
 8011a9e:	2180      	movs	r1, #128	; 0x80
 8011aa0:	187b      	adds	r3, r7, r1
 8011aa2:	701a      	strb	r2, [r3, #0]
 8011aa4:	187b      	adds	r3, r7, r1
 8011aa6:	1978      	adds	r0, r7, r5
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	2105      	movs	r1, #5
 8011aac:	f7ff f916 	bl	8010cdc <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8011ab0:	193b      	adds	r3, r7, r4
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	4aab      	ldr	r2, [pc, #684]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011ab6:	00db      	lsls	r3, r3, #3
 8011ab8:	18d3      	adds	r3, r2, r3
 8011aba:	785b      	ldrb	r3, [r3, #1]
 8011abc:	06db      	lsls	r3, r3, #27
 8011abe:	0fdb      	lsrs	r3, r3, #31
 8011ac0:	b2db      	uxtb	r3, r3
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d172      	bne.n	8011bac <GUI_SendNotification+0x174>
      {
        uint8_t rp_value = 0;
 8011ac6:	267f      	movs	r6, #127	; 0x7f
 8011ac8:	19bb      	adds	r3, r7, r6
 8011aca:	2200      	movs	r2, #0
 8011acc:	701a      	strb	r2, [r3, #0]
        /* CC line */
        TLV_add(&send_tlv, GUI_IND_CC, 1, (uint8_t[]){DPM_Params[PortNum].ActiveCCIs});
 8011ace:	193b      	adds	r3, r7, r4
 8011ad0:	781a      	ldrb	r2, [r3, #0]
 8011ad2:	4ba4      	ldr	r3, [pc, #656]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011ad4:	00d2      	lsls	r2, r2, #3
 8011ad6:	5cd3      	ldrb	r3, [r2, r3]
 8011ad8:	061b      	lsls	r3, r3, #24
 8011ada:	0f9b      	lsrs	r3, r3, #30
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	001a      	movs	r2, r3
 8011ae0:	217c      	movs	r1, #124	; 0x7c
 8011ae2:	187b      	adds	r3, r7, r1
 8011ae4:	701a      	strb	r2, [r3, #0]
 8011ae6:	187b      	adds	r3, r7, r1
 8011ae8:	1978      	adds	r0, r7, r5
 8011aea:	2201      	movs	r2, #1
 8011aec:	2106      	movs	r1, #6
 8011aee:	f7ff f8f5 	bl	8010cdc <TLV_add>
        /* Power Role*/
        TLV_add(&send_tlv, GUI_IND_POWERROLE, 1, (uint8_t[]){DPM_Params[PortNum].PE_PowerRole});
 8011af2:	193b      	adds	r3, r7, r4
 8011af4:	781a      	ldrb	r2, [r3, #0]
 8011af6:	4b9b      	ldr	r3, [pc, #620]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011af8:	00d2      	lsls	r2, r2, #3
 8011afa:	5cd3      	ldrb	r3, [r2, r3]
 8011afc:	075b      	lsls	r3, r3, #29
 8011afe:	0fdb      	lsrs	r3, r3, #31
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	001a      	movs	r2, r3
 8011b04:	2178      	movs	r1, #120	; 0x78
 8011b06:	187b      	adds	r3, r7, r1
 8011b08:	701a      	strb	r2, [r3, #0]
 8011b0a:	187b      	adds	r3, r7, r1
 8011b0c:	1978      	adds	r0, r7, r5
 8011b0e:	2201      	movs	r2, #1
 8011b10:	2108      	movs	r1, #8
 8011b12:	f7ff f8e3 	bl	8010cdc <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 8011b16:	19bb      	adds	r3, r7, r6
 8011b18:	2203      	movs	r2, #3
 8011b1a:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 8011b1c:	19bb      	adds	r3, r7, r6
 8011b1e:	1978      	adds	r0, r7, r5
 8011b20:	2201      	movs	r2, #1
 8011b22:	2109      	movs	r1, #9
 8011b24:	f7ff f8da 	bl	8010cdc <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 8011b28:	193b      	adds	r3, r7, r4
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	4a8d      	ldr	r2, [pc, #564]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011b2e:	00db      	lsls	r3, r3, #3
 8011b30:	18d3      	adds	r3, r2, r3
 8011b32:	785b      	ldrb	r3, [r3, #1]
 8011b34:	075b      	lsls	r3, r3, #29
 8011b36:	0f5b      	lsrs	r3, r3, #29
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	2b03      	cmp	r3, #3
 8011b3c:	d136      	bne.n	8011bac <GUI_SendNotification+0x174>
        {
          /* Data Role*/
          TLV_add(&send_tlv, GUI_IND_DATAROLE, 1, (uint8_t[]){DPM_Params[PortNum].PE_DataRole});
 8011b3e:	193b      	adds	r3, r7, r4
 8011b40:	781a      	ldrb	r2, [r3, #0]
 8011b42:	4b88      	ldr	r3, [pc, #544]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011b44:	00d2      	lsls	r2, r2, #3
 8011b46:	5cd3      	ldrb	r3, [r2, r3]
 8011b48:	071b      	lsls	r3, r3, #28
 8011b4a:	0fdb      	lsrs	r3, r3, #31
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	001a      	movs	r2, r3
 8011b50:	2174      	movs	r1, #116	; 0x74
 8011b52:	187b      	adds	r3, r7, r1
 8011b54:	701a      	strb	r2, [r3, #0]
 8011b56:	187b      	adds	r3, r7, r1
 8011b58:	1978      	adds	r0, r7, r5
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	2107      	movs	r1, #7
 8011b5e:	f7ff f8bd 	bl	8010cdc <TLV_add>
          /* Vconn ON*/
          TLV_add(&send_tlv, GUI_IND_VCONNON, 1, (uint8_t[]){DPM_Params[PortNum].VconnStatus});
 8011b62:	193b      	adds	r3, r7, r4
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	4a7f      	ldr	r2, [pc, #508]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011b68:	00db      	lsls	r3, r3, #3
 8011b6a:	18d3      	adds	r3, r2, r3
 8011b6c:	785b      	ldrb	r3, [r3, #1]
 8011b6e:	061b      	lsls	r3, r3, #24
 8011b70:	0fdb      	lsrs	r3, r3, #31
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	001a      	movs	r2, r3
 8011b76:	2170      	movs	r1, #112	; 0x70
 8011b78:	187b      	adds	r3, r7, r1
 8011b7a:	701a      	strb	r2, [r3, #0]
 8011b7c:	187b      	adds	r3, r7, r1
 8011b7e:	1978      	adds	r0, r7, r5
 8011b80:	2201      	movs	r2, #1
 8011b82:	210a      	movs	r1, #10
 8011b84:	f7ff f8aa 	bl	8010cdc <TLV_add>
          /* PD_Spec Revision */
          TLV_add(&send_tlv, GUI_IND_PD_SPECREVISION, 1, (uint8_t[]){DPM_Params[PortNum].PE_SpecRevision});
 8011b88:	193b      	adds	r3, r7, r4
 8011b8a:	781a      	ldrb	r2, [r3, #0]
 8011b8c:	4b75      	ldr	r3, [pc, #468]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011b8e:	00d2      	lsls	r2, r2, #3
 8011b90:	5cd3      	ldrb	r3, [r2, r3]
 8011b92:	079b      	lsls	r3, r3, #30
 8011b94:	0f9b      	lsrs	r3, r3, #30
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	001a      	movs	r2, r3
 8011b9a:	216c      	movs	r1, #108	; 0x6c
 8011b9c:	187b      	adds	r3, r7, r1
 8011b9e:	701a      	strb	r2, [r3, #0]
 8011ba0:	187b      	adds	r3, r7, r1
 8011ba2:	1978      	adds	r0, r7, r5
 8011ba4:	2201      	movs	r2, #1
 8011ba6:	210d      	movs	r1, #13
 8011ba8:	f7ff f898 	bl	8010cdc <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 8011bac:	683a      	ldr	r2, [r7, #0]
 8011bae:	2380      	movs	r3, #128	; 0x80
 8011bb0:	019b      	lsls	r3, r3, #6
 8011bb2:	4013      	ands	r3, r2
 8011bb4:	d100      	bne.n	8011bb8 <GUI_SendNotification+0x180>
 8011bb6:	e27c      	b.n	80120b2 <GUI_SendNotification+0x67a>
    {
      if (USBPD_NOTIFY_ALL != Value)
 8011bb8:	22a0      	movs	r2, #160	; 0xa0
 8011bba:	2110      	movs	r1, #16
 8011bbc:	187b      	adds	r3, r7, r1
 8011bbe:	189b      	adds	r3, r3, r2
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2b65      	cmp	r3, #101	; 0x65
 8011bc4:	d100      	bne.n	8011bc8 <GUI_SendNotification+0x190>
 8011bc6:	e1c2      	b.n	8011f4e <GUI_SendNotification+0x516>
      {
        /* PD_MessageNotif */
        TLV_add(&send_tlv, GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t*)&Value);
 8011bc8:	2384      	movs	r3, #132	; 0x84
 8011bca:	18f8      	adds	r0, r7, r3
 8011bcc:	0014      	movs	r4, r2
 8011bce:	000d      	movs	r5, r1
 8011bd0:	187b      	adds	r3, r7, r1
 8011bd2:	189b      	adds	r3, r3, r2
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	210e      	movs	r1, #14
 8011bd8:	f7ff f880 	bl	8010cdc <TLV_add>

        switch (Value)
 8011bdc:	0022      	movs	r2, r4
 8011bde:	197b      	adds	r3, r7, r5
 8011be0:	189b      	adds	r3, r3, r2
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b42      	cmp	r3, #66	; 0x42
 8011be6:	d80b      	bhi.n	8011c00 <GUI_SendNotification+0x1c8>
 8011be8:	2b07      	cmp	r3, #7
 8011bea:	d200      	bcs.n	8011bee <GUI_SendNotification+0x1b6>
 8011bec:	e261      	b.n	80120b2 <GUI_SendNotification+0x67a>
 8011bee:	3b07      	subs	r3, #7
 8011bf0:	2b3b      	cmp	r3, #59	; 0x3b
 8011bf2:	d900      	bls.n	8011bf6 <GUI_SendNotification+0x1be>
 8011bf4:	e25d      	b.n	80120b2 <GUI_SendNotification+0x67a>
 8011bf6:	009a      	lsls	r2, r3, #2
 8011bf8:	4b5b      	ldr	r3, [pc, #364]	; (8011d68 <GUI_SendNotification+0x330>)
 8011bfa:	18d3      	adds	r3, r2, r3
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	469f      	mov	pc, r3
 8011c00:	2b5a      	cmp	r3, #90	; 0x5a
 8011c02:	d000      	beq.n	8011c06 <GUI_SendNotification+0x1ce>
 8011c04:	e255      	b.n	80120b2 <GUI_SendNotification+0x67a>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            TLV_add(&send_tlv, GUI_IND_ISCONNECTED, 1, (uint8_t[]){DPM_Params[PortNum].PE_Power});
 8011c06:	240f      	movs	r4, #15
 8011c08:	193b      	adds	r3, r7, r4
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	4a55      	ldr	r2, [pc, #340]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011c0e:	00db      	lsls	r3, r3, #3
 8011c10:	18d3      	adds	r3, r2, r3
 8011c12:	785b      	ldrb	r3, [r3, #1]
 8011c14:	075b      	lsls	r3, r3, #29
 8011c16:	0f5b      	lsrs	r3, r3, #29
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	001a      	movs	r2, r3
 8011c1c:	2168      	movs	r1, #104	; 0x68
 8011c1e:	187b      	adds	r3, r7, r1
 8011c20:	701a      	strb	r2, [r3, #0]
 8011c22:	187b      	adds	r3, r7, r1
 8011c24:	2584      	movs	r5, #132	; 0x84
 8011c26:	1978      	adds	r0, r7, r5
 8011c28:	2201      	movs	r2, #1
 8011c2a:	2105      	movs	r1, #5
 8011c2c:	f7ff f856 	bl	8010cdc <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8011c30:	193b      	adds	r3, r7, r4
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	4a4b      	ldr	r2, [pc, #300]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	18d3      	adds	r3, r2, r3
 8011c3a:	785b      	ldrb	r3, [r3, #1]
 8011c3c:	075b      	lsls	r3, r3, #29
 8011c3e:	0f5b      	lsrs	r3, r3, #29
 8011c40:	b2db      	uxtb	r3, r3
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d000      	beq.n	8011c48 <GUI_SendNotification+0x210>
 8011c46:	e233      	b.n	80120b0 <GUI_SendNotification+0x678>
            {
              /* CC line */
              TLV_add(&send_tlv, GUI_IND_CC, 1, (uint8_t[]){DPM_Params[PortNum].ActiveCCIs});
 8011c48:	193b      	adds	r3, r7, r4
 8011c4a:	781a      	ldrb	r2, [r3, #0]
 8011c4c:	4b45      	ldr	r3, [pc, #276]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011c4e:	00d2      	lsls	r2, r2, #3
 8011c50:	5cd3      	ldrb	r3, [r2, r3]
 8011c52:	061b      	lsls	r3, r3, #24
 8011c54:	0f9b      	lsrs	r3, r3, #30
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	001a      	movs	r2, r3
 8011c5a:	2138      	movs	r1, #56	; 0x38
 8011c5c:	187b      	adds	r3, r7, r1
 8011c5e:	701a      	strb	r2, [r3, #0]
 8011c60:	187b      	adds	r3, r7, r1
 8011c62:	1978      	adds	r0, r7, r5
 8011c64:	2201      	movs	r2, #1
 8011c66:	2106      	movs	r1, #6
 8011c68:	f7ff f838 	bl	8010cdc <TLV_add>
              /* PowerRole*/
              TLV_add(&send_tlv, GUI_IND_POWERROLE, 1, (uint8_t[]){DPM_Params[PortNum].PE_PowerRole});
 8011c6c:	193b      	adds	r3, r7, r4
 8011c6e:	781a      	ldrb	r2, [r3, #0]
 8011c70:	4b3c      	ldr	r3, [pc, #240]	; (8011d64 <GUI_SendNotification+0x32c>)
 8011c72:	00d2      	lsls	r2, r2, #3
 8011c74:	5cd3      	ldrb	r3, [r2, r3]
 8011c76:	075b      	lsls	r3, r3, #29
 8011c78:	0fdb      	lsrs	r3, r3, #31
 8011c7a:	b2db      	uxtb	r3, r3
 8011c7c:	001a      	movs	r2, r3
 8011c7e:	2134      	movs	r1, #52	; 0x34
 8011c80:	187b      	adds	r3, r7, r1
 8011c82:	701a      	strb	r2, [r3, #0]
 8011c84:	187b      	adds	r3, r7, r1
 8011c86:	1978      	adds	r0, r7, r5
 8011c88:	2201      	movs	r2, #1
 8011c8a:	2108      	movs	r1, #8
 8011c8c:	f7ff f826 	bl	8010cdc <TLV_add>
            }
            break;
 8011c90:	e20e      	b.n	80120b0 <GUI_SendNotification+0x678>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            TLV_add(&send_tlv, GUI_IND_NUMBEROFRCVSNKPDO, 1, (uint8_t[]){GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO});
 8011c92:	240f      	movs	r4, #15
 8011c94:	193b      	adds	r3, r7, r4
 8011c96:	781a      	ldrb	r2, [r3, #0]
 8011c98:	4934      	ldr	r1, [pc, #208]	; (8011d6c <GUI_SendNotification+0x334>)
 8011c9a:	0013      	movs	r3, r2
 8011c9c:	00db      	lsls	r3, r3, #3
 8011c9e:	1a9b      	subs	r3, r3, r2
 8011ca0:	011b      	lsls	r3, r3, #4
 8011ca2:	18cb      	adds	r3, r1, r3
 8011ca4:	333c      	adds	r3, #60	; 0x3c
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	b2da      	uxtb	r2, r3
 8011caa:	2164      	movs	r1, #100	; 0x64
 8011cac:	187b      	adds	r3, r7, r1
 8011cae:	701a      	strb	r2, [r3, #0]
 8011cb0:	187b      	adds	r3, r7, r1
 8011cb2:	2584      	movs	r5, #132	; 0x84
 8011cb4:	1978      	adds	r0, r7, r5
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	2100      	movs	r1, #0
 8011cba:	f7ff f80f 	bl	8010cdc <TLV_add>
            /* ListOfRcvSNKPDO*/
            TLV_add(&send_tlv, GUI_IND_LISTOFRCVSNKPDO, GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4, (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8011cbe:	193b      	adds	r3, r7, r4
 8011cc0:	781a      	ldrb	r2, [r3, #0]
 8011cc2:	492a      	ldr	r1, [pc, #168]	; (8011d6c <GUI_SendNotification+0x334>)
 8011cc4:	0013      	movs	r3, r2
 8011cc6:	00db      	lsls	r3, r3, #3
 8011cc8:	1a9b      	subs	r3, r3, r2
 8011cca:	011b      	lsls	r3, r3, #4
 8011ccc:	18cb      	adds	r3, r1, r3
 8011cce:	333c      	adds	r3, #60	; 0x3c
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	b299      	uxth	r1, r3
 8011cd8:	193b      	adds	r3, r7, r4
 8011cda:	781a      	ldrb	r2, [r3, #0]
 8011cdc:	0013      	movs	r3, r2
 8011cde:	00db      	lsls	r3, r3, #3
 8011ce0:	1a9b      	subs	r3, r3, r2
 8011ce2:	011b      	lsls	r3, r3, #4
 8011ce4:	3320      	adds	r3, #32
 8011ce6:	001a      	movs	r2, r3
 8011ce8:	4b20      	ldr	r3, [pc, #128]	; (8011d6c <GUI_SendNotification+0x334>)
 8011cea:	18d3      	adds	r3, r2, r3
 8011cec:	1978      	adds	r0, r7, r5
 8011cee:	000a      	movs	r2, r1
 8011cf0:	2104      	movs	r1, #4
 8011cf2:	f7fe fff3 	bl	8010cdc <TLV_add>
            break;
 8011cf6:	e1dc      	b.n	80120b2 <GUI_SendNotification+0x67a>
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            TLV_add(&send_tlv, GUI_IND_NUMBEROFRCVSRCPDO, 1, (uint8_t[]){GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO});
 8011cf8:	240f      	movs	r4, #15
 8011cfa:	193b      	adds	r3, r7, r4
 8011cfc:	781a      	ldrb	r2, [r3, #0]
 8011cfe:	491b      	ldr	r1, [pc, #108]	; (8011d6c <GUI_SendNotification+0x334>)
 8011d00:	0013      	movs	r3, r2
 8011d02:	00db      	lsls	r3, r3, #3
 8011d04:	1a9b      	subs	r3, r3, r2
 8011d06:	011b      	lsls	r3, r3, #4
 8011d08:	18cb      	adds	r3, r1, r3
 8011d0a:	331c      	adds	r3, #28
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	2160      	movs	r1, #96	; 0x60
 8011d12:	187b      	adds	r3, r7, r1
 8011d14:	701a      	strb	r2, [r3, #0]
 8011d16:	187b      	adds	r3, r7, r1
 8011d18:	2584      	movs	r5, #132	; 0x84
 8011d1a:	1978      	adds	r0, r7, r5
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	2103      	movs	r1, #3
 8011d20:	f7fe ffdc 	bl	8010cdc <TLV_add>
            /* ListOfRcvSRCPDO*/
            TLV_add(&send_tlv, GUI_IND_LISTOFRCVSRCPDO, GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4, (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8011d24:	193b      	adds	r3, r7, r4
 8011d26:	781a      	ldrb	r2, [r3, #0]
 8011d28:	4910      	ldr	r1, [pc, #64]	; (8011d6c <GUI_SendNotification+0x334>)
 8011d2a:	0013      	movs	r3, r2
 8011d2c:	00db      	lsls	r3, r3, #3
 8011d2e:	1a9b      	subs	r3, r3, r2
 8011d30:	011b      	lsls	r3, r3, #4
 8011d32:	18cb      	adds	r3, r1, r3
 8011d34:	331c      	adds	r3, #28
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	b299      	uxth	r1, r3
 8011d3e:	193b      	adds	r3, r7, r4
 8011d40:	781a      	ldrb	r2, [r3, #0]
 8011d42:	0013      	movs	r3, r2
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	1a9b      	subs	r3, r3, r2
 8011d48:	011b      	lsls	r3, r3, #4
 8011d4a:	4a08      	ldr	r2, [pc, #32]	; (8011d6c <GUI_SendNotification+0x334>)
 8011d4c:	189b      	adds	r3, r3, r2
 8011d4e:	1978      	adds	r0, r7, r5
 8011d50:	000a      	movs	r2, r1
 8011d52:	2102      	movs	r1, #2
 8011d54:	f7fe ffc2 	bl	8010cdc <TLV_add>
            break;
 8011d58:	e1ab      	b.n	80120b2 <GUI_SendNotification+0x67a>
 8011d5a:	46c0      	nop			; (mov r8, r8)
 8011d5c:	20001718 	.word	0x20001718
 8011d60:	20001c0c 	.word	0x20001c0c
 8011d64:	20001c04 	.word	0x20001c04
 8011d68:	08016984 	.word	0x08016984
 8011d6c:	20001e20 	.word	0x20001e20
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8011d70:	240f      	movs	r4, #15
 8011d72:	193b      	adds	r3, r7, r4
 8011d74:	781a      	ldrb	r2, [r3, #0]
 8011d76:	4bcc      	ldr	r3, [pc, #816]	; (80120a8 <GUI_SendNotification+0x670>)
 8011d78:	00d2      	lsls	r2, r2, #3
 8011d7a:	5cd3      	ldrb	r3, [r2, r3]
 8011d7c:	075b      	lsls	r3, r3, #29
 8011d7e:	0fdb      	lsrs	r3, r3, #31
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d12e      	bne.n	8011de4 <GUI_SendNotification+0x3ac>
            {
              /* NumberOfRcvSRCPDO*/
              TLV_add(&send_tlv, GUI_IND_NUMBEROFRCVSRCPDO, 1, (uint8_t[]){GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO});
 8011d86:	193b      	adds	r3, r7, r4
 8011d88:	781a      	ldrb	r2, [r3, #0]
 8011d8a:	49c8      	ldr	r1, [pc, #800]	; (80120ac <GUI_SendNotification+0x674>)
 8011d8c:	0013      	movs	r3, r2
 8011d8e:	00db      	lsls	r3, r3, #3
 8011d90:	1a9b      	subs	r3, r3, r2
 8011d92:	011b      	lsls	r3, r3, #4
 8011d94:	18cb      	adds	r3, r1, r3
 8011d96:	331c      	adds	r3, #28
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	b2da      	uxtb	r2, r3
 8011d9c:	2130      	movs	r1, #48	; 0x30
 8011d9e:	187b      	adds	r3, r7, r1
 8011da0:	701a      	strb	r2, [r3, #0]
 8011da2:	187b      	adds	r3, r7, r1
 8011da4:	2584      	movs	r5, #132	; 0x84
 8011da6:	1978      	adds	r0, r7, r5
 8011da8:	2201      	movs	r2, #1
 8011daa:	2103      	movs	r1, #3
 8011dac:	f7fe ff96 	bl	8010cdc <TLV_add>
              /* ListOfRcvSRCPDO*/
              TLV_add(&send_tlv, GUI_IND_LISTOFRCVSRCPDO, GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4, (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8011db0:	193b      	adds	r3, r7, r4
 8011db2:	781a      	ldrb	r2, [r3, #0]
 8011db4:	49bd      	ldr	r1, [pc, #756]	; (80120ac <GUI_SendNotification+0x674>)
 8011db6:	0013      	movs	r3, r2
 8011db8:	00db      	lsls	r3, r3, #3
 8011dba:	1a9b      	subs	r3, r3, r2
 8011dbc:	011b      	lsls	r3, r3, #4
 8011dbe:	18cb      	adds	r3, r1, r3
 8011dc0:	331c      	adds	r3, #28
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	009b      	lsls	r3, r3, #2
 8011dc8:	b299      	uxth	r1, r3
 8011dca:	193b      	adds	r3, r7, r4
 8011dcc:	781a      	ldrb	r2, [r3, #0]
 8011dce:	0013      	movs	r3, r2
 8011dd0:	00db      	lsls	r3, r3, #3
 8011dd2:	1a9b      	subs	r3, r3, r2
 8011dd4:	011b      	lsls	r3, r3, #4
 8011dd6:	4ab5      	ldr	r2, [pc, #724]	; (80120ac <GUI_SendNotification+0x674>)
 8011dd8:	189b      	adds	r3, r3, r2
 8011dda:	1978      	adds	r0, r7, r5
 8011ddc:	000a      	movs	r2, r1
 8011dde:	2102      	movs	r1, #2
 8011de0:	f7fe ff7c 	bl	8010cdc <TLV_add>
            }
            /* RDOPosition */
            TLV_add(&send_tlv, GUI_IND_RDOPOSITION, 1, (uint8_t[]){GUI_SaveInformation[PortNum].RDOPosition});
 8011de4:	240f      	movs	r4, #15
 8011de6:	193b      	adds	r3, r7, r4
 8011de8:	781a      	ldrb	r2, [r3, #0]
 8011dea:	49b0      	ldr	r1, [pc, #704]	; (80120ac <GUI_SendNotification+0x674>)
 8011dec:	0013      	movs	r3, r2
 8011dee:	00db      	lsls	r3, r3, #3
 8011df0:	1a9b      	subs	r3, r3, r2
 8011df2:	011b      	lsls	r3, r3, #4
 8011df4:	18cb      	adds	r3, r1, r3
 8011df6:	3340      	adds	r3, #64	; 0x40
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	215c      	movs	r1, #92	; 0x5c
 8011dfe:	187b      	adds	r3, r7, r1
 8011e00:	701a      	strb	r2, [r3, #0]
 8011e02:	187b      	adds	r3, r7, r1
 8011e04:	2584      	movs	r5, #132	; 0x84
 8011e06:	1978      	adds	r0, r7, r5
 8011e08:	2201      	movs	r2, #1
 8011e0a:	2101      	movs	r1, #1
 8011e0c:	f7fe ff66 	bl	8010cdc <TLV_add>
            /* DataRole*/
            TLV_add(&send_tlv, GUI_IND_DATAROLE, 1, (uint8_t[]){DPM_Params[PortNum].PE_DataRole});
 8011e10:	193b      	adds	r3, r7, r4
 8011e12:	781a      	ldrb	r2, [r3, #0]
 8011e14:	4ba4      	ldr	r3, [pc, #656]	; (80120a8 <GUI_SendNotification+0x670>)
 8011e16:	00d2      	lsls	r2, r2, #3
 8011e18:	5cd3      	ldrb	r3, [r2, r3]
 8011e1a:	071b      	lsls	r3, r3, #28
 8011e1c:	0fdb      	lsrs	r3, r3, #31
 8011e1e:	b2db      	uxtb	r3, r3
 8011e20:	001a      	movs	r2, r3
 8011e22:	2158      	movs	r1, #88	; 0x58
 8011e24:	187b      	adds	r3, r7, r1
 8011e26:	701a      	strb	r2, [r3, #0]
 8011e28:	187b      	adds	r3, r7, r1
 8011e2a:	1978      	adds	r0, r7, r5
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	2107      	movs	r1, #7
 8011e30:	f7fe ff54 	bl	8010cdc <TLV_add>
            /* PowerRole*/
            TLV_add(&send_tlv, GUI_IND_POWERROLE, 1, (uint8_t[]){DPM_Params[PortNum].PE_PowerRole});
 8011e34:	193b      	adds	r3, r7, r4
 8011e36:	781a      	ldrb	r2, [r3, #0]
 8011e38:	4b9b      	ldr	r3, [pc, #620]	; (80120a8 <GUI_SendNotification+0x670>)
 8011e3a:	00d2      	lsls	r2, r2, #3
 8011e3c:	5cd3      	ldrb	r3, [r2, r3]
 8011e3e:	075b      	lsls	r3, r3, #29
 8011e40:	0fdb      	lsrs	r3, r3, #31
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	001a      	movs	r2, r3
 8011e46:	2154      	movs	r1, #84	; 0x54
 8011e48:	187b      	adds	r3, r7, r1
 8011e4a:	701a      	strb	r2, [r3, #0]
 8011e4c:	187b      	adds	r3, r7, r1
 8011e4e:	1978      	adds	r0, r7, r5
 8011e50:	2201      	movs	r2, #1
 8011e52:	2108      	movs	r1, #8
 8011e54:	f7fe ff42 	bl	8010cdc <TLV_add>
            /* VconnON*/
            TLV_add(&send_tlv, GUI_IND_VCONNON, 1, (uint8_t[]){DPM_Params[PortNum].VconnStatus});
 8011e58:	193b      	adds	r3, r7, r4
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	4a92      	ldr	r2, [pc, #584]	; (80120a8 <GUI_SendNotification+0x670>)
 8011e5e:	00db      	lsls	r3, r3, #3
 8011e60:	18d3      	adds	r3, r2, r3
 8011e62:	785b      	ldrb	r3, [r3, #1]
 8011e64:	061b      	lsls	r3, r3, #24
 8011e66:	0fdb      	lsrs	r3, r3, #31
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	001a      	movs	r2, r3
 8011e6c:	2150      	movs	r1, #80	; 0x50
 8011e6e:	187b      	adds	r3, r7, r1
 8011e70:	701a      	strb	r2, [r3, #0]
 8011e72:	187b      	adds	r3, r7, r1
 8011e74:	1978      	adds	r0, r7, r5
 8011e76:	2201      	movs	r2, #1
 8011e78:	210a      	movs	r1, #10
 8011e7a:	f7fe ff2f 	bl	8010cdc <TLV_add>
            /* PD_SpecRevision */
            TLV_add(&send_tlv, GUI_IND_PD_SPECREVISION, 1, (uint8_t[]){DPM_Params[PortNum].PE_SpecRevision});
 8011e7e:	193b      	adds	r3, r7, r4
 8011e80:	781a      	ldrb	r2, [r3, #0]
 8011e82:	4b89      	ldr	r3, [pc, #548]	; (80120a8 <GUI_SendNotification+0x670>)
 8011e84:	00d2      	lsls	r2, r2, #3
 8011e86:	5cd3      	ldrb	r3, [r2, r3]
 8011e88:	079b      	lsls	r3, r3, #30
 8011e8a:	0f9b      	lsrs	r3, r3, #30
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	001a      	movs	r2, r3
 8011e90:	214c      	movs	r1, #76	; 0x4c
 8011e92:	187b      	adds	r3, r7, r1
 8011e94:	701a      	strb	r2, [r3, #0]
 8011e96:	187b      	adds	r3, r7, r1
 8011e98:	1978      	adds	r0, r7, r5
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	210d      	movs	r1, #13
 8011e9e:	f7fe ff1d 	bl	8010cdc <TLV_add>
            break;
 8011ea2:	e106      	b.n	80120b2 <GUI_SendNotification+0x67a>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            TLV_add(&send_tlv, GUI_IND_POWERROLE, 1, (uint8_t[]){DPM_Params[PortNum].PE_PowerRole});
 8011ea4:	230f      	movs	r3, #15
 8011ea6:	18fb      	adds	r3, r7, r3
 8011ea8:	781a      	ldrb	r2, [r3, #0]
 8011eaa:	4b7f      	ldr	r3, [pc, #508]	; (80120a8 <GUI_SendNotification+0x670>)
 8011eac:	00d2      	lsls	r2, r2, #3
 8011eae:	5cd3      	ldrb	r3, [r2, r3]
 8011eb0:	075b      	lsls	r3, r3, #29
 8011eb2:	0fdb      	lsrs	r3, r3, #31
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	001a      	movs	r2, r3
 8011eb8:	2148      	movs	r1, #72	; 0x48
 8011eba:	187b      	adds	r3, r7, r1
 8011ebc:	701a      	strb	r2, [r3, #0]
 8011ebe:	187b      	adds	r3, r7, r1
 8011ec0:	2284      	movs	r2, #132	; 0x84
 8011ec2:	18b8      	adds	r0, r7, r2
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	2108      	movs	r1, #8
 8011ec8:	f7fe ff08 	bl	8010cdc <TLV_add>
            break;
 8011ecc:	e0f1      	b.n	80120b2 <GUI_SendNotification+0x67a>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            TLV_add(&send_tlv, GUI_IND_DATAROLE, 1, (uint8_t[]){DPM_Params[PortNum].PE_DataRole});
 8011ece:	230f      	movs	r3, #15
 8011ed0:	18fb      	adds	r3, r7, r3
 8011ed2:	781a      	ldrb	r2, [r3, #0]
 8011ed4:	4b74      	ldr	r3, [pc, #464]	; (80120a8 <GUI_SendNotification+0x670>)
 8011ed6:	00d2      	lsls	r2, r2, #3
 8011ed8:	5cd3      	ldrb	r3, [r2, r3]
 8011eda:	071b      	lsls	r3, r3, #28
 8011edc:	0fdb      	lsrs	r3, r3, #31
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	001a      	movs	r2, r3
 8011ee2:	2144      	movs	r1, #68	; 0x44
 8011ee4:	187b      	adds	r3, r7, r1
 8011ee6:	701a      	strb	r2, [r3, #0]
 8011ee8:	187b      	adds	r3, r7, r1
 8011eea:	2284      	movs	r2, #132	; 0x84
 8011eec:	18b8      	adds	r0, r7, r2
 8011eee:	2201      	movs	r2, #1
 8011ef0:	2107      	movs	r1, #7
 8011ef2:	f7fe fef3 	bl	8010cdc <TLV_add>
            break;
 8011ef6:	e0dc      	b.n	80120b2 <GUI_SendNotification+0x67a>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            TLV_add(&send_tlv, GUI_IND_PD_SPECREVISION, 1, (uint8_t[]){DPM_Params[PortNum].PE_SpecRevision});
 8011ef8:	230f      	movs	r3, #15
 8011efa:	18fb      	adds	r3, r7, r3
 8011efc:	781a      	ldrb	r2, [r3, #0]
 8011efe:	4b6a      	ldr	r3, [pc, #424]	; (80120a8 <GUI_SendNotification+0x670>)
 8011f00:	00d2      	lsls	r2, r2, #3
 8011f02:	5cd3      	ldrb	r3, [r2, r3]
 8011f04:	079b      	lsls	r3, r3, #30
 8011f06:	0f9b      	lsrs	r3, r3, #30
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	001a      	movs	r2, r3
 8011f0c:	2140      	movs	r1, #64	; 0x40
 8011f0e:	187b      	adds	r3, r7, r1
 8011f10:	701a      	strb	r2, [r3, #0]
 8011f12:	187b      	adds	r3, r7, r1
 8011f14:	2284      	movs	r2, #132	; 0x84
 8011f16:	18b8      	adds	r0, r7, r2
 8011f18:	2201      	movs	r2, #1
 8011f1a:	210d      	movs	r1, #13
 8011f1c:	f7fe fede 	bl	8010cdc <TLV_add>
            break;
 8011f20:	e0c7      	b.n	80120b2 <GUI_SendNotification+0x67a>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            TLV_add(&send_tlv, GUI_IND_VCONNON, 1, (uint8_t[]){DPM_Params[PortNum].VconnStatus});
 8011f22:	230f      	movs	r3, #15
 8011f24:	18fb      	adds	r3, r7, r3
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	4a5f      	ldr	r2, [pc, #380]	; (80120a8 <GUI_SendNotification+0x670>)
 8011f2a:	00db      	lsls	r3, r3, #3
 8011f2c:	18d3      	adds	r3, r2, r3
 8011f2e:	785b      	ldrb	r3, [r3, #1]
 8011f30:	061b      	lsls	r3, r3, #24
 8011f32:	0fdb      	lsrs	r3, r3, #31
 8011f34:	b2db      	uxtb	r3, r3
 8011f36:	001a      	movs	r2, r3
 8011f38:	213c      	movs	r1, #60	; 0x3c
 8011f3a:	187b      	adds	r3, r7, r1
 8011f3c:	701a      	strb	r2, [r3, #0]
 8011f3e:	187b      	adds	r3, r7, r1
 8011f40:	2284      	movs	r2, #132	; 0x84
 8011f42:	18b8      	adds	r0, r7, r2
 8011f44:	2201      	movs	r2, #1
 8011f46:	210a      	movs	r1, #10
 8011f48:	f7fe fec8 	bl	8010cdc <TLV_add>
            break;
 8011f4c:	e0b1      	b.n	80120b2 <GUI_SendNotification+0x67a>
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8011f4e:	240f      	movs	r4, #15
 8011f50:	193b      	adds	r3, r7, r4
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	4a54      	ldr	r2, [pc, #336]	; (80120a8 <GUI_SendNotification+0x670>)
 8011f56:	00db      	lsls	r3, r3, #3
 8011f58:	18d3      	adds	r3, r2, r3
 8011f5a:	785b      	ldrb	r3, [r3, #1]
 8011f5c:	06db      	lsls	r3, r3, #27
 8011f5e:	0fdb      	lsrs	r3, r3, #31
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d000      	beq.n	8011f68 <GUI_SendNotification+0x530>
 8011f66:	e0a4      	b.n	80120b2 <GUI_SendNotification+0x67a>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0 != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 8011f68:	193b      	adds	r3, r7, r4
 8011f6a:	781a      	ldrb	r2, [r3, #0]
 8011f6c:	494f      	ldr	r1, [pc, #316]	; (80120ac <GUI_SendNotification+0x674>)
 8011f6e:	0013      	movs	r3, r2
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	1a9b      	subs	r3, r3, r2
 8011f74:	011b      	lsls	r3, r3, #4
 8011f76:	18cb      	adds	r3, r1, r3
 8011f78:	333c      	adds	r3, #60	; 0x3c
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d030      	beq.n	8011fe2 <GUI_SendNotification+0x5aa>
          {
            /* NumberOfRcvSNKPDO */
            TLV_add(&send_tlv, GUI_IND_NUMBEROFRCVSNKPDO, 1, (uint8_t[]){GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO});
 8011f80:	193b      	adds	r3, r7, r4
 8011f82:	781a      	ldrb	r2, [r3, #0]
 8011f84:	4949      	ldr	r1, [pc, #292]	; (80120ac <GUI_SendNotification+0x674>)
 8011f86:	0013      	movs	r3, r2
 8011f88:	00db      	lsls	r3, r3, #3
 8011f8a:	1a9b      	subs	r3, r3, r2
 8011f8c:	011b      	lsls	r3, r3, #4
 8011f8e:	18cb      	adds	r3, r1, r3
 8011f90:	333c      	adds	r3, #60	; 0x3c
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	b2da      	uxtb	r2, r3
 8011f96:	2124      	movs	r1, #36	; 0x24
 8011f98:	187b      	adds	r3, r7, r1
 8011f9a:	701a      	strb	r2, [r3, #0]
 8011f9c:	187b      	adds	r3, r7, r1
 8011f9e:	2584      	movs	r5, #132	; 0x84
 8011fa0:	1978      	adds	r0, r7, r5
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	f7fe fe99 	bl	8010cdc <TLV_add>
            /* ListOfRcvSNKPDO*/
            TLV_add(&send_tlv, GUI_IND_LISTOFRCVSNKPDO, GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4, (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8011faa:	193b      	adds	r3, r7, r4
 8011fac:	781a      	ldrb	r2, [r3, #0]
 8011fae:	493f      	ldr	r1, [pc, #252]	; (80120ac <GUI_SendNotification+0x674>)
 8011fb0:	0013      	movs	r3, r2
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	1a9b      	subs	r3, r3, r2
 8011fb6:	011b      	lsls	r3, r3, #4
 8011fb8:	18cb      	adds	r3, r1, r3
 8011fba:	333c      	adds	r3, #60	; 0x3c
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	b299      	uxth	r1, r3
 8011fc4:	193b      	adds	r3, r7, r4
 8011fc6:	781a      	ldrb	r2, [r3, #0]
 8011fc8:	0013      	movs	r3, r2
 8011fca:	00db      	lsls	r3, r3, #3
 8011fcc:	1a9b      	subs	r3, r3, r2
 8011fce:	011b      	lsls	r3, r3, #4
 8011fd0:	3320      	adds	r3, #32
 8011fd2:	001a      	movs	r2, r3
 8011fd4:	4b35      	ldr	r3, [pc, #212]	; (80120ac <GUI_SendNotification+0x674>)
 8011fd6:	18d3      	adds	r3, r2, r3
 8011fd8:	1978      	adds	r0, r7, r5
 8011fda:	000a      	movs	r2, r1
 8011fdc:	2104      	movs	r1, #4
 8011fde:	f7fe fe7d 	bl	8010cdc <TLV_add>
          }
          /* RDOPosition */
          TLV_add(&send_tlv, GUI_IND_RDOPOSITION, 1, (uint8_t[]){GUI_SaveInformation[PortNum].RDOPosition});
 8011fe2:	240f      	movs	r4, #15
 8011fe4:	193b      	adds	r3, r7, r4
 8011fe6:	781a      	ldrb	r2, [r3, #0]
 8011fe8:	4930      	ldr	r1, [pc, #192]	; (80120ac <GUI_SendNotification+0x674>)
 8011fea:	0013      	movs	r3, r2
 8011fec:	00db      	lsls	r3, r3, #3
 8011fee:	1a9b      	subs	r3, r3, r2
 8011ff0:	011b      	lsls	r3, r3, #4
 8011ff2:	18cb      	adds	r3, r1, r3
 8011ff4:	3340      	adds	r3, #64	; 0x40
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	212c      	movs	r1, #44	; 0x2c
 8011ffc:	187b      	adds	r3, r7, r1
 8011ffe:	701a      	strb	r2, [r3, #0]
 8012000:	187b      	adds	r3, r7, r1
 8012002:	2584      	movs	r5, #132	; 0x84
 8012004:	1978      	adds	r0, r7, r5
 8012006:	2201      	movs	r2, #1
 8012008:	2101      	movs	r1, #1
 801200a:	f7fe fe67 	bl	8010cdc <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 801200e:	193b      	adds	r3, r7, r4
 8012010:	781a      	ldrb	r2, [r3, #0]
 8012012:	4b25      	ldr	r3, [pc, #148]	; (80120a8 <GUI_SendNotification+0x670>)
 8012014:	00d2      	lsls	r2, r2, #3
 8012016:	5cd3      	ldrb	r3, [r2, r3]
 8012018:	075b      	lsls	r3, r3, #29
 801201a:	0fdb      	lsrs	r3, r3, #31
 801201c:	b2db      	uxtb	r3, r3
 801201e:	2b00      	cmp	r3, #0
 8012020:	d12d      	bne.n	801207e <GUI_SendNotification+0x646>
          {
            /* NumberOfRcvSRCPDO*/
            TLV_add(&send_tlv, GUI_IND_NUMBEROFRCVSRCPDO, 1, (uint8_t[]){GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO});
 8012022:	193b      	adds	r3, r7, r4
 8012024:	781a      	ldrb	r2, [r3, #0]
 8012026:	4921      	ldr	r1, [pc, #132]	; (80120ac <GUI_SendNotification+0x674>)
 8012028:	0013      	movs	r3, r2
 801202a:	00db      	lsls	r3, r3, #3
 801202c:	1a9b      	subs	r3, r3, r2
 801202e:	011b      	lsls	r3, r3, #4
 8012030:	18cb      	adds	r3, r1, r3
 8012032:	331c      	adds	r3, #28
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	b2da      	uxtb	r2, r3
 8012038:	2120      	movs	r1, #32
 801203a:	187b      	adds	r3, r7, r1
 801203c:	701a      	strb	r2, [r3, #0]
 801203e:	187b      	adds	r3, r7, r1
 8012040:	1978      	adds	r0, r7, r5
 8012042:	2201      	movs	r2, #1
 8012044:	2103      	movs	r1, #3
 8012046:	f7fe fe49 	bl	8010cdc <TLV_add>
            /* ListOfRcvSRCPDO*/
            TLV_add(&send_tlv, GUI_IND_LISTOFRCVSRCPDO, GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4, (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801204a:	193b      	adds	r3, r7, r4
 801204c:	781a      	ldrb	r2, [r3, #0]
 801204e:	4917      	ldr	r1, [pc, #92]	; (80120ac <GUI_SendNotification+0x674>)
 8012050:	0013      	movs	r3, r2
 8012052:	00db      	lsls	r3, r3, #3
 8012054:	1a9b      	subs	r3, r3, r2
 8012056:	011b      	lsls	r3, r3, #4
 8012058:	18cb      	adds	r3, r1, r3
 801205a:	331c      	adds	r3, #28
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	b29b      	uxth	r3, r3
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	b299      	uxth	r1, r3
 8012064:	193b      	adds	r3, r7, r4
 8012066:	781a      	ldrb	r2, [r3, #0]
 8012068:	0013      	movs	r3, r2
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	1a9b      	subs	r3, r3, r2
 801206e:	011b      	lsls	r3, r3, #4
 8012070:	4a0e      	ldr	r2, [pc, #56]	; (80120ac <GUI_SendNotification+0x674>)
 8012072:	189b      	adds	r3, r3, r2
 8012074:	1978      	adds	r0, r7, r5
 8012076:	000a      	movs	r2, r1
 8012078:	2102      	movs	r1, #2
 801207a:	f7fe fe2f 	bl	8010cdc <TLV_add>
          }
          /* PD_SpecRevision */
          TLV_add(&send_tlv, GUI_IND_PD_SPECREVISION, 1, (uint8_t[]){DPM_Params[PortNum].PE_SpecRevision});
 801207e:	230f      	movs	r3, #15
 8012080:	18fb      	adds	r3, r7, r3
 8012082:	781a      	ldrb	r2, [r3, #0]
 8012084:	4b08      	ldr	r3, [pc, #32]	; (80120a8 <GUI_SendNotification+0x670>)
 8012086:	00d2      	lsls	r2, r2, #3
 8012088:	5cd3      	ldrb	r3, [r2, r3]
 801208a:	079b      	lsls	r3, r3, #30
 801208c:	0f9b      	lsrs	r3, r3, #30
 801208e:	b2db      	uxtb	r3, r3
 8012090:	001a      	movs	r2, r3
 8012092:	2128      	movs	r1, #40	; 0x28
 8012094:	187b      	adds	r3, r7, r1
 8012096:	701a      	strb	r2, [r3, #0]
 8012098:	187b      	adds	r3, r7, r1
 801209a:	2284      	movs	r2, #132	; 0x84
 801209c:	18b8      	adds	r0, r7, r2
 801209e:	2201      	movs	r2, #1
 80120a0:	210d      	movs	r1, #13
 80120a2:	f7fe fe1b 	bl	8010cdc <TLV_add>
 80120a6:	e004      	b.n	80120b2 <GUI_SendNotification+0x67a>
 80120a8:	20001c04 	.word	0x20001c04
 80120ac:	20001e20 	.word	0x20001e20
            break;
 80120b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 80120b2:	683a      	ldr	r2, [r7, #0]
 80120b4:	2380      	movs	r3, #128	; 0x80
 80120b6:	011b      	lsls	r3, r3, #4
 80120b8:	4013      	ands	r3, r2
 80120ba:	d045      	beq.n	8012148 <GUI_SendNotification+0x710>
    {
      uint32_t vsense = 0;
 80120bc:	2300      	movs	r3, #0
 80120be:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 80120c0:	2300      	movs	r3, #0
 80120c2:	2290      	movs	r2, #144	; 0x90
 80120c4:	18ba      	adds	r2, r7, r2
 80120c6:	6013      	str	r3, [r2, #0]

      TLV_add(&send_tlv, GUI_IND_TIMESTAMP, 4, (uint8_t*)&Value);
 80120c8:	2384      	movs	r3, #132	; 0x84
 80120ca:	18f8      	adds	r0, r7, r3
 80120cc:	23a0      	movs	r3, #160	; 0xa0
 80120ce:	2210      	movs	r2, #16
 80120d0:	4694      	mov	ip, r2
 80120d2:	44bc      	add	ip, r7
 80120d4:	4463      	add	r3, ip
 80120d6:	2204      	movs	r2, #4
 80120d8:	2113      	movs	r1, #19
 80120da:	f7fe fdff 	bl	8010cdc <TLV_add>

      if (NULL != pCB_GetVoltage)
 80120de:	4b58      	ldr	r3, [pc, #352]	; (8012240 <GUI_SendNotification+0x808>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d008      	beq.n	80120f8 <GUI_SendNotification+0x6c0>
      {
        vsense = pCB_GetVoltage(PortNum);
 80120e6:	4b56      	ldr	r3, [pc, #344]	; (8012240 <GUI_SendNotification+0x808>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	220f      	movs	r2, #15
 80120ec:	18ba      	adds	r2, r7, r2
 80120ee:	7812      	ldrb	r2, [r2, #0]
 80120f0:	0010      	movs	r0, r2
 80120f2:	4798      	blx	r3
 80120f4:	0003      	movs	r3, r0
 80120f6:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 80120f8:	4b51      	ldr	r3, [pc, #324]	; (8012240 <GUI_SendNotification+0x808>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d013      	beq.n	8012128 <GUI_SendNotification+0x6f0>
      {
        isense = pCB_GetCurrent(PortNum);
 8012100:	4b50      	ldr	r3, [pc, #320]	; (8012244 <GUI_SendNotification+0x80c>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	220f      	movs	r2, #15
 8012106:	18ba      	adds	r2, r7, r2
 8012108:	7812      	ldrb	r2, [r2, #0]
 801210a:	0010      	movs	r0, r2
 801210c:	4798      	blx	r3
 801210e:	0003      	movs	r3, r0
 8012110:	2290      	movs	r2, #144	; 0x90
 8012112:	18b9      	adds	r1, r7, r2
 8012114:	600b      	str	r3, [r1, #0]
      if(isense < 0)
 8012116:	18bb      	adds	r3, r7, r2
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	da04      	bge.n	8012128 <GUI_SendNotification+0x6f0>
      {
        isense = -isense;
 801211e:	18bb      	adds	r3, r7, r2
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	425b      	negs	r3, r3
 8012124:	18ba      	adds	r2, r7, r2
 8012126:	6013      	str	r3, [r2, #0]
      }
      }

      /* VBUS & IBUS level */
      vsense = (isense << 16) | vsense;
 8012128:	2390      	movs	r3, #144	; 0x90
 801212a:	18fb      	adds	r3, r7, r3
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	041b      	lsls	r3, r3, #16
 8012130:	001a      	movs	r2, r3
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	4313      	orrs	r3, r2
 8012136:	61fb      	str	r3, [r7, #28]
      TLV_add(&send_tlv, GUI_IND_VBUS_LEVEL, 4, (uint8_t*)&vsense);
 8012138:	231c      	movs	r3, #28
 801213a:	18fb      	adds	r3, r7, r3
 801213c:	2284      	movs	r2, #132	; 0x84
 801213e:	18b8      	adds	r0, r7, r2
 8012140:	2204      	movs	r2, #4
 8012142:	210c      	movs	r1, #12
 8012144:	f7fe fdca 	bl	8010cdc <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 8012148:	683a      	ldr	r2, [r7, #0]
 801214a:	2380      	movs	r3, #128	; 0x80
 801214c:	01db      	lsls	r3, r3, #7
 801214e:	4013      	ands	r3, r2
 8012150:	d00a      	beq.n	8012168 <GUI_SendNotification+0x730>
    {
      TLV_add(&send_tlv, GUI_IND_TIMESTAMP, 4, (uint8_t*)&Value);
 8012152:	2384      	movs	r3, #132	; 0x84
 8012154:	18f8      	adds	r0, r7, r3
 8012156:	23a0      	movs	r3, #160	; 0xa0
 8012158:	2210      	movs	r2, #16
 801215a:	4694      	mov	ip, r2
 801215c:	44bc      	add	ip, r7
 801215e:	4463      	add	r3, ip
 8012160:	2204      	movs	r2, #4
 8012162:	2113      	movs	r1, #19
 8012164:	f7fe fdba 	bl	8010cdc <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 8012168:	683a      	ldr	r2, [r7, #0]
 801216a:	2380      	movs	r3, #128	; 0x80
 801216c:	021b      	lsls	r3, r3, #8
 801216e:	4013      	ands	r3, r2
 8012170:	d043      	beq.n	80121fa <GUI_SendNotification+0x7c2>
    {
      /* Is Connected*/
      TLV_add(&send_tlv, GUI_IND_ISCONNECTED, 1, (uint8_t[]){DPM_Params[PortNum].PE_Power});
 8012172:	240f      	movs	r4, #15
 8012174:	193b      	adds	r3, r7, r4
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	4a33      	ldr	r2, [pc, #204]	; (8012248 <GUI_SendNotification+0x810>)
 801217a:	00db      	lsls	r3, r3, #3
 801217c:	18d3      	adds	r3, r2, r3
 801217e:	785b      	ldrb	r3, [r3, #1]
 8012180:	075b      	lsls	r3, r3, #29
 8012182:	0f5b      	lsrs	r3, r3, #29
 8012184:	b2db      	uxtb	r3, r3
 8012186:	001a      	movs	r2, r3
 8012188:	2118      	movs	r1, #24
 801218a:	187b      	adds	r3, r7, r1
 801218c:	701a      	strb	r2, [r3, #0]
 801218e:	187b      	adds	r3, r7, r1
 8012190:	2584      	movs	r5, #132	; 0x84
 8012192:	1978      	adds	r0, r7, r5
 8012194:	2201      	movs	r2, #1
 8012196:	2105      	movs	r1, #5
 8012198:	f7fe fda0 	bl	8010cdc <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 801219c:	193b      	adds	r3, r7, r4
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	4a29      	ldr	r2, [pc, #164]	; (8012248 <GUI_SendNotification+0x810>)
 80121a2:	00db      	lsls	r3, r3, #3
 80121a4:	18d3      	adds	r3, r2, r3
 80121a6:	785b      	ldrb	r3, [r3, #1]
 80121a8:	075b      	lsls	r3, r3, #29
 80121aa:	0f5b      	lsrs	r3, r3, #29
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d123      	bne.n	80121fa <GUI_SendNotification+0x7c2>
      {
        /* CC line */
        TLV_add(&send_tlv, GUI_IND_CC, 1, (uint8_t[]){DPM_Params[PortNum].ActiveCCIs});
 80121b2:	193b      	adds	r3, r7, r4
 80121b4:	781a      	ldrb	r2, [r3, #0]
 80121b6:	4b24      	ldr	r3, [pc, #144]	; (8012248 <GUI_SendNotification+0x810>)
 80121b8:	00d2      	lsls	r2, r2, #3
 80121ba:	5cd3      	ldrb	r3, [r2, r3]
 80121bc:	061b      	lsls	r3, r3, #24
 80121be:	0f9b      	lsrs	r3, r3, #30
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	001a      	movs	r2, r3
 80121c4:	2114      	movs	r1, #20
 80121c6:	187b      	adds	r3, r7, r1
 80121c8:	701a      	strb	r2, [r3, #0]
 80121ca:	187b      	adds	r3, r7, r1
 80121cc:	1978      	adds	r0, r7, r5
 80121ce:	2201      	movs	r2, #1
 80121d0:	2106      	movs	r1, #6
 80121d2:	f7fe fd83 	bl	8010cdc <TLV_add>
        /* PowerRole*/
        TLV_add(&send_tlv, GUI_IND_POWERROLE, 1, (uint8_t[]){DPM_Params[PortNum].PE_PowerRole});
 80121d6:	193b      	adds	r3, r7, r4
 80121d8:	781a      	ldrb	r2, [r3, #0]
 80121da:	4b1b      	ldr	r3, [pc, #108]	; (8012248 <GUI_SendNotification+0x810>)
 80121dc:	00d2      	lsls	r2, r2, #3
 80121de:	5cd3      	ldrb	r3, [r2, r3]
 80121e0:	075b      	lsls	r3, r3, #29
 80121e2:	0fdb      	lsrs	r3, r3, #31
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	001a      	movs	r2, r3
 80121e8:	2110      	movs	r1, #16
 80121ea:	187b      	adds	r3, r7, r1
 80121ec:	701a      	strb	r2, [r3, #0]
 80121ee:	187b      	adds	r3, r7, r1
 80121f0:	1978      	adds	r0, r7, r5
 80121f2:	2201      	movs	r2, #1
 80121f4:	2108      	movs	r1, #8
 80121f6:	f7fe fd71 	bl	8010cdc <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 80121fa:	2384      	movs	r3, #132	; 0x84
 80121fc:	18fb      	adds	r3, r7, r3
 80121fe:	0018      	movs	r0, r3
 8012200:	f7fe fece 	bl	8010fa0 <TLV_deinit_encode>

    if (0 != TLV_get_string_length(Processed))
 8012204:	4b11      	ldr	r3, [pc, #68]	; (801224c <GUI_SendNotification+0x814>)
 8012206:	0018      	movs	r0, r3
 8012208:	f7fe ff70 	bl	80110ec <TLV_get_string_length>
 801220c:	1e03      	subs	r3, r0, #0
 801220e:	d010      	beq.n	8012232 <GUI_SendNotification+0x7fa>
    {
      *pMsgToSend = Processed;
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	4a0e      	ldr	r2, [pc, #56]	; (801224c <GUI_SendNotification+0x814>)
 8012214:	601a      	str	r2, [r3, #0]
      *pSizeMsg = TLV_get_string_length(Processed) + 8;
 8012216:	4b0d      	ldr	r3, [pc, #52]	; (801224c <GUI_SendNotification+0x814>)
 8012218:	0018      	movs	r0, r3
 801221a:	f7fe ff67 	bl	80110ec <TLV_get_string_length>
 801221e:	0003      	movs	r3, r0
 8012220:	b2db      	uxtb	r3, r3
 8012222:	3308      	adds	r3, #8
 8012224:	b2da      	uxtb	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 801222a:	2397      	movs	r3, #151	; 0x97
 801222c:	18fb      	adds	r3, r7, r3
 801222e:	2201      	movs	r2, #1
 8012230:	701a      	strb	r2, [r3, #0]

    }
  
  }

  return gui_state;
 8012232:	2397      	movs	r3, #151	; 0x97
 8012234:	18fb      	adds	r3, r7, r3
 8012236:	781b      	ldrb	r3, [r3, #0]
}
 8012238:	0018      	movs	r0, r3
 801223a:	46bd      	mov	sp, r7
 801223c:	b027      	add	sp, #156	; 0x9c
 801223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012240:	20001724 	.word	0x20001724
 8012244:	20001728 	.word	0x20001728
 8012248:	20001c04 	.word	0x20001c04
 801224c:	20001c0c 	.word	0x20001c0c

08012250 <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 8012250:	b590      	push	{r4, r7, lr}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	0002      	movs	r2, r0
 8012258:	1dfb      	adds	r3, r7, #7
 801225a:	701a      	strb	r2, [r3, #0]
 801225c:	1d3b      	adds	r3, r7, #4
 801225e:	1c0a      	adds	r2, r1, #0
 8012260:	801a      	strh	r2, [r3, #0]
#if defined(_SNK) || defined(_DRP)
  if (USBPD_NOTIFY_REQUEST_ACCEPTED == EventVal)
 8012262:	1d3b      	adds	r3, r7, #4
 8012264:	881b      	ldrh	r3, [r3, #0]
 8012266:	2b01      	cmp	r3, #1
 8012268:	d136      	bne.n	80122d8 <GUI_PostNotificationMessage+0x88>
  {
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits    = GUI_SaveInformation[PortNum].RequestedVoltage;
 801226a:	1dfb      	adds	r3, r7, #7
 801226c:	781a      	ldrb	r2, [r3, #0]
 801226e:	1dfb      	adds	r3, r7, #7
 8012270:	7818      	ldrb	r0, [r3, #0]
 8012272:	4926      	ldr	r1, [pc, #152]	; (801230c <GUI_PostNotificationMessage+0xbc>)
 8012274:	0013      	movs	r3, r2
 8012276:	00db      	lsls	r3, r3, #3
 8012278:	1a9b      	subs	r3, r3, r2
 801227a:	011b      	lsls	r3, r3, #4
 801227c:	18cb      	adds	r3, r1, r3
 801227e:	3344      	adds	r3, #68	; 0x44
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	4923      	ldr	r1, [pc, #140]	; (8012310 <GUI_PostNotificationMessage+0xc0>)
 8012284:	2374      	movs	r3, #116	; 0x74
 8012286:	4343      	muls	r3, r0
 8012288:	18cb      	adds	r3, r1, r3
 801228a:	3308      	adds	r3, #8
 801228c:	601a      	str	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000;
 801228e:	1dfb      	adds	r3, r7, #7
 8012290:	781a      	ldrb	r2, [r3, #0]
 8012292:	491e      	ldr	r1, [pc, #120]	; (801230c <GUI_PostNotificationMessage+0xbc>)
 8012294:	0013      	movs	r3, r2
 8012296:	00db      	lsls	r3, r3, #3
 8012298:	1a9b      	subs	r3, r3, r2
 801229a:	011b      	lsls	r3, r3, #4
 801229c:	18cb      	adds	r3, r1, r3
 801229e:	3344      	adds	r3, #68	; 0x44
 80122a0:	6819      	ldr	r1, [r3, #0]
 80122a2:	1dfb      	adds	r3, r7, #7
 80122a4:	781a      	ldrb	r2, [r3, #0]
 80122a6:	4819      	ldr	r0, [pc, #100]	; (801230c <GUI_PostNotificationMessage+0xbc>)
 80122a8:	0013      	movs	r3, r2
 80122aa:	00db      	lsls	r3, r3, #3
 80122ac:	1a9b      	subs	r3, r3, r2
 80122ae:	011b      	lsls	r3, r3, #4
 80122b0:	18c3      	adds	r3, r0, r3
 80122b2:	3348      	adds	r3, #72	; 0x48
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	434b      	muls	r3, r1
 80122b8:	001a      	movs	r2, r3
 80122ba:	1dfb      	adds	r3, r7, #7
 80122bc:	781c      	ldrb	r4, [r3, #0]
 80122be:	23fa      	movs	r3, #250	; 0xfa
 80122c0:	0099      	lsls	r1, r3, #2
 80122c2:	0010      	movs	r0, r2
 80122c4:	f7f3 ff46 	bl	8006154 <__udivsi3>
 80122c8:	0003      	movs	r3, r0
 80122ca:	0019      	movs	r1, r3
 80122cc:	4a10      	ldr	r2, [pc, #64]	; (8012310 <GUI_PostNotificationMessage+0xc0>)
 80122ce:	2374      	movs	r3, #116	; 0x74
 80122d0:	4363      	muls	r3, r4
 80122d2:	18d3      	adds	r3, r2, r3
 80122d4:	3314      	adds	r3, #20
 80122d6:	6019      	str	r1, [r3, #0]
  }
#endif /* _SNK || _DRP */
  
  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 80122d8:	4b0e      	ldr	r3, [pc, #56]	; (8012314 <GUI_PostNotificationMessage+0xc4>)
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d110      	bne.n	8012302 <GUI_PostNotificationMessage+0xb2>
  {
    uint32_t event = GUI_USER_EVENT_GUI | (PortNum << GUI_PE_PORT_NUM_Pos) | (EventVal << GUI_PE_NOTIF_Pos);
 80122e0:	1dfb      	adds	r3, r7, #7
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	061b      	lsls	r3, r3, #24
 80122e6:	2201      	movs	r2, #1
 80122e8:	431a      	orrs	r2, r3
 80122ea:	1d3b      	adds	r3, r7, #4
 80122ec:	881b      	ldrh	r3, [r3, #0]
 80122ee:	011b      	lsls	r3, r3, #4
 80122f0:	4313      	orrs	r3, r2
 80122f2:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(GUIMsgBox, event, 0);
 80122f4:	4b08      	ldr	r3, [pc, #32]	; (8012318 <GUI_PostNotificationMessage+0xc8>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	68f9      	ldr	r1, [r7, #12]
 80122fa:	2200      	movs	r2, #0
 80122fc:	0018      	movs	r0, r3
 80122fe:	f7f7 ff43 	bl	800a188 <osMessagePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8012302:	46c0      	nop			; (mov r8, r8)
 8012304:	46bd      	mov	sp, r7
 8012306:	b005      	add	sp, #20
 8012308:	bd90      	pop	{r4, r7, pc}
 801230a:	46c0      	nop			; (mov r8, r8)
 801230c:	20001e20 	.word	0x20001e20
 8012310:	20000028 	.word	0x20000028
 8012314:	20001718 	.word	0x20001718
 8012318:	20001d18 	.word	0x20001d18

0801231c <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 801231c:	b590      	push	{r4, r7, lr}
 801231e:	b08b      	sub	sp, #44	; 0x2c
 8012320:	af00      	add	r7, sp, #0
 8012322:	60ba      	str	r2, [r7, #8]
 8012324:	607b      	str	r3, [r7, #4]
 8012326:	230f      	movs	r3, #15
 8012328:	18fb      	adds	r3, r7, r3
 801232a:	1c02      	adds	r2, r0, #0
 801232c:	701a      	strb	r2, [r3, #0]
 801232e:	200e      	movs	r0, #14
 8012330:	183b      	adds	r3, r7, r0
 8012332:	1c0a      	adds	r2, r1, #0
 8012334:	701a      	strb	r2, [r3, #0]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 8012336:	183b      	adds	r3, r7, r0
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	2b13      	cmp	r3, #19
 801233c:	d900      	bls.n	8012340 <GUI_SaveInfo+0x24>
 801233e:	e0ca      	b.n	80124d6 <GUI_SaveInfo+0x1ba>
 8012340:	009a      	lsls	r2, r3, #2
 8012342:	4b6b      	ldr	r3, [pc, #428]	; (80124f0 <GUI_SaveInfo+0x1d4>)
 8012344:	18d3      	adds	r3, r2, r3
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	469f      	mov	pc, r3
  {
    /* Case requested DO position Data information :
    */
  case USBPD_CORE_DATATYPE_RDO_POSITION :
    if (Size == 4)
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2b04      	cmp	r3, #4
 801234e:	d000      	beq.n	8012352 <GUI_SaveInfo+0x36>
 8012350:	e0c3      	b.n	80124da <GUI_SaveInfo+0x1be>
    {
      uint8_t* temp;
      temp = (uint8_t*)&GUI_SaveInformation[PortNum].RDOPosition;
 8012352:	240f      	movs	r4, #15
 8012354:	193b      	adds	r3, r7, r4
 8012356:	781a      	ldrb	r2, [r3, #0]
 8012358:	0013      	movs	r3, r2
 801235a:	00db      	lsls	r3, r3, #3
 801235c:	1a9b      	subs	r3, r3, r2
 801235e:	011b      	lsls	r3, r3, #4
 8012360:	3340      	adds	r3, #64	; 0x40
 8012362:	001a      	movs	r2, r3
 8012364:	4b63      	ldr	r3, [pc, #396]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 8012366:	18d3      	adds	r3, r2, r3
 8012368:	613b      	str	r3, [r7, #16]
      (void)memcpy(temp, Ptr, Size);
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	68b9      	ldr	r1, [r7, #8]
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	0018      	movs	r0, r3
 8012372:	f002 ff3b 	bl	80151ec <memcpy>
      GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	7819      	ldrb	r1, [r3, #0]
 801237a:	193b      	adds	r3, r7, r4
 801237c:	781a      	ldrb	r2, [r3, #0]
 801237e:	0008      	movs	r0, r1
 8012380:	495c      	ldr	r1, [pc, #368]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 8012382:	0013      	movs	r3, r2
 8012384:	00db      	lsls	r3, r3, #3
 8012386:	1a9b      	subs	r3, r3, r2
 8012388:	011b      	lsls	r3, r3, #4
 801238a:	18cb      	adds	r3, r1, r3
 801238c:	334c      	adds	r3, #76	; 0x4c
 801238e:	6018      	str	r0, [r3, #0]
      temp = (uint8_t*)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 8012390:	193b      	adds	r3, r7, r4
 8012392:	781a      	ldrb	r2, [r3, #0]
 8012394:	0013      	movs	r3, r2
 8012396:	00db      	lsls	r3, r3, #3
 8012398:	1a9b      	subs	r3, r3, r2
 801239a:	011b      	lsls	r3, r3, #4
 801239c:	3348      	adds	r3, #72	; 0x48
 801239e:	001a      	movs	r2, r3
 80123a0:	4b54      	ldr	r3, [pc, #336]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 80123a2:	18d3      	adds	r3, r2, r3
 80123a4:	3304      	adds	r3, #4
 80123a6:	613b      	str	r3, [r7, #16]
      (void)memcpy(temp, Ptr, Size);
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	68b9      	ldr	r1, [r7, #8]
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	0018      	movs	r0, r3
 80123b0:	f002 ff1c 	bl	80151ec <memcpy>
    }
    break;
 80123b4:	e091      	b.n	80124da <GUI_SaveInfo+0x1be>

    /* Case Received Source PDO values Data information :
    */
  case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
    if (Size <= (USBPD_MAX_NB_PDO * 4))
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2b1c      	cmp	r3, #28
 80123ba:	d900      	bls.n	80123be <GUI_SaveInfo+0xa2>
 80123bc:	e08f      	b.n	80124de <GUI_SaveInfo+0x1c2>
    {
      uint8_t* rdo;
      GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4);
 80123be:	230f      	movs	r3, #15
 80123c0:	18fb      	adds	r3, r7, r3
 80123c2:	781a      	ldrb	r2, [r3, #0]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	0899      	lsrs	r1, r3, #2
 80123c8:	484a      	ldr	r0, [pc, #296]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 80123ca:	0013      	movs	r3, r2
 80123cc:	00db      	lsls	r3, r3, #3
 80123ce:	1a9b      	subs	r3, r3, r2
 80123d0:	011b      	lsls	r3, r3, #4
 80123d2:	18c3      	adds	r3, r0, r3
 80123d4:	331c      	adds	r3, #28
 80123d6:	6019      	str	r1, [r3, #0]
      /* Copy PDO data in DPM Handle field */
      for (index = 0; index < (Size / 4); index++)
 80123d8:	2300      	movs	r3, #0
 80123da:	627b      	str	r3, [r7, #36]	; 0x24
 80123dc:	e018      	b.n	8012410 <GUI_SaveInfo+0xf4>
      {
        rdo = (uint8_t*)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 80123de:	230f      	movs	r3, #15
 80123e0:	18fb      	adds	r3, r7, r3
 80123e2:	781a      	ldrb	r2, [r3, #0]
 80123e4:	0013      	movs	r3, r2
 80123e6:	00db      	lsls	r3, r3, #3
 80123e8:	1a9b      	subs	r3, r3, r2
 80123ea:	009b      	lsls	r3, r3, #2
 80123ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123ee:	189b      	adds	r3, r3, r2
 80123f0:	009a      	lsls	r2, r3, #2
 80123f2:	4b40      	ldr	r3, [pc, #256]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 80123f4:	18d3      	adds	r3, r2, r3
 80123f6:	617b      	str	r3, [r7, #20]
        (void)memcpy(rdo, (Ptr + (index * 4u)), (4u * sizeof(uint8_t)));
 80123f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	68ba      	ldr	r2, [r7, #8]
 80123fe:	18d1      	adds	r1, r2, r3
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	2204      	movs	r2, #4
 8012404:	0018      	movs	r0, r3
 8012406:	f002 fef1 	bl	80151ec <memcpy>
      for (index = 0; index < (Size / 4); index++)
 801240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240c:	3301      	adds	r3, #1
 801240e:	627b      	str	r3, [r7, #36]	; 0x24
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	089b      	lsrs	r3, r3, #2
 8012414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012416:	429a      	cmp	r2, r3
 8012418:	d3e1      	bcc.n	80123de <GUI_SaveInfo+0xc2>
      }
    }
    break;
 801241a:	e060      	b.n	80124de <GUI_SaveInfo+0x1c2>

    /* Case Received Sink PDO values Data information :
    */
  case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
    if (Size <= (USBPD_MAX_NB_PDO * 4))
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2b1c      	cmp	r3, #28
 8012420:	d85f      	bhi.n	80124e2 <GUI_SaveInfo+0x1c6>
    {
      uint8_t* rdo;
      GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4);
 8012422:	230f      	movs	r3, #15
 8012424:	18fb      	adds	r3, r7, r3
 8012426:	781a      	ldrb	r2, [r3, #0]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	0899      	lsrs	r1, r3, #2
 801242c:	4831      	ldr	r0, [pc, #196]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 801242e:	0013      	movs	r3, r2
 8012430:	00db      	lsls	r3, r3, #3
 8012432:	1a9b      	subs	r3, r3, r2
 8012434:	011b      	lsls	r3, r3, #4
 8012436:	18c3      	adds	r3, r0, r3
 8012438:	333c      	adds	r3, #60	; 0x3c
 801243a:	6019      	str	r1, [r3, #0]
      /* Copy PDO data in DPM Handle field */
      for (index = 0; index < (Size / 4); index++)
 801243c:	2300      	movs	r3, #0
 801243e:	627b      	str	r3, [r7, #36]	; 0x24
 8012440:	e019      	b.n	8012476 <GUI_SaveInfo+0x15a>
      {
        rdo = (uint8_t*)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 8012442:	230f      	movs	r3, #15
 8012444:	18fb      	adds	r3, r7, r3
 8012446:	781a      	ldrb	r2, [r3, #0]
 8012448:	0013      	movs	r3, r2
 801244a:	00db      	lsls	r3, r3, #3
 801244c:	1a9b      	subs	r3, r3, r2
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012452:	189b      	adds	r3, r3, r2
 8012454:	3308      	adds	r3, #8
 8012456:	009a      	lsls	r2, r3, #2
 8012458:	4b26      	ldr	r3, [pc, #152]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 801245a:	18d3      	adds	r3, r2, r3
 801245c:	61bb      	str	r3, [r7, #24]
        (void)memcpy(rdo, (Ptr + (index * 4u)), (4u * sizeof(uint8_t)));
 801245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012460:	009b      	lsls	r3, r3, #2
 8012462:	68ba      	ldr	r2, [r7, #8]
 8012464:	18d1      	adds	r1, r2, r3
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	2204      	movs	r2, #4
 801246a:	0018      	movs	r0, r3
 801246c:	f002 febe 	bl	80151ec <memcpy>
      for (index = 0; index < (Size / 4); index++)
 8012470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012472:	3301      	adds	r3, #1
 8012474:	627b      	str	r3, [r7, #36]	; 0x24
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	089b      	lsrs	r3, r3, #2
 801247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801247c:	429a      	cmp	r2, r3
 801247e:	d3e0      	bcc.n	8012442 <GUI_SaveInfo+0x126>
      }
    }
    break;
 8012480:	e02f      	b.n	80124e2 <GUI_SaveInfo+0x1c6>

    /* Case Received Request PDO Data information :
    */
  case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
    if (Size == 4)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b04      	cmp	r3, #4
 8012486:	d12e      	bne.n	80124e6 <GUI_SaveInfo+0x1ca>
    {
      uint8_t* rdo;
      rdo = (uint8_t*)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 8012488:	230f      	movs	r3, #15
 801248a:	18fb      	adds	r3, r7, r3
 801248c:	781a      	ldrb	r2, [r3, #0]
 801248e:	0013      	movs	r3, r2
 8012490:	00db      	lsls	r3, r3, #3
 8012492:	1a9b      	subs	r3, r3, r2
 8012494:	011b      	lsls	r3, r3, #4
 8012496:	3350      	adds	r3, #80	; 0x50
 8012498:	001a      	movs	r2, r3
 801249a:	4b16      	ldr	r3, [pc, #88]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 801249c:	18d3      	adds	r3, r2, r3
 801249e:	61fb      	str	r3, [r7, #28]
      (void)memcpy(rdo, Ptr, Size);
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	68b9      	ldr	r1, [r7, #8]
 80124a4:	69fb      	ldr	r3, [r7, #28]
 80124a6:	0018      	movs	r0, r3
 80124a8:	f002 fea0 	bl	80151ec <memcpy>
    }
    break;
 80124ac:	e01b      	b.n	80124e6 <GUI_SaveInfo+0x1ca>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
  case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t*  _snk_ext_capa;
      _snk_ext_capa = (uint8_t*)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 80124ae:	230f      	movs	r3, #15
 80124b0:	18fb      	adds	r3, r7, r3
 80124b2:	781a      	ldrb	r2, [r3, #0]
 80124b4:	0013      	movs	r3, r2
 80124b6:	00db      	lsls	r3, r3, #3
 80124b8:	1a9b      	subs	r3, r3, r2
 80124ba:	011b      	lsls	r3, r3, #4
 80124bc:	3350      	adds	r3, #80	; 0x50
 80124be:	001a      	movs	r2, r3
 80124c0:	4b0c      	ldr	r3, [pc, #48]	; (80124f4 <GUI_SaveInfo+0x1d8>)
 80124c2:	18d3      	adds	r3, r2, r3
 80124c4:	3304      	adds	r3, #4
 80124c6:	623b      	str	r3, [r7, #32]
      memcpy(_snk_ext_capa, Ptr, Size);
 80124c8:	687a      	ldr	r2, [r7, #4]
 80124ca:	68b9      	ldr	r1, [r7, #8]
 80124cc:	6a3b      	ldr	r3, [r7, #32]
 80124ce:	0018      	movs	r0, r3
 80124d0:	f002 fe8c 	bl	80151ec <memcpy>
    }
    break;
 80124d4:	e008      	b.n	80124e8 <GUI_SaveInfo+0x1cc>
#endif /* _VCONN_SUPPORT */

  /* In case of unexpected data type (Set request could not be fulfilled) :
   */
  default :
    break;
 80124d6:	46c0      	nop			; (mov r8, r8)
 80124d8:	e006      	b.n	80124e8 <GUI_SaveInfo+0x1cc>
    break;
 80124da:	46c0      	nop			; (mov r8, r8)
 80124dc:	e004      	b.n	80124e8 <GUI_SaveInfo+0x1cc>
    break;
 80124de:	46c0      	nop			; (mov r8, r8)
 80124e0:	e002      	b.n	80124e8 <GUI_SaveInfo+0x1cc>
    break;
 80124e2:	46c0      	nop			; (mov r8, r8)
 80124e4:	e000      	b.n	80124e8 <GUI_SaveInfo+0x1cc>
    break;
 80124e6:	46c0      	nop			; (mov r8, r8)
  }
}
 80124e8:	46c0      	nop			; (mov r8, r8)
 80124ea:	46bd      	mov	sp, r7
 80124ec:	b00b      	add	sp, #44	; 0x2c
 80124ee:	bd90      	pop	{r4, r7, pc}
 80124f0:	08016a74 	.word	0x08016a74
 80124f4:	20001e20 	.word	0x20001e20

080124f8 <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 80124f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124fa:	b091      	sub	sp, #68	; 0x44
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	0002      	movs	r2, r0
 8012500:	6039      	str	r1, [r7, #0]
 8012502:	1dfb      	adds	r3, r7, #7
 8012504:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data ToSendTLV;
  TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8012506:	1dfb      	adds	r3, r7, #7
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	015b      	lsls	r3, r3, #5
 801250c:	b25b      	sxtb	r3, r3
 801250e:	2203      	movs	r2, #3
 8012510:	4313      	orrs	r3, r2
 8012512:	b25b      	sxtb	r3, r3
 8012514:	b2d9      	uxtb	r1, r3
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	2280      	movs	r2, #128	; 0x80
 801251a:	0052      	lsls	r2, r2, #1
 801251c:	2028      	movs	r0, #40	; 0x28
 801251e:	1838      	adds	r0, r7, r0
 8012520:	f7fe fb79 	bl	8010c16 <TLV_init_encode>

  /* Information by board */
  if (0 == PortNum)
 8012524:	1dfb      	adds	r3, r7, #7
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d163      	bne.n	80125f4 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t* hwversion;
    if (NULL != pCB_HWBoardVersion)
 801252c:	4bc2      	ldr	r3, [pc, #776]	; (8012838 <Send_DpmInitCnf+0x340>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d005      	beq.n	8012540 <Send_DpmInitCnf+0x48>
    {
      hwversion = pCB_HWBoardVersion();
 8012534:	4bc0      	ldr	r3, [pc, #768]	; (8012838 <Send_DpmInitCnf+0x340>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4798      	blx	r3
 801253a:	0003      	movs	r3, r0
 801253c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801253e:	e001      	b.n	8012544 <Send_DpmInitCnf+0x4c>
    }
    else
    {
      hwversion = (uint8_t*) "UNKNOWN";
 8012540:	4bbe      	ldr	r3, [pc, #760]	; (801283c <Send_DpmInitCnf+0x344>)
 8012542:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    TLV_add(&ToSendTLV, GUI_INIT_HWBOARDVERSION, strlen((const char*)hwversion), hwversion);
 8012544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012546:	0018      	movs	r0, r3
 8012548:	f7f3 fdf2 	bl	8006130 <strlen>
 801254c:	0003      	movs	r3, r0
 801254e:	b29a      	uxth	r2, r3
 8012550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012552:	2128      	movs	r1, #40	; 0x28
 8012554:	1878      	adds	r0, r7, r1
 8012556:	2100      	movs	r1, #0
 8012558:	f7fe fbc0 	bl	8010cdc <TLV_add>

    /* HWPDType */
    const uint8_t* hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 801255c:	4bb6      	ldr	r3, [pc, #728]	; (8012838 <Send_DpmInitCnf+0x340>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d005      	beq.n	8012570 <Send_DpmInitCnf+0x78>
    {
      hwpdtype  = pCB_HWPDType();
 8012564:	4bb6      	ldr	r3, [pc, #728]	; (8012840 <Send_DpmInitCnf+0x348>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	4798      	blx	r3
 801256a:	0003      	movs	r3, r0
 801256c:	63bb      	str	r3, [r7, #56]	; 0x38
 801256e:	e001      	b.n	8012574 <Send_DpmInitCnf+0x7c>
    }
    else
    {
      hwpdtype = (uint8_t*) "UNKNOWN";
 8012570:	4bb2      	ldr	r3, [pc, #712]	; (801283c <Send_DpmInitCnf+0x344>)
 8012572:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    TLV_add(&ToSendTLV, GUI_INIT_HWPDTYPE, strlen((const char*)hwpdtype), hwpdtype);
 8012574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012576:	0018      	movs	r0, r3
 8012578:	f7f3 fdda 	bl	8006130 <strlen>
 801257c:	0003      	movs	r3, r0
 801257e:	b29a      	uxth	r2, r3
 8012580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012582:	2428      	movs	r4, #40	; 0x28
 8012584:	1938      	adds	r0, r7, r4
 8012586:	2101      	movs	r1, #1
 8012588:	f7fe fba8 	bl	8010cdc <TLV_add>

    /* NbPortMax */
    TLV_add(&ToSendTLV, GUI_INIT_NBPORTMAX, 1, (uint8_t[]){USBPD_PORT_COUNT});
 801258c:	2124      	movs	r1, #36	; 0x24
 801258e:	187b      	adds	r3, r7, r1
 8012590:	2201      	movs	r2, #1
 8012592:	701a      	strb	r2, [r3, #0]
 8012594:	187b      	adds	r3, r7, r1
 8012596:	1938      	adds	r0, r7, r4
 8012598:	2201      	movs	r2, #1
 801259a:	2102      	movs	r1, #2
 801259c:	f7fe fb9e 	bl	8010cdc <TLV_add>
    /* FW Version */
    TLV_add(&ToSendTLV, GUI_INIT_FWVERSION, 8, (uint8_t[]){
 80125a0:	211c      	movs	r1, #28
 80125a2:	187b      	adds	r3, r7, r1
 80125a4:	4aa7      	ldr	r2, [pc, #668]	; (8012844 <Send_DpmInitCnf+0x34c>)
 80125a6:	ca21      	ldmia	r2!, {r0, r5}
 80125a8:	c321      	stmia	r3!, {r0, r5}
 80125aa:	187b      	adds	r3, r7, r1
 80125ac:	1938      	adds	r0, r7, r4
 80125ae:	2208      	movs	r2, #8
 80125b0:	2103      	movs	r1, #3
 80125b2:	f7fe fb93 	bl	8010cdc <TLV_add>
        (_LIB_ID & 0x0000FF00) >> 8,
          (_LIB_ID & 0x00FF0000) >> 16,
            (_LIB_ID & 0xFF000000) >> 24}
    );
    /* Start Port number */
    TLV_add(&ToSendTLV, GUI_INIT_NB_PORT_START, 1, (uint8_t[]){USBPD_START_PORT_NUMBER});
 80125b6:	2118      	movs	r1, #24
 80125b8:	187b      	adds	r3, r7, r1
 80125ba:	2200      	movs	r2, #0
 80125bc:	701a      	strb	r2, [r3, #0]
 80125be:	187b      	adds	r3, r7, r1
 80125c0:	1938      	adds	r0, r7, r4
 80125c2:	2201      	movs	r2, #1
 80125c4:	211e      	movs	r1, #30
 80125c6:	f7fe fb89 	bl	8010cdc <TLV_add>
    /* Start Port number */
    TLV_add(&ToSendTLV, GUI_INIT_NB_PORT_START, 1, (uint8_t[]){USBPD_START_PORT_NUMBER});
 80125ca:	2114      	movs	r1, #20
 80125cc:	187b      	adds	r3, r7, r1
 80125ce:	2200      	movs	r2, #0
 80125d0:	701a      	strb	r2, [r3, #0]
 80125d2:	187b      	adds	r3, r7, r1
 80125d4:	1938      	adds	r0, r7, r4
 80125d6:	2201      	movs	r2, #1
 80125d8:	211e      	movs	r1, #30
 80125da:	f7fe fb7f 	bl	8010cdc <TLV_add>

    /* Original settings */
    TLV_add(&ToSendTLV, GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t*)&GUI_OriginalSettings);
 80125de:	4b9a      	ldr	r3, [pc, #616]	; (8012848 <Send_DpmInitCnf+0x350>)
 80125e0:	1938      	adds	r0, r7, r4
 80125e2:	2201      	movs	r2, #1
 80125e4:	211f      	movs	r1, #31
 80125e6:	f7fe fb79 	bl	8010cdc <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 80125ea:	193b      	adds	r3, r7, r4
 80125ec:	0018      	movs	r0, r3
 80125ee:	f7fe fcd7 	bl	8010fa0 <TLV_deinit_encode>
    TLV_add(&ToSendTLV, GUI_INIT_VCONNSUPPLY, 2, (uint8_t*)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 80125f2:	e11c      	b.n	801282e <Send_DpmInitCnf+0x336>
    uint8_t port = PortNum - 1;
 80125f4:	2637      	movs	r6, #55	; 0x37
 80125f6:	19bb      	adds	r3, r7, r6
 80125f8:	1dfa      	adds	r2, r7, #7
 80125fa:	7812      	ldrb	r2, [r2, #0]
 80125fc:	3a01      	subs	r2, #1
 80125fe:	701a      	strb	r2, [r3, #0]
    settings = DPM_Settings[port].PE_SpecRevision;
 8012600:	19bb      	adds	r3, r7, r6
 8012602:	781a      	ldrb	r2, [r3, #0]
 8012604:	4991      	ldr	r1, [pc, #580]	; (801284c <Send_DpmInitCnf+0x354>)
 8012606:	0013      	movs	r3, r2
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	189b      	adds	r3, r3, r2
 801260c:	009b      	lsls	r3, r3, #2
 801260e:	18cb      	adds	r3, r1, r3
 8012610:	791b      	ldrb	r3, [r3, #4]
 8012612:	079b      	lsls	r3, r3, #30
 8012614:	0f9b      	lsrs	r3, r3, #30
 8012616:	b2db      	uxtb	r3, r3
 8012618:	b29a      	uxth	r2, r3
 801261a:	2412      	movs	r4, #18
 801261c:	193b      	adds	r3, r7, r4
 801261e:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]){0x12, settings});
 8012620:	2110      	movs	r1, #16
 8012622:	187b      	adds	r3, r7, r1
 8012624:	2212      	movs	r2, #18
 8012626:	701a      	strb	r2, [r3, #0]
 8012628:	193b      	adds	r3, r7, r4
 801262a:	881b      	ldrh	r3, [r3, #0]
 801262c:	b2da      	uxtb	r2, r3
 801262e:	187b      	adds	r3, r7, r1
 8012630:	705a      	strb	r2, [r3, #1]
 8012632:	187b      	adds	r3, r7, r1
 8012634:	2528      	movs	r5, #40	; 0x28
 8012636:	1978      	adds	r0, r7, r5
 8012638:	2202      	movs	r2, #2
 801263a:	2104      	movs	r1, #4
 801263c:	f7fe fb4e 	bl	8010cdc <TLV_add>
    settings = DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 8012640:	19bb      	adds	r3, r7, r6
 8012642:	781a      	ldrb	r2, [r3, #0]
 8012644:	4981      	ldr	r1, [pc, #516]	; (801284c <Send_DpmInitCnf+0x354>)
 8012646:	2008      	movs	r0, #8
 8012648:	0013      	movs	r3, r2
 801264a:	005b      	lsls	r3, r3, #1
 801264c:	189b      	adds	r3, r3, r2
 801264e:	009b      	lsls	r3, r3, #2
 8012650:	18cb      	adds	r3, r1, r3
 8012652:	181b      	adds	r3, r3, r0
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	07db      	lsls	r3, r3, #31
 8012658:	0fdb      	lsrs	r3, r3, #31
 801265a:	b2db      	uxtb	r3, r3
 801265c:	b29a      	uxth	r2, r3
 801265e:	193b      	adds	r3, r7, r4
 8012660:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t*)&settings);
 8012662:	193b      	adds	r3, r7, r4
 8012664:	1978      	adds	r0, r7, r5
 8012666:	2201      	movs	r2, #1
 8012668:	2106      	movs	r1, #6
 801266a:	f7fe fb37 	bl	8010cdc <TLV_add>
    settings = DPM_Settings[port].CAD_AccesorySupport;
 801266e:	19bb      	adds	r3, r7, r6
 8012670:	781a      	ldrb	r2, [r3, #0]
 8012672:	4976      	ldr	r1, [pc, #472]	; (801284c <Send_DpmInitCnf+0x354>)
 8012674:	0013      	movs	r3, r2
 8012676:	005b      	lsls	r3, r3, #1
 8012678:	189b      	adds	r3, r3, r2
 801267a:	009b      	lsls	r3, r3, #2
 801267c:	18cb      	adds	r3, r1, r3
 801267e:	795b      	ldrb	r3, [r3, #5]
 8012680:	06db      	lsls	r3, r3, #27
 8012682:	0fdb      	lsrs	r3, r3, #31
 8012684:	b2db      	uxtb	r3, r3
 8012686:	b29a      	uxth	r2, r3
 8012688:	193b      	adds	r3, r7, r4
 801268a:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_ACCESSORYSUPP, 1, (uint8_t*)&settings);
 801268c:	193b      	adds	r3, r7, r4
 801268e:	1978      	adds	r0, r7, r5
 8012690:	2201      	movs	r2, #1
 8012692:	2107      	movs	r1, #7
 8012694:	f7fe fb22 	bl	8010cdc <TLV_add>
    settings = DPM_USER_Settings[port].PWR_AccessoryDetection;
 8012698:	19bb      	adds	r3, r7, r6
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	4a6c      	ldr	r2, [pc, #432]	; (8012850 <Send_DpmInitCnf+0x358>)
 801269e:	2168      	movs	r1, #104	; 0x68
 80126a0:	2074      	movs	r0, #116	; 0x74
 80126a2:	4343      	muls	r3, r0
 80126a4:	18d3      	adds	r3, r2, r3
 80126a6:	185b      	adds	r3, r3, r1
 80126a8:	78db      	ldrb	r3, [r3, #3]
 80126aa:	07db      	lsls	r3, r3, #31
 80126ac:	0fdb      	lsrs	r3, r3, #31
 80126ae:	b2db      	uxtb	r3, r3
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	193b      	adds	r3, r7, r4
 80126b4:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t*)&settings);
 80126b6:	193b      	adds	r3, r7, r4
 80126b8:	1978      	adds	r0, r7, r5
 80126ba:	2201      	movs	r2, #1
 80126bc:	2108      	movs	r1, #8
 80126be:	f7fe fb0d 	bl	8010cdc <TLV_add>
    settings = DPM_USER_Settings[port].PWR_AccessoryTransition;
 80126c2:	19bb      	adds	r3, r7, r6
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	4a62      	ldr	r2, [pc, #392]	; (8012850 <Send_DpmInitCnf+0x358>)
 80126c8:	2168      	movs	r1, #104	; 0x68
 80126ca:	2074      	movs	r0, #116	; 0x74
 80126cc:	4343      	muls	r3, r0
 80126ce:	18d3      	adds	r3, r2, r3
 80126d0:	185b      	adds	r3, r3, r1
 80126d2:	78db      	ldrb	r3, [r3, #3]
 80126d4:	079b      	lsls	r3, r3, #30
 80126d6:	0fdb      	lsrs	r3, r3, #31
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	b29a      	uxth	r2, r3
 80126dc:	193b      	adds	r3, r7, r4
 80126de:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t*)&settings);
 80126e0:	193b      	adds	r3, r7, r4
 80126e2:	1978      	adds	r0, r7, r5
 80126e4:	2201      	movs	r2, #1
 80126e6:	2109      	movs	r1, #9
 80126e8:	f7fe faf8 	bl	8010cdc <TLV_add>
    TLV_add(&ToSendTLV, GUI_INIT_ISCABLE, 1, (uint8_t[]){0x00});
 80126ec:	210c      	movs	r1, #12
 80126ee:	187b      	adds	r3, r7, r1
 80126f0:	2200      	movs	r2, #0
 80126f2:	701a      	strb	r2, [r3, #0]
 80126f4:	187b      	adds	r3, r7, r1
 80126f6:	1978      	adds	r0, r7, r5
 80126f8:	2201      	movs	r2, #1
 80126fa:	210b      	movs	r1, #11
 80126fc:	f7fe faee 	bl	8010cdc <TLV_add>
    settings = DPM_Settings[port].CAD_TryFeature;
 8012700:	19bb      	adds	r3, r7, r6
 8012702:	781a      	ldrb	r2, [r3, #0]
 8012704:	4951      	ldr	r1, [pc, #324]	; (801284c <Send_DpmInitCnf+0x354>)
 8012706:	0013      	movs	r3, r2
 8012708:	005b      	lsls	r3, r3, #1
 801270a:	189b      	adds	r3, r3, r2
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	18cb      	adds	r3, r1, r3
 8012710:	795b      	ldrb	r3, [r3, #5]
 8012712:	071b      	lsls	r3, r3, #28
 8012714:	0f9b      	lsrs	r3, r3, #30
 8012716:	b2db      	uxtb	r3, r3
 8012718:	b29a      	uxth	r2, r3
 801271a:	193b      	adds	r3, r7, r4
 801271c:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_TRYFEATURE, 1, (uint8_t*)&settings);
 801271e:	193b      	adds	r3, r7, r4
 8012720:	1978      	adds	r0, r7, r5
 8012722:	2201      	movs	r2, #1
 8012724:	2110      	movs	r1, #16
 8012726:	f7fe fad9 	bl	8010cdc <TLV_add>
    settings = DPM_USER_Settings[port].PWR_RpResistorValue;
 801272a:	19bb      	adds	r3, r7, r6
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	4a48      	ldr	r2, [pc, #288]	; (8012850 <Send_DpmInitCnf+0x358>)
 8012730:	2168      	movs	r1, #104	; 0x68
 8012732:	2074      	movs	r0, #116	; 0x74
 8012734:	4343      	muls	r3, r0
 8012736:	18d3      	adds	r3, r2, r3
 8012738:	185b      	adds	r3, r3, r1
 801273a:	78db      	ldrb	r3, [r3, #3]
 801273c:	06db      	lsls	r3, r3, #27
 801273e:	0f9b      	lsrs	r3, r3, #30
 8012740:	b2db      	uxtb	r3, r3
 8012742:	b29a      	uxth	r2, r3
 8012744:	193b      	adds	r3, r7, r4
 8012746:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_RPRESISTORVALUE, 1, (uint8_t*)&settings);
 8012748:	193b      	adds	r3, r7, r4
 801274a:	1978      	adds	r0, r7, r5
 801274c:	2201      	movs	r2, #1
 801274e:	2112      	movs	r1, #18
 8012750:	f7fe fac4 	bl	8010cdc <TLV_add>
    settings = DPM_USER_Settings[port].USB_Support;
 8012754:	19bb      	adds	r3, r7, r6
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	4a3d      	ldr	r2, [pc, #244]	; (8012850 <Send_DpmInitCnf+0x358>)
 801275a:	2168      	movs	r1, #104	; 0x68
 801275c:	2074      	movs	r0, #116	; 0x74
 801275e:	4343      	muls	r3, r0
 8012760:	18d3      	adds	r3, r2, r3
 8012762:	185b      	adds	r3, r3, r1
 8012764:	78db      	ldrb	r3, [r3, #3]
 8012766:	069b      	lsls	r3, r3, #26
 8012768:	0fdb      	lsrs	r3, r3, #31
 801276a:	b2db      	uxtb	r3, r3
 801276c:	b29a      	uxth	r2, r3
 801276e:	193b      	adds	r3, r7, r4
 8012770:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_USBSUPPORT, 1, (uint8_t*)&settings);
 8012772:	193b      	adds	r3, r7, r4
 8012774:	1978      	adds	r0, r7, r5
 8012776:	2201      	movs	r2, #1
 8012778:	2113      	movs	r1, #19
 801277a:	f7fe faaf 	bl	8010cdc <TLV_add>
    settings = DPM_USER_Settings[port].USB_Device;
 801277e:	19bb      	adds	r3, r7, r6
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	4a33      	ldr	r2, [pc, #204]	; (8012850 <Send_DpmInitCnf+0x358>)
 8012784:	2168      	movs	r1, #104	; 0x68
 8012786:	2074      	movs	r0, #116	; 0x74
 8012788:	4343      	muls	r3, r0
 801278a:	18d3      	adds	r3, r2, r3
 801278c:	185b      	adds	r3, r3, r1
 801278e:	78db      	ldrb	r3, [r3, #3]
 8012790:	065b      	lsls	r3, r3, #25
 8012792:	0fdb      	lsrs	r3, r3, #31
 8012794:	b2db      	uxtb	r3, r3
 8012796:	b29a      	uxth	r2, r3
 8012798:	193b      	adds	r3, r7, r4
 801279a:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_USBDEVICE, 1, (uint8_t*)&settings);
 801279c:	193b      	adds	r3, r7, r4
 801279e:	1978      	adds	r0, r7, r5
 80127a0:	2201      	movs	r2, #1
 80127a2:	2114      	movs	r1, #20
 80127a4:	f7fe fa9a 	bl	8010cdc <TLV_add>
    settings = DPM_USER_Settings[port].USB_Host;
 80127a8:	19bb      	adds	r3, r7, r6
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	4a28      	ldr	r2, [pc, #160]	; (8012850 <Send_DpmInitCnf+0x358>)
 80127ae:	2168      	movs	r1, #104	; 0x68
 80127b0:	2074      	movs	r0, #116	; 0x74
 80127b2:	4343      	muls	r3, r0
 80127b4:	18d3      	adds	r3, r2, r3
 80127b6:	185b      	adds	r3, r3, r1
 80127b8:	78db      	ldrb	r3, [r3, #3]
 80127ba:	061b      	lsls	r3, r3, #24
 80127bc:	0fdb      	lsrs	r3, r3, #31
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	193b      	adds	r3, r7, r4
 80127c4:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_USBHOST, 1, (uint8_t*)&settings);
 80127c6:	193b      	adds	r3, r7, r4
 80127c8:	1978      	adds	r0, r7, r5
 80127ca:	2201      	movs	r2, #1
 80127cc:	2115      	movs	r1, #21
 80127ce:	f7fe fa85 	bl	8010cdc <TLV_add>
    settings = DPM_USER_Settings[port].PWR_UnconstrainedPower;
 80127d2:	19bb      	adds	r3, r7, r6
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	4a1e      	ldr	r2, [pc, #120]	; (8012850 <Send_DpmInitCnf+0x358>)
 80127d8:	2168      	movs	r1, #104	; 0x68
 80127da:	2074      	movs	r0, #116	; 0x74
 80127dc:	4343      	muls	r3, r0
 80127de:	18d3      	adds	r3, r2, r3
 80127e0:	185b      	adds	r3, r3, r1
 80127e2:	78db      	ldrb	r3, [r3, #3]
 80127e4:	075b      	lsls	r3, r3, #29
 80127e6:	0fdb      	lsrs	r3, r3, #31
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	193b      	adds	r3, r7, r4
 80127ee:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t*)&settings);
 80127f0:	193b      	adds	r3, r7, r4
 80127f2:	1978      	adds	r0, r7, r5
 80127f4:	2201      	movs	r2, #1
 80127f6:	2116      	movs	r1, #22
 80127f8:	f7fe fa70 	bl	8010cdc <TLV_add>
    settings = DPM_USER_Settings[port].USB_SuspendSupport;
 80127fc:	19bb      	adds	r3, r7, r6
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	4a13      	ldr	r2, [pc, #76]	; (8012850 <Send_DpmInitCnf+0x358>)
 8012802:	2168      	movs	r1, #104	; 0x68
 8012804:	2074      	movs	r0, #116	; 0x74
 8012806:	4343      	muls	r3, r0
 8012808:	18d3      	adds	r3, r2, r3
 801280a:	185b      	adds	r3, r3, r1
 801280c:	791b      	ldrb	r3, [r3, #4]
 801280e:	07db      	lsls	r3, r3, #31
 8012810:	0fdb      	lsrs	r3, r3, #31
 8012812:	b2db      	uxtb	r3, r3
 8012814:	b29a      	uxth	r2, r3
 8012816:	193b      	adds	r3, r7, r4
 8012818:	801a      	strh	r2, [r3, #0]
    TLV_add(&ToSendTLV, GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t*)&settings);
 801281a:	193b      	adds	r3, r7, r4
 801281c:	1978      	adds	r0, r7, r5
 801281e:	2201      	movs	r2, #1
 8012820:	2117      	movs	r1, #23
 8012822:	f7fe fa5b 	bl	8010cdc <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 8012826:	197b      	adds	r3, r7, r5
 8012828:	0018      	movs	r0, r3
 801282a:	f7fe fbb9 	bl	8010fa0 <TLV_deinit_encode>
}
 801282e:	46c0      	nop			; (mov r8, r8)
 8012830:	46bd      	mov	sp, r7
 8012832:	b011      	add	sp, #68	; 0x44
 8012834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012836:	46c0      	nop			; (mov r8, r8)
 8012838:	2000171c 	.word	0x2000171c
 801283c:	08016724 	.word	0x08016724
 8012840:	20001720 	.word	0x20001720
 8012844:	0801672c 	.word	0x0801672c
 8012848:	20001e1c 	.word	0x20001e1c
 801284c:	20000014 	.word	0x20000014
 8012850:	20000028 	.word	0x20000028

08012854 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t* instruction, uint8_t *pEncodedMsg)
{
 8012854:	b5b0      	push	{r4, r5, r7, lr}
 8012856:	b090      	sub	sp, #64	; 0x40
 8012858:	af00      	add	r7, sp, #0
 801285a:	60b9      	str	r1, [r7, #8]
 801285c:	607a      	str	r2, [r7, #4]
 801285e:	240f      	movs	r4, #15
 8012860:	193b      	adds	r3, r7, r4
 8012862:	1c02      	adds	r2, r0, #0
 8012864:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8012866:	233f      	movs	r3, #63	; 0x3f
 8012868:	18fb      	adds	r3, r7, r3
 801286a:	2202      	movs	r2, #2
 801286c:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data process_tlv;
  TLV_ToSend_Data send_tlv;

  TLV_init_decode(&process_tlv, instruction);
 801286e:	68ba      	ldr	r2, [r7, #8]
 8012870:	252c      	movs	r5, #44	; 0x2c
 8012872:	197b      	adds	r3, r7, r5
 8012874:	0011      	movs	r1, r2
 8012876:	0018      	movs	r0, r3
 8012878:	f7fe fba4 	bl	8010fc4 <TLV_init_decode>
  TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 801287c:	193b      	adds	r3, r7, r4
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	3301      	adds	r3, #1
 8012882:	015b      	lsls	r3, r3, #5
 8012884:	b25b      	sxtb	r3, r3
 8012886:	220a      	movs	r2, #10
 8012888:	4313      	orrs	r3, r2
 801288a:	b25b      	sxtb	r3, r3
 801288c:	b2d9      	uxtb	r1, r3
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2280      	movs	r2, #128	; 0x80
 8012892:	0052      	lsls	r2, r2, #1
 8012894:	2020      	movs	r0, #32
 8012896:	1838      	adds	r0, r7, r0
 8012898:	f7fe f9bd 	bl	8010c16 <TLV_init_encode>

  /*
    In case there is an error, we use this variable to know when to send a DPM_MESSAGE_REJ
    instead of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  USBPD_GUI_Reject_Reason error = GUI_REJ_DPM_REJECT;
 801289c:	231f      	movs	r3, #31
 801289e:	18fb      	adds	r3, r7, r3
 80128a0:	2200      	movs	r2, #0
 80128a2:	701a      	strb	r2, [r3, #0]

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  TLV_get(&process_tlv, &tag, &length, &value);
 80128a4:	2318      	movs	r3, #24
 80128a6:	18fb      	adds	r3, r7, r3
 80128a8:	221c      	movs	r2, #28
 80128aa:	18ba      	adds	r2, r7, r2
 80128ac:	241e      	movs	r4, #30
 80128ae:	1939      	adds	r1, r7, r4
 80128b0:	1978      	adds	r0, r7, r5
 80128b2:	f7fe fbb3 	bl	801101c <TLV_get>
  switch(tag)
 80128b6:	193b      	adds	r3, r7, r4
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	2b2b      	cmp	r3, #43	; 0x2b
 80128bc:	d900      	bls.n	80128c0 <Request_MessageReq+0x6c>
 80128be:	e2a6      	b.n	8012e0e <Request_MessageReq+0x5ba>
 80128c0:	009a      	lsls	r2, r3, #2
 80128c2:	4bdb      	ldr	r3, [pc, #876]	; (8012c30 <Request_MessageReq+0x3dc>)
 80128c4:	18d3      	adds	r3, r2, r3
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	469f      	mov	pc, r3
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
  case GUI_MSG_GOTOMIN :
    status = USBPD_DPM_RequestGotoMin(PortNum);
 80128ca:	233f      	movs	r3, #63	; 0x3f
 80128cc:	18fc      	adds	r4, r7, r3
 80128ce:	230f      	movs	r3, #15
 80128d0:	18fb      	adds	r3, r7, r3
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	0018      	movs	r0, r3
 80128d6:	f7fc fe97 	bl	800f608 <USBPD_DPM_RequestGotoMin>
 80128da:	0003      	movs	r3, r0
 80128dc:	7023      	strb	r3, [r4, #0]
    break;
 80128de:	e2b5      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_PING :
    status = USBPD_DPM_RequestPing(PortNum);
 80128e0:	233f      	movs	r3, #63	; 0x3f
 80128e2:	18fc      	adds	r4, r7, r3
 80128e4:	230f      	movs	r3, #15
 80128e6:	18fb      	adds	r3, r7, r3
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	0018      	movs	r0, r3
 80128ec:	f7fc fed2 	bl	800f694 <USBPD_DPM_RequestPing>
 80128f0:	0003      	movs	r3, r0
 80128f2:	7023      	strb	r3, [r4, #0]
    break;
 80128f4:	e2aa      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_GET_SRC_CAPA :
    status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 80128f6:	233f      	movs	r3, #63	; 0x3f
 80128f8:	18fc      	adds	r4, r7, r3
 80128fa:	230f      	movs	r3, #15
 80128fc:	18fb      	adds	r3, r7, r3
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	0018      	movs	r0, r3
 8012902:	f7fc ff81 	bl	800f808 <USBPD_DPM_RequestGetSourceCapability>
 8012906:	0003      	movs	r3, r0
 8012908:	7023      	strb	r3, [r4, #0]
    break;
 801290a:	e29f      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_GET_SNK_CAPA :
    status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 801290c:	233f      	movs	r3, #63	; 0x3f
 801290e:	18fc      	adds	r4, r7, r3
 8012910:	230f      	movs	r3, #15
 8012912:	18fb      	adds	r3, r7, r3
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	0018      	movs	r0, r3
 8012918:	f7fc ffbc 	bl	800f894 <USBPD_DPM_RequestGetSinkCapability>
 801291c:	0003      	movs	r3, r0
 801291e:	7023      	strb	r3, [r4, #0]
    break;
 8012920:	e294      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_DR_SWAP :
    status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 8012922:	233f      	movs	r3, #63	; 0x3f
 8012924:	18fc      	adds	r4, r7, r3
 8012926:	230f      	movs	r3, #15
 8012928:	18fb      	adds	r3, r7, r3
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	0018      	movs	r0, r3
 801292e:	f7fc fff7 	bl	800f920 <USBPD_DPM_RequestDataRoleSwap>
 8012932:	0003      	movs	r3, r0
 8012934:	7023      	strb	r3, [r4, #0]
    break;
 8012936:	e289      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_PR_SWAP :
    status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8012938:	233f      	movs	r3, #63	; 0x3f
 801293a:	18fc      	adds	r4, r7, r3
 801293c:	230f      	movs	r3, #15
 801293e:	18fb      	adds	r3, r7, r3
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	0018      	movs	r0, r3
 8012944:	f7fd f832 	bl	800f9ac <USBPD_DPM_RequestPowerRoleSwap>
 8012948:	0003      	movs	r3, r0
 801294a:	7023      	strb	r3, [r4, #0]
    break;
 801294c:	e27e      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_VCONN_SWAP :
    status = USBPD_DPM_RequestVconnSwap(PortNum);
 801294e:	233f      	movs	r3, #63	; 0x3f
 8012950:	18fc      	adds	r4, r7, r3
 8012952:	230f      	movs	r3, #15
 8012954:	18fb      	adds	r3, r7, r3
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	0018      	movs	r0, r3
 801295a:	f7fd f85d 	bl	800fa18 <USBPD_DPM_RequestVconnSwap>
 801295e:	0003      	movs	r3, r0
 8012960:	7023      	strb	r3, [r4, #0]
    break;
 8012962:	e273      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_SOURCE_CAPA :
    status = USBPD_DPM_RequestSourceCapability(PortNum);
 8012964:	233f      	movs	r3, #63	; 0x3f
 8012966:	18fc      	adds	r4, r7, r3
 8012968:	230f      	movs	r3, #15
 801296a:	18fb      	adds	r3, r7, r3
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	0018      	movs	r0, r3
 8012970:	f7fd f8e2 	bl	800fb38 <USBPD_DPM_RequestSourceCapability>
 8012974:	0003      	movs	r3, r0
 8012976:	7023      	strb	r3, [r4, #0]
    break;
 8012978:	e268      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 801297a:	233c      	movs	r3, #60	; 0x3c
 801297c:	18fb      	adds	r3, r7, r3
 801297e:	2200      	movs	r2, #0
 8012980:	801a      	strh	r2, [r3, #0]
      uint8_t nb_expected_tag = 0;
 8012982:	233b      	movs	r3, #59	; 0x3b
 8012984:	18fb      	adds	r3, r7, r3
 8012986:	2200      	movs	r2, #0
 8012988:	701a      	strb	r2, [r3, #0]
      uint8_t index_pdo = 0;
 801298a:	233a      	movs	r3, #58	; 0x3a
 801298c:	18fb      	adds	r3, r7, r3
 801298e:	2200      	movs	r2, #0
 8012990:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX) break;
 8012992:	211c      	movs	r1, #28
 8012994:	187b      	adds	r3, r7, r1
 8012996:	881a      	ldrh	r2, [r3, #0]
 8012998:	2380      	movs	r3, #128	; 0x80
 801299a:	005b      	lsls	r3, r3, #1
 801299c:	429a      	cmp	r2, r3
 801299e:	d900      	bls.n	80129a2 <Request_MessageReq+0x14e>
 80129a0:	e237      	b.n	8012e12 <Request_MessageReq+0x5be>
      TLV_get(&process_tlv, &tag, &length, &value);
 80129a2:	2318      	movs	r3, #24
 80129a4:	18fb      	adds	r3, r7, r3
 80129a6:	187a      	adds	r2, r7, r1
 80129a8:	211e      	movs	r1, #30
 80129aa:	1879      	adds	r1, r7, r1
 80129ac:	202c      	movs	r0, #44	; 0x2c
 80129ae:	1838      	adds	r0, r7, r0
 80129b0:	f7fe fb34 	bl	801101c <TLV_get>
      while((0 != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2))
 80129b4:	e02c      	b.n	8012a10 <Request_MessageReq+0x1bc>
      {
        nb_expected_tag++;
 80129b6:	213b      	movs	r1, #59	; 0x3b
 80129b8:	187b      	adds	r3, r7, r1
 80129ba:	781a      	ldrb	r2, [r3, #0]
 80129bc:	187b      	adds	r3, r7, r1
 80129be:	3201      	adds	r2, #1
 80129c0:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 80129c2:	231e      	movs	r3, #30
 80129c4:	18fb      	adds	r3, r7, r3
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d105      	bne.n	80129d8 <Request_MessageReq+0x184>
        {
          index_pdo = value[0];
 80129cc:	69ba      	ldr	r2, [r7, #24]
 80129ce:	233a      	movs	r3, #58	; 0x3a
 80129d0:	18fb      	adds	r3, r7, r3
 80129d2:	7812      	ldrb	r2, [r2, #0]
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	e011      	b.n	80129fc <Request_MessageReq+0x1a8>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 80129d8:	231e      	movs	r3, #30
 80129da:	18fb      	adds	r3, r7, r3
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	2b02      	cmp	r3, #2
 80129e0:	d10c      	bne.n	80129fc <Request_MessageReq+0x1a8>
        {
          voltage = LE16(&value[0]);
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	781b      	ldrb	r3, [r3, #0]
 80129e6:	b299      	uxth	r1, r3
 80129e8:	69bb      	ldr	r3, [r7, #24]
 80129ea:	3301      	adds	r3, #1
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	021b      	lsls	r3, r3, #8
 80129f2:	b29a      	uxth	r2, r3
 80129f4:	233c      	movs	r3, #60	; 0x3c
 80129f6:	18fb      	adds	r3, r7, r3
 80129f8:	188a      	adds	r2, r1, r2
 80129fa:	801a      	strh	r2, [r3, #0]
        }
        TLV_get(&process_tlv, &tag, &length, &value);
 80129fc:	2318      	movs	r3, #24
 80129fe:	18fb      	adds	r3, r7, r3
 8012a00:	221c      	movs	r2, #28
 8012a02:	18ba      	adds	r2, r7, r2
 8012a04:	211e      	movs	r1, #30
 8012a06:	1879      	adds	r1, r7, r1
 8012a08:	202c      	movs	r0, #44	; 0x2c
 8012a0a:	1838      	adds	r0, r7, r0
 8012a0c:	f7fe fb06 	bl	801101c <TLV_get>
      while((0 != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2))
 8012a10:	221c      	movs	r2, #28
 8012a12:	18bb      	adds	r3, r7, r2
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d008      	beq.n	8012a2c <Request_MessageReq+0x1d8>
 8012a1a:	18bb      	adds	r3, r7, r2
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	2bff      	cmp	r3, #255	; 0xff
 8012a20:	d804      	bhi.n	8012a2c <Request_MessageReq+0x1d8>
 8012a22:	233b      	movs	r3, #59	; 0x3b
 8012a24:	18fb      	adds	r3, r7, r3
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d9c4      	bls.n	80129b6 <Request_MessageReq+0x162>
      }
      if (2 == nb_expected_tag)
 8012a2c:	233b      	movs	r3, #59	; 0x3b
 8012a2e:	18fb      	adds	r3, r7, r3
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	2b02      	cmp	r3, #2
 8012a34:	d000      	beq.n	8012a38 <Request_MessageReq+0x1e4>
 8012a36:	e1ee      	b.n	8012e16 <Request_MessageReq+0x5c2>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8012a38:	233f      	movs	r3, #63	; 0x3f
 8012a3a:	18fc      	adds	r4, r7, r3
 8012a3c:	233c      	movs	r3, #60	; 0x3c
 8012a3e:	18fb      	adds	r3, r7, r3
 8012a40:	881a      	ldrh	r2, [r3, #0]
 8012a42:	233a      	movs	r3, #58	; 0x3a
 8012a44:	18fb      	adds	r3, r7, r3
 8012a46:	7819      	ldrb	r1, [r3, #0]
 8012a48:	230f      	movs	r3, #15
 8012a4a:	18fb      	adds	r3, r7, r3
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	0018      	movs	r0, r3
 8012a50:	f7fc fe66 	bl	800f720 <USBPD_DPM_RequestMessageRequest>
 8012a54:	0003      	movs	r3, r0
 8012a56:	7023      	strb	r3, [r4, #0]
      }
    }
    break;
 8012a58:	e1dd      	b.n	8012e16 <Request_MessageReq+0x5c2>
  case GUI_MSG_SOFT_RESET :
    TLV_get(&process_tlv, &tag, &length, &value);
 8012a5a:	2318      	movs	r3, #24
 8012a5c:	18fb      	adds	r3, r7, r3
 8012a5e:	221c      	movs	r2, #28
 8012a60:	18ba      	adds	r2, r7, r2
 8012a62:	241e      	movs	r4, #30
 8012a64:	1939      	adds	r1, r7, r4
 8012a66:	202c      	movs	r0, #44	; 0x2c
 8012a68:	1838      	adds	r0, r7, r0
 8012a6a:	f7fe fad7 	bl	801101c <TLV_get>
    if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8012a6e:	193b      	adds	r3, r7, r4
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d000      	beq.n	8012a78 <Request_MessageReq+0x224>
 8012a76:	e1d0      	b.n	8012e1a <Request_MessageReq+0x5c6>
    {
      status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	781a      	ldrb	r2, [r3, #0]
 8012a7c:	233f      	movs	r3, #63	; 0x3f
 8012a7e:	18fc      	adds	r4, r7, r3
 8012a80:	230f      	movs	r3, #15
 8012a82:	18fb      	adds	r3, r7, r3
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	0011      	movs	r1, r2
 8012a88:	0018      	movs	r0, r3
 8012a8a:	f7fd f80b 	bl	800faa4 <USBPD_DPM_RequestSoftReset>
 8012a8e:	0003      	movs	r3, r0
 8012a90:	7023      	strb	r3, [r4, #0]
    }
    break;
 8012a92:	e1c2      	b.n	8012e1a <Request_MessageReq+0x5c6>
  case GUI_MSG_HARD_RESET :
    status = USBPD_DPM_RequestHardReset(PortNum);
 8012a94:	233f      	movs	r3, #63	; 0x3f
 8012a96:	18fc      	adds	r4, r7, r3
 8012a98:	230f      	movs	r3, #15
 8012a9a:	18fb      	adds	r3, r7, r3
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	0018      	movs	r0, r3
 8012aa0:	f7fc fd2a 	bl	800f4f8 <USBPD_DPM_RequestHardReset>
 8012aa4:	0003      	movs	r3, r0
 8012aa6:	7023      	strb	r3, [r4, #0]
    break;
 8012aa8:	e1d0      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_CABLE_RESET :
    status = USBPD_DPM_RequestCableReset(PortNum);
 8012aaa:	233f      	movs	r3, #63	; 0x3f
 8012aac:	18fc      	adds	r4, r7, r3
 8012aae:	230f      	movs	r3, #15
 8012ab0:	18fb      	adds	r3, r7, r3
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	0018      	movs	r0, r3
 8012ab6:	f7fc fd63 	bl	800f580 <USBPD_DPM_RequestCableReset>
 8012aba:	0003      	movs	r3, r0
 8012abc:	7023      	strb	r3, [r4, #0]
    break;
 8012abe:	e1c5      	b.n	8012e4c <Request_MessageReq+0x5f8>
    }
    break;
#endif /* _VDM */
  case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0;
 8012ac0:	2339      	movs	r3, #57	; 0x39
 8012ac2:	18fb      	adds	r3, r7, r3
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX) break;
 8012ac8:	211c      	movs	r1, #28
 8012aca:	187b      	adds	r3, r7, r1
 8012acc:	881a      	ldrh	r2, [r3, #0]
 8012ace:	2380      	movs	r3, #128	; 0x80
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d900      	bls.n	8012ad8 <Request_MessageReq+0x284>
 8012ad6:	e1a2      	b.n	8012e1e <Request_MessageReq+0x5ca>
      TLV_get(&process_tlv, &tag, &length, &value);
 8012ad8:	2318      	movs	r3, #24
 8012ada:	18fb      	adds	r3, r7, r3
 8012adc:	187a      	adds	r2, r7, r1
 8012ade:	211e      	movs	r1, #30
 8012ae0:	1879      	adds	r1, r7, r1
 8012ae2:	202c      	movs	r0, #44	; 0x2c
 8012ae4:	1838      	adds	r0, r7, r0
 8012ae6:	f7fe fa99 	bl	801101c <TLV_get>
      while((0 != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1))
 8012aea:	e005      	b.n	8012af8 <Request_MessageReq+0x2a4>
      {
        nb_expected_tag++;
 8012aec:	2139      	movs	r1, #57	; 0x39
 8012aee:	187b      	adds	r3, r7, r1
 8012af0:	781a      	ldrb	r2, [r3, #0]
 8012af2:	187b      	adds	r3, r7, r1
 8012af4:	3201      	adds	r2, #1
 8012af6:	701a      	strb	r2, [r3, #0]
      while((0 != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1))
 8012af8:	221c      	movs	r2, #28
 8012afa:	18bb      	adds	r3, r7, r2
 8012afc:	881b      	ldrh	r3, [r3, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d008      	beq.n	8012b14 <Request_MessageReq+0x2c0>
 8012b02:	18bb      	adds	r3, r7, r2
 8012b04:	881b      	ldrh	r3, [r3, #0]
 8012b06:	2bff      	cmp	r3, #255	; 0xff
 8012b08:	d804      	bhi.n	8012b14 <Request_MessageReq+0x2c0>
 8012b0a:	2339      	movs	r3, #57	; 0x39
 8012b0c:	18fb      	adds	r3, r7, r3
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d0eb      	beq.n	8012aec <Request_MessageReq+0x298>
      }
      if (1 == nb_expected_tag)
 8012b14:	2339      	movs	r3, #57	; 0x39
 8012b16:	18fb      	adds	r3, r7, r3
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	2b01      	cmp	r3, #1
 8012b1c:	d000      	beq.n	8012b20 <Request_MessageReq+0x2cc>
 8012b1e:	e180      	b.n	8012e22 <Request_MessageReq+0x5ce>
      {
        status = Manage_FreeText(PortNum, value, length);
 8012b20:	69b9      	ldr	r1, [r7, #24]
 8012b22:	231c      	movs	r3, #28
 8012b24:	18fb      	adds	r3, r7, r3
 8012b26:	881a      	ldrh	r2, [r3, #0]
 8012b28:	233f      	movs	r3, #63	; 0x3f
 8012b2a:	18fc      	adds	r4, r7, r3
 8012b2c:	230f      	movs	r3, #15
 8012b2e:	18fb      	adds	r3, r7, r3
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	0018      	movs	r0, r3
 8012b34:	f001 f9fe 	bl	8013f34 <Manage_FreeText>
 8012b38:	0003      	movs	r3, r0
 8012b3a:	7023      	strb	r3, [r4, #0]
      }
    }
    break;
 8012b3c:	e171      	b.n	8012e22 <Request_MessageReq+0x5ce>
#ifdef USBPD_REV30_SUPPORT
  case GUI_MSG_FR_SWAP :
    status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 8012b3e:	233f      	movs	r3, #63	; 0x3f
 8012b40:	18fc      	adds	r4, r7, r3
 8012b42:	230f      	movs	r3, #15
 8012b44:	18fb      	adds	r3, r7, r3
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	0018      	movs	r0, r3
 8012b4a:	f7fd f9f1 	bl	800ff30 <USBPD_DPM_RequestFastRoleSwap>
 8012b4e:	0003      	movs	r3, r0
 8012b50:	7023      	strb	r3, [r4, #0]
    break;
 8012b52:	e17b      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_GET_PPS_STATUS :
    status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 8012b54:	233f      	movs	r3, #63	; 0x3f
 8012b56:	18fc      	adds	r4, r7, r3
 8012b58:	230f      	movs	r3, #15
 8012b5a:	18fb      	adds	r3, r7, r3
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	0018      	movs	r0, r3
 8012b60:	f7fd f95a 	bl	800fe18 <USBPD_DPM_RequestGetPPS_Status>
 8012b64:	0003      	movs	r3, r0
 8012b66:	7023      	strb	r3, [r4, #0]
    break;
 8012b68:	e170      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_GET_COUNTRY_CODES :
    status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 8012b6a:	233f      	movs	r3, #63	; 0x3f
 8012b6c:	18fc      	adds	r4, r7, r3
 8012b6e:	230f      	movs	r3, #15
 8012b70:	18fb      	adds	r3, r7, r3
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	0018      	movs	r0, r3
 8012b76:	f7fd fa21 	bl	800ffbc <USBPD_DPM_RequestGetCountryCodes>
 8012b7a:	0003      	movs	r3, r0
 8012b7c:	7023      	strb	r3, [r4, #0]
    break;
 8012b7e:	e165      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_GET_STATUS :
    status = USBPD_DPM_RequestGetStatus(PortNum);
 8012b80:	233f      	movs	r3, #63	; 0x3f
 8012b82:	18fc      	adds	r4, r7, r3
 8012b84:	230f      	movs	r3, #15
 8012b86:	18fb      	adds	r3, r7, r3
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	0018      	movs	r0, r3
 8012b8c:	f7fd f98a 	bl	800fea4 <USBPD_DPM_RequestGetStatus>
 8012b90:	0003      	movs	r3, r0
 8012b92:	7023      	strb	r3, [r4, #0]
    break;
 8012b94:	e15a      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
    status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 8012b96:	233f      	movs	r3, #63	; 0x3f
 8012b98:	18fc      	adds	r4, r7, r3
 8012b9a:	230f      	movs	r3, #15
 8012b9c:	18fb      	adds	r3, r7, r3
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	0018      	movs	r0, r3
 8012ba2:	f7fd f857 	bl	800fc54 <USBPD_DPM_RequestGetSourceCapabilityExt>
 8012ba6:	0003      	movs	r3, r0
 8012ba8:	7023      	strb	r3, [r4, #0]
    break;
 8012baa:	e14f      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_GET_SINK_CAPA_EXTENDED :
    status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 8012bac:	233f      	movs	r3, #63	; 0x3f
 8012bae:	18fc      	adds	r4, r7, r3
 8012bb0:	230f      	movs	r3, #15
 8012bb2:	18fb      	adds	r3, r7, r3
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	0018      	movs	r0, r3
 8012bb8:	f7fd f892 	bl	800fce0 <USBPD_DPM_RequestGetSinkCapabilityExt>
 8012bbc:	0003      	movs	r3, r0
 8012bbe:	7023      	strb	r3, [r4, #0]
    break;
 8012bc0:	e144      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_ALERT :
    if (length > TLV_SIZE_MAX) break;
 8012bc2:	211c      	movs	r1, #28
 8012bc4:	187b      	adds	r3, r7, r1
 8012bc6:	881a      	ldrh	r2, [r3, #0]
 8012bc8:	2380      	movs	r3, #128	; 0x80
 8012bca:	005b      	lsls	r3, r3, #1
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d900      	bls.n	8012bd2 <Request_MessageReq+0x37e>
 8012bd0:	e129      	b.n	8012e26 <Request_MessageReq+0x5d2>
    TLV_get(&process_tlv, &tag, &length, &value);
 8012bd2:	2318      	movs	r3, #24
 8012bd4:	18fb      	adds	r3, r7, r3
 8012bd6:	187a      	adds	r2, r7, r1
 8012bd8:	241e      	movs	r4, #30
 8012bda:	1939      	adds	r1, r7, r4
 8012bdc:	202c      	movs	r0, #44	; 0x2c
 8012bde:	1838      	adds	r0, r7, r0
 8012be0:	f7fe fa1c 	bl	801101c <TLV_get>
    if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 8012be4:	193b      	adds	r3, r7, r4
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	2b04      	cmp	r3, #4
 8012bea:	d000      	beq.n	8012bee <Request_MessageReq+0x39a>
 8012bec:	e11d      	b.n	8012e2a <Request_MessageReq+0x5d6>
    {
      USBPD_ADO_TypeDef alert;
      alert.d32 = LE32(&value[0]);
 8012bee:	69bb      	ldr	r3, [r7, #24]
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	001a      	movs	r2, r3
 8012bf4:	69bb      	ldr	r3, [r7, #24]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	021b      	lsls	r3, r3, #8
 8012bfc:	18d2      	adds	r2, r2, r3
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	3302      	adds	r3, #2
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	041b      	lsls	r3, r3, #16
 8012c06:	18d2      	adds	r2, r2, r3
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	3303      	adds	r3, #3
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	061b      	lsls	r3, r3, #24
 8012c10:	18d3      	adds	r3, r2, r3
 8012c12:	617b      	str	r3, [r7, #20]
      status = USBPD_DPM_RequestAlert(PortNum, alert);
 8012c14:	233f      	movs	r3, #63	; 0x3f
 8012c16:	18fc      	adds	r4, r7, r3
 8012c18:	697a      	ldr	r2, [r7, #20]
 8012c1a:	230f      	movs	r3, #15
 8012c1c:	18fb      	adds	r3, r7, r3
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	0011      	movs	r1, r2
 8012c22:	0018      	movs	r0, r3
 8012c24:	f7fc ffce 	bl	800fbc4 <USBPD_DPM_RequestAlert>
 8012c28:	0003      	movs	r3, r0
 8012c2a:	7023      	strb	r3, [r4, #0]
    }
    break;
 8012c2c:	e0fd      	b.n	8012e2a <Request_MessageReq+0x5d6>
 8012c2e:	46c0      	nop			; (mov r8, r8)
 8012c30:	08016ac4 	.word	0x08016ac4
  case GUI_MSG_GET_COUNTRY_INFO :
    if (length > TLV_SIZE_MAX) break;
 8012c34:	211c      	movs	r1, #28
 8012c36:	187b      	adds	r3, r7, r1
 8012c38:	881a      	ldrh	r2, [r3, #0]
 8012c3a:	2380      	movs	r3, #128	; 0x80
 8012c3c:	005b      	lsls	r3, r3, #1
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d900      	bls.n	8012c44 <Request_MessageReq+0x3f0>
 8012c42:	e0f4      	b.n	8012e2e <Request_MessageReq+0x5da>
    TLV_get(&process_tlv, &tag, &length, &value);
 8012c44:	2318      	movs	r3, #24
 8012c46:	18fb      	adds	r3, r7, r3
 8012c48:	187a      	adds	r2, r7, r1
 8012c4a:	241e      	movs	r4, #30
 8012c4c:	1939      	adds	r1, r7, r4
 8012c4e:	202c      	movs	r0, #44	; 0x2c
 8012c50:	1838      	adds	r0, r7, r0
 8012c52:	f7fe f9e3 	bl	801101c <TLV_get>
    if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 8012c56:	193b      	adds	r3, r7, r4
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	2b05      	cmp	r3, #5
 8012c5c:	d000      	beq.n	8012c60 <Request_MessageReq+0x40c>
 8012c5e:	e0e8      	b.n	8012e32 <Request_MessageReq+0x5de>
    {
      uint16_t country_code;
      country_code = LE16(&value[0]);
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	b299      	uxth	r1, r3
 8012c66:	69bb      	ldr	r3, [r7, #24]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	021b      	lsls	r3, r3, #8
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	2034      	movs	r0, #52	; 0x34
 8012c74:	183b      	adds	r3, r7, r0
 8012c76:	188a      	adds	r2, r1, r2
 8012c78:	801a      	strh	r2, [r3, #0]
      status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 8012c7a:	233f      	movs	r3, #63	; 0x3f
 8012c7c:	18fc      	adds	r4, r7, r3
 8012c7e:	183b      	adds	r3, r7, r0
 8012c80:	881a      	ldrh	r2, [r3, #0]
 8012c82:	230f      	movs	r3, #15
 8012c84:	18fb      	adds	r3, r7, r3
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	0011      	movs	r1, r2
 8012c8a:	0018      	movs	r0, r3
 8012c8c:	f7fd f9dc 	bl	8010048 <USBPD_DPM_RequestGetCountryInfo>
 8012c90:	0003      	movs	r3, r0
 8012c92:	7023      	strb	r3, [r4, #0]
    }
    break;
 8012c94:	e0cd      	b.n	8012e32 <Request_MessageReq+0x5de>
  case GUI_MSG_GET_BAT_CAPA :
    if (length > TLV_SIZE_MAX) break;
 8012c96:	211c      	movs	r1, #28
 8012c98:	187b      	adds	r3, r7, r1
 8012c9a:	881a      	ldrh	r2, [r3, #0]
 8012c9c:	2380      	movs	r3, #128	; 0x80
 8012c9e:	005b      	lsls	r3, r3, #1
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d900      	bls.n	8012ca6 <Request_MessageReq+0x452>
 8012ca4:	e0c7      	b.n	8012e36 <Request_MessageReq+0x5e2>
    TLV_get(&process_tlv, &tag, &length, &value);
 8012ca6:	2318      	movs	r3, #24
 8012ca8:	18fb      	adds	r3, r7, r3
 8012caa:	187a      	adds	r2, r7, r1
 8012cac:	241e      	movs	r4, #30
 8012cae:	1939      	adds	r1, r7, r4
 8012cb0:	202c      	movs	r0, #44	; 0x2c
 8012cb2:	1838      	adds	r0, r7, r0
 8012cb4:	f7fe f9b2 	bl	801101c <TLV_get>
    if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8012cb8:	193b      	adds	r3, r7, r4
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	2b0c      	cmp	r3, #12
 8012cbe:	d000      	beq.n	8012cc2 <Request_MessageReq+0x46e>
 8012cc0:	e0bb      	b.n	8012e3a <Request_MessageReq+0x5e6>
    {
      status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t*)&value[0]);
 8012cc2:	69ba      	ldr	r2, [r7, #24]
 8012cc4:	233f      	movs	r3, #63	; 0x3f
 8012cc6:	18fc      	adds	r4, r7, r3
 8012cc8:	230f      	movs	r3, #15
 8012cca:	18fb      	adds	r3, r7, r3
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	0011      	movs	r1, r2
 8012cd0:	0018      	movs	r0, r3
 8012cd2:	f7fd fa03 	bl	80100dc <USBPD_DPM_RequestGetBatteryCapability>
 8012cd6:	0003      	movs	r3, r0
 8012cd8:	7023      	strb	r3, [r4, #0]
    }
    break;
 8012cda:	e0ae      	b.n	8012e3a <Request_MessageReq+0x5e6>
  case GUI_MSG_GET_BAT_STATUS :
    if (length > TLV_SIZE_MAX) break;
 8012cdc:	211c      	movs	r1, #28
 8012cde:	187b      	adds	r3, r7, r1
 8012ce0:	881a      	ldrh	r2, [r3, #0]
 8012ce2:	2380      	movs	r3, #128	; 0x80
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d900      	bls.n	8012cec <Request_MessageReq+0x498>
 8012cea:	e0a8      	b.n	8012e3e <Request_MessageReq+0x5ea>
    TLV_get(&process_tlv, &tag, &length, &value);
 8012cec:	2318      	movs	r3, #24
 8012cee:	18fb      	adds	r3, r7, r3
 8012cf0:	187a      	adds	r2, r7, r1
 8012cf2:	241e      	movs	r4, #30
 8012cf4:	1939      	adds	r1, r7, r4
 8012cf6:	202c      	movs	r0, #44	; 0x2c
 8012cf8:	1838      	adds	r0, r7, r0
 8012cfa:	f7fe f98f 	bl	801101c <TLV_get>
    if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8012cfe:	193b      	adds	r3, r7, r4
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	2b0c      	cmp	r3, #12
 8012d04:	d000      	beq.n	8012d08 <Request_MessageReq+0x4b4>
 8012d06:	e09c      	b.n	8012e42 <Request_MessageReq+0x5ee>
    {
      status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t*)&value[0]);
 8012d08:	69ba      	ldr	r2, [r7, #24]
 8012d0a:	233f      	movs	r3, #63	; 0x3f
 8012d0c:	18fc      	adds	r4, r7, r3
 8012d0e:	230f      	movs	r3, #15
 8012d10:	18fb      	adds	r3, r7, r3
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	0011      	movs	r1, r2
 8012d16:	0018      	movs	r0, r3
 8012d18:	f7fd fa2a 	bl	8010170 <USBPD_DPM_RequestGetBatteryStatus>
 8012d1c:	0003      	movs	r3, r0
 8012d1e:	7023      	strb	r3, [r4, #0]
    }
    break;
 8012d20:	e08f      	b.n	8012e42 <Request_MessageReq+0x5ee>
  case GUI_MSG_GET_MANU_INFO :
    {
      uint16_t manu_info;
      uint8_t nb_expected_tag = 0;
 8012d22:	2338      	movs	r3, #56	; 0x38
 8012d24:	18fb      	adds	r3, r7, r3
 8012d26:	2200      	movs	r2, #0
 8012d28:	701a      	strb	r2, [r3, #0]
      uint8_t sop = USBPD_SOPTYPE_SOP;
 8012d2a:	2337      	movs	r3, #55	; 0x37
 8012d2c:	18fb      	adds	r3, r7, r3
 8012d2e:	2200      	movs	r2, #0
 8012d30:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX) break;
 8012d32:	211c      	movs	r1, #28
 8012d34:	187b      	adds	r3, r7, r1
 8012d36:	881a      	ldrh	r2, [r3, #0]
 8012d38:	2380      	movs	r3, #128	; 0x80
 8012d3a:	005b      	lsls	r3, r3, #1
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d900      	bls.n	8012d42 <Request_MessageReq+0x4ee>
 8012d40:	e081      	b.n	8012e46 <Request_MessageReq+0x5f2>
      TLV_get(&process_tlv, &tag, &length, &value);
 8012d42:	2318      	movs	r3, #24
 8012d44:	18fb      	adds	r3, r7, r3
 8012d46:	187a      	adds	r2, r7, r1
 8012d48:	211e      	movs	r1, #30
 8012d4a:	1879      	adds	r1, r7, r1
 8012d4c:	202c      	movs	r0, #44	; 0x2c
 8012d4e:	1838      	adds	r0, r7, r0
 8012d50:	f7fe f964 	bl	801101c <TLV_get>
      while((0 != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2))
 8012d54:	e02d      	b.n	8012db2 <Request_MessageReq+0x55e>
      {
        nb_expected_tag++;
 8012d56:	2138      	movs	r1, #56	; 0x38
 8012d58:	187b      	adds	r3, r7, r1
 8012d5a:	781a      	ldrb	r2, [r3, #0]
 8012d5c:	187b      	adds	r3, r7, r1
 8012d5e:	3201      	adds	r2, #1
 8012d60:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8012d62:	231e      	movs	r3, #30
 8012d64:	18fb      	adds	r3, r7, r3
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d105      	bne.n	8012d78 <Request_MessageReq+0x524>
        {
          sop = value[0];
 8012d6c:	69ba      	ldr	r2, [r7, #24]
 8012d6e:	2337      	movs	r3, #55	; 0x37
 8012d70:	18fb      	adds	r3, r7, r3
 8012d72:	7812      	ldrb	r2, [r2, #0]
 8012d74:	701a      	strb	r2, [r3, #0]
 8012d76:	e012      	b.n	8012d9e <Request_MessageReq+0x54a>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 8012d78:	231e      	movs	r3, #30
 8012d7a:	18fb      	adds	r3, r7, r3
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	2b0d      	cmp	r3, #13
 8012d80:	d10d      	bne.n	8012d9e <Request_MessageReq+0x54a>
        {
          manu_info = LE16(&value[0]);
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	3301      	adds	r3, #1
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	021b      	lsls	r3, r3, #8
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	18d3      	adds	r3, r2, r3
 8012d96:	b29a      	uxth	r2, r3
 8012d98:	2312      	movs	r3, #18
 8012d9a:	18fb      	adds	r3, r7, r3
 8012d9c:	801a      	strh	r2, [r3, #0]
        }
        TLV_get(&process_tlv, &tag, &length, &value);
 8012d9e:	2318      	movs	r3, #24
 8012da0:	18fb      	adds	r3, r7, r3
 8012da2:	221c      	movs	r2, #28
 8012da4:	18ba      	adds	r2, r7, r2
 8012da6:	211e      	movs	r1, #30
 8012da8:	1879      	adds	r1, r7, r1
 8012daa:	202c      	movs	r0, #44	; 0x2c
 8012dac:	1838      	adds	r0, r7, r0
 8012dae:	f7fe f935 	bl	801101c <TLV_get>
      while((0 != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2))
 8012db2:	221c      	movs	r2, #28
 8012db4:	18bb      	adds	r3, r7, r2
 8012db6:	881b      	ldrh	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d008      	beq.n	8012dce <Request_MessageReq+0x57a>
 8012dbc:	18bb      	adds	r3, r7, r2
 8012dbe:	881b      	ldrh	r3, [r3, #0]
 8012dc0:	2bff      	cmp	r3, #255	; 0xff
 8012dc2:	d804      	bhi.n	8012dce <Request_MessageReq+0x57a>
 8012dc4:	2338      	movs	r3, #56	; 0x38
 8012dc6:	18fb      	adds	r3, r7, r3
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	2b01      	cmp	r3, #1
 8012dcc:	d9c3      	bls.n	8012d56 <Request_MessageReq+0x502>
      }
      if (2 == nb_expected_tag)
 8012dce:	2338      	movs	r3, #56	; 0x38
 8012dd0:	18fb      	adds	r3, r7, r3
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	2b02      	cmp	r3, #2
 8012dd6:	d138      	bne.n	8012e4a <Request_MessageReq+0x5f6>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t*)&manu_info);
 8012dd8:	233f      	movs	r3, #63	; 0x3f
 8012dda:	18fc      	adds	r4, r7, r3
 8012ddc:	2312      	movs	r3, #18
 8012dde:	18fa      	adds	r2, r7, r3
 8012de0:	2337      	movs	r3, #55	; 0x37
 8012de2:	18fb      	adds	r3, r7, r3
 8012de4:	7819      	ldrb	r1, [r3, #0]
 8012de6:	230f      	movs	r3, #15
 8012de8:	18fb      	adds	r3, r7, r3
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	0018      	movs	r0, r3
 8012dee:	f7fc ffbd 	bl	800fd6c <USBPD_DPM_RequestGetManufacturerInfo>
 8012df2:	0003      	movs	r3, r0
 8012df4:	7023      	strb	r3, [r4, #0]
      }
    }
    break;
 8012df6:	e028      	b.n	8012e4a <Request_MessageReq+0x5f6>
  case GUI_MSG_SECU_REQUEST :
    status = USBPD_DPM_RequestSecurityRequest(PortNum);
 8012df8:	233f      	movs	r3, #63	; 0x3f
 8012dfa:	18fc      	adds	r4, r7, r3
 8012dfc:	230f      	movs	r3, #15
 8012dfe:	18fb      	adds	r3, r7, r3
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	0018      	movs	r0, r3
 8012e04:	f7fd f9fe 	bl	8010204 <USBPD_DPM_RequestSecurityRequest>
 8012e08:	0003      	movs	r3, r0
 8012e0a:	7023      	strb	r3, [r4, #0]
    break;
 8012e0c:	e01e      	b.n	8012e4c <Request_MessageReq+0x5f8>
  case GUI_MSG_FIRM_UPDATE_REQUEST :
    break;
#endif /* USBPD_REV30_SUPPORT */
  default :
    break;
 8012e0e:	46c0      	nop			; (mov r8, r8)
 8012e10:	e01c      	b.n	8012e4c <Request_MessageReq+0x5f8>
      if (length > TLV_SIZE_MAX) break;
 8012e12:	46c0      	nop			; (mov r8, r8)
 8012e14:	e01a      	b.n	8012e4c <Request_MessageReq+0x5f8>
    break;
 8012e16:	46c0      	nop			; (mov r8, r8)
 8012e18:	e018      	b.n	8012e4c <Request_MessageReq+0x5f8>
    break;
 8012e1a:	46c0      	nop			; (mov r8, r8)
 8012e1c:	e016      	b.n	8012e4c <Request_MessageReq+0x5f8>
      if (length > TLV_SIZE_MAX) break;
 8012e1e:	46c0      	nop			; (mov r8, r8)
 8012e20:	e014      	b.n	8012e4c <Request_MessageReq+0x5f8>
    break;
 8012e22:	46c0      	nop			; (mov r8, r8)
 8012e24:	e012      	b.n	8012e4c <Request_MessageReq+0x5f8>
    if (length > TLV_SIZE_MAX) break;
 8012e26:	46c0      	nop			; (mov r8, r8)
 8012e28:	e010      	b.n	8012e4c <Request_MessageReq+0x5f8>
    break;
 8012e2a:	46c0      	nop			; (mov r8, r8)
 8012e2c:	e00e      	b.n	8012e4c <Request_MessageReq+0x5f8>
    if (length > TLV_SIZE_MAX) break;
 8012e2e:	46c0      	nop			; (mov r8, r8)
 8012e30:	e00c      	b.n	8012e4c <Request_MessageReq+0x5f8>
    break;
 8012e32:	46c0      	nop			; (mov r8, r8)
 8012e34:	e00a      	b.n	8012e4c <Request_MessageReq+0x5f8>
    if (length > TLV_SIZE_MAX) break;
 8012e36:	46c0      	nop			; (mov r8, r8)
 8012e38:	e008      	b.n	8012e4c <Request_MessageReq+0x5f8>
    break;
 8012e3a:	46c0      	nop			; (mov r8, r8)
 8012e3c:	e006      	b.n	8012e4c <Request_MessageReq+0x5f8>
    if (length > TLV_SIZE_MAX) break;
 8012e3e:	46c0      	nop			; (mov r8, r8)
 8012e40:	e004      	b.n	8012e4c <Request_MessageReq+0x5f8>
    break;
 8012e42:	46c0      	nop			; (mov r8, r8)
 8012e44:	e002      	b.n	8012e4c <Request_MessageReq+0x5f8>
      if (length > TLV_SIZE_MAX) break;
 8012e46:	46c0      	nop			; (mov r8, r8)
 8012e48:	e000      	b.n	8012e4c <Request_MessageReq+0x5f8>
    break;
 8012e4a:	46c0      	nop			; (mov r8, r8)
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 8012e4c:	223f      	movs	r2, #63	; 0x3f
 8012e4e:	18bb      	adds	r3, r7, r2
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d031      	beq.n	8012eba <Request_MessageReq+0x666>
  {
    switch (status)
 8012e56:	18bb      	adds	r3, r7, r2
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	2b03      	cmp	r3, #3
 8012e5c:	d002      	beq.n	8012e64 <Request_MessageReq+0x610>
 8012e5e:	2b04      	cmp	r3, #4
 8012e60:	d005      	beq.n	8012e6e <Request_MessageReq+0x61a>
 8012e62:	e009      	b.n	8012e78 <Request_MessageReq+0x624>
    {
    case USBPD_BUSY:
      error = GUI_REJ_DPM_NOT_READY;
 8012e64:	231f      	movs	r3, #31
 8012e66:	18fb      	adds	r3, r7, r3
 8012e68:	2206      	movs	r2, #6
 8012e6a:	701a      	strb	r2, [r3, #0]
      break;
 8012e6c:	e009      	b.n	8012e82 <Request_MessageReq+0x62e>
    case USBPD_TIMEOUT:
      error = GUI_REJ_DPM_TIMEOUT;
 8012e6e:	231f      	movs	r3, #31
 8012e70:	18fb      	adds	r3, r7, r3
 8012e72:	2202      	movs	r2, #2
 8012e74:	701a      	strb	r2, [r3, #0]
      break;
 8012e76:	e004      	b.n	8012e82 <Request_MessageReq+0x62e>
    default:
    case USBPD_NOTSUPPORTED:
    case USBPD_ERROR:
      error = GUI_REJ_DPM_REJECT;
 8012e78:	231f      	movs	r3, #31
 8012e7a:	18fb      	adds	r3, r7, r3
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	701a      	strb	r2, [r3, #0]
      break;
 8012e80:	46c0      	nop			; (mov r8, r8)
    }
    TLV_deinit_encode(&send_tlv);
 8012e82:	2420      	movs	r4, #32
 8012e84:	193b      	adds	r3, r7, r4
 8012e86:	0018      	movs	r0, r3
 8012e88:	f7fe f88a 	bl	8010fa0 <TLV_deinit_encode>
    TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX, pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
 8012e8c:	230f      	movs	r3, #15
 8012e8e:	18fb      	adds	r3, r7, r3
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	3301      	adds	r3, #1
 8012e94:	015b      	lsls	r3, r3, #5
 8012e96:	b25b      	sxtb	r3, r3
 8012e98:	220b      	movs	r2, #11
 8012e9a:	4313      	orrs	r3, r2
 8012e9c:	b25b      	sxtb	r3, r3
 8012e9e:	b2d9      	uxtb	r1, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2280      	movs	r2, #128	; 0x80
 8012ea4:	0052      	lsls	r2, r2, #1
 8012ea6:	1938      	adds	r0, r7, r4
 8012ea8:	f7fd feb5 	bl	8010c16 <TLV_init_encode>
    TLV_addValue(&send_tlv, (uint8_t*)&error, 1);
 8012eac:	231f      	movs	r3, #31
 8012eae:	18f9      	adds	r1, r7, r3
 8012eb0:	193b      	adds	r3, r7, r4
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	0018      	movs	r0, r3
 8012eb6:	f7fd ffdf 	bl	8010e78 <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 8012eba:	2320      	movs	r3, #32
 8012ebc:	18fb      	adds	r3, r7, r3
 8012ebe:	0018      	movs	r0, r3
 8012ec0:	f7fe f86e 	bl	8010fa0 <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 8012ec4:	232c      	movs	r3, #44	; 0x2c
 8012ec6:	18fb      	adds	r3, r7, r3
 8012ec8:	0018      	movs	r0, r3
 8012eca:	f7fe f901 	bl	80110d0 <TLV_deinit_decode>
}
 8012ece:	46c0      	nop			; (mov r8, r8)
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	b010      	add	sp, #64	; 0x40
 8012ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ed6:	46c0      	nop			; (mov r8, r8)

08012ed8 <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t* instruction, uint8_t *pEncodedMsg)
{
 8012ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eda:	b0d5      	sub	sp, #340	; 0x154
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60b9      	str	r1, [r7, #8]
 8012ee0:	607a      	str	r2, [r7, #4]
 8012ee2:	4bd5      	ldr	r3, [pc, #852]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 8012ee4:	22a8      	movs	r2, #168	; 0xa8
 8012ee6:	0052      	lsls	r2, r2, #1
 8012ee8:	4694      	mov	ip, r2
 8012eea:	44bc      	add	ip, r7
 8012eec:	4463      	add	r3, ip
 8012eee:	1c02      	adds	r2, r0, #0
 8012ef0:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 8012ef2:	23a7      	movs	r3, #167	; 0xa7
 8012ef4:	005b      	lsls	r3, r3, #1
 8012ef6:	18fb      	adds	r3, r7, r3
 8012ef8:	2200      	movs	r2, #0
 8012efa:	801a      	strh	r2, [r3, #0]
  uint8_t error = 0xFF;
 8012efc:	231a      	movs	r3, #26
 8012efe:	33ff      	adds	r3, #255	; 0xff
 8012f00:	18fb      	adds	r3, r7, r3
 8012f02:	22ff      	movs	r2, #255	; 0xff
 8012f04:	701a      	strb	r2, [r3, #0]
  uint8_t param_not_applicated[GUI_PARAM_ALL];         /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0;  /* Counter of not applicated parameters */
 8012f06:	234e      	movs	r3, #78	; 0x4e
 8012f08:	33ff      	adds	r3, #255	; 0xff
 8012f0a:	18fb      	adds	r3, r7, r3
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	701a      	strb	r2, [r3, #0]
  uint8_t tag, flag_drp = 0, tdrp = 0;
 8012f10:	23a6      	movs	r3, #166	; 0xa6
 8012f12:	005b      	lsls	r3, r3, #1
 8012f14:	18fb      	adds	r3, r7, r3
 8012f16:	2200      	movs	r2, #0
 8012f18:	701a      	strb	r2, [r3, #0]
 8012f1a:	234c      	movs	r3, #76	; 0x4c
 8012f1c:	33ff      	adds	r3, #255	; 0xff
 8012f1e:	18fb      	adds	r3, r7, r3
 8012f20:	2200      	movs	r2, #0
 8012f22:	701a      	strb	r2, [r3, #0]

  TLV_init_decode(&process_tlv, instruction);
 8012f24:	68ba      	ldr	r2, [r7, #8]
 8012f26:	2390      	movs	r3, #144	; 0x90
 8012f28:	005b      	lsls	r3, r3, #1
 8012f2a:	18fb      	adds	r3, r7, r3
 8012f2c:	0011      	movs	r1, r2
 8012f2e:	0018      	movs	r0, r3
 8012f30:	f7fe f848 	bl	8010fc4 <TLV_init_decode>
  /* This is the pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8012f34:	4bc0      	ldr	r3, [pc, #768]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 8012f36:	22a8      	movs	r2, #168	; 0xa8
 8012f38:	0052      	lsls	r2, r2, #1
 8012f3a:	4694      	mov	ip, r2
 8012f3c:	44bc      	add	ip, r7
 8012f3e:	4463      	add	r3, ip
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	3301      	adds	r3, #1
 8012f44:	015b      	lsls	r3, r3, #5
 8012f46:	b25b      	sxtb	r3, r3
 8012f48:	2207      	movs	r2, #7
 8012f4a:	4313      	orrs	r3, r2
 8012f4c:	b25b      	sxtb	r3, r3
 8012f4e:	b2d9      	uxtb	r1, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2280      	movs	r2, #128	; 0x80
 8012f54:	0052      	lsls	r2, r2, #1
 8012f56:	2094      	movs	r0, #148	; 0x94
 8012f58:	0040      	lsls	r0, r0, #1
 8012f5a:	1838      	adds	r0, r7, r0
 8012f5c:	f7fd fe5b 	bl	8010c16 <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while(0xFF != TLV_get(&process_tlv, &tag, &size, &value))
 8012f60:	e2fd      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch((USBPD_GUI_Tag_Param)tag)
 8012f62:	4bb6      	ldr	r3, [pc, #728]	; (801323c <Send_DpmConfigSetCnf+0x364>)
 8012f64:	22a8      	movs	r2, #168	; 0xa8
 8012f66:	0052      	lsls	r2, r2, #1
 8012f68:	4694      	mov	ip, r2
 8012f6a:	44bc      	add	ip, r7
 8012f6c:	4463      	add	r3, ip
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	2b1c      	cmp	r3, #28
 8012f72:	d900      	bls.n	8012f76 <Send_DpmConfigSetCnf+0x9e>
 8012f74:	e2d6      	b.n	8013524 <Send_DpmConfigSetCnf+0x64c>
 8012f76:	009a      	lsls	r2, r3, #2
 8012f78:	4bb1      	ldr	r3, [pc, #708]	; (8013240 <Send_DpmConfigSetCnf+0x368>)
 8012f7a:	18d3      	adds	r3, r2, r3
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	469f      	mov	pc, r3
    {
    case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
      /* SOP & SOP1 & SOP2 */
      /* SOP1_Debug & SOP2_Debug not implemented */
      DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 8012f80:	238e      	movs	r3, #142	; 0x8e
 8012f82:	005b      	lsls	r3, r3, #1
 8012f84:	18fb      	adds	r3, r7, r3
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	7819      	ldrb	r1, [r3, #0]
 8012f8a:	4bab      	ldr	r3, [pc, #684]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 8012f8c:	22a8      	movs	r2, #168	; 0xa8
 8012f8e:	0052      	lsls	r2, r2, #1
 8012f90:	4694      	mov	ip, r2
 8012f92:	44bc      	add	ip, r7
 8012f94:	4463      	add	r3, ip
 8012f96:	781a      	ldrb	r2, [r3, #0]
 8012f98:	0008      	movs	r0, r1
 8012f9a:	49aa      	ldr	r1, [pc, #680]	; (8013244 <Send_DpmConfigSetCnf+0x36c>)
 8012f9c:	0013      	movs	r3, r2
 8012f9e:	005b      	lsls	r3, r3, #1
 8012fa0:	189b      	adds	r3, r3, r2
 8012fa2:	009b      	lsls	r3, r3, #2
 8012fa4:	5058      	str	r0, [r3, r1]
#endif /* !USBPDCORE_LIB_NO_PD */
      break;
 8012fa6:	e2da      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
#if defined(USBPD_REV30_SUPPORT)
    case GUI_PARAM_FASTROLESWAP :
      /*FastRoleSwap*/
      DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 8012fa8:	238e      	movs	r3, #142	; 0x8e
 8012faa:	005b      	lsls	r3, r3, #1
 8012fac:	18fb      	adds	r3, r7, r3
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	7819      	ldrb	r1, [r3, #0]
 8012fb2:	4ba1      	ldr	r3, [pc, #644]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 8012fb4:	22a8      	movs	r2, #168	; 0xa8
 8012fb6:	0052      	lsls	r2, r2, #1
 8012fb8:	4694      	mov	ip, r2
 8012fba:	44bc      	add	ip, r7
 8012fbc:	4463      	add	r3, ip
 8012fbe:	781a      	ldrb	r2, [r3, #0]
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	400b      	ands	r3, r1
 8012fc4:	b2d9      	uxtb	r1, r3
 8012fc6:	489f      	ldr	r0, [pc, #636]	; (8013244 <Send_DpmConfigSetCnf+0x36c>)
 8012fc8:	2408      	movs	r4, #8
 8012fca:	0013      	movs	r3, r2
 8012fcc:	005b      	lsls	r3, r3, #1
 8012fce:	189b      	adds	r3, r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	18c3      	adds	r3, r0, r3
 8012fd4:	191b      	adds	r3, r3, r4
 8012fd6:	2201      	movs	r2, #1
 8012fd8:	400a      	ands	r2, r1
 8012fda:	1890      	adds	r0, r2, r2
 8012fdc:	781a      	ldrb	r2, [r3, #0]
 8012fde:	2102      	movs	r1, #2
 8012fe0:	438a      	bics	r2, r1
 8012fe2:	1c11      	adds	r1, r2, #0
 8012fe4:	1c02      	adds	r2, r0, #0
 8012fe6:	430a      	orrs	r2, r1
 8012fe8:	701a      	strb	r2, [r3, #0]
      break;
 8012fea:	e2b8      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
#endif /*USBPD_REV30_SUPPORT*/
    case GUI_PARAM_DATAROLESWAP_TO_UFP :
      /*DataRoleSwap to UFP */
      DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 8012fec:	238e      	movs	r3, #142	; 0x8e
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	18fb      	adds	r3, r7, r3
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	7819      	ldrb	r1, [r3, #0]
 8012ff6:	4b90      	ldr	r3, [pc, #576]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 8012ff8:	22a8      	movs	r2, #168	; 0xa8
 8012ffa:	0052      	lsls	r2, r2, #1
 8012ffc:	4694      	mov	ip, r2
 8012ffe:	44bc      	add	ip, r7
 8013000:	4463      	add	r3, ip
 8013002:	781a      	ldrb	r2, [r3, #0]
 8013004:	2301      	movs	r3, #1
 8013006:	400b      	ands	r3, r1
 8013008:	b2d9      	uxtb	r1, r3
 801300a:	4b8f      	ldr	r3, [pc, #572]	; (8013248 <Send_DpmConfigSetCnf+0x370>)
 801300c:	2074      	movs	r0, #116	; 0x74
 801300e:	4342      	muls	r2, r0
 8013010:	2001      	movs	r0, #1
 8013012:	4001      	ands	r1, r0
 8013014:	00cc      	lsls	r4, r1, #3
 8013016:	5cd1      	ldrb	r1, [r2, r3]
 8013018:	2008      	movs	r0, #8
 801301a:	4381      	bics	r1, r0
 801301c:	1c08      	adds	r0, r1, #0
 801301e:	1c21      	adds	r1, r4, #0
 8013020:	4301      	orrs	r1, r0
 8013022:	54d1      	strb	r1, [r2, r3]
      break;
 8013024:	e29b      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_DATAROLESWAP_TO_DFP :
      /*DataRoleSwap to DFP */
      DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 8013026:	238e      	movs	r3, #142	; 0x8e
 8013028:	005b      	lsls	r3, r3, #1
 801302a:	18fb      	adds	r3, r7, r3
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	7819      	ldrb	r1, [r3, #0]
 8013030:	4b81      	ldr	r3, [pc, #516]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 8013032:	22a8      	movs	r2, #168	; 0xa8
 8013034:	0052      	lsls	r2, r2, #1
 8013036:	4694      	mov	ip, r2
 8013038:	44bc      	add	ip, r7
 801303a:	4463      	add	r3, ip
 801303c:	781a      	ldrb	r2, [r3, #0]
 801303e:	2301      	movs	r3, #1
 8013040:	400b      	ands	r3, r1
 8013042:	b2d9      	uxtb	r1, r3
 8013044:	4b80      	ldr	r3, [pc, #512]	; (8013248 <Send_DpmConfigSetCnf+0x370>)
 8013046:	2074      	movs	r0, #116	; 0x74
 8013048:	4342      	muls	r2, r0
 801304a:	2001      	movs	r0, #1
 801304c:	4001      	ands	r1, r0
 801304e:	008c      	lsls	r4, r1, #2
 8013050:	5cd1      	ldrb	r1, [r2, r3]
 8013052:	2004      	movs	r0, #4
 8013054:	4381      	bics	r1, r0
 8013056:	1c08      	adds	r0, r1, #0
 8013058:	1c21      	adds	r1, r4, #0
 801305a:	4301      	orrs	r1, r0
 801305c:	54d1      	strb	r1, [r2, r3]
      break;
 801305e:	e27e      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_DEFAULTPOWERROLE :
      /*DefaultPowerRole*/
      DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 8013060:	238e      	movs	r3, #142	; 0x8e
 8013062:	005b      	lsls	r3, r3, #1
 8013064:	18fb      	adds	r3, r7, r3
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	7819      	ldrb	r1, [r3, #0]
 801306a:	4b73      	ldr	r3, [pc, #460]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 801306c:	22a8      	movs	r2, #168	; 0xa8
 801306e:	0052      	lsls	r2, r2, #1
 8013070:	4694      	mov	ip, r2
 8013072:	44bc      	add	ip, r7
 8013074:	4463      	add	r3, ip
 8013076:	781a      	ldrb	r2, [r3, #0]
 8013078:	2301      	movs	r3, #1
 801307a:	400b      	ands	r3, r1
 801307c:	b2d9      	uxtb	r1, r3
 801307e:	4871      	ldr	r0, [pc, #452]	; (8013244 <Send_DpmConfigSetCnf+0x36c>)
 8013080:	0013      	movs	r3, r2
 8013082:	005b      	lsls	r3, r3, #1
 8013084:	189b      	adds	r3, r3, r2
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	18c3      	adds	r3, r0, r3
 801308a:	2201      	movs	r2, #1
 801308c:	400a      	ands	r2, r1
 801308e:	0090      	lsls	r0, r2, #2
 8013090:	791a      	ldrb	r2, [r3, #4]
 8013092:	2104      	movs	r1, #4
 8013094:	438a      	bics	r2, r1
 8013096:	1c11      	adds	r1, r2, #0
 8013098:	1c02      	adds	r2, r0, #0
 801309a:	430a      	orrs	r2, r1
 801309c:	711a      	strb	r2, [r3, #4]
      break;
 801309e:	e25e      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
#if !defined(USBPDCORE_LIB_NO_PD)
    case GUI_PARAM_DRP_SUPPORT :
      /*DRP_Support*/
      DPM_Settings[PortNum].PE_RoleSwap = value[0];
 80130a0:	238e      	movs	r3, #142	; 0x8e
 80130a2:	005b      	lsls	r3, r3, #1
 80130a4:	18fb      	adds	r3, r7, r3
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	7819      	ldrb	r1, [r3, #0]
 80130aa:	4b63      	ldr	r3, [pc, #396]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 80130ac:	22a8      	movs	r2, #168	; 0xa8
 80130ae:	0052      	lsls	r2, r2, #1
 80130b0:	4694      	mov	ip, r2
 80130b2:	44bc      	add	ip, r7
 80130b4:	4463      	add	r3, ip
 80130b6:	781a      	ldrb	r2, [r3, #0]
 80130b8:	2301      	movs	r3, #1
 80130ba:	400b      	ands	r3, r1
 80130bc:	b2d9      	uxtb	r1, r3
 80130be:	4861      	ldr	r0, [pc, #388]	; (8013244 <Send_DpmConfigSetCnf+0x36c>)
 80130c0:	0013      	movs	r3, r2
 80130c2:	005b      	lsls	r3, r3, #1
 80130c4:	189b      	adds	r3, r3, r2
 80130c6:	009b      	lsls	r3, r3, #2
 80130c8:	18c3      	adds	r3, r0, r3
 80130ca:	2201      	movs	r2, #1
 80130cc:	400a      	ands	r2, r1
 80130ce:	00d0      	lsls	r0, r2, #3
 80130d0:	791a      	ldrb	r2, [r3, #4]
 80130d2:	2108      	movs	r1, #8
 80130d4:	438a      	bics	r2, r1
 80130d6:	1c11      	adds	r1, r2, #0
 80130d8:	1c02      	adds	r2, r0, #0
 80130da:	430a      	orrs	r2, r1
 80130dc:	711a      	strb	r2, [r3, #4]
      break;
 80130de:	e23e      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_CADROLETOGGLE :
      /*CADRoleToggle*/
      DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 80130e0:	238e      	movs	r3, #142	; 0x8e
 80130e2:	005b      	lsls	r3, r3, #1
 80130e4:	18fb      	adds	r3, r7, r3
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	7819      	ldrb	r1, [r3, #0]
 80130ea:	4b53      	ldr	r3, [pc, #332]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 80130ec:	22a8      	movs	r2, #168	; 0xa8
 80130ee:	0052      	lsls	r2, r2, #1
 80130f0:	4694      	mov	ip, r2
 80130f2:	44bc      	add	ip, r7
 80130f4:	4463      	add	r3, ip
 80130f6:	781a      	ldrb	r2, [r3, #0]
 80130f8:	2301      	movs	r3, #1
 80130fa:	400b      	ands	r3, r1
 80130fc:	b2d9      	uxtb	r1, r3
 80130fe:	4851      	ldr	r0, [pc, #324]	; (8013244 <Send_DpmConfigSetCnf+0x36c>)
 8013100:	0013      	movs	r3, r2
 8013102:	005b      	lsls	r3, r3, #1
 8013104:	189b      	adds	r3, r3, r2
 8013106:	009b      	lsls	r3, r3, #2
 8013108:	18c3      	adds	r3, r0, r3
 801310a:	2201      	movs	r2, #1
 801310c:	400a      	ands	r2, r1
 801310e:	0150      	lsls	r0, r2, #5
 8013110:	795a      	ldrb	r2, [r3, #5]
 8013112:	2120      	movs	r1, #32
 8013114:	438a      	bics	r2, r1
 8013116:	1c11      	adds	r1, r2, #0
 8013118:	1c02      	adds	r2, r0, #0
 801311a:	430a      	orrs	r2, r1
 801311c:	715a      	strb	r2, [r3, #5]
      break;
 801311e:	e21e      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_PE_SCAP_HR :
      /*PE_SCAP_HR*/
      DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 8013120:	238e      	movs	r3, #142	; 0x8e
 8013122:	005b      	lsls	r3, r3, #1
 8013124:	18fb      	adds	r3, r7, r3
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	7819      	ldrb	r1, [r3, #0]
 801312a:	4b43      	ldr	r3, [pc, #268]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 801312c:	22a8      	movs	r2, #168	; 0xa8
 801312e:	0052      	lsls	r2, r2, #1
 8013130:	4694      	mov	ip, r2
 8013132:	44bc      	add	ip, r7
 8013134:	4463      	add	r3, ip
 8013136:	781a      	ldrb	r2, [r3, #0]
 8013138:	2301      	movs	r3, #1
 801313a:	400b      	ands	r3, r1
 801313c:	b2d9      	uxtb	r1, r3
 801313e:	4841      	ldr	r0, [pc, #260]	; (8013244 <Send_DpmConfigSetCnf+0x36c>)
 8013140:	0013      	movs	r3, r2
 8013142:	005b      	lsls	r3, r3, #1
 8013144:	189b      	adds	r3, r3, r2
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	18c3      	adds	r3, r0, r3
 801314a:	01c8      	lsls	r0, r1, #7
 801314c:	791a      	ldrb	r2, [r3, #4]
 801314e:	217f      	movs	r1, #127	; 0x7f
 8013150:	400a      	ands	r2, r1
 8013152:	1c11      	adds	r1, r2, #0
 8013154:	1c02      	adds	r2, r0, #0
 8013156:	430a      	orrs	r2, r1
 8013158:	711a      	strb	r2, [r3, #4]
      break;
 801315a:	e200      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_VCONNSWAP :
      /*VConnSwap*/
      DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 801315c:	238e      	movs	r3, #142	; 0x8e
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	18fb      	adds	r3, r7, r3
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	7819      	ldrb	r1, [r3, #0]
 8013166:	4b34      	ldr	r3, [pc, #208]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 8013168:	22a8      	movs	r2, #168	; 0xa8
 801316a:	0052      	lsls	r2, r2, #1
 801316c:	4694      	mov	ip, r2
 801316e:	44bc      	add	ip, r7
 8013170:	4463      	add	r3, ip
 8013172:	781a      	ldrb	r2, [r3, #0]
 8013174:	2301      	movs	r3, #1
 8013176:	400b      	ands	r3, r1
 8013178:	b2d9      	uxtb	r1, r3
 801317a:	4b33      	ldr	r3, [pc, #204]	; (8013248 <Send_DpmConfigSetCnf+0x370>)
 801317c:	2074      	movs	r0, #116	; 0x74
 801317e:	4342      	muls	r2, r0
 8013180:	2001      	movs	r0, #1
 8013182:	4001      	ands	r1, r0
 8013184:	184c      	adds	r4, r1, r1
 8013186:	5cd1      	ldrb	r1, [r2, r3]
 8013188:	2002      	movs	r0, #2
 801318a:	4381      	bics	r1, r0
 801318c:	1c08      	adds	r0, r1, #0
 801318e:	1c21      	adds	r1, r4, #0
 8013190:	4301      	orrs	r1, r0
 8013192:	54d1      	strb	r1, [r2, r3]
      break;
 8013194:	e1e3      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
      DPM_Settings[PortNum].PE_VDMSupport = value[0];
      break;
#endif /*_VDM*/
    case GUI_PARAM_PING_SUPPORT :
      /* Ping Support */
      DPM_Settings[PortNum].PE_PingSupport = value[0];
 8013196:	238e      	movs	r3, #142	; 0x8e
 8013198:	005b      	lsls	r3, r3, #1
 801319a:	18fb      	adds	r3, r7, r3
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	7819      	ldrb	r1, [r3, #0]
 80131a0:	4b25      	ldr	r3, [pc, #148]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 80131a2:	22a8      	movs	r2, #168	; 0xa8
 80131a4:	0052      	lsls	r2, r2, #1
 80131a6:	4694      	mov	ip, r2
 80131a8:	44bc      	add	ip, r7
 80131aa:	4463      	add	r3, ip
 80131ac:	781a      	ldrb	r2, [r3, #0]
 80131ae:	2301      	movs	r3, #1
 80131b0:	400b      	ands	r3, r1
 80131b2:	b2d9      	uxtb	r1, r3
 80131b4:	4823      	ldr	r0, [pc, #140]	; (8013244 <Send_DpmConfigSetCnf+0x36c>)
 80131b6:	0013      	movs	r3, r2
 80131b8:	005b      	lsls	r3, r3, #1
 80131ba:	189b      	adds	r3, r3, r2
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	18c3      	adds	r3, r0, r3
 80131c0:	2201      	movs	r2, #1
 80131c2:	400a      	ands	r2, r1
 80131c4:	0190      	lsls	r0, r2, #6
 80131c6:	791a      	ldrb	r2, [r3, #4]
 80131c8:	2140      	movs	r1, #64	; 0x40
 80131ca:	438a      	bics	r2, r1
 80131cc:	1c11      	adds	r1, r2, #0
 80131ce:	1c02      	adds	r2, r0, #0
 80131d0:	430a      	orrs	r2, r1
 80131d2:	711a      	strb	r2, [r3, #4]
      break;
 80131d4:	e1c3      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
#if defined(USBPD_REV30_SUPPORT)
    case GUI_PARAM_PPS_SUPPORT :
      DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = LE16(&value[0]);
 80131d6:	228e      	movs	r2, #142	; 0x8e
 80131d8:	0052      	lsls	r2, r2, #1
 80131da:	18bb      	adds	r3, r7, r2
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	b299      	uxth	r1, r3
 80131e2:	18bb      	adds	r3, r7, r2
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	3301      	adds	r3, #1
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	021b      	lsls	r3, r3, #8
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	4a11      	ldr	r2, [pc, #68]	; (8013238 <Send_DpmConfigSetCnf+0x360>)
 80131f2:	20a8      	movs	r0, #168	; 0xa8
 80131f4:	0040      	lsls	r0, r0, #1
 80131f6:	4684      	mov	ip, r0
 80131f8:	44bc      	add	ip, r7
 80131fa:	4462      	add	r2, ip
 80131fc:	7812      	ldrb	r2, [r2, #0]
 80131fe:	18cb      	adds	r3, r1, r3
 8013200:	b298      	uxth	r0, r3
 8013202:	4910      	ldr	r1, [pc, #64]	; (8013244 <Send_DpmConfigSetCnf+0x36c>)
 8013204:	0013      	movs	r3, r2
 8013206:	005b      	lsls	r3, r3, #1
 8013208:	189b      	adds	r3, r3, r2
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	18cb      	adds	r3, r1, r3
 801320e:	3308      	adds	r3, #8
 8013210:	1c02      	adds	r2, r0, #0
 8013212:	801a      	strh	r2, [r3, #0]
      break;
 8013214:	e1a3      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          memset(PORT0_PDO_ListSNK, 0, sizeof(PORT0_PDO_ListSNK));
 8013216:	4b0d      	ldr	r3, [pc, #52]	; (801324c <Send_DpmConfigSetCnf+0x374>)
 8013218:	221c      	movs	r2, #28
 801321a:	2100      	movs	r1, #0
 801321c:	0018      	movs	r0, r3
 801321e:	f001 ffee 	bl	80151fe <memset>
          for (index_pdo = 0, index_gui = 0; index_gui < size; index_pdo++)
 8013222:	2300      	movs	r3, #0
 8013224:	22a2      	movs	r2, #162	; 0xa2
 8013226:	0052      	lsls	r2, r2, #1
 8013228:	18ba      	adds	r2, r7, r2
 801322a:	6013      	str	r3, [r2, #0]
 801322c:	2300      	movs	r3, #0
 801322e:	22a0      	movs	r2, #160	; 0xa0
 8013230:	0052      	lsls	r2, r2, #1
 8013232:	18ba      	adds	r2, r7, r2
 8013234:	6013      	str	r3, [r2, #0]
 8013236:	e048      	b.n	80132ca <Send_DpmConfigSetCnf+0x3f2>
 8013238:	fffffebf 	.word	0xfffffebf
 801323c:	fffffec7 	.word	0xfffffec7
 8013240:	08016b74 	.word	0x08016b74
 8013244:	20000014 	.word	0x20000014
 8013248:	20000028 	.word	0x20000028
 801324c:	200000a0 	.word	0x200000a0
          {
            pdo = LE32(&value[index_gui]);
 8013250:	248e      	movs	r4, #142	; 0x8e
 8013252:	0064      	lsls	r4, r4, #1
 8013254:	193b      	adds	r3, r7, r4
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	20a0      	movs	r0, #160	; 0xa0
 801325a:	0040      	lsls	r0, r0, #1
 801325c:	183b      	adds	r3, r7, r0
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	18d3      	adds	r3, r2, r3
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	0019      	movs	r1, r3
 8013266:	193b      	adds	r3, r7, r4
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	183b      	adds	r3, r7, r0
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	3301      	adds	r3, #1
 8013270:	18d3      	adds	r3, r2, r3
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	021b      	lsls	r3, r3, #8
 8013276:	18ca      	adds	r2, r1, r3
 8013278:	193b      	adds	r3, r7, r4
 801327a:	6819      	ldr	r1, [r3, #0]
 801327c:	183b      	adds	r3, r7, r0
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	3302      	adds	r3, #2
 8013282:	18cb      	adds	r3, r1, r3
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	041b      	lsls	r3, r3, #16
 8013288:	18d2      	adds	r2, r2, r3
 801328a:	193b      	adds	r3, r7, r4
 801328c:	6819      	ldr	r1, [r3, #0]
 801328e:	183b      	adds	r3, r7, r0
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	3303      	adds	r3, #3
 8013294:	18cb      	adds	r3, r1, r3
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	061b      	lsls	r3, r3, #24
 801329a:	18d3      	adds	r3, r2, r3
 801329c:	219a      	movs	r1, #154	; 0x9a
 801329e:	0049      	lsls	r1, r1, #1
 80132a0:	187a      	adds	r2, r7, r1
 80132a2:	6013      	str	r3, [r2, #0]
            PORT0_PDO_ListSNK[index_pdo] = pdo;
 80132a4:	4b98      	ldr	r3, [pc, #608]	; (8013508 <Send_DpmConfigSetCnf+0x630>)
 80132a6:	24a2      	movs	r4, #162	; 0xa2
 80132a8:	0064      	lsls	r4, r4, #1
 80132aa:	193a      	adds	r2, r7, r4
 80132ac:	6812      	ldr	r2, [r2, #0]
 80132ae:	0092      	lsls	r2, r2, #2
 80132b0:	1879      	adds	r1, r7, r1
 80132b2:	6809      	ldr	r1, [r1, #0]
 80132b4:	50d1      	str	r1, [r2, r3]
            index_gui = index_gui + 4;
 80132b6:	183b      	adds	r3, r7, r0
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	3304      	adds	r3, #4
 80132bc:	183a      	adds	r2, r7, r0
 80132be:	6013      	str	r3, [r2, #0]
          for (index_pdo = 0, index_gui = 0; index_gui < size; index_pdo++)
 80132c0:	193b      	adds	r3, r7, r4
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	3301      	adds	r3, #1
 80132c6:	193a      	adds	r2, r7, r4
 80132c8:	6013      	str	r3, [r2, #0]
 80132ca:	218d      	movs	r1, #141	; 0x8d
 80132cc:	0049      	lsls	r1, r1, #1
 80132ce:	187b      	adds	r3, r7, r1
 80132d0:	881b      	ldrh	r3, [r3, #0]
 80132d2:	001a      	movs	r2, r3
 80132d4:	23a0      	movs	r3, #160	; 0xa0
 80132d6:	005b      	lsls	r3, r3, #1
 80132d8:	18fb      	adds	r3, r7, r3
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	4293      	cmp	r3, r2
 80132de:	d3b7      	bcc.n	8013250 <Send_DpmConfigSetCnf+0x378>
          }
          USBPD_NbPDO[0] = (size / 4);
 80132e0:	187b      	adds	r3, r7, r1
 80132e2:	881b      	ldrh	r3, [r3, #0]
 80132e4:	089b      	lsrs	r3, r3, #2
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	b2da      	uxtb	r2, r3
 80132ea:	4b88      	ldr	r3, [pc, #544]	; (801350c <Send_DpmConfigSetCnf+0x634>)
 80132ec:	701a      	strb	r2, [r3, #0]
          UpdateSNKPowerPort0();
 80132ee:	f000 fe49 	bl	8013f84 <UpdateSNKPowerPort0>
          USBPD_NbPDO[2] = (size / 4);
          UpdateSNKPowerPort1();
        }
#endif /* USBPD_PORT_COUNT==2 */
      }
      break;
 80132f2:	e134      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
#endif /* USBPD_PORT_COUNT==2 */
      }
      break;
#endif /* (_SRC) || (_DRP) */
    case GUI_PARAM_TDRP :
      tdrp = value[0];
 80132f4:	238e      	movs	r3, #142	; 0x8e
 80132f6:	005b      	lsls	r3, r3, #1
 80132f8:	18fb      	adds	r3, r7, r3
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	214c      	movs	r1, #76	; 0x4c
 80132fe:	31ff      	adds	r1, #255	; 0xff
 8013300:	187b      	adds	r3, r7, r1
 8013302:	7812      	ldrb	r2, [r2, #0]
 8013304:	701a      	strb	r2, [r3, #0]
      DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 8013306:	4b82      	ldr	r3, [pc, #520]	; (8013510 <Send_DpmConfigSetCnf+0x638>)
 8013308:	22a8      	movs	r2, #168	; 0xa8
 801330a:	0052      	lsls	r2, r2, #1
 801330c:	4694      	mov	ip, r2
 801330e:	44bc      	add	ip, r7
 8013310:	4463      	add	r3, ip
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	187a      	adds	r2, r7, r1
 8013316:	7812      	ldrb	r2, [r2, #0]
 8013318:	217f      	movs	r1, #127	; 0x7f
 801331a:	400a      	ands	r2, r1
 801331c:	b2d4      	uxtb	r4, r2
 801331e:	4a7d      	ldr	r2, [pc, #500]	; (8013514 <Send_DpmConfigSetCnf+0x63c>)
 8013320:	2168      	movs	r1, #104	; 0x68
 8013322:	2074      	movs	r0, #116	; 0x74
 8013324:	4343      	muls	r3, r0
 8013326:	18d3      	adds	r3, r2, r3
 8013328:	185b      	adds	r3, r3, r1
 801332a:	1c22      	adds	r2, r4, #0
 801332c:	1890      	adds	r0, r2, r2
 801332e:	791a      	ldrb	r2, [r3, #4]
 8013330:	2101      	movs	r1, #1
 8013332:	400a      	ands	r2, r1
 8013334:	1c11      	adds	r1, r2, #0
 8013336:	1c02      	adds	r2, r0, #0
 8013338:	430a      	orrs	r2, r1
 801333a:	711a      	strb	r2, [r3, #4]
      flag_drp = 1;
 801333c:	23a6      	movs	r3, #166	; 0xa6
 801333e:	005b      	lsls	r3, r3, #1
 8013340:	18fb      	adds	r3, r7, r3
 8013342:	2201      	movs	r2, #1
 8013344:	701a      	strb	r2, [r3, #0]
      break;
 8013346:	e10a      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_DCSRC_DRP :
      dcdrp = value[0];
 8013348:	238e      	movs	r3, #142	; 0x8e
 801334a:	005b      	lsls	r3, r3, #1
 801334c:	18fb      	adds	r3, r7, r3
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	781a      	ldrb	r2, [r3, #0]
 8013352:	21a7      	movs	r1, #167	; 0xa7
 8013354:	0049      	lsls	r1, r1, #1
 8013356:	187b      	adds	r3, r7, r1
 8013358:	801a      	strh	r2, [r3, #0]
      DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 801335a:	4b6d      	ldr	r3, [pc, #436]	; (8013510 <Send_DpmConfigSetCnf+0x638>)
 801335c:	22a8      	movs	r2, #168	; 0xa8
 801335e:	0052      	lsls	r2, r2, #1
 8013360:	4694      	mov	ip, r2
 8013362:	44bc      	add	ip, r7
 8013364:	4463      	add	r3, ip
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	187a      	adds	r2, r7, r1
 801336a:	8812      	ldrh	r2, [r2, #0]
 801336c:	1c11      	adds	r1, r2, #0
 801336e:	227f      	movs	r2, #127	; 0x7f
 8013370:	400a      	ands	r2, r1
 8013372:	b2d2      	uxtb	r2, r2
 8013374:	4967      	ldr	r1, [pc, #412]	; (8013514 <Send_DpmConfigSetCnf+0x63c>)
 8013376:	2068      	movs	r0, #104	; 0x68
 8013378:	2474      	movs	r4, #116	; 0x74
 801337a:	4363      	muls	r3, r4
 801337c:	18cb      	adds	r3, r1, r3
 801337e:	181b      	adds	r3, r3, r0
 8013380:	217f      	movs	r1, #127	; 0x7f
 8013382:	400a      	ands	r2, r1
 8013384:	0010      	movs	r0, r2
 8013386:	795a      	ldrb	r2, [r3, #5]
 8013388:	217f      	movs	r1, #127	; 0x7f
 801338a:	438a      	bics	r2, r1
 801338c:	1c11      	adds	r1, r2, #0
 801338e:	1c02      	adds	r2, r0, #0
 8013390:	430a      	orrs	r2, r1
 8013392:	715a      	strb	r2, [r3, #5]
      flag_drp = 1;
 8013394:	23a6      	movs	r3, #166	; 0xa6
 8013396:	005b      	lsls	r3, r3, #1
 8013398:	18fb      	adds	r3, r7, r3
 801339a:	2201      	movs	r2, #1
 801339c:	701a      	strb	r2, [r3, #0]
      break;
 801339e:	e0de      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 80133a0:	238e      	movs	r3, #142	; 0x8e
 80133a2:	005b      	lsls	r3, r3, #1
 80133a4:	18fb      	adds	r3, r7, r3
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	7819      	ldrb	r1, [r3, #0]
 80133aa:	4b59      	ldr	r3, [pc, #356]	; (8013510 <Send_DpmConfigSetCnf+0x638>)
 80133ac:	22a8      	movs	r2, #168	; 0xa8
 80133ae:	0052      	lsls	r2, r2, #1
 80133b0:	4694      	mov	ip, r2
 80133b2:	44bc      	add	ip, r7
 80133b4:	4463      	add	r3, ip
 80133b6:	781a      	ldrb	r2, [r3, #0]
 80133b8:	2301      	movs	r3, #1
 80133ba:	400b      	ands	r3, r1
 80133bc:	b2d9      	uxtb	r1, r3
 80133be:	4856      	ldr	r0, [pc, #344]	; (8013518 <Send_DpmConfigSetCnf+0x640>)
 80133c0:	0013      	movs	r3, r2
 80133c2:	005b      	lsls	r3, r3, #1
 80133c4:	189b      	adds	r3, r3, r2
 80133c6:	009b      	lsls	r3, r3, #2
 80133c8:	18c3      	adds	r3, r0, r3
 80133ca:	2201      	movs	r2, #1
 80133cc:	4011      	ands	r1, r2
 80133ce:	0008      	movs	r0, r1
 80133d0:	795a      	ldrb	r2, [r3, #5]
 80133d2:	2101      	movs	r1, #1
 80133d4:	438a      	bics	r2, r1
 80133d6:	1c11      	adds	r1, r2, #0
 80133d8:	1c02      	adds	r2, r0, #0
 80133da:	430a      	orrs	r2, r1
 80133dc:	715a      	strb	r2, [r3, #5]
      break;
 80133de:	e0be      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 80133e0:	238e      	movs	r3, #142	; 0x8e
 80133e2:	005b      	lsls	r3, r3, #1
 80133e4:	18fb      	adds	r3, r7, r3
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	7819      	ldrb	r1, [r3, #0]
 80133ea:	4b49      	ldr	r3, [pc, #292]	; (8013510 <Send_DpmConfigSetCnf+0x638>)
 80133ec:	22a8      	movs	r2, #168	; 0xa8
 80133ee:	0052      	lsls	r2, r2, #1
 80133f0:	4694      	mov	ip, r2
 80133f2:	44bc      	add	ip, r7
 80133f4:	4463      	add	r3, ip
 80133f6:	781a      	ldrb	r2, [r3, #0]
 80133f8:	2301      	movs	r3, #1
 80133fa:	400b      	ands	r3, r1
 80133fc:	b2d9      	uxtb	r1, r3
 80133fe:	4846      	ldr	r0, [pc, #280]	; (8013518 <Send_DpmConfigSetCnf+0x640>)
 8013400:	0013      	movs	r3, r2
 8013402:	005b      	lsls	r3, r3, #1
 8013404:	189b      	adds	r3, r3, r2
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	18c3      	adds	r3, r0, r3
 801340a:	2201      	movs	r2, #1
 801340c:	400a      	ands	r2, r1
 801340e:	1890      	adds	r0, r2, r2
 8013410:	795a      	ldrb	r2, [r3, #5]
 8013412:	2102      	movs	r1, #2
 8013414:	438a      	bics	r2, r1
 8013416:	1c11      	adds	r1, r2, #0
 8013418:	1c02      	adds	r2, r0, #0
 801341a:	430a      	orrs	r2, r1
 801341c:	715a      	strb	r2, [r3, #5]
      break;
 801341e:	e09e      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_XID_SOP :
      DPM_ID_Settings[PortNum].XID       = LE32(&value[0]);
 8013420:	208e      	movs	r0, #142	; 0x8e
 8013422:	0040      	lsls	r0, r0, #1
 8013424:	183b      	adds	r3, r7, r0
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	001a      	movs	r2, r3
 801342c:	183b      	adds	r3, r7, r0
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	3301      	adds	r3, #1
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	021b      	lsls	r3, r3, #8
 8013436:	18d2      	adds	r2, r2, r3
 8013438:	183b      	adds	r3, r7, r0
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	3302      	adds	r3, #2
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	041b      	lsls	r3, r3, #16
 8013442:	18d1      	adds	r1, r2, r3
 8013444:	183b      	adds	r3, r7, r0
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	3303      	adds	r3, #3
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	061b      	lsls	r3, r3, #24
 801344e:	4a30      	ldr	r2, [pc, #192]	; (8013510 <Send_DpmConfigSetCnf+0x638>)
 8013450:	20a8      	movs	r0, #168	; 0xa8
 8013452:	0040      	lsls	r0, r0, #1
 8013454:	4684      	mov	ip, r0
 8013456:	44bc      	add	ip, r7
 8013458:	4462      	add	r2, ip
 801345a:	7812      	ldrb	r2, [r2, #0]
 801345c:	18c9      	adds	r1, r1, r3
 801345e:	4b2f      	ldr	r3, [pc, #188]	; (801351c <Send_DpmConfigSetCnf+0x644>)
 8013460:	00d2      	lsls	r2, r2, #3
 8013462:	50d1      	str	r1, [r2, r3]
      break;
 8013464:	e07b      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_USB_VID_SOP :
      DPM_ID_Settings[PortNum].VID       = LE16(&value[0]);
 8013466:	228e      	movs	r2, #142	; 0x8e
 8013468:	0052      	lsls	r2, r2, #1
 801346a:	18bb      	adds	r3, r7, r2
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	b299      	uxth	r1, r3
 8013472:	18bb      	adds	r3, r7, r2
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	3301      	adds	r3, #1
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	b29b      	uxth	r3, r3
 801347c:	021b      	lsls	r3, r3, #8
 801347e:	b29a      	uxth	r2, r3
 8013480:	4b23      	ldr	r3, [pc, #140]	; (8013510 <Send_DpmConfigSetCnf+0x638>)
 8013482:	20a8      	movs	r0, #168	; 0xa8
 8013484:	0040      	lsls	r0, r0, #1
 8013486:	4684      	mov	ip, r0
 8013488:	44bc      	add	ip, r7
 801348a:	4463      	add	r3, ip
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	188a      	adds	r2, r1, r2
 8013490:	b291      	uxth	r1, r2
 8013492:	4a22      	ldr	r2, [pc, #136]	; (801351c <Send_DpmConfigSetCnf+0x644>)
 8013494:	00db      	lsls	r3, r3, #3
 8013496:	18d3      	adds	r3, r2, r3
 8013498:	3304      	adds	r3, #4
 801349a:	1c0a      	adds	r2, r1, #0
 801349c:	801a      	strh	r2, [r3, #0]
      break;
 801349e:	e05e      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
    case GUI_PARAM_PID_SOP :
      DPM_ID_Settings[PortNum].PID       = LE16(&value[0]);
 80134a0:	228e      	movs	r2, #142	; 0x8e
 80134a2:	0052      	lsls	r2, r2, #1
 80134a4:	18bb      	adds	r3, r7, r2
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	b299      	uxth	r1, r3
 80134ac:	18bb      	adds	r3, r7, r2
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	3301      	adds	r3, #1
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	b29b      	uxth	r3, r3
 80134b6:	021b      	lsls	r3, r3, #8
 80134b8:	b29a      	uxth	r2, r3
 80134ba:	4b15      	ldr	r3, [pc, #84]	; (8013510 <Send_DpmConfigSetCnf+0x638>)
 80134bc:	20a8      	movs	r0, #168	; 0xa8
 80134be:	0040      	lsls	r0, r0, #1
 80134c0:	4684      	mov	ip, r0
 80134c2:	44bc      	add	ip, r7
 80134c4:	4463      	add	r3, ip
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	188a      	adds	r2, r1, r2
 80134ca:	b291      	uxth	r1, r2
 80134cc:	4a13      	ldr	r2, [pc, #76]	; (801351c <Send_DpmConfigSetCnf+0x644>)
 80134ce:	00db      	lsls	r3, r3, #3
 80134d0:	18d3      	adds	r3, r2, r3
 80134d2:	3306      	adds	r3, #6
 80134d4:	1c0a      	adds	r2, r1, #0
 80134d6:	801a      	strh	r2, [r3, #0]
      break;
 80134d8:	e041      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
      DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = LE16(&value[0]);
      break;
#endif /* _VDM */
    case GUI_PARAM_MEASUREREPORTING :
      /* MeasurementReporting */
      GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 80134da:	238e      	movs	r3, #142	; 0x8e
 80134dc:	005b      	lsls	r3, r3, #1
 80134de:	18fb      	adds	r3, r7, r3
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	4a0b      	ldr	r2, [pc, #44]	; (8013510 <Send_DpmConfigSetCnf+0x638>)
 80134e4:	21a8      	movs	r1, #168	; 0xa8
 80134e6:	0049      	lsls	r1, r1, #1
 80134e8:	468c      	mov	ip, r1
 80134ea:	44bc      	add	ip, r7
 80134ec:	4462      	add	r2, ip
 80134ee:	7812      	ldrb	r2, [r2, #0]
 80134f0:	7818      	ldrb	r0, [r3, #0]
 80134f2:	490b      	ldr	r1, [pc, #44]	; (8013520 <Send_DpmConfigSetCnf+0x648>)
 80134f4:	0013      	movs	r3, r2
 80134f6:	005b      	lsls	r3, r3, #1
 80134f8:	189b      	adds	r3, r3, r2
 80134fa:	005b      	lsls	r3, r3, #1
 80134fc:	18cb      	adds	r3, r1, r3
 80134fe:	3304      	adds	r3, #4
 8013500:	1c02      	adds	r2, r0, #0
 8013502:	701a      	strb	r2, [r3, #0]
      break;
 8013504:	e02b      	b.n	801355e <Send_DpmConfigSetCnf+0x686>
 8013506:	46c0      	nop			; (mov r8, r8)
 8013508:	200000a0 	.word	0x200000a0
 801350c:	2000009c 	.word	0x2000009c
 8013510:	fffffebf 	.word	0xfffffebf
 8013514:	20000028 	.word	0x20000028
 8013518:	20000014 	.word	0x20000014
 801351c:	20000020 	.word	0x20000020
 8013520:	20001d10 	.word	0x20001d10
      memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
      break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
    default :
      error = GUI_REJ_DPM_REJECT;
 8013524:	231a      	movs	r3, #26
 8013526:	33ff      	adds	r3, #255	; 0xff
 8013528:	18fb      	adds	r3, r7, r3
 801352a:	2200      	movs	r2, #0
 801352c:	701a      	strb	r2, [r3, #0]
      param_not_applicated[counter_param_not_applicated] = tag;
 801352e:	204e      	movs	r0, #78	; 0x4e
 8013530:	30ff      	adds	r0, #255	; 0xff
 8013532:	183b      	adds	r3, r7, r0
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	4a99      	ldr	r2, [pc, #612]	; (801379c <Send_DpmConfigSetCnf+0x8c4>)
 8013538:	21a8      	movs	r1, #168	; 0xa8
 801353a:	0049      	lsls	r1, r1, #1
 801353c:	468c      	mov	ip, r1
 801353e:	44bc      	add	ip, r7
 8013540:	4462      	add	r2, ip
 8013542:	7811      	ldrb	r1, [r2, #0]
 8013544:	4a96      	ldr	r2, [pc, #600]	; (80137a0 <Send_DpmConfigSetCnf+0x8c8>)
 8013546:	24a8      	movs	r4, #168	; 0xa8
 8013548:	0064      	lsls	r4, r4, #1
 801354a:	46a4      	mov	ip, r4
 801354c:	44bc      	add	ip, r7
 801354e:	4462      	add	r2, ip
 8013550:	54d1      	strb	r1, [r2, r3]
      counter_param_not_applicated++;
 8013552:	183b      	adds	r3, r7, r0
 8013554:	781a      	ldrb	r2, [r3, #0]
 8013556:	183b      	adds	r3, r7, r0
 8013558:	3201      	adds	r2, #1
 801355a:	701a      	strb	r2, [r3, #0]
      break;
 801355c:	46c0      	nop			; (mov r8, r8)
  while(0xFF != TLV_get(&process_tlv, &tag, &size, &value))
 801355e:	238e      	movs	r3, #142	; 0x8e
 8013560:	005b      	lsls	r3, r3, #1
 8013562:	18fb      	adds	r3, r7, r3
 8013564:	228d      	movs	r2, #141	; 0x8d
 8013566:	0052      	lsls	r2, r2, #1
 8013568:	18ba      	adds	r2, r7, r2
 801356a:	2117      	movs	r1, #23
 801356c:	1879      	adds	r1, r7, r1
 801356e:	2090      	movs	r0, #144	; 0x90
 8013570:	0040      	lsls	r0, r0, #1
 8013572:	1838      	adds	r0, r7, r0
 8013574:	f7fd fd52 	bl	801101c <TLV_get>
 8013578:	0003      	movs	r3, r0
 801357a:	2bff      	cmp	r3, #255	; 0xff
 801357c:	d000      	beq.n	8013580 <Send_DpmConfigSetCnf+0x6a8>
 801357e:	e4f0      	b.n	8012f62 <Send_DpmConfigSetCnf+0x8a>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1 == flag_drp)
 8013580:	23a6      	movs	r3, #166	; 0xa6
 8013582:	005b      	lsls	r3, r3, #1
 8013584:	18fb      	adds	r3, r7, r3
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	2b01      	cmp	r3, #1
 801358a:	d000      	beq.n	801358e <Send_DpmConfigSetCnf+0x6b6>
 801358c:	e0ae      	b.n	80136ec <Send_DpmConfigSetCnf+0x814>
  {
    uint16_t calcul;
    if (0 == tdrp)
 801358e:	244c      	movs	r4, #76	; 0x4c
 8013590:	34ff      	adds	r4, #255	; 0xff
 8013592:	193b      	adds	r3, r7, r4
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d120      	bne.n	80135dc <Send_DpmConfigSetCnf+0x704>
    {
      tdrp = DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime;
 801359a:	4b82      	ldr	r3, [pc, #520]	; (80137a4 <Send_DpmConfigSetCnf+0x8cc>)
 801359c:	22a8      	movs	r2, #168	; 0xa8
 801359e:	0052      	lsls	r2, r2, #1
 80135a0:	4694      	mov	ip, r2
 80135a2:	44bc      	add	ip, r7
 80135a4:	4463      	add	r3, ip
 80135a6:	781a      	ldrb	r2, [r3, #0]
 80135a8:	497f      	ldr	r1, [pc, #508]	; (80137a8 <Send_DpmConfigSetCnf+0x8d0>)
 80135aa:	0013      	movs	r3, r2
 80135ac:	005b      	lsls	r3, r3, #1
 80135ae:	189b      	adds	r3, r3, r2
 80135b0:	009b      	lsls	r3, r3, #2
 80135b2:	18cb      	adds	r3, r1, r3
 80135b4:	3306      	adds	r3, #6
 80135b6:	7819      	ldrb	r1, [r3, #0]
 80135b8:	4b7a      	ldr	r3, [pc, #488]	; (80137a4 <Send_DpmConfigSetCnf+0x8cc>)
 80135ba:	22a8      	movs	r2, #168	; 0xa8
 80135bc:	0052      	lsls	r2, r2, #1
 80135be:	4694      	mov	ip, r2
 80135c0:	44bc      	add	ip, r7
 80135c2:	4463      	add	r3, ip
 80135c4:	781a      	ldrb	r2, [r3, #0]
 80135c6:	4878      	ldr	r0, [pc, #480]	; (80137a8 <Send_DpmConfigSetCnf+0x8d0>)
 80135c8:	0013      	movs	r3, r2
 80135ca:	005b      	lsls	r3, r3, #1
 80135cc:	189b      	adds	r3, r3, r2
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	18c3      	adds	r3, r0, r3
 80135d2:	3307      	adds	r3, #7
 80135d4:	781a      	ldrb	r2, [r3, #0]
 80135d6:	193b      	adds	r3, r7, r4
 80135d8:	188a      	adds	r2, r1, r2
 80135da:	701a      	strb	r2, [r3, #0]
    }
    if (0 == dcdrp)
 80135dc:	25a7      	movs	r5, #167	; 0xa7
 80135de:	006d      	lsls	r5, r5, #1
 80135e0:	197b      	adds	r3, r7, r5
 80135e2:	881b      	ldrh	r3, [r3, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d139      	bne.n	801365c <Send_DpmConfigSetCnf+0x784>
    {
      dcdrp = (DPM_Settings[PortNum].CAD_SRCToggleTime * 100) / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 80135e8:	4b6e      	ldr	r3, [pc, #440]	; (80137a4 <Send_DpmConfigSetCnf+0x8cc>)
 80135ea:	22a8      	movs	r2, #168	; 0xa8
 80135ec:	0052      	lsls	r2, r2, #1
 80135ee:	4694      	mov	ip, r2
 80135f0:	44bc      	add	ip, r7
 80135f2:	4463      	add	r3, ip
 80135f4:	781a      	ldrb	r2, [r3, #0]
 80135f6:	496c      	ldr	r1, [pc, #432]	; (80137a8 <Send_DpmConfigSetCnf+0x8d0>)
 80135f8:	0013      	movs	r3, r2
 80135fa:	005b      	lsls	r3, r3, #1
 80135fc:	189b      	adds	r3, r3, r2
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	18cb      	adds	r3, r1, r3
 8013602:	3307      	adds	r3, #7
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	001a      	movs	r2, r3
 8013608:	2364      	movs	r3, #100	; 0x64
 801360a:	4353      	muls	r3, r2
 801360c:	0018      	movs	r0, r3
 801360e:	4b65      	ldr	r3, [pc, #404]	; (80137a4 <Send_DpmConfigSetCnf+0x8cc>)
 8013610:	22a8      	movs	r2, #168	; 0xa8
 8013612:	0052      	lsls	r2, r2, #1
 8013614:	4694      	mov	ip, r2
 8013616:	44bc      	add	ip, r7
 8013618:	4463      	add	r3, ip
 801361a:	781a      	ldrb	r2, [r3, #0]
 801361c:	4962      	ldr	r1, [pc, #392]	; (80137a8 <Send_DpmConfigSetCnf+0x8d0>)
 801361e:	0013      	movs	r3, r2
 8013620:	005b      	lsls	r3, r3, #1
 8013622:	189b      	adds	r3, r3, r2
 8013624:	009b      	lsls	r3, r3, #2
 8013626:	18cb      	adds	r3, r1, r3
 8013628:	3306      	adds	r3, #6
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	001c      	movs	r4, r3
 801362e:	4b5d      	ldr	r3, [pc, #372]	; (80137a4 <Send_DpmConfigSetCnf+0x8cc>)
 8013630:	22a8      	movs	r2, #168	; 0xa8
 8013632:	0052      	lsls	r2, r2, #1
 8013634:	4694      	mov	ip, r2
 8013636:	44bc      	add	ip, r7
 8013638:	4463      	add	r3, ip
 801363a:	781a      	ldrb	r2, [r3, #0]
 801363c:	495a      	ldr	r1, [pc, #360]	; (80137a8 <Send_DpmConfigSetCnf+0x8d0>)
 801363e:	0013      	movs	r3, r2
 8013640:	005b      	lsls	r3, r3, #1
 8013642:	189b      	adds	r3, r3, r2
 8013644:	009b      	lsls	r3, r3, #2
 8013646:	18cb      	adds	r3, r1, r3
 8013648:	3307      	adds	r3, #7
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	18e3      	adds	r3, r4, r3
 801364e:	0019      	movs	r1, r3
 8013650:	f7f2 fe0a 	bl	8006268 <__divsi3>
 8013654:	0003      	movs	r3, r0
 8013656:	001a      	movs	r2, r3
 8013658:	197b      	adds	r3, r7, r5
 801365a:	801a      	strh	r2, [r3, #0]
    }
    calcul = (tdrp * dcdrp) / 100;
 801365c:	254c      	movs	r5, #76	; 0x4c
 801365e:	35ff      	adds	r5, #255	; 0xff
 8013660:	197b      	adds	r3, r7, r5
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	26a7      	movs	r6, #167	; 0xa7
 8013666:	0076      	lsls	r6, r6, #1
 8013668:	19ba      	adds	r2, r7, r6
 801366a:	8812      	ldrh	r2, [r2, #0]
 801366c:	4353      	muls	r3, r2
 801366e:	2164      	movs	r1, #100	; 0x64
 8013670:	0018      	movs	r0, r3
 8013672:	f7f2 fdf9 	bl	8006268 <__divsi3>
 8013676:	0003      	movs	r3, r0
 8013678:	001a      	movs	r2, r3
 801367a:	249d      	movs	r4, #157	; 0x9d
 801367c:	0064      	lsls	r4, r4, #1
 801367e:	193b      	adds	r3, r7, r4
 8013680:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 8013682:	4b48      	ldr	r3, [pc, #288]	; (80137a4 <Send_DpmConfigSetCnf+0x8cc>)
 8013684:	22a8      	movs	r2, #168	; 0xa8
 8013686:	0052      	lsls	r2, r2, #1
 8013688:	4694      	mov	ip, r2
 801368a:	44bc      	add	ip, r7
 801368c:	4463      	add	r3, ip
 801368e:	781a      	ldrb	r2, [r3, #0]
 8013690:	193b      	adds	r3, r7, r4
 8013692:	881b      	ldrh	r3, [r3, #0]
 8013694:	b2d8      	uxtb	r0, r3
 8013696:	4944      	ldr	r1, [pc, #272]	; (80137a8 <Send_DpmConfigSetCnf+0x8d0>)
 8013698:	0013      	movs	r3, r2
 801369a:	005b      	lsls	r3, r3, #1
 801369c:	189b      	adds	r3, r3, r2
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	18cb      	adds	r3, r1, r3
 80136a2:	3307      	adds	r3, #7
 80136a4:	1c02      	adds	r2, r0, #0
 80136a6:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100 - dcdrp) / 100;
 80136a8:	197b      	adds	r3, r7, r5
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	19ba      	adds	r2, r7, r6
 80136ae:	8812      	ldrh	r2, [r2, #0]
 80136b0:	2164      	movs	r1, #100	; 0x64
 80136b2:	1a8a      	subs	r2, r1, r2
 80136b4:	4353      	muls	r3, r2
 80136b6:	2164      	movs	r1, #100	; 0x64
 80136b8:	0018      	movs	r0, r3
 80136ba:	f7f2 fdd5 	bl	8006268 <__divsi3>
 80136be:	0003      	movs	r3, r0
 80136c0:	001a      	movs	r2, r3
 80136c2:	193b      	adds	r3, r7, r4
 80136c4:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 80136c6:	4b37      	ldr	r3, [pc, #220]	; (80137a4 <Send_DpmConfigSetCnf+0x8cc>)
 80136c8:	22a8      	movs	r2, #168	; 0xa8
 80136ca:	0052      	lsls	r2, r2, #1
 80136cc:	4694      	mov	ip, r2
 80136ce:	44bc      	add	ip, r7
 80136d0:	4463      	add	r3, ip
 80136d2:	781a      	ldrb	r2, [r3, #0]
 80136d4:	193b      	adds	r3, r7, r4
 80136d6:	881b      	ldrh	r3, [r3, #0]
 80136d8:	b2d8      	uxtb	r0, r3
 80136da:	4933      	ldr	r1, [pc, #204]	; (80137a8 <Send_DpmConfigSetCnf+0x8d0>)
 80136dc:	0013      	movs	r3, r2
 80136de:	005b      	lsls	r3, r3, #1
 80136e0:	189b      	adds	r3, r3, r2
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	18cb      	adds	r3, r1, r3
 80136e6:	3306      	adds	r3, #6
 80136e8:	1c02      	adds	r2, r0, #0
 80136ea:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if(error != 0xFF)
 80136ec:	241a      	movs	r4, #26
 80136ee:	34ff      	adds	r4, #255	; 0xff
 80136f0:	193b      	adds	r3, r7, r4
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	2bff      	cmp	r3, #255	; 0xff
 80136f6:	d04c      	beq.n	8013792 <Send_DpmConfigSetCnf+0x8ba>
  {
    TLV_deinit_encode(&send_tlv);
 80136f8:	2594      	movs	r5, #148	; 0x94
 80136fa:	006d      	lsls	r5, r5, #1
 80136fc:	197b      	adds	r3, r7, r5
 80136fe:	0018      	movs	r0, r3
 8013700:	f7fd fc4e 	bl	8010fa0 <TLV_deinit_encode>
    TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 8013704:	4b27      	ldr	r3, [pc, #156]	; (80137a4 <Send_DpmConfigSetCnf+0x8cc>)
 8013706:	22a8      	movs	r2, #168	; 0xa8
 8013708:	0052      	lsls	r2, r2, #1
 801370a:	4694      	mov	ip, r2
 801370c:	44bc      	add	ip, r7
 801370e:	4463      	add	r3, ip
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	3301      	adds	r3, #1
 8013714:	015b      	lsls	r3, r3, #5
 8013716:	b25b      	sxtb	r3, r3
 8013718:	2208      	movs	r2, #8
 801371a:	4313      	orrs	r3, r2
 801371c:	b25b      	sxtb	r3, r3
 801371e:	b2d9      	uxtb	r1, r3
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2280      	movs	r2, #128	; 0x80
 8013724:	0052      	lsls	r2, r2, #1
 8013726:	1978      	adds	r0, r7, r5
 8013728:	f7fd fa75 	bl	8010c16 <TLV_init_encode>
    TLV_addValue(&send_tlv, &error, 1);
 801372c:	1939      	adds	r1, r7, r4
 801372e:	197b      	adds	r3, r7, r5
 8013730:	2201      	movs	r2, #1
 8013732:	0018      	movs	r0, r3
 8013734:	f7fd fba0 	bl	8010e78 <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if(!error)
 8013738:	193b      	adds	r3, r7, r4
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d122      	bne.n	8013786 <Send_DpmConfigSetCnf+0x8ae>
    {
      uint32_t index;
      for(index = 0; index < counter_param_not_applicated; index++)
 8013740:	2300      	movs	r3, #0
 8013742:	229e      	movs	r2, #158	; 0x9e
 8013744:	0052      	lsls	r2, r2, #1
 8013746:	18ba      	adds	r2, r7, r2
 8013748:	6013      	str	r3, [r2, #0]
 801374a:	e012      	b.n	8013772 <Send_DpmConfigSetCnf+0x89a>
      {
        TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 801374c:	2318      	movs	r3, #24
 801374e:	18fa      	adds	r2, r7, r3
 8013750:	249e      	movs	r4, #158	; 0x9e
 8013752:	0064      	lsls	r4, r4, #1
 8013754:	193b      	adds	r3, r7, r4
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	18d1      	adds	r1, r2, r3
 801375a:	2394      	movs	r3, #148	; 0x94
 801375c:	005b      	lsls	r3, r3, #1
 801375e:	18fb      	adds	r3, r7, r3
 8013760:	2201      	movs	r2, #1
 8013762:	0018      	movs	r0, r3
 8013764:	f7fd fb88 	bl	8010e78 <TLV_addValue>
      for(index = 0; index < counter_param_not_applicated; index++)
 8013768:	193b      	adds	r3, r7, r4
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	3301      	adds	r3, #1
 801376e:	193a      	adds	r2, r7, r4
 8013770:	6013      	str	r3, [r2, #0]
 8013772:	234e      	movs	r3, #78	; 0x4e
 8013774:	33ff      	adds	r3, #255	; 0xff
 8013776:	18fb      	adds	r3, r7, r3
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	229e      	movs	r2, #158	; 0x9e
 801377c:	0052      	lsls	r2, r2, #1
 801377e:	18ba      	adds	r2, r7, r2
 8013780:	6812      	ldr	r2, [r2, #0]
 8013782:	429a      	cmp	r2, r3
 8013784:	d3e2      	bcc.n	801374c <Send_DpmConfigSetCnf+0x874>
      }
    }
    TLV_deinit_encode(&send_tlv);
 8013786:	2394      	movs	r3, #148	; 0x94
 8013788:	005b      	lsls	r3, r3, #1
 801378a:	18fb      	adds	r3, r7, r3
 801378c:	0018      	movs	r0, r3
 801378e:	f7fd fc07 	bl	8010fa0 <TLV_deinit_encode>
  }
}
 8013792:	46c0      	nop			; (mov r8, r8)
 8013794:	46bd      	mov	sp, r7
 8013796:	b055      	add	sp, #340	; 0x154
 8013798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801379a:	46c0      	nop			; (mov r8, r8)
 801379c:	fffffec7 	.word	0xfffffec7
 80137a0:	fffffec8 	.word	0xfffffec8
 80137a4:	fffffebf 	.word	0xfffffebf
 80137a8:	20000014 	.word	0x20000014

080137ac <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t* instruction, uint8_t *pEncodedMsg)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b092      	sub	sp, #72	; 0x48
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60b9      	str	r1, [r7, #8]
 80137b4:	607a      	str	r2, [r7, #4]
 80137b6:	210f      	movs	r1, #15
 80137b8:	187b      	adds	r3, r7, r1
 80137ba:	1c02      	adds	r2, r0, #0
 80137bc:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data send_tlv;
  TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80137be:	187b      	adds	r3, r7, r1
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	3301      	adds	r3, #1
 80137c4:	015b      	lsls	r3, r3, #5
 80137c6:	b25b      	sxtb	r3, r3
 80137c8:	2205      	movs	r2, #5
 80137ca:	4313      	orrs	r3, r2
 80137cc:	b25b      	sxtb	r3, r3
 80137ce:	b2d9      	uxtb	r1, r3
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2280      	movs	r2, #128	; 0x80
 80137d4:	0052      	lsls	r2, r2, #1
 80137d6:	2030      	movs	r0, #48	; 0x30
 80137d8:	1838      	adds	r0, r7, r0
 80137da:	f7fd fa1c 	bl	8010c16 <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	0018      	movs	r0, r3
 80137e2:	f7fd fc83 	bl	80110ec <TLV_get_string_length>
 80137e6:	0003      	movs	r3, r0
 80137e8:	001a      	movs	r2, r3
 80137ea:	2344      	movs	r3, #68	; 0x44
 80137ec:	18fb      	adds	r3, r7, r3
 80137ee:	3a03      	subs	r2, #3
 80137f0:	801a      	strh	r2, [r3, #0]
  uint8_t index = 0;
 80137f2:	2347      	movs	r3, #71	; 0x47
 80137f4:	18fb      	adds	r3, r7, r3
 80137f6:	2200      	movs	r2, #0
 80137f8:	701a      	strb	r2, [r3, #0]

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditionnal breaks) */
    if(0 == length)
 80137fa:	2344      	movs	r3, #68	; 0x44
 80137fc:	18fb      	adds	r3, r7, r3
 80137fe:	881b      	ldrh	r3, [r3, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d104      	bne.n	801380e <Send_DpmConfigGetCnf+0x62>
    {
      param = GUI_PARAM_ALL;
 8013804:	2346      	movs	r3, #70	; 0x46
 8013806:	18fb      	adds	r3, r7, r3
 8013808:	22ff      	movs	r2, #255	; 0xff
 801380a:	701a      	strb	r2, [r3, #0]
 801380c:	e009      	b.n	8013822 <Send_DpmConfigGetCnf+0x76>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 801380e:	2347      	movs	r3, #71	; 0x47
 8013810:	18fb      	adds	r3, r7, r3
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	3307      	adds	r3, #7
 8013816:	68ba      	ldr	r2, [r7, #8]
 8013818:	18d2      	adds	r2, r2, r3
 801381a:	2346      	movs	r3, #70	; 0x46
 801381c:	18fb      	adds	r3, r7, r3
 801381e:	7812      	ldrb	r2, [r2, #0]
 8013820:	701a      	strb	r2, [r3, #0]

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch((USBPD_GUI_Tag_Param)param)
 8013822:	2346      	movs	r3, #70	; 0x46
 8013824:	18fb      	adds	r3, r7, r3
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	2b1c      	cmp	r3, #28
 801382a:	dc0d      	bgt.n	8013848 <Send_DpmConfigGetCnf+0x9c>
 801382c:	2b00      	cmp	r3, #0
 801382e:	da00      	bge.n	8013832 <Send_DpmConfigGetCnf+0x86>
 8013830:	e243      	b.n	8013cba <Send_DpmConfigGetCnf+0x50e>
 8013832:	2b1c      	cmp	r3, #28
 8013834:	d900      	bls.n	8013838 <Send_DpmConfigGetCnf+0x8c>
 8013836:	e240      	b.n	8013cba <Send_DpmConfigGetCnf+0x50e>
 8013838:	009a      	lsls	r2, r3, #2
 801383a:	4b02      	ldr	r3, [pc, #8]	; (8013844 <Send_DpmConfigGetCnf+0x98>)
 801383c:	18d3      	adds	r3, r2, r3
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	469f      	mov	pc, r3
 8013842:	46c0      	nop			; (mov r8, r8)
 8013844:	08016be8 	.word	0x08016be8
 8013848:	2bff      	cmp	r3, #255	; 0xff
 801384a:	d000      	beq.n	801384e <Send_DpmConfigGetCnf+0xa2>
 801384c:	e235      	b.n	8013cba <Send_DpmConfigGetCnf+0x50e>
#if !defined(USBPDCORE_LIB_NO_PD)
    case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = DPM_Settings[PortNum].PE_SupportedSOP;
 801384e:	230f      	movs	r3, #15
 8013850:	18fb      	adds	r3, r7, r3
 8013852:	781a      	ldrb	r2, [r3, #0]
 8013854:	49ed      	ldr	r1, [pc, #948]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 8013856:	0013      	movs	r3, r2
 8013858:	005b      	lsls	r3, r3, #1
 801385a:	189b      	adds	r3, r3, r2
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	585b      	ldr	r3, [r3, r1]
 8013860:	b2da      	uxtb	r2, r3
 8013862:	212f      	movs	r1, #47	; 0x2f
 8013864:	187b      	adds	r3, r7, r1
 8013866:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_SOP, 1, &settings);
 8013868:	187b      	adds	r3, r7, r1
 801386a:	2230      	movs	r2, #48	; 0x30
 801386c:	18b8      	adds	r0, r7, r2
 801386e:	2201      	movs	r2, #1
 8013870:	2100      	movs	r1, #0
 8013872:	f7fd fa33 	bl	8010cdc <TLV_add>
        if(0 != length)
 8013876:	2344      	movs	r3, #68	; 0x44
 8013878:	18fb      	adds	r3, r7, r3
 801387a:	881b      	ldrh	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d000      	beq.n	8013882 <Send_DpmConfigGetCnf+0xd6>
 8013880:	e22e      	b.n	8013ce0 <Send_DpmConfigGetCnf+0x534>
      }
#if defined(USBPD_REV30_SUPPORT)
    case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 8013882:	230f      	movs	r3, #15
 8013884:	18fb      	adds	r3, r7, r3
 8013886:	781a      	ldrb	r2, [r3, #0]
 8013888:	49e0      	ldr	r1, [pc, #896]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 801388a:	2008      	movs	r0, #8
 801388c:	0013      	movs	r3, r2
 801388e:	005b      	lsls	r3, r3, #1
 8013890:	189b      	adds	r3, r3, r2
 8013892:	009b      	lsls	r3, r3, #2
 8013894:	18cb      	adds	r3, r1, r3
 8013896:	181b      	adds	r3, r3, r0
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	079b      	lsls	r3, r3, #30
 801389c:	0fdb      	lsrs	r3, r3, #31
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	001a      	movs	r2, r3
 80138a2:	212e      	movs	r1, #46	; 0x2e
 80138a4:	187b      	adds	r3, r7, r1
 80138a6:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_FASTROLESWAP, 1, &settings);
 80138a8:	187b      	adds	r3, r7, r1
 80138aa:	2230      	movs	r2, #48	; 0x30
 80138ac:	18b8      	adds	r0, r7, r2
 80138ae:	2201      	movs	r2, #1
 80138b0:	2102      	movs	r1, #2
 80138b2:	f7fd fa13 	bl	8010cdc <TLV_add>
        if(0 != length)
 80138b6:	2344      	movs	r3, #68	; 0x44
 80138b8:	18fb      	adds	r3, r7, r3
 80138ba:	881b      	ldrh	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d000      	beq.n	80138c2 <Send_DpmConfigGetCnf+0x116>
 80138c0:	e210      	b.n	8013ce4 <Send_DpmConfigGetCnf+0x538>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
    case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 80138c2:	230f      	movs	r3, #15
 80138c4:	18fb      	adds	r3, r7, r3
 80138c6:	781a      	ldrb	r2, [r3, #0]
 80138c8:	4bd1      	ldr	r3, [pc, #836]	; (8013c10 <Send_DpmConfigGetCnf+0x464>)
 80138ca:	2174      	movs	r1, #116	; 0x74
 80138cc:	434a      	muls	r2, r1
 80138ce:	5cd3      	ldrb	r3, [r2, r3]
 80138d0:	071b      	lsls	r3, r3, #28
 80138d2:	0fdb      	lsrs	r3, r3, #31
 80138d4:	b2db      	uxtb	r3, r3
 80138d6:	001a      	movs	r2, r3
 80138d8:	212d      	movs	r1, #45	; 0x2d
 80138da:	187b      	adds	r3, r7, r1
 80138dc:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 80138de:	187b      	adds	r3, r7, r1
 80138e0:	2230      	movs	r2, #48	; 0x30
 80138e2:	18b8      	adds	r0, r7, r2
 80138e4:	2201      	movs	r2, #1
 80138e6:	2103      	movs	r1, #3
 80138e8:	f7fd f9f8 	bl	8010cdc <TLV_add>
        if(0 != length)
 80138ec:	2344      	movs	r3, #68	; 0x44
 80138ee:	18fb      	adds	r3, r7, r3
 80138f0:	881b      	ldrh	r3, [r3, #0]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d000      	beq.n	80138f8 <Send_DpmConfigGetCnf+0x14c>
 80138f6:	e1f7      	b.n	8013ce8 <Send_DpmConfigGetCnf+0x53c>
        }
      }
    case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 80138f8:	230f      	movs	r3, #15
 80138fa:	18fb      	adds	r3, r7, r3
 80138fc:	781a      	ldrb	r2, [r3, #0]
 80138fe:	4bc4      	ldr	r3, [pc, #784]	; (8013c10 <Send_DpmConfigGetCnf+0x464>)
 8013900:	2174      	movs	r1, #116	; 0x74
 8013902:	434a      	muls	r2, r1
 8013904:	5cd3      	ldrb	r3, [r2, r3]
 8013906:	075b      	lsls	r3, r3, #29
 8013908:	0fdb      	lsrs	r3, r3, #31
 801390a:	b2db      	uxtb	r3, r3
 801390c:	001a      	movs	r2, r3
 801390e:	212c      	movs	r1, #44	; 0x2c
 8013910:	187b      	adds	r3, r7, r1
 8013912:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8013914:	187b      	adds	r3, r7, r1
 8013916:	2230      	movs	r2, #48	; 0x30
 8013918:	18b8      	adds	r0, r7, r2
 801391a:	2201      	movs	r2, #1
 801391c:	211c      	movs	r1, #28
 801391e:	f7fd f9dd 	bl	8010cdc <TLV_add>
        if(0 != length)
 8013922:	2344      	movs	r3, #68	; 0x44
 8013924:	18fb      	adds	r3, r7, r3
 8013926:	881b      	ldrh	r3, [r3, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d000      	beq.n	801392e <Send_DpmConfigGetCnf+0x182>
 801392c:	e1de      	b.n	8013cec <Send_DpmConfigGetCnf+0x540>
        }
      }
    case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = DPM_Settings[PortNum].PE_DefaultRole;
 801392e:	230f      	movs	r3, #15
 8013930:	18fb      	adds	r3, r7, r3
 8013932:	781a      	ldrb	r2, [r3, #0]
 8013934:	49b5      	ldr	r1, [pc, #724]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 8013936:	0013      	movs	r3, r2
 8013938:	005b      	lsls	r3, r3, #1
 801393a:	189b      	adds	r3, r3, r2
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	18cb      	adds	r3, r1, r3
 8013940:	791b      	ldrb	r3, [r3, #4]
 8013942:	075b      	lsls	r3, r3, #29
 8013944:	0fdb      	lsrs	r3, r3, #31
 8013946:	b2db      	uxtb	r3, r3
 8013948:	001a      	movs	r2, r3
 801394a:	212b      	movs	r1, #43	; 0x2b
 801394c:	187b      	adds	r3, r7, r1
 801394e:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 8013950:	187b      	adds	r3, r7, r1
 8013952:	2230      	movs	r2, #48	; 0x30
 8013954:	18b8      	adds	r0, r7, r2
 8013956:	2201      	movs	r2, #1
 8013958:	2104      	movs	r1, #4
 801395a:	f7fd f9bf 	bl	8010cdc <TLV_add>
        if(0 != length)
 801395e:	2344      	movs	r3, #68	; 0x44
 8013960:	18fb      	adds	r3, r7, r3
 8013962:	881b      	ldrh	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d000      	beq.n	801396a <Send_DpmConfigGetCnf+0x1be>
 8013968:	e1c2      	b.n	8013cf0 <Send_DpmConfigGetCnf+0x544>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
    case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = DPM_Settings[PortNum].PE_RoleSwap;
 801396a:	230f      	movs	r3, #15
 801396c:	18fb      	adds	r3, r7, r3
 801396e:	781a      	ldrb	r2, [r3, #0]
 8013970:	49a6      	ldr	r1, [pc, #664]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 8013972:	0013      	movs	r3, r2
 8013974:	005b      	lsls	r3, r3, #1
 8013976:	189b      	adds	r3, r3, r2
 8013978:	009b      	lsls	r3, r3, #2
 801397a:	18cb      	adds	r3, r1, r3
 801397c:	791b      	ldrb	r3, [r3, #4]
 801397e:	071b      	lsls	r3, r3, #28
 8013980:	0fdb      	lsrs	r3, r3, #31
 8013982:	b2db      	uxtb	r3, r3
 8013984:	001a      	movs	r2, r3
 8013986:	212a      	movs	r1, #42	; 0x2a
 8013988:	187b      	adds	r3, r7, r1
 801398a:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_DRP_SUPPORT, 1, &settings);
 801398c:	187b      	adds	r3, r7, r1
 801398e:	2230      	movs	r2, #48	; 0x30
 8013990:	18b8      	adds	r0, r7, r2
 8013992:	2201      	movs	r2, #1
 8013994:	2105      	movs	r1, #5
 8013996:	f7fd f9a1 	bl	8010cdc <TLV_add>
        if(0 != length)
 801399a:	2344      	movs	r3, #68	; 0x44
 801399c:	18fb      	adds	r3, r7, r3
 801399e:	881b      	ldrh	r3, [r3, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d000      	beq.n	80139a6 <Send_DpmConfigGetCnf+0x1fa>
 80139a4:	e1a6      	b.n	8013cf4 <Send_DpmConfigGetCnf+0x548>
        }
      }
    case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = DPM_Settings[PortNum].CAD_RoleToggle;
 80139a6:	230f      	movs	r3, #15
 80139a8:	18fb      	adds	r3, r7, r3
 80139aa:	781a      	ldrb	r2, [r3, #0]
 80139ac:	4997      	ldr	r1, [pc, #604]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 80139ae:	0013      	movs	r3, r2
 80139b0:	005b      	lsls	r3, r3, #1
 80139b2:	189b      	adds	r3, r3, r2
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	18cb      	adds	r3, r1, r3
 80139b8:	795b      	ldrb	r3, [r3, #5]
 80139ba:	069b      	lsls	r3, r3, #26
 80139bc:	0fdb      	lsrs	r3, r3, #31
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	001a      	movs	r2, r3
 80139c2:	2129      	movs	r1, #41	; 0x29
 80139c4:	187b      	adds	r3, r7, r1
 80139c6:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_CADROLETOGGLE, 1, &settings);
 80139c8:	187b      	adds	r3, r7, r1
 80139ca:	2230      	movs	r2, #48	; 0x30
 80139cc:	18b8      	adds	r0, r7, r2
 80139ce:	2201      	movs	r2, #1
 80139d0:	2106      	movs	r1, #6
 80139d2:	f7fd f983 	bl	8010cdc <TLV_add>
        if(0 != length)
 80139d6:	2344      	movs	r3, #68	; 0x44
 80139d8:	18fb      	adds	r3, r7, r3
 80139da:	881b      	ldrh	r3, [r3, #0]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d000      	beq.n	80139e2 <Send_DpmConfigGetCnf+0x236>
 80139e0:	e18a      	b.n	8013cf8 <Send_DpmConfigGetCnf+0x54c>
        }
      }
    case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = DPM_Settings[PortNum].PE_CapscounterSupport;
 80139e2:	230f      	movs	r3, #15
 80139e4:	18fb      	adds	r3, r7, r3
 80139e6:	781a      	ldrb	r2, [r3, #0]
 80139e8:	4988      	ldr	r1, [pc, #544]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 80139ea:	0013      	movs	r3, r2
 80139ec:	005b      	lsls	r3, r3, #1
 80139ee:	189b      	adds	r3, r3, r2
 80139f0:	009b      	lsls	r3, r3, #2
 80139f2:	18cb      	adds	r3, r1, r3
 80139f4:	791b      	ldrb	r3, [r3, #4]
 80139f6:	061b      	lsls	r3, r3, #24
 80139f8:	0fdb      	lsrs	r3, r3, #31
 80139fa:	b2db      	uxtb	r3, r3
 80139fc:	001a      	movs	r2, r3
 80139fe:	2128      	movs	r1, #40	; 0x28
 8013a00:	187b      	adds	r3, r7, r1
 8013a02:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8013a04:	187b      	adds	r3, r7, r1
 8013a06:	2230      	movs	r2, #48	; 0x30
 8013a08:	18b8      	adds	r0, r7, r2
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	2107      	movs	r1, #7
 8013a0e:	f7fd f965 	bl	8010cdc <TLV_add>
        if(0 != length)
 8013a12:	2344      	movs	r3, #68	; 0x44
 8013a14:	18fb      	adds	r3, r7, r3
 8013a16:	881b      	ldrh	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d000      	beq.n	8013a1e <Send_DpmConfigGetCnf+0x272>
 8013a1c:	e16e      	b.n	8013cfc <Send_DpmConfigGetCnf+0x550>
      }
#endif /*_VDM*/
    case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = DPM_Settings[PortNum].PE_PingSupport;
 8013a1e:	230f      	movs	r3, #15
 8013a20:	18fb      	adds	r3, r7, r3
 8013a22:	781a      	ldrb	r2, [r3, #0]
 8013a24:	4979      	ldr	r1, [pc, #484]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 8013a26:	0013      	movs	r3, r2
 8013a28:	005b      	lsls	r3, r3, #1
 8013a2a:	189b      	adds	r3, r3, r2
 8013a2c:	009b      	lsls	r3, r3, #2
 8013a2e:	18cb      	adds	r3, r1, r3
 8013a30:	791b      	ldrb	r3, [r3, #4]
 8013a32:	065b      	lsls	r3, r3, #25
 8013a34:	0fdb      	lsrs	r3, r3, #31
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	001a      	movs	r2, r3
 8013a3a:	2127      	movs	r1, #39	; 0x27
 8013a3c:	187b      	adds	r3, r7, r1
 8013a3e:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_PING_SUPPORT, 1, &settings);
 8013a40:	187b      	adds	r3, r7, r1
 8013a42:	2230      	movs	r2, #48	; 0x30
 8013a44:	18b8      	adds	r0, r7, r2
 8013a46:	2201      	movs	r2, #1
 8013a48:	210a      	movs	r1, #10
 8013a4a:	f7fd f947 	bl	8010cdc <TLV_add>
        if(0 != length)
 8013a4e:	2344      	movs	r3, #68	; 0x44
 8013a50:	18fb      	adds	r3, r7, r3
 8013a52:	881b      	ldrh	r3, [r3, #0]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d000      	beq.n	8013a5a <Send_DpmConfigGetCnf+0x2ae>
 8013a58:	e152      	b.n	8013d00 <Send_DpmConfigGetCnf+0x554>
      }
#if defined(USBPD_REV30_SUPPORT)
    case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 8013a5a:	230f      	movs	r3, #15
 8013a5c:	18fb      	adds	r3, r7, r3
 8013a5e:	781a      	ldrb	r2, [r3, #0]
 8013a60:	496a      	ldr	r1, [pc, #424]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 8013a62:	0013      	movs	r3, r2
 8013a64:	005b      	lsls	r3, r3, #1
 8013a66:	189b      	adds	r3, r3, r2
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	18cb      	adds	r3, r1, r3
 8013a6c:	3308      	adds	r3, #8
 8013a6e:	881a      	ldrh	r2, [r3, #0]
 8013a70:	2124      	movs	r1, #36	; 0x24
 8013a72:	187b      	adds	r3, r7, r1
 8013a74:	801a      	strh	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_PPS_SUPPORT, 2, (uint8_t*)&settings);
 8013a76:	187b      	adds	r3, r7, r1
 8013a78:	2230      	movs	r2, #48	; 0x30
 8013a7a:	18b8      	adds	r0, r7, r2
 8013a7c:	2202      	movs	r2, #2
 8013a7e:	210b      	movs	r1, #11
 8013a80:	f7fd f92c 	bl	8010cdc <TLV_add>
        if(0 != length)
 8013a84:	2344      	movs	r3, #68	; 0x44
 8013a86:	18fb      	adds	r3, r7, r3
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d000      	beq.n	8013a90 <Send_DpmConfigGetCnf+0x2e4>
 8013a8e:	e139      	b.n	8013d04 <Send_DpmConfigGetCnf+0x558>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
    case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = DPM_USER_Settings[PortNum].PE_VconnSwap;
 8013a90:	230f      	movs	r3, #15
 8013a92:	18fb      	adds	r3, r7, r3
 8013a94:	781a      	ldrb	r2, [r3, #0]
 8013a96:	4b5e      	ldr	r3, [pc, #376]	; (8013c10 <Send_DpmConfigGetCnf+0x464>)
 8013a98:	2174      	movs	r1, #116	; 0x74
 8013a9a:	434a      	muls	r2, r1
 8013a9c:	5cd3      	ldrb	r3, [r2, r3]
 8013a9e:	079b      	lsls	r3, r3, #30
 8013aa0:	0fdb      	lsrs	r3, r3, #31
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	001a      	movs	r2, r3
 8013aa6:	2123      	movs	r1, #35	; 0x23
 8013aa8:	187b      	adds	r3, r7, r1
 8013aaa:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_VCONNSWAP, 1, &settings);
 8013aac:	187b      	adds	r3, r7, r1
 8013aae:	2230      	movs	r2, #48	; 0x30
 8013ab0:	18b8      	adds	r0, r7, r2
 8013ab2:	2201      	movs	r2, #1
 8013ab4:	2108      	movs	r1, #8
 8013ab6:	f7fd f911 	bl	8010cdc <TLV_add>
        if(0 != length)
 8013aba:	2344      	movs	r3, #68	; 0x44
 8013abc:	18fb      	adds	r3, r7, r3
 8013abe:	881b      	ldrh	r3, [r3, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d000      	beq.n	8013ac6 <Send_DpmConfigGetCnf+0x31a>
 8013ac4:	e120      	b.n	8013d08 <Send_DpmConfigGetCnf+0x55c>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[0];
 8013ac6:	2143      	movs	r1, #67	; 0x43
 8013ac8:	187b      	adds	r3, r7, r1
 8013aca:	4a52      	ldr	r2, [pc, #328]	; (8013c14 <Send_DpmConfigGetCnf+0x468>)
 8013acc:	7812      	ldrb	r2, [r2, #0]
 8013ace:	701a      	strb	r2, [r3, #0]
          list_pdo  = (uint8_t*)PORT0_PDO_ListSNK;
 8013ad0:	4b51      	ldr	r3, [pc, #324]	; (8013c18 <Send_DpmConfigGetCnf+0x46c>)
 8013ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[2];
          list_pdo  = (uint8_t*)PORT1_PDO_ListSNK;
        }
#endif /* USBPD_PORT_COUNT==2 */
        TLV_add(&send_tlv, GUI_PARAM_SNK_PDO, nb_pdo * 4, list_pdo);
 8013ad4:	187b      	adds	r3, r7, r1
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ae0:	2130      	movs	r1, #48	; 0x30
 8013ae2:	1878      	adds	r0, r7, r1
 8013ae4:	210c      	movs	r1, #12
 8013ae6:	f7fd f8f9 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013aea:	2344      	movs	r3, #68	; 0x44
 8013aec:	18fb      	adds	r3, r7, r3
 8013aee:	881b      	ldrh	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d000      	beq.n	8013af6 <Send_DpmConfigGetCnf+0x34a>
 8013af4:	e10a      	b.n	8013d0c <Send_DpmConfigGetCnf+0x560>
      }
#endif /* _SRC || _DRP */
    case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = DPM_USER_Settings[PortNum].CAD_tDRP;
 8013af6:	230f      	movs	r3, #15
 8013af8:	18fb      	adds	r3, r7, r3
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	4a44      	ldr	r2, [pc, #272]	; (8013c10 <Send_DpmConfigGetCnf+0x464>)
 8013afe:	2168      	movs	r1, #104	; 0x68
 8013b00:	2074      	movs	r0, #116	; 0x74
 8013b02:	4343      	muls	r3, r0
 8013b04:	18d3      	adds	r3, r2, r3
 8013b06:	185b      	adds	r3, r3, r1
 8013b08:	791b      	ldrb	r3, [r3, #4]
 8013b0a:	061b      	lsls	r3, r3, #24
 8013b0c:	0e5b      	lsrs	r3, r3, #25
 8013b0e:	b2db      	uxtb	r3, r3
 8013b10:	001a      	movs	r2, r3
 8013b12:	2122      	movs	r1, #34	; 0x22
 8013b14:	187b      	adds	r3, r7, r1
 8013b16:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_TDRP, 1, &value);
 8013b18:	187b      	adds	r3, r7, r1
 8013b1a:	2230      	movs	r2, #48	; 0x30
 8013b1c:	18b8      	adds	r0, r7, r2
 8013b1e:	2201      	movs	r2, #1
 8013b20:	210e      	movs	r1, #14
 8013b22:	f7fd f8db 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013b26:	2344      	movs	r3, #68	; 0x44
 8013b28:	18fb      	adds	r3, r7, r3
 8013b2a:	881b      	ldrh	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d000      	beq.n	8013b32 <Send_DpmConfigGetCnf+0x386>
 8013b30:	e0ee      	b.n	8013d10 <Send_DpmConfigGetCnf+0x564>
        break;
      }
    case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 8013b32:	230f      	movs	r3, #15
 8013b34:	18fb      	adds	r3, r7, r3
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	4a35      	ldr	r2, [pc, #212]	; (8013c10 <Send_DpmConfigGetCnf+0x464>)
 8013b3a:	2168      	movs	r1, #104	; 0x68
 8013b3c:	2074      	movs	r0, #116	; 0x74
 8013b3e:	4343      	muls	r3, r0
 8013b40:	18d3      	adds	r3, r2, r3
 8013b42:	185b      	adds	r3, r3, r1
 8013b44:	795b      	ldrb	r3, [r3, #5]
 8013b46:	065b      	lsls	r3, r3, #25
 8013b48:	0e5b      	lsrs	r3, r3, #25
 8013b4a:	b2db      	uxtb	r3, r3
 8013b4c:	001a      	movs	r2, r3
 8013b4e:	2121      	movs	r1, #33	; 0x21
 8013b50:	187b      	adds	r3, r7, r1
 8013b52:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_DCSRC_DRP, 1, &value);
 8013b54:	187b      	adds	r3, r7, r1
 8013b56:	2230      	movs	r2, #48	; 0x30
 8013b58:	18b8      	adds	r0, r7, r2
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	210f      	movs	r1, #15
 8013b5e:	f7fd f8bd 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013b62:	2344      	movs	r3, #68	; 0x44
 8013b64:	18fb      	adds	r3, r7, r3
 8013b66:	881b      	ldrh	r3, [r3, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d000      	beq.n	8013b6e <Send_DpmConfigGetCnf+0x3c2>
 8013b6c:	e0d2      	b.n	8013d14 <Send_DpmConfigGetCnf+0x568>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
    case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 8013b6e:	230f      	movs	r3, #15
 8013b70:	18fb      	adds	r3, r7, r3
 8013b72:	781a      	ldrb	r2, [r3, #0]
 8013b74:	4925      	ldr	r1, [pc, #148]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 8013b76:	0013      	movs	r3, r2
 8013b78:	005b      	lsls	r3, r3, #1
 8013b7a:	189b      	adds	r3, r3, r2
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	18cb      	adds	r3, r1, r3
 8013b80:	795b      	ldrb	r3, [r3, #5]
 8013b82:	07db      	lsls	r3, r3, #31
 8013b84:	0fdb      	lsrs	r3, r3, #31
 8013b86:	b2db      	uxtb	r3, r3
 8013b88:	001a      	movs	r2, r3
 8013b8a:	2120      	movs	r1, #32
 8013b8c:	187b      	adds	r3, r7, r1
 8013b8e:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 8013b90:	187b      	adds	r3, r7, r1
 8013b92:	2230      	movs	r2, #48	; 0x30
 8013b94:	18b8      	adds	r0, r7, r2
 8013b96:	2201      	movs	r2, #1
 8013b98:	2110      	movs	r1, #16
 8013b9a:	f7fd f89f 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013b9e:	2344      	movs	r3, #68	; 0x44
 8013ba0:	18fb      	adds	r3, r7, r3
 8013ba2:	881b      	ldrh	r3, [r3, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d000      	beq.n	8013baa <Send_DpmConfigGetCnf+0x3fe>
 8013ba8:	e0b6      	b.n	8013d18 <Send_DpmConfigGetCnf+0x56c>
      {
        break;
      }
    case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8013baa:	230f      	movs	r3, #15
 8013bac:	18fb      	adds	r3, r7, r3
 8013bae:	781a      	ldrb	r2, [r3, #0]
 8013bb0:	4916      	ldr	r1, [pc, #88]	; (8013c0c <Send_DpmConfigGetCnf+0x460>)
 8013bb2:	0013      	movs	r3, r2
 8013bb4:	005b      	lsls	r3, r3, #1
 8013bb6:	189b      	adds	r3, r3, r2
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	18cb      	adds	r3, r1, r3
 8013bbc:	795b      	ldrb	r3, [r3, #5]
 8013bbe:	079b      	lsls	r3, r3, #30
 8013bc0:	0fdb      	lsrs	r3, r3, #31
 8013bc2:	b2db      	uxtb	r3, r3
 8013bc4:	001a      	movs	r2, r3
 8013bc6:	211f      	movs	r1, #31
 8013bc8:	187b      	adds	r3, r7, r1
 8013bca:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8013bcc:	187b      	adds	r3, r7, r1
 8013bce:	2230      	movs	r2, #48	; 0x30
 8013bd0:	18b8      	adds	r0, r7, r2
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	2111      	movs	r1, #17
 8013bd6:	f7fd f881 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013bda:	2344      	movs	r3, #68	; 0x44
 8013bdc:	18fb      	adds	r3, r7, r3
 8013bde:	881b      	ldrh	r3, [r3, #0]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d000      	beq.n	8013be6 <Send_DpmConfigGetCnf+0x43a>
 8013be4:	e09a      	b.n	8013d1c <Send_DpmConfigGetCnf+0x570>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
    case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 8013be6:	230f      	movs	r3, #15
 8013be8:	18fb      	adds	r3, r7, r3
 8013bea:	781a      	ldrb	r2, [r3, #0]
 8013bec:	4b0b      	ldr	r3, [pc, #44]	; (8013c1c <Send_DpmConfigGetCnf+0x470>)
 8013bee:	00d2      	lsls	r2, r2, #3
 8013bf0:	58d3      	ldr	r3, [r2, r3]
 8013bf2:	61bb      	str	r3, [r7, #24]
        TLV_add(&send_tlv, GUI_PARAM_XID_SOP, 4, (uint8_t*)&value);
 8013bf4:	2318      	movs	r3, #24
 8013bf6:	18fb      	adds	r3, r7, r3
 8013bf8:	2230      	movs	r2, #48	; 0x30
 8013bfa:	18b8      	adds	r0, r7, r2
 8013bfc:	2204      	movs	r2, #4
 8013bfe:	2112      	movs	r1, #18
 8013c00:	f7fd f86c 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013c04:	2344      	movs	r3, #68	; 0x44
 8013c06:	18fb      	adds	r3, r7, r3
 8013c08:	e00a      	b.n	8013c20 <Send_DpmConfigGetCnf+0x474>
 8013c0a:	46c0      	nop			; (mov r8, r8)
 8013c0c:	20000014 	.word	0x20000014
 8013c10:	20000028 	.word	0x20000028
 8013c14:	2000009c 	.word	0x2000009c
 8013c18:	200000a0 	.word	0x200000a0
 8013c1c:	20000020 	.word	0x20000020
 8013c20:	881b      	ldrh	r3, [r3, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d000      	beq.n	8013c28 <Send_DpmConfigGetCnf+0x47c>
 8013c26:	e07b      	b.n	8013d20 <Send_DpmConfigGetCnf+0x574>
      {
        break;
      }
    case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = DPM_ID_Settings[PortNum].VID;
 8013c28:	230f      	movs	r3, #15
 8013c2a:	18fb      	adds	r3, r7, r3
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	4a4d      	ldr	r2, [pc, #308]	; (8013d64 <Send_DpmConfigGetCnf+0x5b8>)
 8013c30:	00db      	lsls	r3, r3, #3
 8013c32:	18d3      	adds	r3, r2, r3
 8013c34:	3304      	adds	r3, #4
 8013c36:	881a      	ldrh	r2, [r3, #0]
 8013c38:	2116      	movs	r1, #22
 8013c3a:	187b      	adds	r3, r7, r1
 8013c3c:	801a      	strh	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_USB_VID_SOP, 2, (uint8_t*)&value);
 8013c3e:	187b      	adds	r3, r7, r1
 8013c40:	2230      	movs	r2, #48	; 0x30
 8013c42:	18b8      	adds	r0, r7, r2
 8013c44:	2202      	movs	r2, #2
 8013c46:	2117      	movs	r1, #23
 8013c48:	f7fd f848 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013c4c:	2344      	movs	r3, #68	; 0x44
 8013c4e:	18fb      	adds	r3, r7, r3
 8013c50:	881b      	ldrh	r3, [r3, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d000      	beq.n	8013c58 <Send_DpmConfigGetCnf+0x4ac>
 8013c56:	e065      	b.n	8013d24 <Send_DpmConfigGetCnf+0x578>
      {
        break;
      }
    case GUI_PARAM_PID_SOP :
      {
        uint16_t value = DPM_ID_Settings[PortNum].PID;
 8013c58:	230f      	movs	r3, #15
 8013c5a:	18fb      	adds	r3, r7, r3
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	4a41      	ldr	r2, [pc, #260]	; (8013d64 <Send_DpmConfigGetCnf+0x5b8>)
 8013c60:	00db      	lsls	r3, r3, #3
 8013c62:	18d3      	adds	r3, r2, r3
 8013c64:	3306      	adds	r3, #6
 8013c66:	881a      	ldrh	r2, [r3, #0]
 8013c68:	2114      	movs	r1, #20
 8013c6a:	187b      	adds	r3, r7, r1
 8013c6c:	801a      	strh	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_PID_SOP, 2, (uint8_t*)&value);
 8013c6e:	187b      	adds	r3, r7, r1
 8013c70:	2230      	movs	r2, #48	; 0x30
 8013c72:	18b8      	adds	r0, r7, r2
 8013c74:	2202      	movs	r2, #2
 8013c76:	2118      	movs	r1, #24
 8013c78:	f7fd f830 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013c7c:	2344      	movs	r3, #68	; 0x44
 8013c7e:	18fb      	adds	r3, r7, r3
 8013c80:	881b      	ldrh	r3, [r3, #0]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d150      	bne.n	8013d28 <Send_DpmConfigGetCnf+0x57c>
        break;
      }
#endif /* _VDM */
    case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = GUI_USER_Params[PortNum].u.MeasurementReporting;
 8013c86:	230f      	movs	r3, #15
 8013c88:	18fb      	adds	r3, r7, r3
 8013c8a:	781a      	ldrb	r2, [r3, #0]
 8013c8c:	4936      	ldr	r1, [pc, #216]	; (8013d68 <Send_DpmConfigGetCnf+0x5bc>)
 8013c8e:	0013      	movs	r3, r2
 8013c90:	005b      	lsls	r3, r3, #1
 8013c92:	189b      	adds	r3, r3, r2
 8013c94:	005b      	lsls	r3, r3, #1
 8013c96:	18cb      	adds	r3, r1, r3
 8013c98:	3304      	adds	r3, #4
 8013c9a:	781a      	ldrb	r2, [r3, #0]
 8013c9c:	2113      	movs	r1, #19
 8013c9e:	187b      	adds	r3, r7, r1
 8013ca0:	701a      	strb	r2, [r3, #0]
        TLV_add(&send_tlv, GUI_PARAM_MEASUREREPORTING, 1, &settings);
 8013ca2:	187b      	adds	r3, r7, r1
 8013ca4:	2230      	movs	r2, #48	; 0x30
 8013ca6:	18b8      	adds	r0, r7, r2
 8013ca8:	2201      	movs	r2, #1
 8013caa:	211a      	movs	r1, #26
 8013cac:	f7fd f816 	bl	8010cdc <TLV_add>
      }
      if(0 != length)
 8013cb0:	2344      	movs	r3, #68	; 0x44
 8013cb2:	18fb      	adds	r3, r7, r3
 8013cb4:	881b      	ldrh	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d138      	bne.n	8013d2c <Send_DpmConfigGetCnf+0x580>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
    default:
      if(0 != length)
 8013cba:	2344      	movs	r3, #68	; 0x44
 8013cbc:	18fb      	adds	r3, r7, r3
 8013cbe:	881b      	ldrh	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d035      	beq.n	8013d30 <Send_DpmConfigGetCnf+0x584>
      {
        /* At least 1 parameter does not exist */
        TLV_deinit_encode(&send_tlv);
 8013cc4:	2330      	movs	r3, #48	; 0x30
 8013cc6:	18fb      	adds	r3, r7, r3
 8013cc8:	0018      	movs	r0, r3
 8013cca:	f7fd f969 	bl	8010fa0 <TLV_deinit_encode>
        Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 8013cce:	6879      	ldr	r1, [r7, #4]
 8013cd0:	230f      	movs	r3, #15
 8013cd2:	18fb      	adds	r3, r7, r3
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	2203      	movs	r2, #3
 8013cd8:	0018      	movs	r0, r3
 8013cda:	f000 f847 	bl	8013d6c <Send_DpmConfigGetRej>
        goto __end;
 8013cde:	e038      	b.n	8013d52 <Send_DpmConfigGetCnf+0x5a6>
          break;
 8013ce0:	46c0      	nop			; (mov r8, r8)
 8013ce2:	e026      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013ce4:	46c0      	nop			; (mov r8, r8)
 8013ce6:	e024      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013ce8:	46c0      	nop			; (mov r8, r8)
 8013cea:	e022      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013cec:	46c0      	nop			; (mov r8, r8)
 8013cee:	e020      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013cf0:	46c0      	nop			; (mov r8, r8)
 8013cf2:	e01e      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013cf4:	46c0      	nop			; (mov r8, r8)
 8013cf6:	e01c      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013cf8:	46c0      	nop			; (mov r8, r8)
 8013cfa:	e01a      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013cfc:	46c0      	nop			; (mov r8, r8)
 8013cfe:	e018      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013d00:	46c0      	nop			; (mov r8, r8)
 8013d02:	e016      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013d04:	46c0      	nop			; (mov r8, r8)
 8013d06:	e014      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
          break;
 8013d08:	46c0      	nop			; (mov r8, r8)
 8013d0a:	e012      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d0c:	46c0      	nop			; (mov r8, r8)
 8013d0e:	e010      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d10:	46c0      	nop			; (mov r8, r8)
 8013d12:	e00e      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d14:	46c0      	nop			; (mov r8, r8)
 8013d16:	e00c      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d18:	46c0      	nop			; (mov r8, r8)
 8013d1a:	e00a      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d1c:	46c0      	nop			; (mov r8, r8)
 8013d1e:	e008      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d20:	46c0      	nop			; (mov r8, r8)
 8013d22:	e006      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d24:	46c0      	nop			; (mov r8, r8)
 8013d26:	e004      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d28:	46c0      	nop			; (mov r8, r8)
 8013d2a:	e002      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
        break;
 8013d2c:	46c0      	nop			; (mov r8, r8)
 8013d2e:	e000      	b.n	8013d32 <Send_DpmConfigGetCnf+0x586>
      }
      break;
 8013d30:	46c0      	nop			; (mov r8, r8)
    }
    index++;
 8013d32:	2147      	movs	r1, #71	; 0x47
 8013d34:	187b      	adds	r3, r7, r1
 8013d36:	781a      	ldrb	r2, [r3, #0]
 8013d38:	187b      	adds	r3, r7, r1
 8013d3a:	3201      	adds	r2, #1
 8013d3c:	701a      	strb	r2, [r3, #0]
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while(index < length);
 8013d3e:	187b      	adds	r3, r7, r1
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	2244      	movs	r2, #68	; 0x44
 8013d46:	18ba      	adds	r2, r7, r2
 8013d48:	8812      	ldrh	r2, [r2, #0]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d900      	bls.n	8013d50 <Send_DpmConfigGetCnf+0x5a4>
 8013d4e:	e554      	b.n	80137fa <Send_DpmConfigGetCnf+0x4e>

__end:
 8013d50:	46c0      	nop			; (mov r8, r8)
  TLV_deinit_encode(&send_tlv);
 8013d52:	2330      	movs	r3, #48	; 0x30
 8013d54:	18fb      	adds	r3, r7, r3
 8013d56:	0018      	movs	r0, r3
 8013d58:	f7fd f922 	bl	8010fa0 <TLV_deinit_encode>
}
 8013d5c:	46c0      	nop			; (mov r8, r8)
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	b012      	add	sp, #72	; 0x48
 8013d62:	bd80      	pop	{r7, pc}
 8013d64:	20000020 	.word	0x20000020
 8013d68:	20001d10 	.word	0x20001d10

08013d6c <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8013d6c:	b590      	push	{r4, r7, lr}
 8013d6e:	b087      	sub	sp, #28
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6039      	str	r1, [r7, #0]
 8013d74:	0011      	movs	r1, r2
 8013d76:	1dfb      	adds	r3, r7, #7
 8013d78:	1c02      	adds	r2, r0, #0
 8013d7a:	701a      	strb	r2, [r3, #0]
 8013d7c:	1dbb      	adds	r3, r7, #6
 8013d7e:	1c0a      	adds	r2, r1, #0
 8013d80:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data send_tlv;
  TLV_init_encode(&send_tlv, DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	2280      	movs	r2, #128	; 0x80
 8013d86:	0052      	lsls	r2, r2, #1
 8013d88:	240c      	movs	r4, #12
 8013d8a:	1938      	adds	r0, r7, r4
 8013d8c:	2108      	movs	r1, #8
 8013d8e:	f7fc ff42 	bl	8010c16 <TLV_init_encode>
  TLV_add(&send_tlv, RejectReason, 0, NULL);
 8013d92:	1dbb      	adds	r3, r7, #6
 8013d94:	7819      	ldrb	r1, [r3, #0]
 8013d96:	1938      	adds	r0, r7, r4
 8013d98:	2300      	movs	r3, #0
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f7fc ff9e 	bl	8010cdc <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8013da0:	193b      	adds	r3, r7, r4
 8013da2:	0018      	movs	r0, r3
 8013da4:	f7fd f8fc 	bl	8010fa0 <TLV_deinit_encode>
}
 8013da8:	46c0      	nop			; (mov r8, r8)
 8013daa:	46bd      	mov	sp, r7
 8013dac:	b007      	add	sp, #28
 8013dae:	bd90      	pop	{r4, r7, pc}

08013db0 <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8013db0:	b590      	push	{r4, r7, lr}
 8013db2:	b087      	sub	sp, #28
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6039      	str	r1, [r7, #0]
 8013db8:	0011      	movs	r1, r2
 8013dba:	1dfb      	adds	r3, r7, #7
 8013dbc:	1c02      	adds	r2, r0, #0
 8013dbe:	701a      	strb	r2, [r3, #0]
 8013dc0:	1dbb      	adds	r3, r7, #6
 8013dc2:	1c0a      	adds	r2, r1, #0
 8013dc4:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data send_tlv;
  TLV_init_encode(&send_tlv, DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8013dc6:	683b      	ldr	r3, [r7, #0]
 8013dc8:	2280      	movs	r2, #128	; 0x80
 8013dca:	0052      	lsls	r2, r2, #1
 8013dcc:	240c      	movs	r4, #12
 8013dce:	1938      	adds	r0, r7, r4
 8013dd0:	210b      	movs	r1, #11
 8013dd2:	f7fc ff20 	bl	8010c16 <TLV_init_encode>
  TLV_add(&send_tlv, RejectReason, 0, NULL);
 8013dd6:	1dbb      	adds	r3, r7, #6
 8013dd8:	7819      	ldrb	r1, [r3, #0]
 8013dda:	1938      	adds	r0, r7, r4
 8013ddc:	2300      	movs	r3, #0
 8013dde:	2200      	movs	r2, #0
 8013de0:	f7fc ff7c 	bl	8010cdc <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8013de4:	193b      	adds	r3, r7, r4
 8013de6:	0018      	movs	r0, r3
 8013de8:	f7fd f8da 	bl	8010fa0 <TLV_deinit_encode>
}
 8013dec:	46c0      	nop			; (mov r8, r8)
 8013dee:	46bd      	mov	sp, r7
 8013df0:	b007      	add	sp, #28
 8013df2:	bd90      	pop	{r4, r7, pc}

08013df4 <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 8013df4:	b5b0      	push	{r4, r5, r7, lr}
 8013df6:	b090      	sub	sp, #64	; 0x40
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6039      	str	r1, [r7, #0]
 8013dfc:	0011      	movs	r1, r2
 8013dfe:	1dfb      	adds	r3, r7, #7
 8013e00:	1c02      	adds	r2, r0, #0
 8013e02:	701a      	strb	r2, [r3, #0]
 8013e04:	1dbb      	adds	r3, r7, #6
 8013e06:	1c0a      	adds	r2, r1, #0
 8013e08:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data ToSendTLV;
  TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum +1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8013e0a:	1dfb      	adds	r3, r7, #7
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	015b      	lsls	r3, r3, #5
 8013e12:	b25b      	sxtb	r3, r3
 8013e14:	220f      	movs	r2, #15
 8013e16:	4313      	orrs	r3, r2
 8013e18:	b25b      	sxtb	r3, r3
 8013e1a:	b2d9      	uxtb	r1, r3
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	2280      	movs	r2, #128	; 0x80
 8013e20:	0052      	lsls	r2, r2, #1
 8013e22:	2030      	movs	r0, #48	; 0x30
 8013e24:	1838      	adds	r0, r7, r0
 8013e26:	f7fc fef6 	bl	8010c16 <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] = {
 8013e2a:	2008      	movs	r0, #8
 8013e2c:	183b      	adds	r3, r7, r0
 8013e2e:	4a1e      	ldr	r2, [pc, #120]	; (8013ea8 <Send_DpmRegisterReadCnf+0xb4>)
 8013e30:	ca32      	ldmia	r2!, {r1, r4, r5}
 8013e32:	c332      	stmia	r3!, {r1, r4, r5}
 8013e34:	ca32      	ldmia	r2!, {r1, r4, r5}
 8013e36:	c332      	stmia	r3!, {r1, r4, r5}
 8013e38:	ca32      	ldmia	r2!, {r1, r4, r5}
 8013e3a:	c332      	stmia	r3!, {r1, r4, r5}
 8013e3c:	8811      	ldrh	r1, [r2, #0]
 8013e3e:	8019      	strh	r1, [r3, #0]
 8013e40:	7892      	ldrb	r2, [r2, #2]
 8013e42:	709a      	strb	r2, [r3, #2]
    GUI_REG_RX_DETECT, GUI_REG_RX_BYTE_COUNT, GUI_REG_RX_BUFFER_FRAME_TYPE, GUI_REG_RX_HEADER,
    GUI_REG_RX_DATA, GUI_REG_TRANSMIT, GUI_REG_TX_BYTE_COUNT, GUI_REG_TX_HEADER, GUI_REG_TX_DATA,
    GUI_REG_VBUS_VOLTAGE, GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG, GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 8013e44:	233f      	movs	r3, #63	; 0x3f
 8013e46:	18fb      	adds	r3, r7, r3
 8013e48:	2200      	movs	r2, #0
 8013e4a:	701a      	strb	r2, [r3, #0]

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if(param != 0xFF)
 8013e4c:	1dbb      	adds	r3, r7, #6
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	2bff      	cmp	r3, #255	; 0xff
 8013e52:	d003      	beq.n	8013e5c <Send_DpmRegisterReadCnf+0x68>
  {
    *stateMachineArray = param;
 8013e54:	183b      	adds	r3, r7, r0
 8013e56:	1dba      	adds	r2, r7, #6
 8013e58:	7812      	ldrb	r2, [r2, #0]
 8013e5a:	701a      	strb	r2, [r3, #0]
  }

  do
  {
    switch(stateMachineArray[counter])
 8013e5c:	233f      	movs	r3, #63	; 0x3f
 8013e5e:	18fb      	adds	r3, r7, r3
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	2208      	movs	r2, #8
 8013e64:	18ba      	adds	r2, r7, r2
 8013e66:	5cd3      	ldrb	r3, [r2, r3]
 8013e68:	2b80      	cmp	r3, #128	; 0x80
 8013e6a:	d804      	bhi.n	8013e76 <Send_DpmRegisterReadCnf+0x82>
 8013e6c:	009a      	lsls	r2, r3, #2
 8013e6e:	4b0f      	ldr	r3, [pc, #60]	; (8013eac <Send_DpmRegisterReadCnf+0xb8>)
 8013e70:	18d3      	adds	r3, r2, r3
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	469f      	mov	pc, r3
              break;
      case GUI_REG_VENDOR_DATA :

              break;
      default :
              break;
 8013e76:	46c0      	nop			; (mov r8, r8)
    }
    counter++;
 8013e78:	213f      	movs	r1, #63	; 0x3f
 8013e7a:	187b      	adds	r3, r7, r1
 8013e7c:	781a      	ldrb	r2, [r3, #0]
 8013e7e:	187b      	adds	r3, r7, r1
 8013e80:	3201      	adds	r2, #1
 8013e82:	701a      	strb	r2, [r3, #0]
  } while(counter < GUI_REG_NUMBER_OF_REGISTERS && param != 0xFF);
 8013e84:	187b      	adds	r3, r7, r1
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	2b26      	cmp	r3, #38	; 0x26
 8013e8a:	d803      	bhi.n	8013e94 <Send_DpmRegisterReadCnf+0xa0>
 8013e8c:	1dbb      	adds	r3, r7, #6
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	2bff      	cmp	r3, #255	; 0xff
 8013e92:	d1e3      	bne.n	8013e5c <Send_DpmRegisterReadCnf+0x68>

  TLV_deinit_encode(&ToSendTLV);
 8013e94:	2330      	movs	r3, #48	; 0x30
 8013e96:	18fb      	adds	r3, r7, r3
 8013e98:	0018      	movs	r0, r3
 8013e9a:	f7fd f881 	bl	8010fa0 <TLV_deinit_encode>
}
 8013e9e:	46c0      	nop			; (mov r8, r8)
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	b010      	add	sp, #64	; 0x40
 8013ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8013ea6:	46c0      	nop			; (mov r8, r8)
 8013ea8:	08016734 	.word	0x08016734
 8013eac:	08016c5c 	.word	0x08016c5c

08013eb0 <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 8013eb0:	b5b0      	push	{r4, r5, r7, lr}
 8013eb2:	b08c      	sub	sp, #48	; 0x30
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	60b9      	str	r1, [r7, #8]
 8013eb8:	607a      	str	r2, [r7, #4]
 8013eba:	230f      	movs	r3, #15
 8013ebc:	18fb      	adds	r3, r7, r3
 8013ebe:	1c02      	adds	r2, r0, #0
 8013ec0:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data ToProcessTLV;
  TLV_init_decode(&ToProcessTLV, toProcess);
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	2428      	movs	r4, #40	; 0x28
 8013ec6:	193b      	adds	r3, r7, r4
 8013ec8:	0011      	movs	r1, r2
 8013eca:	0018      	movs	r0, r3
 8013ecc:	f7fd f87a 	bl	8010fc4 <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 8013ed0:	2320      	movs	r3, #32
 8013ed2:	18fb      	adds	r3, r7, r3
 8013ed4:	2224      	movs	r2, #36	; 0x24
 8013ed6:	18ba      	adds	r2, r7, r2
 8013ed8:	2527      	movs	r5, #39	; 0x27
 8013eda:	1979      	adds	r1, r7, r5
 8013edc:	1938      	adds	r0, r7, r4
 8013ede:	f7fd f89d 	bl	801101c <TLV_get>

  switch(registerName)
 8013ee2:	197b      	adds	r3, r7, r5
 8013ee4:	781b      	ldrb	r3, [r3, #0]
 8013ee6:	2b80      	cmp	r3, #128	; 0x80
 8013ee8:	d804      	bhi.n	8013ef4 <Send_DpmRegisterWriteCnf+0x44>
 8013eea:	009a      	lsls	r2, r3, #2
 8013eec:	4b10      	ldr	r3, [pc, #64]	; (8013f30 <Send_DpmRegisterWriteCnf+0x80>)
 8013eee:	18d3      	adds	r3, r2, r3
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	469f      	mov	pc, r3
              break;
      case GUI_REG_VENDOR_DATA :

              break;
      default :
              break;
 8013ef4:	46c0      	nop			; (mov r8, r8)
  }
  TLV_deinit_decode(&ToProcessTLV);
 8013ef6:	2328      	movs	r3, #40	; 0x28
 8013ef8:	18fb      	adds	r3, r7, r3
 8013efa:	0018      	movs	r0, r3
 8013efc:	f7fd f8e8 	bl	80110d0 <TLV_deinit_decode>

  TLV_ToSend_Data ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 8013f00:	230f      	movs	r3, #15
 8013f02:	18fb      	adds	r3, r7, r3
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	3301      	adds	r3, #1
 8013f08:	015b      	lsls	r3, r3, #5
 8013f0a:	b25b      	sxtb	r3, r3
 8013f0c:	2211      	movs	r2, #17
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	b25b      	sxtb	r3, r3
 8013f12:	b2d9      	uxtb	r1, r3
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	2414      	movs	r4, #20
 8013f18:	1938      	adds	r0, r7, r4
 8013f1a:	220c      	movs	r2, #12
 8013f1c:	f7fc fe7b 	bl	8010c16 <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 8013f20:	193b      	adds	r3, r7, r4
 8013f22:	0018      	movs	r0, r3
 8013f24:	f7fd f83c 	bl	8010fa0 <TLV_deinit_encode>
}
 8013f28:	46c0      	nop			; (mov r8, r8)
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	b00c      	add	sp, #48	; 0x30
 8013f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8013f30:	08016e60 	.word	0x08016e60

08013f34 <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 8013f34:	b5b0      	push	{r4, r5, r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6039      	str	r1, [r7, #0]
 8013f3c:	0011      	movs	r1, r2
 8013f3e:	1dfb      	adds	r3, r7, #7
 8013f40:	1c02      	adds	r2, r0, #0
 8013f42:	701a      	strb	r2, [r3, #0]
 8013f44:	1d3b      	adds	r3, r7, #4
 8013f46:	1c0a      	adds	r2, r1, #0
 8013f48:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 8013f4a:	250f      	movs	r5, #15
 8013f4c:	197b      	adds	r3, r7, r5
 8013f4e:	2210      	movs	r2, #16
 8013f50:	701a      	strb	r2, [r3, #0]

  if (NULL != pCB_FreeText)
 8013f52:	4b0b      	ldr	r3, [pc, #44]	; (8013f80 <Manage_FreeText+0x4c>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d00b      	beq.n	8013f72 <Manage_FreeText+0x3e>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 8013f5a:	4b09      	ldr	r3, [pc, #36]	; (8013f80 <Manage_FreeText+0x4c>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	1d3a      	adds	r2, r7, #4
 8013f60:	8814      	ldrh	r4, [r2, #0]
 8013f62:	6839      	ldr	r1, [r7, #0]
 8013f64:	1dfa      	adds	r2, r7, #7
 8013f66:	7810      	ldrb	r0, [r2, #0]
 8013f68:	0022      	movs	r2, r4
 8013f6a:	4798      	blx	r3
    _status = USBPD_OK;
 8013f6c:	197b      	adds	r3, r7, r5
 8013f6e:	2200      	movs	r2, #0
 8013f70:	701a      	strb	r2, [r3, #0]
  }

  return _status;
 8013f72:	230f      	movs	r3, #15
 8013f74:	18fb      	adds	r3, r7, r3
 8013f76:	781b      	ldrb	r3, [r3, #0]
}
 8013f78:	0018      	movs	r0, r3
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	b004      	add	sp, #16
 8013f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8013f80:	2000172c 	.word	0x2000172c

08013f84 <UpdateSNKPowerPort0>:
/**
  * @brief  Function to update SNK PDO and power user settings on Port0
  * @retval None
  */
static void UpdateSNKPowerPort0(void)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b088      	sub	sp, #32
 8013f88:	af00      	add	r7, sp, #0
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	61fb      	str	r3, [r7, #28]
  uint16_t _voltage = 0, _current = 0, _power = 0;
 8013f8e:	230e      	movs	r3, #14
 8013f90:	18fb      	adds	r3, r7, r3
 8013f92:	2200      	movs	r2, #0
 8013f94:	801a      	strh	r2, [r3, #0]
 8013f96:	230c      	movs	r3, #12
 8013f98:	18fb      	adds	r3, r7, r3
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	801a      	strh	r2, [r3, #0]
 8013f9e:	230a      	movs	r3, #10
 8013fa0:	18fb      	adds	r3, r7, r3
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	801a      	strh	r2, [r3, #0]
  uint16_t _min_voltage = 0xFFFF, _max_voltage = 0, _max_current = 0;
 8013fa6:	231a      	movs	r3, #26
 8013fa8:	18fb      	adds	r3, r7, r3
 8013faa:	2201      	movs	r2, #1
 8013fac:	4252      	negs	r2, r2
 8013fae:	801a      	strh	r2, [r3, #0]
 8013fb0:	2318      	movs	r3, #24
 8013fb2:	18fb      	adds	r3, r7, r3
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	801a      	strh	r2, [r3, #0]
 8013fb8:	2316      	movs	r3, #22
 8013fba:	18fb      	adds	r3, r7, r3
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	801a      	strh	r2, [r3, #0]

  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	613b      	str	r3, [r7, #16]
 8013fc4:	e0de      	b.n	8014184 <UpdateSNKPowerPort0+0x200>
  {
    pdo.d32 = PORT0_PDO_ListSNK[_index];
 8013fc6:	4b84      	ldr	r3, [pc, #528]	; (80141d8 <UpdateSNKPowerPort0+0x254>)
 8013fc8:	693a      	ldr	r2, [r7, #16]
 8013fca:	0092      	lsls	r2, r2, #2
 8013fcc:	58d3      	ldr	r3, [r2, r3]
 8013fce:	607b      	str	r3, [r7, #4]
    switch (pdo.GenericPDO.PowerObject)
 8013fd0:	1dfb      	adds	r3, r7, #7
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	061b      	lsls	r3, r3, #24
 8013fd6:	0f9b      	lsrs	r3, r3, #30
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	2b02      	cmp	r3, #2
 8013fdc:	d100      	bne.n	8013fe0 <UpdateSNKPowerPort0+0x5c>
 8013fde:	e082      	b.n	80140e6 <UpdateSNKPowerPort0+0x162>
 8013fe0:	dd00      	ble.n	8013fe4 <UpdateSNKPowerPort0+0x60>
 8013fe2:	e0c5      	b.n	8014170 <UpdateSNKPowerPort0+0x1ec>
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d002      	beq.n	8013fee <UpdateSNKPowerPort0+0x6a>
 8013fe8:	2b01      	cmp	r3, #1
 8013fea:	d03b      	beq.n	8014064 <UpdateSNKPowerPort0+0xe0>
        _current = GUI_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
        break;
#endif /*_USBPD_REV30_SUPPORT && PPS*/
      default:
        break;
 8013fec:	e0c0      	b.n	8014170 <UpdateSNKPowerPort0+0x1ec>
        _voltage = GUI_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	031b      	lsls	r3, r3, #12
 8013ff2:	0d9b      	lsrs	r3, r3, #22
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	0019      	movs	r1, r3
 8013ff8:	200e      	movs	r0, #14
 8013ffa:	183b      	adds	r3, r7, r0
 8013ffc:	2232      	movs	r2, #50	; 0x32
 8013ffe:	434a      	muls	r2, r1
 8014000:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 8014002:	0001      	movs	r1, r0
 8014004:	187a      	adds	r2, r7, r1
 8014006:	201a      	movs	r0, #26
 8014008:	183b      	adds	r3, r7, r0
 801400a:	8812      	ldrh	r2, [r2, #0]
 801400c:	881b      	ldrh	r3, [r3, #0]
 801400e:	429a      	cmp	r2, r3
 8014010:	d203      	bcs.n	801401a <UpdateSNKPowerPort0+0x96>
 8014012:	183b      	adds	r3, r7, r0
 8014014:	187a      	adds	r2, r7, r1
 8014016:	8812      	ldrh	r2, [r2, #0]
 8014018:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 801401a:	210e      	movs	r1, #14
 801401c:	187a      	adds	r2, r7, r1
 801401e:	2018      	movs	r0, #24
 8014020:	183b      	adds	r3, r7, r0
 8014022:	8812      	ldrh	r2, [r2, #0]
 8014024:	881b      	ldrh	r3, [r3, #0]
 8014026:	429a      	cmp	r2, r3
 8014028:	d903      	bls.n	8014032 <UpdateSNKPowerPort0+0xae>
 801402a:	183b      	adds	r3, r7, r0
 801402c:	187a      	adds	r2, r7, r1
 801402e:	8812      	ldrh	r2, [r2, #0]
 8014030:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 8014032:	1d3b      	adds	r3, r7, #4
 8014034:	881b      	ldrh	r3, [r3, #0]
 8014036:	059b      	lsls	r3, r3, #22
 8014038:	0d9b      	lsrs	r3, r3, #22
 801403a:	b29b      	uxth	r3, r3
 801403c:	200c      	movs	r0, #12
 801403e:	183a      	adds	r2, r7, r0
 8014040:	1c19      	adds	r1, r3, #0
 8014042:	0089      	lsls	r1, r1, #2
 8014044:	18cb      	adds	r3, r1, r3
 8014046:	18db      	adds	r3, r3, r3
 8014048:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 801404a:	183a      	adds	r2, r7, r0
 801404c:	2116      	movs	r1, #22
 801404e:	187b      	adds	r3, r7, r1
 8014050:	8812      	ldrh	r2, [r2, #0]
 8014052:	881b      	ldrh	r3, [r3, #0]
 8014054:	429a      	cmp	r2, r3
 8014056:	d800      	bhi.n	801405a <UpdateSNKPowerPort0+0xd6>
 8014058:	e08c      	b.n	8014174 <UpdateSNKPowerPort0+0x1f0>
 801405a:	187b      	adds	r3, r7, r1
 801405c:	183a      	adds	r2, r7, r0
 801405e:	8812      	ldrh	r2, [r2, #0]
 8014060:	801a      	strh	r2, [r3, #0]
        break;
 8014062:	e087      	b.n	8014174 <UpdateSNKPowerPort0+0x1f0>
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	031b      	lsls	r3, r3, #12
 8014068:	0d9b      	lsrs	r3, r3, #22
 801406a:	b29b      	uxth	r3, r3
 801406c:	0019      	movs	r1, r3
 801406e:	200e      	movs	r0, #14
 8014070:	183b      	adds	r3, r7, r0
 8014072:	2232      	movs	r2, #50	; 0x32
 8014074:	434a      	muls	r2, r1
 8014076:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 8014078:	0001      	movs	r1, r0
 801407a:	187a      	adds	r2, r7, r1
 801407c:	201a      	movs	r0, #26
 801407e:	183b      	adds	r3, r7, r0
 8014080:	8812      	ldrh	r2, [r2, #0]
 8014082:	881b      	ldrh	r3, [r3, #0]
 8014084:	429a      	cmp	r2, r3
 8014086:	d203      	bcs.n	8014090 <UpdateSNKPowerPort0+0x10c>
 8014088:	183b      	adds	r3, r7, r0
 801408a:	187a      	adds	r2, r7, r1
 801408c:	8812      	ldrh	r2, [r2, #0]
 801408e:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 8014090:	1dbb      	adds	r3, r7, #6
 8014092:	881b      	ldrh	r3, [r3, #0]
 8014094:	049b      	lsls	r3, r3, #18
 8014096:	0d9b      	lsrs	r3, r3, #22
 8014098:	b29b      	uxth	r3, r3
 801409a:	0019      	movs	r1, r3
 801409c:	200e      	movs	r0, #14
 801409e:	183b      	adds	r3, r7, r0
 80140a0:	2232      	movs	r2, #50	; 0x32
 80140a2:	434a      	muls	r2, r1
 80140a4:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 80140a6:	0001      	movs	r1, r0
 80140a8:	187a      	adds	r2, r7, r1
 80140aa:	2018      	movs	r0, #24
 80140ac:	183b      	adds	r3, r7, r0
 80140ae:	8812      	ldrh	r2, [r2, #0]
 80140b0:	881b      	ldrh	r3, [r3, #0]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d903      	bls.n	80140be <UpdateSNKPowerPort0+0x13a>
 80140b6:	183b      	adds	r3, r7, r0
 80140b8:	187a      	adds	r2, r7, r1
 80140ba:	8812      	ldrh	r2, [r2, #0]
 80140bc:	801a      	strh	r2, [r3, #0]
        _power = GUI_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 80140be:	1d3b      	adds	r3, r7, #4
 80140c0:	881b      	ldrh	r3, [r3, #0]
 80140c2:	059b      	lsls	r3, r3, #22
 80140c4:	0d9b      	lsrs	r3, r3, #22
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	0019      	movs	r1, r3
 80140ca:	200a      	movs	r0, #10
 80140cc:	183b      	adds	r3, r7, r0
 80140ce:	22fa      	movs	r2, #250	; 0xfa
 80140d0:	434a      	muls	r2, r1
 80140d2:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_POWER_MAX(_power, _max_power);
 80140d4:	183b      	adds	r3, r7, r0
 80140d6:	881b      	ldrh	r3, [r3, #0]
 80140d8:	69fa      	ldr	r2, [r7, #28]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d24c      	bcs.n	8014178 <UpdateSNKPowerPort0+0x1f4>
 80140de:	183b      	adds	r3, r7, r0
 80140e0:	881b      	ldrh	r3, [r3, #0]
 80140e2:	61fb      	str	r3, [r7, #28]
        break;
 80140e4:	e048      	b.n	8014178 <UpdateSNKPowerPort0+0x1f4>
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	031b      	lsls	r3, r3, #12
 80140ea:	0d9b      	lsrs	r3, r3, #22
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	0019      	movs	r1, r3
 80140f0:	200e      	movs	r0, #14
 80140f2:	183b      	adds	r3, r7, r0
 80140f4:	2232      	movs	r2, #50	; 0x32
 80140f6:	434a      	muls	r2, r1
 80140f8:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80140fa:	0001      	movs	r1, r0
 80140fc:	187a      	adds	r2, r7, r1
 80140fe:	201a      	movs	r0, #26
 8014100:	183b      	adds	r3, r7, r0
 8014102:	8812      	ldrh	r2, [r2, #0]
 8014104:	881b      	ldrh	r3, [r3, #0]
 8014106:	429a      	cmp	r2, r3
 8014108:	d203      	bcs.n	8014112 <UpdateSNKPowerPort0+0x18e>
 801410a:	183b      	adds	r3, r7, r0
 801410c:	187a      	adds	r2, r7, r1
 801410e:	8812      	ldrh	r2, [r2, #0]
 8014110:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 8014112:	1dbb      	adds	r3, r7, #6
 8014114:	881b      	ldrh	r3, [r3, #0]
 8014116:	049b      	lsls	r3, r3, #18
 8014118:	0d9b      	lsrs	r3, r3, #22
 801411a:	b29b      	uxth	r3, r3
 801411c:	0019      	movs	r1, r3
 801411e:	200e      	movs	r0, #14
 8014120:	183b      	adds	r3, r7, r0
 8014122:	2232      	movs	r2, #50	; 0x32
 8014124:	434a      	muls	r2, r1
 8014126:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 8014128:	0001      	movs	r1, r0
 801412a:	187a      	adds	r2, r7, r1
 801412c:	2018      	movs	r0, #24
 801412e:	183b      	adds	r3, r7, r0
 8014130:	8812      	ldrh	r2, [r2, #0]
 8014132:	881b      	ldrh	r3, [r3, #0]
 8014134:	429a      	cmp	r2, r3
 8014136:	d903      	bls.n	8014140 <UpdateSNKPowerPort0+0x1bc>
 8014138:	183b      	adds	r3, r7, r0
 801413a:	187a      	adds	r2, r7, r1
 801413c:	8812      	ldrh	r2, [r2, #0]
 801413e:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 8014140:	1d3b      	adds	r3, r7, #4
 8014142:	881b      	ldrh	r3, [r3, #0]
 8014144:	059b      	lsls	r3, r3, #22
 8014146:	0d9b      	lsrs	r3, r3, #22
 8014148:	b29b      	uxth	r3, r3
 801414a:	200c      	movs	r0, #12
 801414c:	183a      	adds	r2, r7, r0
 801414e:	1c19      	adds	r1, r3, #0
 8014150:	0089      	lsls	r1, r1, #2
 8014152:	18cb      	adds	r3, r1, r3
 8014154:	18db      	adds	r3, r3, r3
 8014156:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 8014158:	183a      	adds	r2, r7, r0
 801415a:	2116      	movs	r1, #22
 801415c:	187b      	adds	r3, r7, r1
 801415e:	8812      	ldrh	r2, [r2, #0]
 8014160:	881b      	ldrh	r3, [r3, #0]
 8014162:	429a      	cmp	r2, r3
 8014164:	d90a      	bls.n	801417c <UpdateSNKPowerPort0+0x1f8>
 8014166:	187b      	adds	r3, r7, r1
 8014168:	183a      	adds	r2, r7, r0
 801416a:	8812      	ldrh	r2, [r2, #0]
 801416c:	801a      	strh	r2, [r3, #0]
        break;
 801416e:	e005      	b.n	801417c <UpdateSNKPowerPort0+0x1f8>
        break;
 8014170:	46c0      	nop			; (mov r8, r8)
 8014172:	e004      	b.n	801417e <UpdateSNKPowerPort0+0x1fa>
        break;
 8014174:	46c0      	nop			; (mov r8, r8)
 8014176:	e002      	b.n	801417e <UpdateSNKPowerPort0+0x1fa>
        break;
 8014178:	46c0      	nop			; (mov r8, r8)
 801417a:	e000      	b.n	801417e <UpdateSNKPowerPort0+0x1fa>
        break;
 801417c:	46c0      	nop			; (mov r8, r8)
  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 801417e:	693b      	ldr	r3, [r7, #16]
 8014180:	3301      	adds	r3, #1
 8014182:	613b      	str	r3, [r7, #16]
 8014184:	4b15      	ldr	r3, [pc, #84]	; (80141dc <UpdateSNKPowerPort0+0x258>)
 8014186:	781b      	ldrb	r3, [r3, #0]
 8014188:	001a      	movs	r2, r3
 801418a:	693b      	ldr	r3, [r7, #16]
 801418c:	4293      	cmp	r3, r2
 801418e:	d200      	bcs.n	8014192 <UpdateSNKPowerPort0+0x20e>
 8014190:	e719      	b.n	8013fc6 <UpdateSNKPowerPort0+0x42>
    }
  }

  GUI_CHECK_VOLTAGE_MIN(_min_voltage, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
 8014192:	231a      	movs	r3, #26
 8014194:	18fb      	adds	r3, r7, r3
 8014196:	881a      	ldrh	r2, [r3, #0]
 8014198:	4b11      	ldr	r3, [pc, #68]	; (80141e0 <UpdateSNKPowerPort0+0x25c>)
 801419a:	611a      	str	r2, [r3, #16]
  GUI_CHECK_VOLTAGE_MAX(_max_voltage, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
 801419c:	2118      	movs	r1, #24
 801419e:	187b      	adds	r3, r7, r1
 80141a0:	881a      	ldrh	r2, [r3, #0]
 80141a2:	4b0f      	ldr	r3, [pc, #60]	; (80141e0 <UpdateSNKPowerPort0+0x25c>)
 80141a4:	60da      	str	r2, [r3, #12]
  GUI_CHECK_CURRENT_MAX(_max_current, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
 80141a6:	2016      	movs	r0, #22
 80141a8:	183b      	adds	r3, r7, r0
 80141aa:	881a      	ldrh	r2, [r3, #0]
 80141ac:	4b0c      	ldr	r3, [pc, #48]	; (80141e0 <UpdateSNKPowerPort0+0x25c>)
 80141ae:	605a      	str	r2, [r3, #4]
  _max_power = (_max_voltage * _max_current) / 1000;
 80141b0:	187b      	adds	r3, r7, r1
 80141b2:	881b      	ldrh	r3, [r3, #0]
 80141b4:	183a      	adds	r2, r7, r0
 80141b6:	8812      	ldrh	r2, [r2, #0]
 80141b8:	4353      	muls	r3, r2
 80141ba:	22fa      	movs	r2, #250	; 0xfa
 80141bc:	0091      	lsls	r1, r2, #2
 80141be:	0018      	movs	r0, r3
 80141c0:	f7f2 f852 	bl	8006268 <__divsi3>
 80141c4:	0003      	movs	r3, r0
 80141c6:	61fb      	str	r3, [r7, #28]
  GUI_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 80141c8:	4b05      	ldr	r3, [pc, #20]	; (80141e0 <UpdateSNKPowerPort0+0x25c>)
 80141ca:	69fa      	ldr	r2, [r7, #28]
 80141cc:	619a      	str	r2, [r3, #24]
}
 80141ce:	46c0      	nop			; (mov r8, r8)
 80141d0:	46bd      	mov	sp, r7
 80141d2:	b008      	add	sp, #32
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	46c0      	nop			; (mov r8, r8)
 80141d8:	200000a0 	.word	0x200000a0
 80141dc:	2000009c 	.word	0x2000009c
 80141e0:	20000028 	.word	0x20000028

080141e4 <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef));
 80141e8:	4a06      	ldr	r2, [pc, #24]	; (8014204 <TRACER_EMB_Init+0x20>)
 80141ea:	4b07      	ldr	r3, [pc, #28]	; (8014208 <TRACER_EMB_Init+0x24>)
 80141ec:	2100      	movs	r1, #0
 80141ee:	0018      	movs	r0, r3
 80141f0:	f001 f805 	bl	80151fe <memset>
  
  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 80141f4:	f000 fdac 	bl	8014d50 <HW_TRACER_EMB_Init>
  
  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 80141f8:	f000 f9c8 	bl	801458c <TRACER_EMB_LowPowerInit>
}
 80141fc:	46c0      	nop			; (mov r8, r8)
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	46c0      	nop			; (mov r8, r8)
 8014204:	0000041c 	.word	0x0000041c
 8014208:	20001738 	.word	0x20001738

0801420c <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b086      	sub	sp, #24
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 801421a:	f000 f8c5 	bl	80143a8 <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	0018      	movs	r0, r3
 8014222:	f000 f959 	bl	80144d8 <TRACER_EMB_AllocateBufer>
 8014226:	0003      	movs	r3, r0
 8014228:	617b      	str	r3, [r7, #20]

  /* if allocation is ok, write data into the bufffer */
  if (_writepos  != -1)
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	3301      	adds	r3, #1
 801422e:	d019      	beq.n	8014264 <TRACER_EMB_Add+0x58>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 8014230:	2300      	movs	r3, #0
 8014232:	613b      	str	r3, [r7, #16]
 8014234:	e012      	b.n	801425c <TRACER_EMB_Add+0x50>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 8014236:	68fa      	ldr	r2, [r7, #12]
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	18d2      	adds	r2, r2, r3
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	059b      	lsls	r3, r3, #22
 8014240:	0d9b      	lsrs	r3, r3, #22
 8014242:	7811      	ldrb	r1, [r2, #0]
 8014244:	4a0b      	ldr	r2, [pc, #44]	; (8014274 <TRACER_EMB_Add+0x68>)
 8014246:	18d3      	adds	r3, r2, r3
 8014248:	1c0a      	adds	r2, r1, #0
 801424a:	76da      	strb	r2, [r3, #27]
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	3301      	adds	r3, #1
 8014250:	059b      	lsls	r3, r3, #22
 8014252:	0d9b      	lsrs	r3, r3, #22
 8014254:	617b      	str	r3, [r7, #20]
    for (index = 0u; index < Size; index++)
 8014256:	693b      	ldr	r3, [r7, #16]
 8014258:	3301      	adds	r3, #1
 801425a:	613b      	str	r3, [r7, #16]
 801425c:	693a      	ldr	r2, [r7, #16]
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	429a      	cmp	r2, r3
 8014262:	d3e8      	bcc.n	8014236 <TRACER_EMB_Add+0x2a>
    }
  }
  TRACER_EMB_UnLock();
 8014264:	f000 f8be 	bl	80143e4 <TRACER_EMB_UnLock>
  
  /* Tx processing */
  TRACER_EMB_SendData();
 8014268:	f000 f8da 	bl	8014420 <TRACER_EMB_SendData>
}
 801426c:	46c0      	nop			; (mov r8, r8)
 801426e:	46bd      	mov	sp, r7
 8014270:	b006      	add	sp, #24
 8014272:	bd80      	pop	{r7, pc}
 8014274:	20001738 	.word	0x20001738

08014278 <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 801427c:	f000 fe56 	bl	8014f2c <HW_TRACER_EMB_IRQHandlerDMA>
}
 8014280:	46c0      	nop			; (mov r8, r8)
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}

08014286 <TRACER_EMB_IRQHandlerUSART>:
#endif

void TRACER_EMB_IRQHandlerUSART(void)
{
 8014286:	b580      	push	{r7, lr}
 8014288:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 801428a:	f000 fe67 	bl	8014f5c <HW_TRACER_EMB_IRQHandlerUSART>
}
 801428e:	46c0      	nop			; (mov r8, r8)
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	0002      	movs	r2, r0
 801429c:	1dbb      	adds	r3, r7, #6
 801429e:	801a      	strh	r2, [r3, #0]
 80142a0:	1d7b      	adds	r3, r7, #5
 80142a2:	1c0a      	adds	r2, r1, #0
 80142a4:	701a      	strb	r2, [r3, #0]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 80142a6:	1dbb      	adds	r3, r7, #6
 80142a8:	881b      	ldrh	r3, [r3, #0]
 80142aa:	059b      	lsls	r3, r3, #22
 80142ac:	0d9b      	lsrs	r3, r3, #22
 80142ae:	4a04      	ldr	r2, [pc, #16]	; (80142c0 <TRACER_EMB_WriteData+0x2c>)
 80142b0:	18d3      	adds	r3, r2, r3
 80142b2:	1d7a      	adds	r2, r7, #5
 80142b4:	7812      	ldrb	r2, [r2, #0]
 80142b6:	76da      	strb	r2, [r3, #27]
}
 80142b8:	46c0      	nop			; (mov r8, r8)
 80142ba:	46bd      	mov	sp, r7
 80142bc:	b002      	add	sp, #8
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	20001738 	.word	0x20001738

080142c4 <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	0018      	movs	r0, r3
 80142d0:	f000 fe00 	bl	8014ed4 <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 80142d4:	f000 fe10 	bl	8014ef8 <HW_TRACER_EMB_StartRX>
}
 80142d8:	46c0      	nop			; (mov r8, r8)
 80142da:	46bd      	mov	sp, r7
 80142dc:	b002      	add	sp, #8
 80142de:	bd80      	pop	{r7, pc}

080142e0 <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	000a      	movs	r2, r1
 80142ea:	1cfb      	adds	r3, r7, #3
 80142ec:	701a      	strb	r2, [r3, #0]
  if(Size != 0)
 80142ee:	1cfb      	adds	r3, r7, #3
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d008      	beq.n	8014308 <TRACER_EMB_EnableOverFlow+0x28>
  {
    TracerContext.OverFlow_Data = Data;
 80142f6:	4b07      	ldr	r3, [pc, #28]	; (8014314 <TRACER_EMB_EnableOverFlow+0x34>)
 80142f8:	687a      	ldr	r2, [r7, #4]
 80142fa:	615a      	str	r2, [r3, #20]
    TracerContext.OverFlow_Size = Size;
 80142fc:	4b05      	ldr	r3, [pc, #20]	; (8014314 <TRACER_EMB_EnableOverFlow+0x34>)
 80142fe:	1cfa      	adds	r2, r7, #3
 8014300:	7812      	ldrb	r2, [r2, #0]
 8014302:	761a      	strb	r2, [r3, #24]
    return 0;
 8014304:	2300      	movs	r3, #0
 8014306:	e001      	b.n	801430c <TRACER_EMB_EnableOverFlow+0x2c>
  }
  return -1;
 8014308:	2301      	movs	r3, #1
 801430a:	425b      	negs	r3, r3
}
 801430c:	0018      	movs	r0, r3
 801430e:	46bd      	mov	sp, r7
 8014310:	b002      	add	sp, #8
 8014312:	bd80      	pop	{r7, pc}
 8014314:	20001738 	.word	0x20001738

08014318 <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfert.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801431e:	f3ef 8310 	mrs	r3, PRIMASK
 8014322:	60bb      	str	r3, [r7, #8]
  return(result);
 8014324:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 8014326:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8014328:	b672      	cpsid	i
}
 801432a:	46c0      	nop			; (mov r8, r8)
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 801432c:	4b1d      	ldr	r3, [pc, #116]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	4b1c      	ldr	r3, [pc, #112]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8014332:	689b      	ldr	r3, [r3, #8]
 8014334:	18d3      	adds	r3, r2, r3
 8014336:	059b      	lsls	r3, r3, #22
 8014338:	0d9a      	lsrs	r2, r3, #22
 801433a:	4b1a      	ldr	r3, [pc, #104]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 801433c:	601a      	str	r2, [r3, #0]
  
  if((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 801433e:	4b19      	ldr	r3, [pc, #100]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8014340:	695b      	ldr	r3, [r3, #20]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d019      	beq.n	801437a <TRACER_EMB_CALLBACK_TX+0x62>
 8014346:	4b17      	ldr	r3, [pc, #92]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8014348:	7e9b      	ldrb	r3, [r3, #26]
 801434a:	2b01      	cmp	r3, #1
 801434c:	d115      	bne.n	801437a <TRACER_EMB_CALLBACK_TX+0x62>
     && (TracerContext.discontinue == 0))
 801434e:	4b15      	ldr	r3, [pc, #84]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8014350:	7e5b      	ldrb	r3, [r3, #25]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d111      	bne.n	801437a <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 8014356:	4b13      	ldr	r3, [pc, #76]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8014358:	2202      	movs	r2, #2
 801435a:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData((uint8_t *)TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 801435c:	4b11      	ldr	r3, [pc, #68]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 801435e:	695a      	ldr	r2, [r3, #20]
 8014360:	4b10      	ldr	r3, [pc, #64]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8014362:	7e1b      	ldrb	r3, [r3, #24]
 8014364:	0019      	movs	r1, r3
 8014366:	0010      	movs	r0, r2
 8014368:	f000 fec6 	bl	80150f8 <HW_TRACER_EMB_SendData>
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f383 8810 	msr	PRIMASK, r3
}
 8014376:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
 8014378:	e00f      	b.n	801439a <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 801437a:	4b0a      	ldr	r3, [pc, #40]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 801437c:	68db      	ldr	r3, [r3, #12]
 801437e:	1e5a      	subs	r2, r3, #1
 8014380:	4b08      	ldr	r3, [pc, #32]	; (80143a4 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8014382:	60da      	str	r2, [r3, #12]
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	f383 8810 	msr	PRIMASK, r3
}
 801438e:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 8014390:	f000 f828 	bl	80143e4 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 8014394:	f000 f844 	bl	8014420 <TRACER_EMB_SendData>
  }
}
 8014398:	46c0      	nop			; (mov r8, r8)
 801439a:	46c0      	nop			; (mov r8, r8)
 801439c:	46bd      	mov	sp, r7
 801439e:	b004      	add	sp, #16
 80143a0:	bd80      	pop	{r7, pc}
 80143a2:	46c0      	nop			; (mov r8, r8)
 80143a4:	20001738 	.word	0x20001738

080143a8 <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80143ae:	f3ef 8310 	mrs	r3, PRIMASK
 80143b2:	607b      	str	r3, [r7, #4]
  return(result);
 80143b4:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 80143b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80143b8:	b672      	cpsid	i
}
 80143ba:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter++;
 80143bc:	4b08      	ldr	r3, [pc, #32]	; (80143e0 <TRACER_EMB_Lock+0x38>)
 80143be:	7c1b      	ldrb	r3, [r3, #16]
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	3301      	adds	r3, #1
 80143c4:	b2da      	uxtb	r2, r3
 80143c6:	4b06      	ldr	r3, [pc, #24]	; (80143e0 <TRACER_EMB_Lock+0x38>)
 80143c8:	741a      	strb	r2, [r3, #16]
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	f383 8810 	msr	PRIMASK, r3
}
 80143d4:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 80143d6:	46c0      	nop			; (mov r8, r8)
 80143d8:	46bd      	mov	sp, r7
 80143da:	b004      	add	sp, #16
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	46c0      	nop			; (mov r8, r8)
 80143e0:	20001738 	.word	0x20001738

080143e4 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b084      	sub	sp, #16
 80143e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80143ea:	f3ef 8310 	mrs	r3, PRIMASK
 80143ee:	607b      	str	r3, [r7, #4]
  return(result);
 80143f0:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 80143f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80143f4:	b672      	cpsid	i
}
 80143f6:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter--;
 80143f8:	4b08      	ldr	r3, [pc, #32]	; (801441c <TRACER_EMB_UnLock+0x38>)
 80143fa:	7c1b      	ldrb	r3, [r3, #16]
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	3b01      	subs	r3, #1
 8014400:	b2da      	uxtb	r2, r3
 8014402:	4b06      	ldr	r3, [pc, #24]	; (801441c <TRACER_EMB_UnLock+0x38>)
 8014404:	741a      	strb	r2, [r3, #16]
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	f383 8810 	msr	PRIMASK, r3
}
 8014410:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8014412:	46c0      	nop			; (mov r8, r8)
 8014414:	46bd      	mov	sp, r7
 8014416:	b004      	add	sp, #16
 8014418:	bd80      	pop	{r7, pc}
 801441a:	46c0      	nop			; (mov r8, r8)
 801441c:	20001738 	.word	0x20001738

08014420 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b086      	sub	sp, #24
 8014424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014426:	f3ef 8310 	mrs	r3, PRIMASK
 801442a:	60bb      	str	r3, [r7, #8]
  return(result);
 801442c:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;
  
  TRACER_ENTER_CRITICAL_SECTION();
 801442e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014430:	b672      	cpsid	i
}
 8014432:	46c0      	nop			; (mov r8, r8)
  
  if (0u == TracerContext.Counter)
 8014434:	4b27      	ldr	r3, [pc, #156]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 8014436:	7c1b      	ldrb	r3, [r3, #16]
 8014438:	b2db      	uxtb	r3, r3
 801443a:	2b00      	cmp	r3, #0
 801443c:	d134      	bne.n	80144a8 <TRACER_EMB_SendData+0x88>
  {
    _begin = TracerContext.PtrTx_Read;
 801443e:	4b25      	ldr	r3, [pc, #148]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 8014444:	4b23      	ldr	r3, [pc, #140]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	60fb      	str	r3, [r7, #12]
    
    if (_begin != _end)
 801444a:	693a      	ldr	r2, [r7, #16]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	429a      	cmp	r2, r3
 8014450:	d02a      	beq.n	80144a8 <TRACER_EMB_SendData+0x88>
    {
      TRACER_EMB_Lock();
 8014452:	f7ff ffa9 	bl	80143a8 <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 8014456:	68fa      	ldr	r2, [r7, #12]
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	429a      	cmp	r2, r3
 801445c:	d908      	bls.n	8014470 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	1ad2      	subs	r2, r2, r3
 8014464:	4b1b      	ldr	r3, [pc, #108]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 8014466:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 0;
 8014468:	4b1a      	ldr	r3, [pc, #104]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 801446a:	2200      	movs	r2, #0
 801446c:	765a      	strb	r2, [r3, #25]
 801446e:	e008      	b.n	8014482 <TRACER_EMB_SendData+0x62>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 8014470:	693b      	ldr	r3, [r7, #16]
 8014472:	2280      	movs	r2, #128	; 0x80
 8014474:	00d2      	lsls	r2, r2, #3
 8014476:	1ad2      	subs	r2, r2, r3
 8014478:	4b16      	ldr	r3, [pc, #88]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 801447a:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 1;
 801447c:	4b15      	ldr	r3, [pc, #84]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 801447e:	2201      	movs	r2, #1
 8014480:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 8014482:	f000 f888 	bl	8014596 <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 8014486:	4b13      	ldr	r3, [pc, #76]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 8014488:	68db      	ldr	r3, [r3, #12]
 801448a:	1c5a      	adds	r2, r3, #1
 801448c:	4b11      	ldr	r3, [pc, #68]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 801448e:	60da      	str	r2, [r3, #12]
      HW_TRACER_EMB_SendData(&(TracerContext.PtrDataTx[_begin]), TracerContext.SizeSent);
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	3318      	adds	r3, #24
 8014494:	001a      	movs	r2, r3
 8014496:	4b0f      	ldr	r3, [pc, #60]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 8014498:	18d3      	adds	r3, r2, r3
 801449a:	1cda      	adds	r2, r3, #3
 801449c:	4b0d      	ldr	r3, [pc, #52]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 801449e:	689b      	ldr	r3, [r3, #8]
 80144a0:	0019      	movs	r1, r3
 80144a2:	0010      	movs	r0, r2
 80144a4:	f000 fe28 	bl	80150f8 <HW_TRACER_EMB_SendData>
    }
  }
  
  /* Low power processing */
  switch(TracerContext.LowPower_Counter)
 80144a8:	4b0a      	ldr	r3, [pc, #40]	; (80144d4 <TRACER_EMB_SendData+0xb4>)
 80144aa:	68db      	ldr	r3, [r3, #12]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d004      	beq.n	80144ba <TRACER_EMB_SendData+0x9a>
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	d105      	bne.n	80144c0 <TRACER_EMB_SendData+0xa0>
  {
  case 1:
    TRACER_EMB_LowPowerSendData();
 80144b4:	f000 f86f 	bl	8014596 <TRACER_EMB_LowPowerSendData>
    break;
 80144b8:	e002      	b.n	80144c0 <TRACER_EMB_SendData+0xa0>
  case 0 :
    TRACER_EMB_LowPowerSendDataComplete();
 80144ba:	f000 f871 	bl	80145a0 <TRACER_EMB_LowPowerSendDataComplete>
    break;
 80144be:	46c0      	nop			; (mov r8, r8)
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f383 8810 	msr	PRIMASK, r3
}
 80144ca:	46c0      	nop			; (mov r8, r8)
  }
  
  TRACER_LEAVE_CRITICAL_SECTION();
}
 80144cc:	46c0      	nop			; (mov r8, r8)
 80144ce:	46bd      	mov	sp, r7
 80144d0:	b006      	add	sp, #24
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	20001738 	.word	0x20001738

080144d8 <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b088      	sub	sp, #32
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 80144e0:	2301      	movs	r3, #1
 80144e2:	425b      	negs	r3, r3
 80144e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80144e6:	f3ef 8310 	mrs	r3, PRIMASK
 80144ea:	613b      	str	r3, [r7, #16]
  return(result);
 80144ec:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 80144ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80144f0:	b672      	cpsid	i
}
 80144f2:	46c0      	nop			; (mov r8, r8)

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 80144f4:	4b24      	ldr	r3, [pc, #144]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 80144f6:	685a      	ldr	r2, [r3, #4]
 80144f8:	4b23      	ldr	r3, [pc, #140]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d103      	bne.n	8014508 <TRACER_EMB_AllocateBufer+0x30>
  {
    // need to add buffer full managment
    _freesize = TRACER_EMB_BUFFER_SIZE;
 8014500:	2380      	movs	r3, #128	; 0x80
 8014502:	00db      	lsls	r3, r3, #3
 8014504:	61fb      	str	r3, [r7, #28]
 8014506:	e016      	b.n	8014536 <TRACER_EMB_AllocateBufer+0x5e>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 8014508:	4b1f      	ldr	r3, [pc, #124]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 801450a:	685a      	ldr	r2, [r3, #4]
 801450c:	4b1e      	ldr	r3, [pc, #120]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	429a      	cmp	r2, r3
 8014512:	d90a      	bls.n	801452a <TRACER_EMB_AllocateBufer+0x52>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 8014514:	4b1c      	ldr	r3, [pc, #112]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	4b1b      	ldr	r3, [pc, #108]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	1ad3      	subs	r3, r2, r3
 801451e:	2280      	movs	r2, #128	; 0x80
 8014520:	00d2      	lsls	r2, r2, #3
 8014522:	4694      	mov	ip, r2
 8014524:	4463      	add	r3, ip
 8014526:	61fb      	str	r3, [r7, #28]
 8014528:	e005      	b.n	8014536 <TRACER_EMB_AllocateBufer+0x5e>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 801452a:	4b17      	ldr	r3, [pc, #92]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	4b16      	ldr	r3, [pc, #88]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	1ad3      	subs	r3, r2, r3
 8014534:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 8014536:	69fa      	ldr	r2, [r7, #28]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	429a      	cmp	r2, r3
 801453c:	d912      	bls.n	8014564 <TRACER_EMB_AllocateBufer+0x8c>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 801453e:	4b12      	ldr	r3, [pc, #72]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 8014540:	685b      	ldr	r3, [r3, #4]
 8014542:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 8014544:	4b10      	ldr	r3, [pc, #64]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 8014546:	685a      	ldr	r2, [r3, #4]
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	18d3      	adds	r3, r2, r3
 801454c:	059b      	lsls	r3, r3, #22
 801454e:	0d9a      	lsrs	r2, r3, #22
 8014550:	4b0d      	ldr	r3, [pc, #52]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 8014552:	605a      	str	r2, [r3, #4]
    if(TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 8014554:	4b0c      	ldr	r3, [pc, #48]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 8014556:	7e9b      	ldrb	r3, [r3, #26]
 8014558:	2b02      	cmp	r3, #2
 801455a:	d10a      	bne.n	8014572 <TRACER_EMB_AllocateBufer+0x9a>
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 801455c:	4b0a      	ldr	r3, [pc, #40]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 801455e:	2200      	movs	r2, #0
 8014560:	769a      	strb	r2, [r3, #26]
 8014562:	e006      	b.n	8014572 <TRACER_EMB_AllocateBufer+0x9a>
  }
  else
  {
    if(TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 8014564:	4b08      	ldr	r3, [pc, #32]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 8014566:	7e9b      	ldrb	r3, [r3, #26]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d102      	bne.n	8014572 <TRACER_EMB_AllocateBufer+0x9a>
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 801456c:	4b06      	ldr	r3, [pc, #24]	; (8014588 <TRACER_EMB_AllocateBufer+0xb0>)
 801456e:	2201      	movs	r2, #1
 8014570:	769a      	strb	r2, [r3, #26]
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	f383 8810 	msr	PRIMASK, r3
}
 801457c:	46c0      	nop			; (mov r8, r8)
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 801457e:	69bb      	ldr	r3, [r7, #24]
}
 8014580:	0018      	movs	r0, r3
 8014582:	46bd      	mov	sp, r7
 8014584:	b008      	add	sp, #32
 8014586:	bd80      	pop	{r7, pc}
 8014588:	20001738 	.word	0x20001738

0801458c <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	af00      	add	r7, sp, #0
}
 8014590:	46c0      	nop			; (mov r8, r8)
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}

08014596 <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 8014596:	b580      	push	{r7, lr}
 8014598:	af00      	add	r7, sp, #0
}
 801459a:	46c0      	nop			; (mov r8, r8)
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	af00      	add	r7, sp, #0
}
 80145a4:	46c0      	nop			; (mov r8, r8)
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
	...

080145ac <__NVIC_EnableIRQ>:
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	0002      	movs	r2, r0
 80145b4:	1dfb      	adds	r3, r7, #7
 80145b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80145b8:	1dfb      	adds	r3, r7, #7
 80145ba:	781b      	ldrb	r3, [r3, #0]
 80145bc:	2b7f      	cmp	r3, #127	; 0x7f
 80145be:	d809      	bhi.n	80145d4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80145c0:	1dfb      	adds	r3, r7, #7
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	001a      	movs	r2, r3
 80145c6:	231f      	movs	r3, #31
 80145c8:	401a      	ands	r2, r3
 80145ca:	4b04      	ldr	r3, [pc, #16]	; (80145dc <__NVIC_EnableIRQ+0x30>)
 80145cc:	2101      	movs	r1, #1
 80145ce:	4091      	lsls	r1, r2
 80145d0:	000a      	movs	r2, r1
 80145d2:	601a      	str	r2, [r3, #0]
}
 80145d4:	46c0      	nop			; (mov r8, r8)
 80145d6:	46bd      	mov	sp, r7
 80145d8:	b002      	add	sp, #8
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	e000e100 	.word	0xe000e100

080145e0 <__NVIC_SetPriority>:
{
 80145e0:	b590      	push	{r4, r7, lr}
 80145e2:	b083      	sub	sp, #12
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	0002      	movs	r2, r0
 80145e8:	6039      	str	r1, [r7, #0]
 80145ea:	1dfb      	adds	r3, r7, #7
 80145ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80145ee:	1dfb      	adds	r3, r7, #7
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	2b7f      	cmp	r3, #127	; 0x7f
 80145f4:	d828      	bhi.n	8014648 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80145f6:	4a2f      	ldr	r2, [pc, #188]	; (80146b4 <__NVIC_SetPriority+0xd4>)
 80145f8:	1dfb      	adds	r3, r7, #7
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	b25b      	sxtb	r3, r3
 80145fe:	089b      	lsrs	r3, r3, #2
 8014600:	33c0      	adds	r3, #192	; 0xc0
 8014602:	009b      	lsls	r3, r3, #2
 8014604:	589b      	ldr	r3, [r3, r2]
 8014606:	1dfa      	adds	r2, r7, #7
 8014608:	7812      	ldrb	r2, [r2, #0]
 801460a:	0011      	movs	r1, r2
 801460c:	2203      	movs	r2, #3
 801460e:	400a      	ands	r2, r1
 8014610:	00d2      	lsls	r2, r2, #3
 8014612:	21ff      	movs	r1, #255	; 0xff
 8014614:	4091      	lsls	r1, r2
 8014616:	000a      	movs	r2, r1
 8014618:	43d2      	mvns	r2, r2
 801461a:	401a      	ands	r2, r3
 801461c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	019b      	lsls	r3, r3, #6
 8014622:	22ff      	movs	r2, #255	; 0xff
 8014624:	401a      	ands	r2, r3
 8014626:	1dfb      	adds	r3, r7, #7
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	0018      	movs	r0, r3
 801462c:	2303      	movs	r3, #3
 801462e:	4003      	ands	r3, r0
 8014630:	00db      	lsls	r3, r3, #3
 8014632:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014634:	481f      	ldr	r0, [pc, #124]	; (80146b4 <__NVIC_SetPriority+0xd4>)
 8014636:	1dfb      	adds	r3, r7, #7
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	b25b      	sxtb	r3, r3
 801463c:	089b      	lsrs	r3, r3, #2
 801463e:	430a      	orrs	r2, r1
 8014640:	33c0      	adds	r3, #192	; 0xc0
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	501a      	str	r2, [r3, r0]
}
 8014646:	e031      	b.n	80146ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014648:	4a1b      	ldr	r2, [pc, #108]	; (80146b8 <__NVIC_SetPriority+0xd8>)
 801464a:	1dfb      	adds	r3, r7, #7
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	0019      	movs	r1, r3
 8014650:	230f      	movs	r3, #15
 8014652:	400b      	ands	r3, r1
 8014654:	3b08      	subs	r3, #8
 8014656:	089b      	lsrs	r3, r3, #2
 8014658:	3306      	adds	r3, #6
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	18d3      	adds	r3, r2, r3
 801465e:	3304      	adds	r3, #4
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	1dfa      	adds	r2, r7, #7
 8014664:	7812      	ldrb	r2, [r2, #0]
 8014666:	0011      	movs	r1, r2
 8014668:	2203      	movs	r2, #3
 801466a:	400a      	ands	r2, r1
 801466c:	00d2      	lsls	r2, r2, #3
 801466e:	21ff      	movs	r1, #255	; 0xff
 8014670:	4091      	lsls	r1, r2
 8014672:	000a      	movs	r2, r1
 8014674:	43d2      	mvns	r2, r2
 8014676:	401a      	ands	r2, r3
 8014678:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	019b      	lsls	r3, r3, #6
 801467e:	22ff      	movs	r2, #255	; 0xff
 8014680:	401a      	ands	r2, r3
 8014682:	1dfb      	adds	r3, r7, #7
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	0018      	movs	r0, r3
 8014688:	2303      	movs	r3, #3
 801468a:	4003      	ands	r3, r0
 801468c:	00db      	lsls	r3, r3, #3
 801468e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014690:	4809      	ldr	r0, [pc, #36]	; (80146b8 <__NVIC_SetPriority+0xd8>)
 8014692:	1dfb      	adds	r3, r7, #7
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	001c      	movs	r4, r3
 8014698:	230f      	movs	r3, #15
 801469a:	4023      	ands	r3, r4
 801469c:	3b08      	subs	r3, #8
 801469e:	089b      	lsrs	r3, r3, #2
 80146a0:	430a      	orrs	r2, r1
 80146a2:	3306      	adds	r3, #6
 80146a4:	009b      	lsls	r3, r3, #2
 80146a6:	18c3      	adds	r3, r0, r3
 80146a8:	3304      	adds	r3, #4
 80146aa:	601a      	str	r2, [r3, #0]
}
 80146ac:	46c0      	nop			; (mov r8, r8)
 80146ae:	46bd      	mov	sp, r7
 80146b0:	b003      	add	sp, #12
 80146b2:	bd90      	pop	{r4, r7, pc}
 80146b4:	e000e100 	.word	0xe000e100
 80146b8:	e000ed00 	.word	0xe000ed00

080146bc <LL_DMA_EnableChannel>:
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80146ca:	4a0b      	ldr	r2, [pc, #44]	; (80146f8 <LL_DMA_EnableChannel+0x3c>)
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	18d3      	adds	r3, r2, r3
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	001a      	movs	r2, r3
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	18d3      	adds	r3, r2, r3
 80146d8:	681a      	ldr	r2, [r3, #0]
 80146da:	4907      	ldr	r1, [pc, #28]	; (80146f8 <LL_DMA_EnableChannel+0x3c>)
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	18cb      	adds	r3, r1, r3
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	0019      	movs	r1, r3
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	18cb      	adds	r3, r1, r3
 80146e8:	2101      	movs	r1, #1
 80146ea:	430a      	orrs	r2, r1
 80146ec:	601a      	str	r2, [r3, #0]
}
 80146ee:	46c0      	nop			; (mov r8, r8)
 80146f0:	46bd      	mov	sp, r7
 80146f2:	b004      	add	sp, #16
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	46c0      	nop			; (mov r8, r8)
 80146f8:	08017064 	.word	0x08017064

080146fc <LL_DMA_DisableChannel>:
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b084      	sub	sp, #16
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 801470a:	4a0b      	ldr	r2, [pc, #44]	; (8014738 <LL_DMA_DisableChannel+0x3c>)
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	18d3      	adds	r3, r2, r3
 8014710:	781b      	ldrb	r3, [r3, #0]
 8014712:	001a      	movs	r2, r3
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	18d3      	adds	r3, r2, r3
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	4907      	ldr	r1, [pc, #28]	; (8014738 <LL_DMA_DisableChannel+0x3c>)
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	18cb      	adds	r3, r1, r3
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	0019      	movs	r1, r3
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	18cb      	adds	r3, r1, r3
 8014728:	2101      	movs	r1, #1
 801472a:	438a      	bics	r2, r1
 801472c:	601a      	str	r2, [r3, #0]
}
 801472e:	46c0      	nop			; (mov r8, r8)
 8014730:	46bd      	mov	sp, r7
 8014732:	b004      	add	sp, #16
 8014734:	bd80      	pop	{r7, pc}
 8014736:	46c0      	nop			; (mov r8, r8)
 8014738:	08017064 	.word	0x08017064

0801473c <LL_DMA_ConfigTransfer>:
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b086      	sub	sp, #24
 8014740:	af00      	add	r7, sp, #0
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 801474c:	4a0c      	ldr	r2, [pc, #48]	; (8014780 <LL_DMA_ConfigTransfer+0x44>)
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	18d3      	adds	r3, r2, r3
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	001a      	movs	r2, r3
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	18d3      	adds	r3, r2, r3
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	4a09      	ldr	r2, [pc, #36]	; (8014784 <LL_DMA_ConfigTransfer+0x48>)
 801475e:	4013      	ands	r3, r2
 8014760:	0019      	movs	r1, r3
 8014762:	4a07      	ldr	r2, [pc, #28]	; (8014780 <LL_DMA_ConfigTransfer+0x44>)
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	18d3      	adds	r3, r2, r3
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	001a      	movs	r2, r3
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	18d3      	adds	r3, r2, r3
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	430a      	orrs	r2, r1
 8014774:	601a      	str	r2, [r3, #0]
}
 8014776:	46c0      	nop			; (mov r8, r8)
 8014778:	46bd      	mov	sp, r7
 801477a:	b006      	add	sp, #24
 801477c:	bd80      	pop	{r7, pc}
 801477e:	46c0      	nop			; (mov r8, r8)
 8014780:	08017064 	.word	0x08017064
 8014784:	ffff800f 	.word	0xffff800f

08014788 <LL_DMA_GetDataTransferDirection>:
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8014796:	4a07      	ldr	r2, [pc, #28]	; (80147b4 <LL_DMA_GetDataTransferDirection+0x2c>)
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	18d3      	adds	r3, r2, r3
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	001a      	movs	r2, r3
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	18d3      	adds	r3, r2, r3
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	4a04      	ldr	r2, [pc, #16]	; (80147b8 <LL_DMA_GetDataTransferDirection+0x30>)
 80147a8:	4013      	ands	r3, r2
}
 80147aa:	0018      	movs	r0, r3
 80147ac:	46bd      	mov	sp, r7
 80147ae:	b004      	add	sp, #16
 80147b0:	bd80      	pop	{r7, pc}
 80147b2:	46c0      	nop			; (mov r8, r8)
 80147b4:	08017064 	.word	0x08017064
 80147b8:	00004010 	.word	0x00004010

080147bc <LL_DMA_SetDataLength>:
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b086      	sub	sp, #24
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80147cc:	4a0b      	ldr	r2, [pc, #44]	; (80147fc <LL_DMA_SetDataLength+0x40>)
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	18d3      	adds	r3, r2, r3
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	001a      	movs	r2, r3
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	18d3      	adds	r3, r2, r3
 80147da:	685b      	ldr	r3, [r3, #4]
 80147dc:	0c1b      	lsrs	r3, r3, #16
 80147de:	0419      	lsls	r1, r3, #16
 80147e0:	4a06      	ldr	r2, [pc, #24]	; (80147fc <LL_DMA_SetDataLength+0x40>)
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	18d3      	adds	r3, r2, r3
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	001a      	movs	r2, r3
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	18d3      	adds	r3, r2, r3
 80147ee:	687a      	ldr	r2, [r7, #4]
 80147f0:	430a      	orrs	r2, r1
 80147f2:	605a      	str	r2, [r3, #4]
}
 80147f4:	46c0      	nop			; (mov r8, r8)
 80147f6:	46bd      	mov	sp, r7
 80147f8:	b006      	add	sp, #24
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	08017064 	.word	0x08017064

08014800 <LL_DMA_ConfigAddresses>:
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b086      	sub	sp, #24
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
 801480c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8014812:	6a3b      	ldr	r3, [r7, #32]
 8014814:	2b10      	cmp	r3, #16
 8014816:	d112      	bne.n	801483e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8014818:	4a14      	ldr	r2, [pc, #80]	; (801486c <LL_DMA_ConfigAddresses+0x6c>)
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	18d3      	adds	r3, r2, r3
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	001a      	movs	r2, r3
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	18d3      	adds	r3, r2, r3
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 801482a:	4a10      	ldr	r2, [pc, #64]	; (801486c <LL_DMA_ConfigAddresses+0x6c>)
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	18d3      	adds	r3, r2, r3
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	001a      	movs	r2, r3
 8014834:	697b      	ldr	r3, [r7, #20]
 8014836:	18d3      	adds	r3, r2, r3
 8014838:	683a      	ldr	r2, [r7, #0]
 801483a:	609a      	str	r2, [r3, #8]
}
 801483c:	e011      	b.n	8014862 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 801483e:	4a0b      	ldr	r2, [pc, #44]	; (801486c <LL_DMA_ConfigAddresses+0x6c>)
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	18d3      	adds	r3, r2, r3
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	001a      	movs	r2, r3
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	18d3      	adds	r3, r2, r3
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8014850:	4a06      	ldr	r2, [pc, #24]	; (801486c <LL_DMA_ConfigAddresses+0x6c>)
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	18d3      	adds	r3, r2, r3
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	001a      	movs	r2, r3
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	18d3      	adds	r3, r2, r3
 801485e:	683a      	ldr	r2, [r7, #0]
 8014860:	60da      	str	r2, [r3, #12]
}
 8014862:	46c0      	nop			; (mov r8, r8)
 8014864:	46bd      	mov	sp, r7
 8014866:	b006      	add	sp, #24
 8014868:	bd80      	pop	{r7, pc}
 801486a:	46c0      	nop			; (mov r8, r8)
 801486c:	08017064 	.word	0x08017064

08014870 <LL_DMA_SetPeriphRequest>:
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b086      	sub	sp, #24
 8014874:	af00      	add	r7, sp, #0
 8014876:	60f8      	str	r0, [r7, #12]
 8014878:	60b9      	str	r1, [r7, #8]
 801487a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	0a9b      	lsrs	r3, r3, #10
 8014880:	4a0f      	ldr	r2, [pc, #60]	; (80148c0 <LL_DMA_SetPeriphRequest+0x50>)
 8014882:	405a      	eors	r2, r3
 8014884:	0013      	movs	r3, r2
 8014886:	00db      	lsls	r3, r3, #3
 8014888:	1a9b      	subs	r3, r3, r2
 801488a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 801488c:	68ba      	ldr	r2, [r7, #8]
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	18d3      	adds	r3, r2, r3
 8014892:	009b      	lsls	r3, r3, #2
 8014894:	4a0b      	ldr	r2, [pc, #44]	; (80148c4 <LL_DMA_SetPeriphRequest+0x54>)
 8014896:	4694      	mov	ip, r2
 8014898:	4463      	add	r3, ip
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	223f      	movs	r2, #63	; 0x3f
 801489e:	4393      	bics	r3, r2
 80148a0:	0019      	movs	r1, r3
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	18d3      	adds	r3, r2, r3
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	4a06      	ldr	r2, [pc, #24]	; (80148c4 <LL_DMA_SetPeriphRequest+0x54>)
 80148ac:	4694      	mov	ip, r2
 80148ae:	4463      	add	r3, ip
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	430a      	orrs	r2, r1
 80148b4:	601a      	str	r2, [r3, #0]
}
 80148b6:	46c0      	nop			; (mov r8, r8)
 80148b8:	46bd      	mov	sp, r7
 80148ba:	b006      	add	sp, #24
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	46c0      	nop			; (mov r8, r8)
 80148c0:	00100080 	.word	0x00100080
 80148c4:	40020800 	.word	0x40020800

080148c8 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681a      	ldr	r2, [r3, #0]
 80148d4:	2380      	movs	r3, #128	; 0x80
 80148d6:	009b      	lsls	r3, r3, #2
 80148d8:	401a      	ands	r2, r3
 80148da:	2380      	movs	r3, #128	; 0x80
 80148dc:	009b      	lsls	r3, r3, #2
 80148de:	429a      	cmp	r2, r3
 80148e0:	d101      	bne.n	80148e6 <LL_DMA_IsActiveFlag_TC3+0x1e>
 80148e2:	2301      	movs	r3, #1
 80148e4:	e000      	b.n	80148e8 <LL_DMA_IsActiveFlag_TC3+0x20>
 80148e6:	2300      	movs	r3, #0
}
 80148e8:	0018      	movs	r0, r3
 80148ea:	46bd      	mov	sp, r7
 80148ec:	b002      	add	sp, #8
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2280      	movs	r2, #128	; 0x80
 80148fc:	0052      	lsls	r2, r2, #1
 80148fe:	605a      	str	r2, [r3, #4]
}
 8014900:	46c0      	nop			; (mov r8, r8)
 8014902:	46bd      	mov	sp, r7
 8014904:	b002      	add	sp, #8
 8014906:	bd80      	pop	{r7, pc}

08014908 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b084      	sub	sp, #16
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8014916:	4a0b      	ldr	r2, [pc, #44]	; (8014944 <LL_DMA_EnableIT_TC+0x3c>)
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	18d3      	adds	r3, r2, r3
 801491c:	781b      	ldrb	r3, [r3, #0]
 801491e:	001a      	movs	r2, r3
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	18d3      	adds	r3, r2, r3
 8014924:	681a      	ldr	r2, [r3, #0]
 8014926:	4907      	ldr	r1, [pc, #28]	; (8014944 <LL_DMA_EnableIT_TC+0x3c>)
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	18cb      	adds	r3, r1, r3
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	0019      	movs	r1, r3
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	18cb      	adds	r3, r1, r3
 8014934:	2102      	movs	r1, #2
 8014936:	430a      	orrs	r2, r1
 8014938:	601a      	str	r2, [r3, #0]
}
 801493a:	46c0      	nop			; (mov r8, r8)
 801493c:	46bd      	mov	sp, r7
 801493e:	b004      	add	sp, #16
 8014940:	bd80      	pop	{r7, pc}
 8014942:	46c0      	nop			; (mov r8, r8)
 8014944:	08017064 	.word	0x08017064

08014948 <LL_AHB1_GRP1_EnableClock>:
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8014950:	4b07      	ldr	r3, [pc, #28]	; (8014970 <LL_AHB1_GRP1_EnableClock+0x28>)
 8014952:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014954:	4b06      	ldr	r3, [pc, #24]	; (8014970 <LL_AHB1_GRP1_EnableClock+0x28>)
 8014956:	687a      	ldr	r2, [r7, #4]
 8014958:	430a      	orrs	r2, r1
 801495a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 801495c:	4b04      	ldr	r3, [pc, #16]	; (8014970 <LL_AHB1_GRP1_EnableClock+0x28>)
 801495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	4013      	ands	r3, r2
 8014964:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014966:	68fb      	ldr	r3, [r7, #12]
}
 8014968:	46c0      	nop			; (mov r8, r8)
 801496a:	46bd      	mov	sp, r7
 801496c:	b004      	add	sp, #16
 801496e:	bd80      	pop	{r7, pc}
 8014970:	40021000 	.word	0x40021000

08014974 <LL_APB1_GRP1_EnableClock>:
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 801497c:	4b07      	ldr	r3, [pc, #28]	; (801499c <LL_APB1_GRP1_EnableClock+0x28>)
 801497e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8014980:	4b06      	ldr	r3, [pc, #24]	; (801499c <LL_APB1_GRP1_EnableClock+0x28>)
 8014982:	687a      	ldr	r2, [r7, #4]
 8014984:	430a      	orrs	r2, r1
 8014986:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8014988:	4b04      	ldr	r3, [pc, #16]	; (801499c <LL_APB1_GRP1_EnableClock+0x28>)
 801498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801498c:	687a      	ldr	r2, [r7, #4]
 801498e:	4013      	ands	r3, r2
 8014990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014992:	68fb      	ldr	r3, [r7, #12]
}
 8014994:	46c0      	nop			; (mov r8, r8)
 8014996:	46bd      	mov	sp, r7
 8014998:	b004      	add	sp, #16
 801499a:	bd80      	pop	{r7, pc}
 801499c:	40021000 	.word	0x40021000

080149a0 <LL_APB1_GRP1_DisableClock>:
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b082      	sub	sp, #8
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 80149a8:	4b05      	ldr	r3, [pc, #20]	; (80149c0 <LL_APB1_GRP1_DisableClock+0x20>)
 80149aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	43d9      	mvns	r1, r3
 80149b0:	4b03      	ldr	r3, [pc, #12]	; (80149c0 <LL_APB1_GRP1_DisableClock+0x20>)
 80149b2:	400a      	ands	r2, r1
 80149b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80149b6:	46c0      	nop			; (mov r8, r8)
 80149b8:	46bd      	mov	sp, r7
 80149ba:	b002      	add	sp, #8
 80149bc:	bd80      	pop	{r7, pc}
 80149be:	46c0      	nop			; (mov r8, r8)
 80149c0:	40021000 	.word	0x40021000

080149c4 <LL_IOP_GRP1_EnableClock>:
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80149cc:	4b07      	ldr	r3, [pc, #28]	; (80149ec <LL_IOP_GRP1_EnableClock+0x28>)
 80149ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80149d0:	4b06      	ldr	r3, [pc, #24]	; (80149ec <LL_IOP_GRP1_EnableClock+0x28>)
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	430a      	orrs	r2, r1
 80149d6:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80149d8:	4b04      	ldr	r3, [pc, #16]	; (80149ec <LL_IOP_GRP1_EnableClock+0x28>)
 80149da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	4013      	ands	r3, r2
 80149e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80149e2:	68fb      	ldr	r3, [r7, #12]
}
 80149e4:	46c0      	nop			; (mov r8, r8)
 80149e6:	46bd      	mov	sp, r7
 80149e8:	b004      	add	sp, #16
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	40021000 	.word	0x40021000

080149f0 <LL_GPIO_SetPinMode>:
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b084      	sub	sp, #16
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	60f8      	str	r0, [r7, #12]
 80149f8:	60b9      	str	r1, [r7, #8]
 80149fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	6819      	ldr	r1, [r3, #0]
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	435b      	muls	r3, r3
 8014a04:	001a      	movs	r2, r3
 8014a06:	0013      	movs	r3, r2
 8014a08:	005b      	lsls	r3, r3, #1
 8014a0a:	189b      	adds	r3, r3, r2
 8014a0c:	43db      	mvns	r3, r3
 8014a0e:	400b      	ands	r3, r1
 8014a10:	001a      	movs	r2, r3
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	435b      	muls	r3, r3
 8014a16:	6879      	ldr	r1, [r7, #4]
 8014a18:	434b      	muls	r3, r1
 8014a1a:	431a      	orrs	r2, r3
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	601a      	str	r2, [r3, #0]
}
 8014a20:	46c0      	nop			; (mov r8, r8)
 8014a22:	46bd      	mov	sp, r7
 8014a24:	b004      	add	sp, #16
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <LL_GPIO_SetPinOutputType>:
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	60f8      	str	r0, [r7, #12]
 8014a30:	60b9      	str	r1, [r7, #8]
 8014a32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	685b      	ldr	r3, [r3, #4]
 8014a38:	68ba      	ldr	r2, [r7, #8]
 8014a3a:	43d2      	mvns	r2, r2
 8014a3c:	401a      	ands	r2, r3
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	6879      	ldr	r1, [r7, #4]
 8014a42:	434b      	muls	r3, r1
 8014a44:	431a      	orrs	r2, r3
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	605a      	str	r2, [r3, #4]
}
 8014a4a:	46c0      	nop			; (mov r8, r8)
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	b004      	add	sp, #16
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <LL_GPIO_SetPinSpeed>:
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b084      	sub	sp, #16
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	60f8      	str	r0, [r7, #12]
 8014a5a:	60b9      	str	r1, [r7, #8]
 8014a5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	6899      	ldr	r1, [r3, #8]
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	435b      	muls	r3, r3
 8014a66:	001a      	movs	r2, r3
 8014a68:	0013      	movs	r3, r2
 8014a6a:	005b      	lsls	r3, r3, #1
 8014a6c:	189b      	adds	r3, r3, r2
 8014a6e:	43db      	mvns	r3, r3
 8014a70:	400b      	ands	r3, r1
 8014a72:	001a      	movs	r2, r3
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	435b      	muls	r3, r3
 8014a78:	6879      	ldr	r1, [r7, #4]
 8014a7a:	434b      	muls	r3, r1
 8014a7c:	431a      	orrs	r2, r3
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	609a      	str	r2, [r3, #8]
}
 8014a82:	46c0      	nop			; (mov r8, r8)
 8014a84:	46bd      	mov	sp, r7
 8014a86:	b004      	add	sp, #16
 8014a88:	bd80      	pop	{r7, pc}

08014a8a <LL_GPIO_SetPinPull>:
{
 8014a8a:	b580      	push	{r7, lr}
 8014a8c:	b084      	sub	sp, #16
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	60f8      	str	r0, [r7, #12]
 8014a92:	60b9      	str	r1, [r7, #8]
 8014a94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	68d9      	ldr	r1, [r3, #12]
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	435b      	muls	r3, r3
 8014a9e:	001a      	movs	r2, r3
 8014aa0:	0013      	movs	r3, r2
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	189b      	adds	r3, r3, r2
 8014aa6:	43db      	mvns	r3, r3
 8014aa8:	400b      	ands	r3, r1
 8014aaa:	001a      	movs	r2, r3
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	435b      	muls	r3, r3
 8014ab0:	6879      	ldr	r1, [r7, #4]
 8014ab2:	434b      	muls	r3, r1
 8014ab4:	431a      	orrs	r2, r3
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	60da      	str	r2, [r3, #12]
}
 8014aba:	46c0      	nop			; (mov r8, r8)
 8014abc:	46bd      	mov	sp, r7
 8014abe:	b004      	add	sp, #16
 8014ac0:	bd80      	pop	{r7, pc}

08014ac2 <LL_GPIO_SetAFPin_0_7>:
{
 8014ac2:	b580      	push	{r7, lr}
 8014ac4:	b084      	sub	sp, #16
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	60f8      	str	r0, [r7, #12]
 8014aca:	60b9      	str	r1, [r7, #8]
 8014acc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	6a19      	ldr	r1, [r3, #32]
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	435b      	muls	r3, r3
 8014ad6:	68ba      	ldr	r2, [r7, #8]
 8014ad8:	4353      	muls	r3, r2
 8014ada:	68ba      	ldr	r2, [r7, #8]
 8014adc:	435a      	muls	r2, r3
 8014ade:	0013      	movs	r3, r2
 8014ae0:	011b      	lsls	r3, r3, #4
 8014ae2:	1a9b      	subs	r3, r3, r2
 8014ae4:	43db      	mvns	r3, r3
 8014ae6:	400b      	ands	r3, r1
 8014ae8:	001a      	movs	r2, r3
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	435b      	muls	r3, r3
 8014aee:	68b9      	ldr	r1, [r7, #8]
 8014af0:	434b      	muls	r3, r1
 8014af2:	68b9      	ldr	r1, [r7, #8]
 8014af4:	434b      	muls	r3, r1
 8014af6:	6879      	ldr	r1, [r7, #4]
 8014af8:	434b      	muls	r3, r1
 8014afa:	431a      	orrs	r2, r3
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	621a      	str	r2, [r3, #32]
}
 8014b00:	46c0      	nop			; (mov r8, r8)
 8014b02:	46bd      	mov	sp, r7
 8014b04:	b004      	add	sp, #16
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <LL_LPUART_Enable>:
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2201      	movs	r2, #1
 8014b16:	431a      	orrs	r2, r3
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	601a      	str	r2, [r3, #0]
}
 8014b1c:	46c0      	nop			; (mov r8, r8)
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	b002      	add	sp, #8
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <LL_LPUART_Disable>:
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	2201      	movs	r2, #1
 8014b32:	4393      	bics	r3, r2
 8014b34:	001a      	movs	r2, r3
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	601a      	str	r2, [r3, #0]
}
 8014b3a:	46c0      	nop			; (mov r8, r8)
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	b002      	add	sp, #8
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <LL_LPUART_EnableDirectionRx>:
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b082      	sub	sp, #8
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	2204      	movs	r2, #4
 8014b50:	431a      	orrs	r2, r3
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	601a      	str	r2, [r3, #0]
}
 8014b56:	46c0      	nop			; (mov r8, r8)
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	b002      	add	sp, #8
 8014b5c:	bd80      	pop	{r7, pc}

08014b5e <LL_LPUART_IsActiveFlag_TEACK>:
{
 8014b5e:	b580      	push	{r7, lr}
 8014b60:	b082      	sub	sp, #8
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	69da      	ldr	r2, [r3, #28]
 8014b6a:	2380      	movs	r3, #128	; 0x80
 8014b6c:	039b      	lsls	r3, r3, #14
 8014b6e:	401a      	ands	r2, r3
 8014b70:	2380      	movs	r3, #128	; 0x80
 8014b72:	039b      	lsls	r3, r3, #14
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d101      	bne.n	8014b7c <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8014b78:	2301      	movs	r3, #1
 8014b7a:	e000      	b.n	8014b7e <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8014b7c:	2300      	movs	r3, #0
}
 8014b7e:	0018      	movs	r0, r3
 8014b80:	46bd      	mov	sp, r7
 8014b82:	b002      	add	sp, #8
 8014b84:	bd80      	pop	{r7, pc}

08014b86 <LL_LPUART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_LPUART_ClearFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
 8014b86:	b580      	push	{r7, lr}
 8014b88:	b082      	sub	sp, #8
 8014b8a:	af00      	add	r7, sp, #0
 8014b8c:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2201      	movs	r2, #1
 8014b92:	621a      	str	r2, [r3, #32]
}
 8014b94:	46c0      	nop			; (mov r8, r8)
 8014b96:	46bd      	mov	sp, r7
 8014b98:	b002      	add	sp, #8
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <LL_LPUART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_LPUART_ClearFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2202      	movs	r2, #2
 8014ba8:	621a      	str	r2, [r3, #32]
}
 8014baa:	46c0      	nop			; (mov r8, r8)
 8014bac:	46bd      	mov	sp, r7
 8014bae:	b002      	add	sp, #8
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <LL_LPUART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_LPUART_ClearFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
 8014bb2:	b580      	push	{r7, lr}
 8014bb4:	b082      	sub	sp, #8
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2204      	movs	r2, #4
 8014bbe:	621a      	str	r2, [r3, #32]
}
 8014bc0:	46c0      	nop			; (mov r8, r8)
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	b002      	add	sp, #8
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <LL_LPUART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_LPUART_ClearFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2208      	movs	r2, #8
 8014bd4:	621a      	str	r2, [r3, #32]
}
 8014bd6:	46c0      	nop			; (mov r8, r8)
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	b002      	add	sp, #8
 8014bdc:	bd80      	pop	{r7, pc}

08014bde <LL_LPUART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_LPUART_ClearFlag_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_TC(USART_TypeDef *LPUARTx)
{
 8014bde:	b580      	push	{r7, lr}
 8014be0:	b082      	sub	sp, #8
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	2240      	movs	r2, #64	; 0x40
 8014bea:	621a      	str	r2, [r3, #32]
}
 8014bec:	46c0      	nop			; (mov r8, r8)
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	b002      	add	sp, #8
 8014bf2:	bd80      	pop	{r7, pc}

08014bf4 <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2220      	movs	r2, #32
 8014c02:	431a      	orrs	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	601a      	str	r2, [r3, #0]
}
 8014c08:	46c0      	nop			; (mov r8, r8)
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	b002      	add	sp, #8
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2240      	movs	r2, #64	; 0x40
 8014c1e:	431a      	orrs	r2, r3
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	601a      	str	r2, [r3, #0]
}
 8014c24:	46c0      	nop			; (mov r8, r8)
 8014c26:	46bd      	mov	sp, r7
 8014c28:	b002      	add	sp, #8
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	689b      	ldr	r3, [r3, #8]
 8014c38:	2201      	movs	r2, #1
 8014c3a:	431a      	orrs	r2, r3
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	609a      	str	r2, [r3, #8]
}
 8014c40:	46c0      	nop			; (mov r8, r8)
 8014c42:	46bd      	mov	sp, r7
 8014c44:	b002      	add	sp, #8
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	2240      	movs	r2, #64	; 0x40
 8014c56:	4393      	bics	r3, r2
 8014c58:	001a      	movs	r2, r3
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	601a      	str	r2, [r3, #0]
}
 8014c5e:	46c0      	nop			; (mov r8, r8)
 8014c60:	46bd      	mov	sp, r7
 8014c62:	b002      	add	sp, #8
 8014c64:	bd80      	pop	{r7, pc}

08014c66 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8014c66:	b580      	push	{r7, lr}
 8014c68:	b082      	sub	sp, #8
 8014c6a:	af00      	add	r7, sp, #0
 8014c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	2220      	movs	r2, #32
 8014c74:	4013      	ands	r3, r2
 8014c76:	2b20      	cmp	r3, #32
 8014c78:	d101      	bne.n	8014c7e <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	e000      	b.n	8014c80 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8014c7e:	2300      	movs	r3, #0
}
 8014c80:	0018      	movs	r0, r3
 8014c82:	46bd      	mov	sp, r7
 8014c84:	b002      	add	sp, #8
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(USART_TypeDef *LPUARTx)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b082      	sub	sp, #8
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2240      	movs	r2, #64	; 0x40
 8014c96:	4013      	ands	r3, r2
 8014c98:	2b40      	cmp	r3, #64	; 0x40
 8014c9a:	d101      	bne.n	8014ca0 <LL_LPUART_IsEnabledIT_TC+0x18>
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	e000      	b.n	8014ca2 <LL_LPUART_IsEnabledIT_TC+0x1a>
 8014ca0:	2300      	movs	r3, #0
}
 8014ca2:	0018      	movs	r0, r3
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	b002      	add	sp, #8
 8014ca8:	bd80      	pop	{r7, pc}

08014caa <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(USART_TypeDef *LPUARTx)
{
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b082      	sub	sp, #8
 8014cae:	af00      	add	r7, sp, #0
 8014cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	2380      	movs	r3, #128	; 0x80
 8014cb8:	005b      	lsls	r3, r3, #1
 8014cba:	401a      	ands	r2, r3
 8014cbc:	2380      	movs	r3, #128	; 0x80
 8014cbe:	005b      	lsls	r3, r3, #1
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d101      	bne.n	8014cc8 <LL_LPUART_IsEnabledIT_PE+0x1e>
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	e000      	b.n	8014cca <LL_LPUART_IsEnabledIT_PE+0x20>
 8014cc8:	2300      	movs	r3, #0
}
 8014cca:	0018      	movs	r0, r3
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	b002      	add	sp, #8
 8014cd0:	bd80      	pop	{r7, pc}

08014cd2 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(USART_TypeDef *LPUARTx)
{
 8014cd2:	b580      	push	{r7, lr}
 8014cd4:	b082      	sub	sp, #8
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	689b      	ldr	r3, [r3, #8]
 8014cde:	2201      	movs	r2, #1
 8014ce0:	4013      	ands	r3, r2
 8014ce2:	2b01      	cmp	r3, #1
 8014ce4:	d101      	bne.n	8014cea <LL_LPUART_IsEnabledIT_ERROR+0x18>
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	e000      	b.n	8014cec <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 8014cea:	2300      	movs	r3, #0
}
 8014cec:	0018      	movs	r0, r3
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	b002      	add	sp, #8
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	689b      	ldr	r3, [r3, #8]
 8014d00:	2280      	movs	r2, #128	; 0x80
 8014d02:	431a      	orrs	r2, r3
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	609a      	str	r2, [r3, #8]
}
 8014d08:	46c0      	nop			; (mov r8, r8)
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	b002      	add	sp, #8
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(USART_TypeDef *LPUARTx, uint32_t Direction)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b084      	sub	sp, #16
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 8014d1a:	683b      	ldr	r3, [r7, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d103      	bne.n	8014d28 <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	3328      	adds	r3, #40	; 0x28
 8014d24:	60fb      	str	r3, [r7, #12]
 8014d26:	e002      	b.n	8014d2e <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	3324      	adds	r3, #36	; 0x24
 8014d2c:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
}
 8014d30:	0018      	movs	r0, r3
 8014d32:	46bd      	mov	sp, r7
 8014d34:	b004      	add	sp, #16
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(USART_TypeDef *LPUARTx)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d44:	b2db      	uxtb	r3, r3
}
 8014d46:	0018      	movs	r0, r3
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	b002      	add	sp, #8
 8014d4c:	bd80      	pop	{r7, pc}
	...

08014d50 <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b090      	sub	sp, #64	; 0x40
 8014d54:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 8014d56:	2001      	movs	r0, #1
 8014d58:	f7ff fe34 	bl	80149c4 <LL_IOP_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 8014d5c:	2001      	movs	r0, #1
 8014d5e:	f7ff fe31 	bl	80149c4 <LL_IOP_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 8014d62:	23a0      	movs	r3, #160	; 0xa0
 8014d64:	05db      	lsls	r3, r3, #23
 8014d66:	2206      	movs	r2, #6
 8014d68:	2104      	movs	r1, #4
 8014d6a:	0018      	movs	r0, r3
 8014d6c:	f7ff fea9 	bl	8014ac2 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 8014d70:	23a0      	movs	r3, #160	; 0xa0
 8014d72:	05db      	lsls	r3, r3, #23
 8014d74:	2202      	movs	r2, #2
 8014d76:	2104      	movs	r1, #4
 8014d78:	0018      	movs	r0, r3
 8014d7a:	f7ff fe39 	bl	80149f0 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8014d7e:	23a0      	movs	r3, #160	; 0xa0
 8014d80:	05db      	lsls	r3, r3, #23
 8014d82:	2202      	movs	r2, #2
 8014d84:	2104      	movs	r1, #4
 8014d86:	0018      	movs	r0, r3
 8014d88:	f7ff fe63 	bl	8014a52 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8014d8c:	23a0      	movs	r3, #160	; 0xa0
 8014d8e:	05db      	lsls	r3, r3, #23
 8014d90:	2200      	movs	r2, #0
 8014d92:	2104      	movs	r1, #4
 8014d94:	0018      	movs	r0, r3
 8014d96:	f7ff fe47 	bl	8014a28 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 8014d9a:	23a0      	movs	r3, #160	; 0xa0
 8014d9c:	05db      	lsls	r3, r3, #23
 8014d9e:	2201      	movs	r2, #1
 8014da0:	2104      	movs	r1, #4
 8014da2:	0018      	movs	r0, r3
 8014da4:	f7ff fe71 	bl	8014a8a <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 8014da8:	23a0      	movs	r3, #160	; 0xa0
 8014daa:	05db      	lsls	r3, r3, #23
 8014dac:	2206      	movs	r2, #6
 8014dae:	2108      	movs	r1, #8
 8014db0:	0018      	movs	r0, r3
 8014db2:	f7ff fe86 	bl	8014ac2 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 8014db6:	23a0      	movs	r3, #160	; 0xa0
 8014db8:	05db      	lsls	r3, r3, #23
 8014dba:	2202      	movs	r2, #2
 8014dbc:	2108      	movs	r1, #8
 8014dbe:	0018      	movs	r0, r3
 8014dc0:	f7ff fe16 	bl	80149f0 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8014dc4:	23a0      	movs	r3, #160	; 0xa0
 8014dc6:	05db      	lsls	r3, r3, #23
 8014dc8:	2202      	movs	r2, #2
 8014dca:	2108      	movs	r1, #8
 8014dcc:	0018      	movs	r0, r3
 8014dce:	f7ff fe40 	bl	8014a52 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8014dd2:	23a0      	movs	r3, #160	; 0xa0
 8014dd4:	05db      	lsls	r3, r3, #23
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	2108      	movs	r1, #8
 8014dda:	0018      	movs	r0, r3
 8014ddc:	f7ff fe24 	bl	8014a28 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 8014de0:	23a0      	movs	r3, #160	; 0xa0
 8014de2:	05db      	lsls	r3, r3, #23
 8014de4:	2201      	movs	r2, #1
 8014de6:	2108      	movs	r1, #8
 8014de8:	0018      	movs	r0, r3
 8014dea:	f7ff fe4e 	bl	8014a8a <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 8014dee:	2380      	movs	r3, #128	; 0x80
 8014df0:	035b      	lsls	r3, r3, #13
 8014df2:	0018      	movs	r0, r3
 8014df4:	f7ff fdbe 	bl	8014974 <LL_APB1_GRP1_EnableClock>
  {
    /* Configure USART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 8014df8:	4b32      	ldr	r3, [pc, #200]	; (8014ec4 <HW_TRACER_EMB_Init+0x174>)
 8014dfa:	0018      	movs	r0, r3
 8014dfc:	f7ff fe92 	bl	8014b24 <LL_LPUART_Disable>
    /*  - Parity              : LL_USART_PARITY_NONE            */
    /*  - TransferDirection   : LL_USART_DIRECTION_TX           */
    /*  - HardwareFlowControl : LL_USART_HWCONTROL_NONE         */
    /*  - OverSampling        : LL_USART_OVERSAMPLING_16        */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_USART_PRESCALER_DIV1;
 8014e00:	2120      	movs	r1, #32
 8014e02:	187b      	adds	r3, r7, r1
 8014e04:	2200      	movs	r2, #0
 8014e06:	601a      	str	r2, [r3, #0]
#endif
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 8014e08:	187b      	adds	r3, r7, r1
 8014e0a:	22e1      	movs	r2, #225	; 0xe1
 8014e0c:	0312      	lsls	r2, r2, #12
 8014e0e:	605a      	str	r2, [r3, #4]
    lpuart_initstruct.DataWidth           = LL_USART_DATAWIDTH_8B;
 8014e10:	187b      	adds	r3, r7, r1
 8014e12:	2200      	movs	r2, #0
 8014e14:	609a      	str	r2, [r3, #8]
    lpuart_initstruct.StopBits            = LL_USART_STOPBITS_1;
 8014e16:	187b      	adds	r3, r7, r1
 8014e18:	2200      	movs	r2, #0
 8014e1a:	60da      	str	r2, [r3, #12]
    lpuart_initstruct.Parity              = LL_USART_PARITY_NONE;
 8014e1c:	187b      	adds	r3, r7, r1
 8014e1e:	2200      	movs	r2, #0
 8014e20:	611a      	str	r2, [r3, #16]
    lpuart_initstruct.TransferDirection   = LL_USART_DIRECTION_TX;
 8014e22:	187b      	adds	r3, r7, r1
 8014e24:	2208      	movs	r2, #8
 8014e26:	615a      	str	r2, [r3, #20]
    lpuart_initstruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8014e28:	187b      	adds	r3, r7, r1
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	619a      	str	r2, [r3, #24]

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 8014e2e:	187b      	adds	r3, r7, r1
 8014e30:	4a24      	ldr	r2, [pc, #144]	; (8014ec4 <HW_TRACER_EMB_Init+0x174>)
 8014e32:	0019      	movs	r1, r3
 8014e34:	0010      	movs	r0, r2
 8014e36:	f7f4 fee3 	bl	8009c00 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 8014e3a:	4b22      	ldr	r3, [pc, #136]	; (8014ec4 <HW_TRACER_EMB_Init+0x174>)
 8014e3c:	0018      	movs	r0, r3
 8014e3e:	f7ff fe63 	bl	8014b08 <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 8014e42:	4b20      	ldr	r3, [pc, #128]	; (8014ec4 <HW_TRACER_EMB_Init+0x174>)
 8014e44:	0018      	movs	r0, r3
 8014e46:	f7ff fe8a 	bl	8014b5e <LL_LPUART_IsActiveFlag_TEACK>
 8014e4a:	0003      	movs	r3, r0
 8014e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Polling USART initialisation */
    while(0u == _temp1)
 8014e4e:	e005      	b.n	8014e5c <HW_TRACER_EMB_Init+0x10c>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 8014e50:	4b1c      	ldr	r3, [pc, #112]	; (8014ec4 <HW_TRACER_EMB_Init+0x174>)
 8014e52:	0018      	movs	r0, r3
 8014e54:	f7ff fe83 	bl	8014b5e <LL_LPUART_IsActiveFlag_TEACK>
 8014e58:	0003      	movs	r3, r0
 8014e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(0u == _temp1)
 8014e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d0f6      	beq.n	8014e50 <HW_TRACER_EMB_Init+0x100>
  }
#endif

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 8014e62:	2001      	movs	r0, #1
 8014e64:	f7ff fd70 	bl	8014948 <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 8014e68:	4a17      	ldr	r2, [pc, #92]	; (8014ec8 <HW_TRACER_EMB_Init+0x178>)
 8014e6a:	4b18      	ldr	r3, [pc, #96]	; (8014ecc <HW_TRACER_EMB_Init+0x17c>)
 8014e6c:	2102      	movs	r1, #2
 8014e6e:	0018      	movs	r0, r3
 8014e70:	f7ff fc64 	bl	801473c <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 8014e74:	4b15      	ldr	r3, [pc, #84]	; (8014ecc <HW_TRACER_EMB_Init+0x17c>)
 8014e76:	220f      	movs	r2, #15
 8014e78:	2102      	movs	r1, #2
 8014e7a:	0018      	movs	r0, r3
 8014e7c:	f7ff fcf8 	bl	8014870 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 8014e80:	4b12      	ldr	r3, [pc, #72]	; (8014ecc <HW_TRACER_EMB_Init+0x17c>)
 8014e82:	2102      	movs	r1, #2
 8014e84:	0018      	movs	r0, r3
 8014e86:	f7ff fd3f 	bl	8014908 <LL_DMA_EnableIT_TC>
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#else
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
 8014e8a:	2100      	movs	r1, #0
 8014e8c:	200a      	movs	r0, #10
 8014e8e:	f7ff fba7 	bl	80145e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 8014e92:	200a      	movs	r0, #10
 8014e94:	f7ff fb8a 	bl	80145ac <__NVIC_EnableIRQ>
#endif
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#else
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 8014e98:	2103      	movs	r1, #3
 8014e9a:	201d      	movs	r0, #29
 8014e9c:	f7ff fba0 	bl	80145e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 8014ea0:	201d      	movs	r0, #29
 8014ea2:	f7ff fb83 	bl	80145ac <__NVIC_EnableIRQ>
#endif

  /* Disable the UART */
  if(NULL == fptr_rx)
 8014ea6:	4b0a      	ldr	r3, [pc, #40]	; (8014ed0 <HW_TRACER_EMB_Init+0x180>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d105      	bne.n	8014eba <HW_TRACER_EMB_Init+0x16a>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 8014eae:	2380      	movs	r3, #128	; 0x80
 8014eb0:	035b      	lsls	r3, r3, #13
 8014eb2:	0018      	movs	r0, r3
 8014eb4:	f7ff fd74 	bl	80149a0 <LL_APB1_GRP1_DisableClock>
  }
  return;
 8014eb8:	46c0      	nop			; (mov r8, r8)
 8014eba:	46c0      	nop			; (mov r8, r8)
}
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	b010      	add	sp, #64	; 0x40
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	46c0      	nop			; (mov r8, r8)
 8014ec4:	40008000 	.word	0x40008000
 8014ec8:	00002090 	.word	0x00002090
 8014ecc:	40020000 	.word	0x40020000
 8014ed0:	20001b54 	.word	0x20001b54

08014ed4 <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 8014edc:	4b05      	ldr	r3, [pc, #20]	; (8014ef4 <HW_TRACER_EMB_RegisterRxCallback+0x20>)
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	601a      	str	r2, [r3, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 8014ee2:	2380      	movs	r3, #128	; 0x80
 8014ee4:	035b      	lsls	r3, r3, #13
 8014ee6:	0018      	movs	r0, r3
 8014ee8:	f7ff fd44 	bl	8014974 <LL_APB1_GRP1_EnableClock>
}
 8014eec:	46c0      	nop			; (mov r8, r8)
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	b002      	add	sp, #8
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	20001b54 	.word	0x20001b54

08014ef8 <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 8014efc:	4b0a      	ldr	r3, [pc, #40]	; (8014f28 <HW_TRACER_EMB_StartRX+0x30>)
 8014efe:	0018      	movs	r0, r3
 8014f00:	f7ff fe78 	bl	8014bf4 <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 8014f04:	4b08      	ldr	r3, [pc, #32]	; (8014f28 <HW_TRACER_EMB_StartRX+0x30>)
 8014f06:	0018      	movs	r0, r3
 8014f08:	f7ff fe90 	bl	8014c2c <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 8014f0c:	4b06      	ldr	r3, [pc, #24]	; (8014f28 <HW_TRACER_EMB_StartRX+0x30>)
 8014f0e:	0018      	movs	r0, r3
 8014f10:	f7ff fe17 	bl	8014b42 <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 8014f14:	2103      	movs	r1, #3
 8014f16:	201d      	movs	r0, #29
 8014f18:	f7ff fb62 	bl	80145e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 8014f1c:	201d      	movs	r0, #29
 8014f1e:	f7ff fb45 	bl	80145ac <__NVIC_EnableIRQ>
}
 8014f22:	46c0      	nop			; (mov r8, r8)
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	40008000 	.word	0x40008000

08014f2c <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	af00      	add	r7, sp, #0
  if (1UL == TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE))
 8014f30:	4b08      	ldr	r3, [pc, #32]	; (8014f54 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 8014f32:	0018      	movs	r0, r3
 8014f34:	f7ff fcc8 	bl	80148c8 <LL_DMA_IsActiveFlag_TC3>
 8014f38:	0003      	movs	r3, r0
 8014f3a:	2b01      	cmp	r3, #1
 8014f3c:	d107      	bne.n	8014f4e <HW_TRACER_EMB_IRQHandlerDMA+0x22>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 8014f3e:	4b06      	ldr	r3, [pc, #24]	; (8014f58 <HW_TRACER_EMB_IRQHandlerDMA+0x2c>)
 8014f40:	0018      	movs	r0, r3
 8014f42:	f7ff fe65 	bl	8014c10 <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 8014f46:	4b03      	ldr	r3, [pc, #12]	; (8014f54 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 8014f48:	0018      	movs	r0, r3
 8014f4a:	f7ff fcd1 	bl	80148f0 <LL_DMA_ClearFlag_GI3>
  }
}
 8014f4e:	46c0      	nop			; (mov r8, r8)
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}
 8014f54:	40020000 	.word	0x40020000
 8014f58:	40008000 	.word	0x40008000

08014f5c <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b086      	sub	sp, #24
 8014f60:	af00      	add	r7, sp, #0
  uint32_t _temp1, _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 8014f62:	2317      	movs	r3, #23
 8014f64:	18fb      	adds	r3, r7, r3
 8014f66:	2200      	movs	r2, #0
 8014f68:	701a      	strb	r2, [r3, #0]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 8014f6a:	4b60      	ldr	r3, [pc, #384]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8014f6c:	69db      	ldr	r3, [r3, #28]
 8014f6e:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 8014f70:	4b5e      	ldr	r3, [pc, #376]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8014f72:	0018      	movs	r0, r3
 8014f74:	f7ff fe77 	bl	8014c66 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 8014f78:	0003      	movs	r3, r0
 8014f7a:	60fb      	str	r3, [r7, #12]

  /* If Reception is ongoing */
  if (1UL == _temp1)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2b01      	cmp	r3, #1
 8014f80:	d000      	beq.n	8014f84 <HW_TRACER_EMB_IRQHandlerUSART+0x28>
 8014f82:	e087      	b.n	8015094 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 8014f84:	693b      	ldr	r3, [r7, #16]
 8014f86:	220f      	movs	r2, #15
 8014f88:	4013      	ands	r3, r2
 8014f8a:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (  ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	2220      	movs	r2, #32
 8014f90:	4013      	ands	r3, r2
 8014f92:	d015      	beq.n	8014fc0 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
        &&(0UL == _errorflags) )
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d112      	bne.n	8014fc0 <HW_TRACER_EMB_IRQHandlerUSART+0x64>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 8014f9a:	4b54      	ldr	r3, [pc, #336]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8014f9c:	0018      	movs	r0, r3
 8014f9e:	f7ff fecb 	bl	8014d38 <LL_LPUART_ReceiveData8>
 8014fa2:	0003      	movs	r3, r0
 8014fa4:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 8014fa6:	4b52      	ldr	r3, [pc, #328]	; (80150f0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d100      	bne.n	8014fb0 <HW_TRACER_EMB_IRQHandlerUSART+0x54>
 8014fae:	e097      	b.n	80150e0 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
      {
        fptr_rx(received_char, 0U);
 8014fb0:	4b4f      	ldr	r3, [pc, #316]	; (80150f0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	683a      	ldr	r2, [r7, #0]
 8014fb6:	b2d2      	uxtb	r2, r2
 8014fb8:	2100      	movs	r1, #0
 8014fba:	0010      	movs	r0, r2
 8014fbc:	4798      	blx	r3
      }
      return;
 8014fbe:	e08f      	b.n	80150e0 <HW_TRACER_EMB_IRQHandlerUSART+0x184>
    }
    else if (0UL != _errorflags)
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d066      	beq.n	8015094 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	2220      	movs	r2, #32
 8014fca:	4013      	ands	r3, r2
 8014fcc:	d012      	beq.n	8014ff4 <HW_TRACER_EMB_IRQHandlerUSART+0x98>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 8014fce:	4b47      	ldr	r3, [pc, #284]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8014fd0:	0018      	movs	r0, r3
 8014fd2:	f7ff feb1 	bl	8014d38 <LL_LPUART_ReceiveData8>
 8014fd6:	0003      	movs	r3, r0
 8014fd8:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 8014fda:	4b45      	ldr	r3, [pc, #276]	; (80150f0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d100      	bne.n	8014fe4 <HW_TRACER_EMB_IRQHandlerUSART+0x88>
 8014fe2:	e07f      	b.n	80150e4 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
        {
          fptr_rx(received_char, 0U);
 8014fe4:	4b42      	ldr	r3, [pc, #264]	; (80150f0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	683a      	ldr	r2, [r7, #0]
 8014fea:	b2d2      	uxtb	r2, r2
 8014fec:	2100      	movs	r1, #0
 8014fee:	0010      	movs	r0, r2
 8014ff0:	4798      	blx	r3
        }
        return;
 8014ff2:	e077      	b.n	80150e4 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 8014ff4:	4b3d      	ldr	r3, [pc, #244]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8014ff6:	0018      	movs	r0, r3
 8014ff8:	f7ff fe57 	bl	8014caa <LL_LPUART_IsEnabledIT_PE>
 8014ffc:	0003      	movs	r3, r0
 8014ffe:	607b      	str	r3, [r7, #4]
      if (  (1U == _temp2)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b01      	cmp	r3, #1
 8015004:	d10b      	bne.n	801501e <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
          &&(TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))) )
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	2201      	movs	r2, #1
 801500a:	4013      	ands	r3, r2
 801500c:	d007      	beq.n	801501e <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 801500e:	4b37      	ldr	r3, [pc, #220]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8015010:	0018      	movs	r0, r3
 8015012:	f7ff fdb8 	bl	8014b86 <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 8015016:	2317      	movs	r3, #23
 8015018:	18fb      	adds	r3, r7, r3
 801501a:	2201      	movs	r2, #1
 801501c:	701a      	strb	r2, [r3, #0]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 801501e:	4b33      	ldr	r3, [pc, #204]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8015020:	0018      	movs	r0, r3
 8015022:	f7ff fe56 	bl	8014cd2 <LL_LPUART_IsEnabledIT_ERROR>
 8015026:	0003      	movs	r3, r0
 8015028:	607b      	str	r3, [r7, #4]
      if (1U == _temp2)
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2b01      	cmp	r3, #1
 801502e:	d123      	bne.n	8015078 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	2202      	movs	r2, #2
 8015034:	4013      	ands	r3, r2
 8015036:	d007      	beq.n	8015048 <HW_TRACER_EMB_IRQHandlerUSART+0xec>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 8015038:	4b2c      	ldr	r3, [pc, #176]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801503a:	0018      	movs	r0, r3
 801503c:	f7ff fdae 	bl	8014b9c <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 8015040:	2317      	movs	r3, #23
 8015042:	18fb      	adds	r3, r7, r3
 8015044:	2201      	movs	r2, #1
 8015046:	701a      	strb	r2, [r3, #0]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	2208      	movs	r2, #8
 801504c:	4013      	ands	r3, r2
 801504e:	d007      	beq.n	8015060 <HW_TRACER_EMB_IRQHandlerUSART+0x104>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 8015050:	4b26      	ldr	r3, [pc, #152]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8015052:	0018      	movs	r0, r3
 8015054:	f7ff fdb8 	bl	8014bc8 <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 8015058:	2317      	movs	r3, #23
 801505a:	18fb      	adds	r3, r7, r3
 801505c:	2201      	movs	r2, #1
 801505e:	701a      	strb	r2, [r3, #0]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	2204      	movs	r2, #4
 8015064:	4013      	ands	r3, r2
 8015066:	d007      	beq.n	8015078 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 8015068:	4b20      	ldr	r3, [pc, #128]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 801506a:	0018      	movs	r0, r3
 801506c:	f7ff fda1 	bl	8014bb2 <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 8015070:	2317      	movs	r3, #23
 8015072:	18fb      	adds	r3, r7, r3
 8015074:	2201      	movs	r2, #1
 8015076:	701a      	strb	r2, [r3, #0]
        }
      }

      if ((1U == _error) && (fptr_rx != NULL))
 8015078:	2317      	movs	r3, #23
 801507a:	18fb      	adds	r3, r7, r3
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	2b01      	cmp	r3, #1
 8015080:	d108      	bne.n	8015094 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
 8015082:	4b1b      	ldr	r3, [pc, #108]	; (80150f0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d004      	beq.n	8015094 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 801508a:	4b19      	ldr	r3, [pc, #100]	; (80150f0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	2101      	movs	r1, #1
 8015090:	2001      	movs	r0, #1
 8015092:	4798      	blx	r3
  }
#endif

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 8015094:	4b15      	ldr	r3, [pc, #84]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8015096:	0018      	movs	r0, r3
 8015098:	f7ff fdf6 	bl	8014c88 <LL_LPUART_IsEnabledIT_TC>
 801509c:	0003      	movs	r3, r0
 801509e:	607b      	str	r3, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (1UL == _temp2))
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	2240      	movs	r2, #64	; 0x40
 80150a4:	4013      	ands	r3, r2
 80150a6:	d01e      	beq.n	80150e6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	d11b      	bne.n	80150e6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 80150ae:	4b0f      	ldr	r3, [pc, #60]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80150b0:	0018      	movs	r0, r3
 80150b2:	f7ff fdc9 	bl	8014c48 <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 80150b6:	4b0d      	ldr	r3, [pc, #52]	; (80150ec <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80150b8:	0018      	movs	r0, r3
 80150ba:	f7ff fd90 	bl	8014bde <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 80150be:	4b0d      	ldr	r3, [pc, #52]	; (80150f4 <HW_TRACER_EMB_IRQHandlerUSART+0x198>)
 80150c0:	2102      	movs	r1, #2
 80150c2:	0018      	movs	r0, r3
 80150c4:	f7ff fb1a 	bl	80146fc <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if(NULL == fptr_rx)
 80150c8:	4b09      	ldr	r3, [pc, #36]	; (80150f0 <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d104      	bne.n	80150da <HW_TRACER_EMB_IRQHandlerUSART+0x17e>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 80150d0:	2380      	movs	r3, #128	; 0x80
 80150d2:	035b      	lsls	r3, r3, #13
 80150d4:	0018      	movs	r0, r3
 80150d6:	f7ff fc63 	bl	80149a0 <LL_APB1_GRP1_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 80150da:	f7ff f91d 	bl	8014318 <TRACER_EMB_CALLBACK_TX>
 80150de:	e002      	b.n	80150e6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
      return;
 80150e0:	46c0      	nop			; (mov r8, r8)
 80150e2:	e000      	b.n	80150e6 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
        return;
 80150e4:	46c0      	nop			; (mov r8, r8)
  }
#endif

}
 80150e6:	46bd      	mov	sp, r7
 80150e8:	b006      	add	sp, #24
 80150ea:	bd80      	pop	{r7, pc}
 80150ec:	40008000 	.word	0x40008000
 80150f0:	20001b54 	.word	0x20001b54
 80150f4:	40020000 	.word	0x40020000

080150f8 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(uint8_t *pData, uint32_t Size)
{
 80150f8:	b5b0      	push	{r4, r5, r7, lr}
 80150fa:	b084      	sub	sp, #16
 80150fc:	af02      	add	r7, sp, #8
 80150fe:	6078      	str	r0, [r7, #4]
 8015100:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 8015102:	2380      	movs	r3, #128	; 0x80
 8015104:	035b      	lsls	r3, r3, #13
 8015106:	0018      	movs	r0, r3
 8015108:	f7ff fc34 	bl	8014974 <LL_APB1_GRP1_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801510c:	687c      	ldr	r4, [r7, #4]
 801510e:	4b13      	ldr	r3, [pc, #76]	; (801515c <HW_TRACER_EMB_SendData+0x64>)
 8015110:	2100      	movs	r1, #0
 8015112:	0018      	movs	r0, r3
 8015114:	f7ff fdfc 	bl	8014d10 <LL_LPUART_DMA_GetRegAddr>
 8015118:	0005      	movs	r5, r0
 801511a:	4b11      	ldr	r3, [pc, #68]	; (8015160 <HW_TRACER_EMB_SendData+0x68>)
 801511c:	2102      	movs	r1, #2
 801511e:	0018      	movs	r0, r3
 8015120:	f7ff fb32 	bl	8014788 <LL_DMA_GetDataTransferDirection>
 8015124:	0003      	movs	r3, r0
 8015126:	480e      	ldr	r0, [pc, #56]	; (8015160 <HW_TRACER_EMB_SendData+0x68>)
 8015128:	9300      	str	r3, [sp, #0]
 801512a:	002b      	movs	r3, r5
 801512c:	0022      	movs	r2, r4
 801512e:	2102      	movs	r1, #2
 8015130:	f7ff fb66 	bl	8014800 <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, LL_USART_DMA_REG_DATA_TRANSMIT),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	480a      	ldr	r0, [pc, #40]	; (8015160 <HW_TRACER_EMB_SendData+0x68>)
 8015138:	001a      	movs	r2, r3
 801513a:	2102      	movs	r1, #2
 801513c:	f7ff fb3e 	bl	80147bc <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 8015140:	4b06      	ldr	r3, [pc, #24]	; (801515c <HW_TRACER_EMB_SendData+0x64>)
 8015142:	0018      	movs	r0, r3
 8015144:	f7ff fdd6 	bl	8014cf4 <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 8015148:	4b05      	ldr	r3, [pc, #20]	; (8015160 <HW_TRACER_EMB_SendData+0x68>)
 801514a:	2102      	movs	r1, #2
 801514c:	0018      	movs	r0, r3
 801514e:	f7ff fab5 	bl	80146bc <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif
}
 8015152:	46c0      	nop			; (mov r8, r8)
 8015154:	46bd      	mov	sp, r7
 8015156:	b002      	add	sp, #8
 8015158:	bdb0      	pop	{r4, r5, r7, pc}
 801515a:	46c0      	nop			; (mov r8, r8)
 801515c:	40008000 	.word	0x40008000
 8015160:	40020000 	.word	0x40020000

08015164 <__aeabi_memclr>:
 8015164:	b510      	push	{r4, lr}
 8015166:	2200      	movs	r2, #0
 8015168:	f000 f805 	bl	8015176 <__aeabi_memset>
 801516c:	bd10      	pop	{r4, pc}

0801516e <__aeabi_memcpy>:
 801516e:	b510      	push	{r4, lr}
 8015170:	f000 f83c 	bl	80151ec <memcpy>
 8015174:	bd10      	pop	{r4, pc}

08015176 <__aeabi_memset>:
 8015176:	000b      	movs	r3, r1
 8015178:	b510      	push	{r4, lr}
 801517a:	0011      	movs	r1, r2
 801517c:	001a      	movs	r2, r3
 801517e:	f000 f83e 	bl	80151fe <memset>
 8015182:	bd10      	pop	{r4, pc}

08015184 <__errno>:
 8015184:	4b01      	ldr	r3, [pc, #4]	; (801518c <__errno+0x8>)
 8015186:	6818      	ldr	r0, [r3, #0]
 8015188:	4770      	bx	lr
 801518a:	46c0      	nop			; (mov r8, r8)
 801518c:	200000c8 	.word	0x200000c8

08015190 <__libc_init_array>:
 8015190:	b570      	push	{r4, r5, r6, lr}
 8015192:	2600      	movs	r6, #0
 8015194:	4d0c      	ldr	r5, [pc, #48]	; (80151c8 <__libc_init_array+0x38>)
 8015196:	4c0d      	ldr	r4, [pc, #52]	; (80151cc <__libc_init_array+0x3c>)
 8015198:	1b64      	subs	r4, r4, r5
 801519a:	10a4      	asrs	r4, r4, #2
 801519c:	42a6      	cmp	r6, r4
 801519e:	d109      	bne.n	80151b4 <__libc_init_array+0x24>
 80151a0:	2600      	movs	r6, #0
 80151a2:	f000 fc65 	bl	8015a70 <_init>
 80151a6:	4d0a      	ldr	r5, [pc, #40]	; (80151d0 <__libc_init_array+0x40>)
 80151a8:	4c0a      	ldr	r4, [pc, #40]	; (80151d4 <__libc_init_array+0x44>)
 80151aa:	1b64      	subs	r4, r4, r5
 80151ac:	10a4      	asrs	r4, r4, #2
 80151ae:	42a6      	cmp	r6, r4
 80151b0:	d105      	bne.n	80151be <__libc_init_array+0x2e>
 80151b2:	bd70      	pop	{r4, r5, r6, pc}
 80151b4:	00b3      	lsls	r3, r6, #2
 80151b6:	58eb      	ldr	r3, [r5, r3]
 80151b8:	4798      	blx	r3
 80151ba:	3601      	adds	r6, #1
 80151bc:	e7ee      	b.n	801519c <__libc_init_array+0xc>
 80151be:	00b3      	lsls	r3, r6, #2
 80151c0:	58eb      	ldr	r3, [r5, r3]
 80151c2:	4798      	blx	r3
 80151c4:	3601      	adds	r6, #1
 80151c6:	e7f2      	b.n	80151ae <__libc_init_array+0x1e>
 80151c8:	080170a8 	.word	0x080170a8
 80151cc:	080170a8 	.word	0x080170a8
 80151d0:	080170a8 	.word	0x080170a8
 80151d4:	080170ac 	.word	0x080170ac

080151d8 <malloc>:
 80151d8:	b510      	push	{r4, lr}
 80151da:	4b03      	ldr	r3, [pc, #12]	; (80151e8 <malloc+0x10>)
 80151dc:	0001      	movs	r1, r0
 80151de:	6818      	ldr	r0, [r3, #0]
 80151e0:	f000 f860 	bl	80152a4 <_malloc_r>
 80151e4:	bd10      	pop	{r4, pc}
 80151e6:	46c0      	nop			; (mov r8, r8)
 80151e8:	200000c8 	.word	0x200000c8

080151ec <memcpy>:
 80151ec:	2300      	movs	r3, #0
 80151ee:	b510      	push	{r4, lr}
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d100      	bne.n	80151f6 <memcpy+0xa>
 80151f4:	bd10      	pop	{r4, pc}
 80151f6:	5ccc      	ldrb	r4, [r1, r3]
 80151f8:	54c4      	strb	r4, [r0, r3]
 80151fa:	3301      	adds	r3, #1
 80151fc:	e7f8      	b.n	80151f0 <memcpy+0x4>

080151fe <memset>:
 80151fe:	0003      	movs	r3, r0
 8015200:	1882      	adds	r2, r0, r2
 8015202:	4293      	cmp	r3, r2
 8015204:	d100      	bne.n	8015208 <memset+0xa>
 8015206:	4770      	bx	lr
 8015208:	7019      	strb	r1, [r3, #0]
 801520a:	3301      	adds	r3, #1
 801520c:	e7f9      	b.n	8015202 <memset+0x4>
	...

08015210 <_free_r>:
 8015210:	b570      	push	{r4, r5, r6, lr}
 8015212:	0005      	movs	r5, r0
 8015214:	2900      	cmp	r1, #0
 8015216:	d010      	beq.n	801523a <_free_r+0x2a>
 8015218:	1f0c      	subs	r4, r1, #4
 801521a:	6823      	ldr	r3, [r4, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	da00      	bge.n	8015222 <_free_r+0x12>
 8015220:	18e4      	adds	r4, r4, r3
 8015222:	0028      	movs	r0, r5
 8015224:	f000 f8e2 	bl	80153ec <__malloc_lock>
 8015228:	4a1d      	ldr	r2, [pc, #116]	; (80152a0 <_free_r+0x90>)
 801522a:	6813      	ldr	r3, [r2, #0]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d105      	bne.n	801523c <_free_r+0x2c>
 8015230:	6063      	str	r3, [r4, #4]
 8015232:	6014      	str	r4, [r2, #0]
 8015234:	0028      	movs	r0, r5
 8015236:	f000 f8e1 	bl	80153fc <__malloc_unlock>
 801523a:	bd70      	pop	{r4, r5, r6, pc}
 801523c:	42a3      	cmp	r3, r4
 801523e:	d908      	bls.n	8015252 <_free_r+0x42>
 8015240:	6821      	ldr	r1, [r4, #0]
 8015242:	1860      	adds	r0, r4, r1
 8015244:	4283      	cmp	r3, r0
 8015246:	d1f3      	bne.n	8015230 <_free_r+0x20>
 8015248:	6818      	ldr	r0, [r3, #0]
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	1841      	adds	r1, r0, r1
 801524e:	6021      	str	r1, [r4, #0]
 8015250:	e7ee      	b.n	8015230 <_free_r+0x20>
 8015252:	001a      	movs	r2, r3
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d001      	beq.n	801525e <_free_r+0x4e>
 801525a:	42a3      	cmp	r3, r4
 801525c:	d9f9      	bls.n	8015252 <_free_r+0x42>
 801525e:	6811      	ldr	r1, [r2, #0]
 8015260:	1850      	adds	r0, r2, r1
 8015262:	42a0      	cmp	r0, r4
 8015264:	d10b      	bne.n	801527e <_free_r+0x6e>
 8015266:	6820      	ldr	r0, [r4, #0]
 8015268:	1809      	adds	r1, r1, r0
 801526a:	1850      	adds	r0, r2, r1
 801526c:	6011      	str	r1, [r2, #0]
 801526e:	4283      	cmp	r3, r0
 8015270:	d1e0      	bne.n	8015234 <_free_r+0x24>
 8015272:	6818      	ldr	r0, [r3, #0]
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	1841      	adds	r1, r0, r1
 8015278:	6011      	str	r1, [r2, #0]
 801527a:	6053      	str	r3, [r2, #4]
 801527c:	e7da      	b.n	8015234 <_free_r+0x24>
 801527e:	42a0      	cmp	r0, r4
 8015280:	d902      	bls.n	8015288 <_free_r+0x78>
 8015282:	230c      	movs	r3, #12
 8015284:	602b      	str	r3, [r5, #0]
 8015286:	e7d5      	b.n	8015234 <_free_r+0x24>
 8015288:	6821      	ldr	r1, [r4, #0]
 801528a:	1860      	adds	r0, r4, r1
 801528c:	4283      	cmp	r3, r0
 801528e:	d103      	bne.n	8015298 <_free_r+0x88>
 8015290:	6818      	ldr	r0, [r3, #0]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	1841      	adds	r1, r0, r1
 8015296:	6021      	str	r1, [r4, #0]
 8015298:	6063      	str	r3, [r4, #4]
 801529a:	6054      	str	r4, [r2, #4]
 801529c:	e7ca      	b.n	8015234 <_free_r+0x24>
 801529e:	46c0      	nop			; (mov r8, r8)
 80152a0:	20001b58 	.word	0x20001b58

080152a4 <_malloc_r>:
 80152a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152a6:	2303      	movs	r3, #3
 80152a8:	1ccd      	adds	r5, r1, #3
 80152aa:	439d      	bics	r5, r3
 80152ac:	3508      	adds	r5, #8
 80152ae:	0006      	movs	r6, r0
 80152b0:	2d0c      	cmp	r5, #12
 80152b2:	d21f      	bcs.n	80152f4 <_malloc_r+0x50>
 80152b4:	250c      	movs	r5, #12
 80152b6:	42a9      	cmp	r1, r5
 80152b8:	d81e      	bhi.n	80152f8 <_malloc_r+0x54>
 80152ba:	0030      	movs	r0, r6
 80152bc:	f000 f896 	bl	80153ec <__malloc_lock>
 80152c0:	4925      	ldr	r1, [pc, #148]	; (8015358 <_malloc_r+0xb4>)
 80152c2:	680a      	ldr	r2, [r1, #0]
 80152c4:	0014      	movs	r4, r2
 80152c6:	2c00      	cmp	r4, #0
 80152c8:	d11a      	bne.n	8015300 <_malloc_r+0x5c>
 80152ca:	4f24      	ldr	r7, [pc, #144]	; (801535c <_malloc_r+0xb8>)
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d104      	bne.n	80152dc <_malloc_r+0x38>
 80152d2:	0021      	movs	r1, r4
 80152d4:	0030      	movs	r0, r6
 80152d6:	f000 f843 	bl	8015360 <_sbrk_r>
 80152da:	6038      	str	r0, [r7, #0]
 80152dc:	0029      	movs	r1, r5
 80152de:	0030      	movs	r0, r6
 80152e0:	f000 f83e 	bl	8015360 <_sbrk_r>
 80152e4:	1c43      	adds	r3, r0, #1
 80152e6:	d12b      	bne.n	8015340 <_malloc_r+0x9c>
 80152e8:	230c      	movs	r3, #12
 80152ea:	0030      	movs	r0, r6
 80152ec:	6033      	str	r3, [r6, #0]
 80152ee:	f000 f885 	bl	80153fc <__malloc_unlock>
 80152f2:	e003      	b.n	80152fc <_malloc_r+0x58>
 80152f4:	2d00      	cmp	r5, #0
 80152f6:	dade      	bge.n	80152b6 <_malloc_r+0x12>
 80152f8:	230c      	movs	r3, #12
 80152fa:	6033      	str	r3, [r6, #0]
 80152fc:	2000      	movs	r0, #0
 80152fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015300:	6823      	ldr	r3, [r4, #0]
 8015302:	1b5b      	subs	r3, r3, r5
 8015304:	d419      	bmi.n	801533a <_malloc_r+0x96>
 8015306:	2b0b      	cmp	r3, #11
 8015308:	d903      	bls.n	8015312 <_malloc_r+0x6e>
 801530a:	6023      	str	r3, [r4, #0]
 801530c:	18e4      	adds	r4, r4, r3
 801530e:	6025      	str	r5, [r4, #0]
 8015310:	e003      	b.n	801531a <_malloc_r+0x76>
 8015312:	6863      	ldr	r3, [r4, #4]
 8015314:	42a2      	cmp	r2, r4
 8015316:	d10e      	bne.n	8015336 <_malloc_r+0x92>
 8015318:	600b      	str	r3, [r1, #0]
 801531a:	0030      	movs	r0, r6
 801531c:	f000 f86e 	bl	80153fc <__malloc_unlock>
 8015320:	0020      	movs	r0, r4
 8015322:	2207      	movs	r2, #7
 8015324:	300b      	adds	r0, #11
 8015326:	1d23      	adds	r3, r4, #4
 8015328:	4390      	bics	r0, r2
 801532a:	1ac2      	subs	r2, r0, r3
 801532c:	4298      	cmp	r0, r3
 801532e:	d0e6      	beq.n	80152fe <_malloc_r+0x5a>
 8015330:	1a1b      	subs	r3, r3, r0
 8015332:	50a3      	str	r3, [r4, r2]
 8015334:	e7e3      	b.n	80152fe <_malloc_r+0x5a>
 8015336:	6053      	str	r3, [r2, #4]
 8015338:	e7ef      	b.n	801531a <_malloc_r+0x76>
 801533a:	0022      	movs	r2, r4
 801533c:	6864      	ldr	r4, [r4, #4]
 801533e:	e7c2      	b.n	80152c6 <_malloc_r+0x22>
 8015340:	2303      	movs	r3, #3
 8015342:	1cc4      	adds	r4, r0, #3
 8015344:	439c      	bics	r4, r3
 8015346:	42a0      	cmp	r0, r4
 8015348:	d0e1      	beq.n	801530e <_malloc_r+0x6a>
 801534a:	1a21      	subs	r1, r4, r0
 801534c:	0030      	movs	r0, r6
 801534e:	f000 f807 	bl	8015360 <_sbrk_r>
 8015352:	1c43      	adds	r3, r0, #1
 8015354:	d1db      	bne.n	801530e <_malloc_r+0x6a>
 8015356:	e7c7      	b.n	80152e8 <_malloc_r+0x44>
 8015358:	20001b58 	.word	0x20001b58
 801535c:	20001b5c 	.word	0x20001b5c

08015360 <_sbrk_r>:
 8015360:	2300      	movs	r3, #0
 8015362:	b570      	push	{r4, r5, r6, lr}
 8015364:	4d06      	ldr	r5, [pc, #24]	; (8015380 <_sbrk_r+0x20>)
 8015366:	0004      	movs	r4, r0
 8015368:	0008      	movs	r0, r1
 801536a:	602b      	str	r3, [r5, #0]
 801536c:	f7f1 ff52 	bl	8007214 <_sbrk>
 8015370:	1c43      	adds	r3, r0, #1
 8015372:	d103      	bne.n	801537c <_sbrk_r+0x1c>
 8015374:	682b      	ldr	r3, [r5, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d000      	beq.n	801537c <_sbrk_r+0x1c>
 801537a:	6023      	str	r3, [r4, #0]
 801537c:	bd70      	pop	{r4, r5, r6, pc}
 801537e:	46c0      	nop			; (mov r8, r8)
 8015380:	20001e90 	.word	0x20001e90

08015384 <sniprintf>:
 8015384:	b40c      	push	{r2, r3}
 8015386:	b530      	push	{r4, r5, lr}
 8015388:	4b17      	ldr	r3, [pc, #92]	; (80153e8 <sniprintf+0x64>)
 801538a:	000c      	movs	r4, r1
 801538c:	681d      	ldr	r5, [r3, #0]
 801538e:	b09d      	sub	sp, #116	; 0x74
 8015390:	2900      	cmp	r1, #0
 8015392:	da08      	bge.n	80153a6 <sniprintf+0x22>
 8015394:	238b      	movs	r3, #139	; 0x8b
 8015396:	2001      	movs	r0, #1
 8015398:	602b      	str	r3, [r5, #0]
 801539a:	4240      	negs	r0, r0
 801539c:	b01d      	add	sp, #116	; 0x74
 801539e:	bc30      	pop	{r4, r5}
 80153a0:	bc08      	pop	{r3}
 80153a2:	b002      	add	sp, #8
 80153a4:	4718      	bx	r3
 80153a6:	2382      	movs	r3, #130	; 0x82
 80153a8:	466a      	mov	r2, sp
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	8293      	strh	r3, [r2, #20]
 80153ae:	2300      	movs	r3, #0
 80153b0:	9002      	str	r0, [sp, #8]
 80153b2:	9006      	str	r0, [sp, #24]
 80153b4:	4299      	cmp	r1, r3
 80153b6:	d000      	beq.n	80153ba <sniprintf+0x36>
 80153b8:	1e4b      	subs	r3, r1, #1
 80153ba:	9304      	str	r3, [sp, #16]
 80153bc:	9307      	str	r3, [sp, #28]
 80153be:	2301      	movs	r3, #1
 80153c0:	466a      	mov	r2, sp
 80153c2:	425b      	negs	r3, r3
 80153c4:	82d3      	strh	r3, [r2, #22]
 80153c6:	0028      	movs	r0, r5
 80153c8:	ab21      	add	r3, sp, #132	; 0x84
 80153ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80153cc:	a902      	add	r1, sp, #8
 80153ce:	9301      	str	r3, [sp, #4]
 80153d0:	f000 f87e 	bl	80154d0 <_svfiprintf_r>
 80153d4:	1c43      	adds	r3, r0, #1
 80153d6:	da01      	bge.n	80153dc <sniprintf+0x58>
 80153d8:	238b      	movs	r3, #139	; 0x8b
 80153da:	602b      	str	r3, [r5, #0]
 80153dc:	2c00      	cmp	r4, #0
 80153de:	d0dd      	beq.n	801539c <sniprintf+0x18>
 80153e0:	2300      	movs	r3, #0
 80153e2:	9a02      	ldr	r2, [sp, #8]
 80153e4:	7013      	strb	r3, [r2, #0]
 80153e6:	e7d9      	b.n	801539c <sniprintf+0x18>
 80153e8:	200000c8 	.word	0x200000c8

080153ec <__malloc_lock>:
 80153ec:	b510      	push	{r4, lr}
 80153ee:	4802      	ldr	r0, [pc, #8]	; (80153f8 <__malloc_lock+0xc>)
 80153f0:	f000 faf0 	bl	80159d4 <__retarget_lock_acquire_recursive>
 80153f4:	bd10      	pop	{r4, pc}
 80153f6:	46c0      	nop			; (mov r8, r8)
 80153f8:	20001e98 	.word	0x20001e98

080153fc <__malloc_unlock>:
 80153fc:	b510      	push	{r4, lr}
 80153fe:	4802      	ldr	r0, [pc, #8]	; (8015408 <__malloc_unlock+0xc>)
 8015400:	f000 fae9 	bl	80159d6 <__retarget_lock_release_recursive>
 8015404:	bd10      	pop	{r4, pc}
 8015406:	46c0      	nop			; (mov r8, r8)
 8015408:	20001e98 	.word	0x20001e98

0801540c <__ssputs_r>:
 801540c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801540e:	688e      	ldr	r6, [r1, #8]
 8015410:	b085      	sub	sp, #20
 8015412:	0007      	movs	r7, r0
 8015414:	000c      	movs	r4, r1
 8015416:	9203      	str	r2, [sp, #12]
 8015418:	9301      	str	r3, [sp, #4]
 801541a:	429e      	cmp	r6, r3
 801541c:	d83c      	bhi.n	8015498 <__ssputs_r+0x8c>
 801541e:	2390      	movs	r3, #144	; 0x90
 8015420:	898a      	ldrh	r2, [r1, #12]
 8015422:	00db      	lsls	r3, r3, #3
 8015424:	421a      	tst	r2, r3
 8015426:	d034      	beq.n	8015492 <__ssputs_r+0x86>
 8015428:	2503      	movs	r5, #3
 801542a:	6909      	ldr	r1, [r1, #16]
 801542c:	6823      	ldr	r3, [r4, #0]
 801542e:	1a5b      	subs	r3, r3, r1
 8015430:	9302      	str	r3, [sp, #8]
 8015432:	6963      	ldr	r3, [r4, #20]
 8015434:	9802      	ldr	r0, [sp, #8]
 8015436:	435d      	muls	r5, r3
 8015438:	0feb      	lsrs	r3, r5, #31
 801543a:	195d      	adds	r5, r3, r5
 801543c:	9b01      	ldr	r3, [sp, #4]
 801543e:	106d      	asrs	r5, r5, #1
 8015440:	3301      	adds	r3, #1
 8015442:	181b      	adds	r3, r3, r0
 8015444:	42ab      	cmp	r3, r5
 8015446:	d900      	bls.n	801544a <__ssputs_r+0x3e>
 8015448:	001d      	movs	r5, r3
 801544a:	0553      	lsls	r3, r2, #21
 801544c:	d532      	bpl.n	80154b4 <__ssputs_r+0xa8>
 801544e:	0029      	movs	r1, r5
 8015450:	0038      	movs	r0, r7
 8015452:	f7ff ff27 	bl	80152a4 <_malloc_r>
 8015456:	1e06      	subs	r6, r0, #0
 8015458:	d109      	bne.n	801546e <__ssputs_r+0x62>
 801545a:	230c      	movs	r3, #12
 801545c:	603b      	str	r3, [r7, #0]
 801545e:	2340      	movs	r3, #64	; 0x40
 8015460:	2001      	movs	r0, #1
 8015462:	89a2      	ldrh	r2, [r4, #12]
 8015464:	4240      	negs	r0, r0
 8015466:	4313      	orrs	r3, r2
 8015468:	81a3      	strh	r3, [r4, #12]
 801546a:	b005      	add	sp, #20
 801546c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801546e:	9a02      	ldr	r2, [sp, #8]
 8015470:	6921      	ldr	r1, [r4, #16]
 8015472:	f7ff febb 	bl	80151ec <memcpy>
 8015476:	89a3      	ldrh	r3, [r4, #12]
 8015478:	4a14      	ldr	r2, [pc, #80]	; (80154cc <__ssputs_r+0xc0>)
 801547a:	401a      	ands	r2, r3
 801547c:	2380      	movs	r3, #128	; 0x80
 801547e:	4313      	orrs	r3, r2
 8015480:	81a3      	strh	r3, [r4, #12]
 8015482:	9b02      	ldr	r3, [sp, #8]
 8015484:	6126      	str	r6, [r4, #16]
 8015486:	18f6      	adds	r6, r6, r3
 8015488:	6026      	str	r6, [r4, #0]
 801548a:	6165      	str	r5, [r4, #20]
 801548c:	9e01      	ldr	r6, [sp, #4]
 801548e:	1aed      	subs	r5, r5, r3
 8015490:	60a5      	str	r5, [r4, #8]
 8015492:	9b01      	ldr	r3, [sp, #4]
 8015494:	429e      	cmp	r6, r3
 8015496:	d900      	bls.n	801549a <__ssputs_r+0x8e>
 8015498:	9e01      	ldr	r6, [sp, #4]
 801549a:	0032      	movs	r2, r6
 801549c:	9903      	ldr	r1, [sp, #12]
 801549e:	6820      	ldr	r0, [r4, #0]
 80154a0:	f000 faa5 	bl	80159ee <memmove>
 80154a4:	68a3      	ldr	r3, [r4, #8]
 80154a6:	2000      	movs	r0, #0
 80154a8:	1b9b      	subs	r3, r3, r6
 80154aa:	60a3      	str	r3, [r4, #8]
 80154ac:	6823      	ldr	r3, [r4, #0]
 80154ae:	199e      	adds	r6, r3, r6
 80154b0:	6026      	str	r6, [r4, #0]
 80154b2:	e7da      	b.n	801546a <__ssputs_r+0x5e>
 80154b4:	002a      	movs	r2, r5
 80154b6:	0038      	movs	r0, r7
 80154b8:	f000 faac 	bl	8015a14 <_realloc_r>
 80154bc:	1e06      	subs	r6, r0, #0
 80154be:	d1e0      	bne.n	8015482 <__ssputs_r+0x76>
 80154c0:	0038      	movs	r0, r7
 80154c2:	6921      	ldr	r1, [r4, #16]
 80154c4:	f7ff fea4 	bl	8015210 <_free_r>
 80154c8:	e7c7      	b.n	801545a <__ssputs_r+0x4e>
 80154ca:	46c0      	nop			; (mov r8, r8)
 80154cc:	fffffb7f 	.word	0xfffffb7f

080154d0 <_svfiprintf_r>:
 80154d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154d2:	b0a1      	sub	sp, #132	; 0x84
 80154d4:	9003      	str	r0, [sp, #12]
 80154d6:	001d      	movs	r5, r3
 80154d8:	898b      	ldrh	r3, [r1, #12]
 80154da:	000f      	movs	r7, r1
 80154dc:	0016      	movs	r6, r2
 80154de:	061b      	lsls	r3, r3, #24
 80154e0:	d511      	bpl.n	8015506 <_svfiprintf_r+0x36>
 80154e2:	690b      	ldr	r3, [r1, #16]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d10e      	bne.n	8015506 <_svfiprintf_r+0x36>
 80154e8:	2140      	movs	r1, #64	; 0x40
 80154ea:	f7ff fedb 	bl	80152a4 <_malloc_r>
 80154ee:	6038      	str	r0, [r7, #0]
 80154f0:	6138      	str	r0, [r7, #16]
 80154f2:	2800      	cmp	r0, #0
 80154f4:	d105      	bne.n	8015502 <_svfiprintf_r+0x32>
 80154f6:	230c      	movs	r3, #12
 80154f8:	9a03      	ldr	r2, [sp, #12]
 80154fa:	3801      	subs	r0, #1
 80154fc:	6013      	str	r3, [r2, #0]
 80154fe:	b021      	add	sp, #132	; 0x84
 8015500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015502:	2340      	movs	r3, #64	; 0x40
 8015504:	617b      	str	r3, [r7, #20]
 8015506:	2300      	movs	r3, #0
 8015508:	ac08      	add	r4, sp, #32
 801550a:	6163      	str	r3, [r4, #20]
 801550c:	3320      	adds	r3, #32
 801550e:	7663      	strb	r3, [r4, #25]
 8015510:	3310      	adds	r3, #16
 8015512:	76a3      	strb	r3, [r4, #26]
 8015514:	9507      	str	r5, [sp, #28]
 8015516:	0035      	movs	r5, r6
 8015518:	782b      	ldrb	r3, [r5, #0]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d001      	beq.n	8015522 <_svfiprintf_r+0x52>
 801551e:	2b25      	cmp	r3, #37	; 0x25
 8015520:	d147      	bne.n	80155b2 <_svfiprintf_r+0xe2>
 8015522:	1bab      	subs	r3, r5, r6
 8015524:	9305      	str	r3, [sp, #20]
 8015526:	42b5      	cmp	r5, r6
 8015528:	d00c      	beq.n	8015544 <_svfiprintf_r+0x74>
 801552a:	0032      	movs	r2, r6
 801552c:	0039      	movs	r1, r7
 801552e:	9803      	ldr	r0, [sp, #12]
 8015530:	f7ff ff6c 	bl	801540c <__ssputs_r>
 8015534:	1c43      	adds	r3, r0, #1
 8015536:	d100      	bne.n	801553a <_svfiprintf_r+0x6a>
 8015538:	e0ae      	b.n	8015698 <_svfiprintf_r+0x1c8>
 801553a:	6962      	ldr	r2, [r4, #20]
 801553c:	9b05      	ldr	r3, [sp, #20]
 801553e:	4694      	mov	ip, r2
 8015540:	4463      	add	r3, ip
 8015542:	6163      	str	r3, [r4, #20]
 8015544:	782b      	ldrb	r3, [r5, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d100      	bne.n	801554c <_svfiprintf_r+0x7c>
 801554a:	e0a5      	b.n	8015698 <_svfiprintf_r+0x1c8>
 801554c:	2201      	movs	r2, #1
 801554e:	2300      	movs	r3, #0
 8015550:	4252      	negs	r2, r2
 8015552:	6062      	str	r2, [r4, #4]
 8015554:	a904      	add	r1, sp, #16
 8015556:	3254      	adds	r2, #84	; 0x54
 8015558:	1852      	adds	r2, r2, r1
 801555a:	1c6e      	adds	r6, r5, #1
 801555c:	6023      	str	r3, [r4, #0]
 801555e:	60e3      	str	r3, [r4, #12]
 8015560:	60a3      	str	r3, [r4, #8]
 8015562:	7013      	strb	r3, [r2, #0]
 8015564:	65a3      	str	r3, [r4, #88]	; 0x58
 8015566:	2205      	movs	r2, #5
 8015568:	7831      	ldrb	r1, [r6, #0]
 801556a:	4854      	ldr	r0, [pc, #336]	; (80156bc <_svfiprintf_r+0x1ec>)
 801556c:	f000 fa34 	bl	80159d8 <memchr>
 8015570:	1c75      	adds	r5, r6, #1
 8015572:	2800      	cmp	r0, #0
 8015574:	d11f      	bne.n	80155b6 <_svfiprintf_r+0xe6>
 8015576:	6822      	ldr	r2, [r4, #0]
 8015578:	06d3      	lsls	r3, r2, #27
 801557a:	d504      	bpl.n	8015586 <_svfiprintf_r+0xb6>
 801557c:	2353      	movs	r3, #83	; 0x53
 801557e:	a904      	add	r1, sp, #16
 8015580:	185b      	adds	r3, r3, r1
 8015582:	2120      	movs	r1, #32
 8015584:	7019      	strb	r1, [r3, #0]
 8015586:	0713      	lsls	r3, r2, #28
 8015588:	d504      	bpl.n	8015594 <_svfiprintf_r+0xc4>
 801558a:	2353      	movs	r3, #83	; 0x53
 801558c:	a904      	add	r1, sp, #16
 801558e:	185b      	adds	r3, r3, r1
 8015590:	212b      	movs	r1, #43	; 0x2b
 8015592:	7019      	strb	r1, [r3, #0]
 8015594:	7833      	ldrb	r3, [r6, #0]
 8015596:	2b2a      	cmp	r3, #42	; 0x2a
 8015598:	d016      	beq.n	80155c8 <_svfiprintf_r+0xf8>
 801559a:	0035      	movs	r5, r6
 801559c:	2100      	movs	r1, #0
 801559e:	200a      	movs	r0, #10
 80155a0:	68e3      	ldr	r3, [r4, #12]
 80155a2:	782a      	ldrb	r2, [r5, #0]
 80155a4:	1c6e      	adds	r6, r5, #1
 80155a6:	3a30      	subs	r2, #48	; 0x30
 80155a8:	2a09      	cmp	r2, #9
 80155aa:	d94e      	bls.n	801564a <_svfiprintf_r+0x17a>
 80155ac:	2900      	cmp	r1, #0
 80155ae:	d111      	bne.n	80155d4 <_svfiprintf_r+0x104>
 80155b0:	e017      	b.n	80155e2 <_svfiprintf_r+0x112>
 80155b2:	3501      	adds	r5, #1
 80155b4:	e7b0      	b.n	8015518 <_svfiprintf_r+0x48>
 80155b6:	4b41      	ldr	r3, [pc, #260]	; (80156bc <_svfiprintf_r+0x1ec>)
 80155b8:	6822      	ldr	r2, [r4, #0]
 80155ba:	1ac0      	subs	r0, r0, r3
 80155bc:	2301      	movs	r3, #1
 80155be:	4083      	lsls	r3, r0
 80155c0:	4313      	orrs	r3, r2
 80155c2:	002e      	movs	r6, r5
 80155c4:	6023      	str	r3, [r4, #0]
 80155c6:	e7ce      	b.n	8015566 <_svfiprintf_r+0x96>
 80155c8:	9b07      	ldr	r3, [sp, #28]
 80155ca:	1d19      	adds	r1, r3, #4
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	9107      	str	r1, [sp, #28]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	db01      	blt.n	80155d8 <_svfiprintf_r+0x108>
 80155d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80155d6:	e004      	b.n	80155e2 <_svfiprintf_r+0x112>
 80155d8:	425b      	negs	r3, r3
 80155da:	60e3      	str	r3, [r4, #12]
 80155dc:	2302      	movs	r3, #2
 80155de:	4313      	orrs	r3, r2
 80155e0:	6023      	str	r3, [r4, #0]
 80155e2:	782b      	ldrb	r3, [r5, #0]
 80155e4:	2b2e      	cmp	r3, #46	; 0x2e
 80155e6:	d10a      	bne.n	80155fe <_svfiprintf_r+0x12e>
 80155e8:	786b      	ldrb	r3, [r5, #1]
 80155ea:	2b2a      	cmp	r3, #42	; 0x2a
 80155ec:	d135      	bne.n	801565a <_svfiprintf_r+0x18a>
 80155ee:	9b07      	ldr	r3, [sp, #28]
 80155f0:	3502      	adds	r5, #2
 80155f2:	1d1a      	adds	r2, r3, #4
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	9207      	str	r2, [sp, #28]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	db2b      	blt.n	8015654 <_svfiprintf_r+0x184>
 80155fc:	9309      	str	r3, [sp, #36]	; 0x24
 80155fe:	4e30      	ldr	r6, [pc, #192]	; (80156c0 <_svfiprintf_r+0x1f0>)
 8015600:	2203      	movs	r2, #3
 8015602:	0030      	movs	r0, r6
 8015604:	7829      	ldrb	r1, [r5, #0]
 8015606:	f000 f9e7 	bl	80159d8 <memchr>
 801560a:	2800      	cmp	r0, #0
 801560c:	d006      	beq.n	801561c <_svfiprintf_r+0x14c>
 801560e:	2340      	movs	r3, #64	; 0x40
 8015610:	1b80      	subs	r0, r0, r6
 8015612:	4083      	lsls	r3, r0
 8015614:	6822      	ldr	r2, [r4, #0]
 8015616:	3501      	adds	r5, #1
 8015618:	4313      	orrs	r3, r2
 801561a:	6023      	str	r3, [r4, #0]
 801561c:	7829      	ldrb	r1, [r5, #0]
 801561e:	2206      	movs	r2, #6
 8015620:	4828      	ldr	r0, [pc, #160]	; (80156c4 <_svfiprintf_r+0x1f4>)
 8015622:	1c6e      	adds	r6, r5, #1
 8015624:	7621      	strb	r1, [r4, #24]
 8015626:	f000 f9d7 	bl	80159d8 <memchr>
 801562a:	2800      	cmp	r0, #0
 801562c:	d03c      	beq.n	80156a8 <_svfiprintf_r+0x1d8>
 801562e:	4b26      	ldr	r3, [pc, #152]	; (80156c8 <_svfiprintf_r+0x1f8>)
 8015630:	2b00      	cmp	r3, #0
 8015632:	d125      	bne.n	8015680 <_svfiprintf_r+0x1b0>
 8015634:	2207      	movs	r2, #7
 8015636:	9b07      	ldr	r3, [sp, #28]
 8015638:	3307      	adds	r3, #7
 801563a:	4393      	bics	r3, r2
 801563c:	3308      	adds	r3, #8
 801563e:	9307      	str	r3, [sp, #28]
 8015640:	6963      	ldr	r3, [r4, #20]
 8015642:	9a04      	ldr	r2, [sp, #16]
 8015644:	189b      	adds	r3, r3, r2
 8015646:	6163      	str	r3, [r4, #20]
 8015648:	e765      	b.n	8015516 <_svfiprintf_r+0x46>
 801564a:	4343      	muls	r3, r0
 801564c:	0035      	movs	r5, r6
 801564e:	2101      	movs	r1, #1
 8015650:	189b      	adds	r3, r3, r2
 8015652:	e7a6      	b.n	80155a2 <_svfiprintf_r+0xd2>
 8015654:	2301      	movs	r3, #1
 8015656:	425b      	negs	r3, r3
 8015658:	e7d0      	b.n	80155fc <_svfiprintf_r+0x12c>
 801565a:	2300      	movs	r3, #0
 801565c:	200a      	movs	r0, #10
 801565e:	001a      	movs	r2, r3
 8015660:	3501      	adds	r5, #1
 8015662:	6063      	str	r3, [r4, #4]
 8015664:	7829      	ldrb	r1, [r5, #0]
 8015666:	1c6e      	adds	r6, r5, #1
 8015668:	3930      	subs	r1, #48	; 0x30
 801566a:	2909      	cmp	r1, #9
 801566c:	d903      	bls.n	8015676 <_svfiprintf_r+0x1a6>
 801566e:	2b00      	cmp	r3, #0
 8015670:	d0c5      	beq.n	80155fe <_svfiprintf_r+0x12e>
 8015672:	9209      	str	r2, [sp, #36]	; 0x24
 8015674:	e7c3      	b.n	80155fe <_svfiprintf_r+0x12e>
 8015676:	4342      	muls	r2, r0
 8015678:	0035      	movs	r5, r6
 801567a:	2301      	movs	r3, #1
 801567c:	1852      	adds	r2, r2, r1
 801567e:	e7f1      	b.n	8015664 <_svfiprintf_r+0x194>
 8015680:	ab07      	add	r3, sp, #28
 8015682:	9300      	str	r3, [sp, #0]
 8015684:	003a      	movs	r2, r7
 8015686:	0021      	movs	r1, r4
 8015688:	4b10      	ldr	r3, [pc, #64]	; (80156cc <_svfiprintf_r+0x1fc>)
 801568a:	9803      	ldr	r0, [sp, #12]
 801568c:	e000      	b.n	8015690 <_svfiprintf_r+0x1c0>
 801568e:	bf00      	nop
 8015690:	9004      	str	r0, [sp, #16]
 8015692:	9b04      	ldr	r3, [sp, #16]
 8015694:	3301      	adds	r3, #1
 8015696:	d1d3      	bne.n	8015640 <_svfiprintf_r+0x170>
 8015698:	89bb      	ldrh	r3, [r7, #12]
 801569a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801569c:	065b      	lsls	r3, r3, #25
 801569e:	d400      	bmi.n	80156a2 <_svfiprintf_r+0x1d2>
 80156a0:	e72d      	b.n	80154fe <_svfiprintf_r+0x2e>
 80156a2:	2001      	movs	r0, #1
 80156a4:	4240      	negs	r0, r0
 80156a6:	e72a      	b.n	80154fe <_svfiprintf_r+0x2e>
 80156a8:	ab07      	add	r3, sp, #28
 80156aa:	9300      	str	r3, [sp, #0]
 80156ac:	003a      	movs	r2, r7
 80156ae:	0021      	movs	r1, r4
 80156b0:	4b06      	ldr	r3, [pc, #24]	; (80156cc <_svfiprintf_r+0x1fc>)
 80156b2:	9803      	ldr	r0, [sp, #12]
 80156b4:	f000 f87c 	bl	80157b0 <_printf_i>
 80156b8:	e7ea      	b.n	8015690 <_svfiprintf_r+0x1c0>
 80156ba:	46c0      	nop			; (mov r8, r8)
 80156bc:	0801706b 	.word	0x0801706b
 80156c0:	08017071 	.word	0x08017071
 80156c4:	08017075 	.word	0x08017075
 80156c8:	00000000 	.word	0x00000000
 80156cc:	0801540d 	.word	0x0801540d

080156d0 <_printf_common>:
 80156d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156d2:	0015      	movs	r5, r2
 80156d4:	9301      	str	r3, [sp, #4]
 80156d6:	688a      	ldr	r2, [r1, #8]
 80156d8:	690b      	ldr	r3, [r1, #16]
 80156da:	000c      	movs	r4, r1
 80156dc:	9000      	str	r0, [sp, #0]
 80156de:	4293      	cmp	r3, r2
 80156e0:	da00      	bge.n	80156e4 <_printf_common+0x14>
 80156e2:	0013      	movs	r3, r2
 80156e4:	0022      	movs	r2, r4
 80156e6:	602b      	str	r3, [r5, #0]
 80156e8:	3243      	adds	r2, #67	; 0x43
 80156ea:	7812      	ldrb	r2, [r2, #0]
 80156ec:	2a00      	cmp	r2, #0
 80156ee:	d001      	beq.n	80156f4 <_printf_common+0x24>
 80156f0:	3301      	adds	r3, #1
 80156f2:	602b      	str	r3, [r5, #0]
 80156f4:	6823      	ldr	r3, [r4, #0]
 80156f6:	069b      	lsls	r3, r3, #26
 80156f8:	d502      	bpl.n	8015700 <_printf_common+0x30>
 80156fa:	682b      	ldr	r3, [r5, #0]
 80156fc:	3302      	adds	r3, #2
 80156fe:	602b      	str	r3, [r5, #0]
 8015700:	6822      	ldr	r2, [r4, #0]
 8015702:	2306      	movs	r3, #6
 8015704:	0017      	movs	r7, r2
 8015706:	401f      	ands	r7, r3
 8015708:	421a      	tst	r2, r3
 801570a:	d027      	beq.n	801575c <_printf_common+0x8c>
 801570c:	0023      	movs	r3, r4
 801570e:	3343      	adds	r3, #67	; 0x43
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	1e5a      	subs	r2, r3, #1
 8015714:	4193      	sbcs	r3, r2
 8015716:	6822      	ldr	r2, [r4, #0]
 8015718:	0692      	lsls	r2, r2, #26
 801571a:	d430      	bmi.n	801577e <_printf_common+0xae>
 801571c:	0022      	movs	r2, r4
 801571e:	9901      	ldr	r1, [sp, #4]
 8015720:	9800      	ldr	r0, [sp, #0]
 8015722:	9e08      	ldr	r6, [sp, #32]
 8015724:	3243      	adds	r2, #67	; 0x43
 8015726:	47b0      	blx	r6
 8015728:	1c43      	adds	r3, r0, #1
 801572a:	d025      	beq.n	8015778 <_printf_common+0xa8>
 801572c:	2306      	movs	r3, #6
 801572e:	6820      	ldr	r0, [r4, #0]
 8015730:	682a      	ldr	r2, [r5, #0]
 8015732:	68e1      	ldr	r1, [r4, #12]
 8015734:	2500      	movs	r5, #0
 8015736:	4003      	ands	r3, r0
 8015738:	2b04      	cmp	r3, #4
 801573a:	d103      	bne.n	8015744 <_printf_common+0x74>
 801573c:	1a8d      	subs	r5, r1, r2
 801573e:	43eb      	mvns	r3, r5
 8015740:	17db      	asrs	r3, r3, #31
 8015742:	401d      	ands	r5, r3
 8015744:	68a3      	ldr	r3, [r4, #8]
 8015746:	6922      	ldr	r2, [r4, #16]
 8015748:	4293      	cmp	r3, r2
 801574a:	dd01      	ble.n	8015750 <_printf_common+0x80>
 801574c:	1a9b      	subs	r3, r3, r2
 801574e:	18ed      	adds	r5, r5, r3
 8015750:	2700      	movs	r7, #0
 8015752:	42bd      	cmp	r5, r7
 8015754:	d120      	bne.n	8015798 <_printf_common+0xc8>
 8015756:	2000      	movs	r0, #0
 8015758:	e010      	b.n	801577c <_printf_common+0xac>
 801575a:	3701      	adds	r7, #1
 801575c:	68e3      	ldr	r3, [r4, #12]
 801575e:	682a      	ldr	r2, [r5, #0]
 8015760:	1a9b      	subs	r3, r3, r2
 8015762:	42bb      	cmp	r3, r7
 8015764:	ddd2      	ble.n	801570c <_printf_common+0x3c>
 8015766:	0022      	movs	r2, r4
 8015768:	2301      	movs	r3, #1
 801576a:	9901      	ldr	r1, [sp, #4]
 801576c:	9800      	ldr	r0, [sp, #0]
 801576e:	9e08      	ldr	r6, [sp, #32]
 8015770:	3219      	adds	r2, #25
 8015772:	47b0      	blx	r6
 8015774:	1c43      	adds	r3, r0, #1
 8015776:	d1f0      	bne.n	801575a <_printf_common+0x8a>
 8015778:	2001      	movs	r0, #1
 801577a:	4240      	negs	r0, r0
 801577c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801577e:	2030      	movs	r0, #48	; 0x30
 8015780:	18e1      	adds	r1, r4, r3
 8015782:	3143      	adds	r1, #67	; 0x43
 8015784:	7008      	strb	r0, [r1, #0]
 8015786:	0021      	movs	r1, r4
 8015788:	1c5a      	adds	r2, r3, #1
 801578a:	3145      	adds	r1, #69	; 0x45
 801578c:	7809      	ldrb	r1, [r1, #0]
 801578e:	18a2      	adds	r2, r4, r2
 8015790:	3243      	adds	r2, #67	; 0x43
 8015792:	3302      	adds	r3, #2
 8015794:	7011      	strb	r1, [r2, #0]
 8015796:	e7c1      	b.n	801571c <_printf_common+0x4c>
 8015798:	0022      	movs	r2, r4
 801579a:	2301      	movs	r3, #1
 801579c:	9901      	ldr	r1, [sp, #4]
 801579e:	9800      	ldr	r0, [sp, #0]
 80157a0:	9e08      	ldr	r6, [sp, #32]
 80157a2:	321a      	adds	r2, #26
 80157a4:	47b0      	blx	r6
 80157a6:	1c43      	adds	r3, r0, #1
 80157a8:	d0e6      	beq.n	8015778 <_printf_common+0xa8>
 80157aa:	3701      	adds	r7, #1
 80157ac:	e7d1      	b.n	8015752 <_printf_common+0x82>
	...

080157b0 <_printf_i>:
 80157b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157b2:	b08b      	sub	sp, #44	; 0x2c
 80157b4:	9206      	str	r2, [sp, #24]
 80157b6:	000a      	movs	r2, r1
 80157b8:	3243      	adds	r2, #67	; 0x43
 80157ba:	9307      	str	r3, [sp, #28]
 80157bc:	9005      	str	r0, [sp, #20]
 80157be:	9204      	str	r2, [sp, #16]
 80157c0:	7e0a      	ldrb	r2, [r1, #24]
 80157c2:	000c      	movs	r4, r1
 80157c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157c6:	2a78      	cmp	r2, #120	; 0x78
 80157c8:	d806      	bhi.n	80157d8 <_printf_i+0x28>
 80157ca:	2a62      	cmp	r2, #98	; 0x62
 80157cc:	d808      	bhi.n	80157e0 <_printf_i+0x30>
 80157ce:	2a00      	cmp	r2, #0
 80157d0:	d100      	bne.n	80157d4 <_printf_i+0x24>
 80157d2:	e0c0      	b.n	8015956 <_printf_i+0x1a6>
 80157d4:	2a58      	cmp	r2, #88	; 0x58
 80157d6:	d052      	beq.n	801587e <_printf_i+0xce>
 80157d8:	0026      	movs	r6, r4
 80157da:	3642      	adds	r6, #66	; 0x42
 80157dc:	7032      	strb	r2, [r6, #0]
 80157de:	e022      	b.n	8015826 <_printf_i+0x76>
 80157e0:	0010      	movs	r0, r2
 80157e2:	3863      	subs	r0, #99	; 0x63
 80157e4:	2815      	cmp	r0, #21
 80157e6:	d8f7      	bhi.n	80157d8 <_printf_i+0x28>
 80157e8:	f7f0 fcaa 	bl	8006140 <__gnu_thumb1_case_shi>
 80157ec:	001f0016 	.word	0x001f0016
 80157f0:	fff6fff6 	.word	0xfff6fff6
 80157f4:	fff6fff6 	.word	0xfff6fff6
 80157f8:	fff6001f 	.word	0xfff6001f
 80157fc:	fff6fff6 	.word	0xfff6fff6
 8015800:	00a8fff6 	.word	0x00a8fff6
 8015804:	009a0036 	.word	0x009a0036
 8015808:	fff6fff6 	.word	0xfff6fff6
 801580c:	fff600b9 	.word	0xfff600b9
 8015810:	fff60036 	.word	0xfff60036
 8015814:	009efff6 	.word	0x009efff6
 8015818:	0026      	movs	r6, r4
 801581a:	681a      	ldr	r2, [r3, #0]
 801581c:	3642      	adds	r6, #66	; 0x42
 801581e:	1d11      	adds	r1, r2, #4
 8015820:	6019      	str	r1, [r3, #0]
 8015822:	6813      	ldr	r3, [r2, #0]
 8015824:	7033      	strb	r3, [r6, #0]
 8015826:	2301      	movs	r3, #1
 8015828:	e0a7      	b.n	801597a <_printf_i+0x1ca>
 801582a:	6808      	ldr	r0, [r1, #0]
 801582c:	6819      	ldr	r1, [r3, #0]
 801582e:	1d0a      	adds	r2, r1, #4
 8015830:	0605      	lsls	r5, r0, #24
 8015832:	d50b      	bpl.n	801584c <_printf_i+0x9c>
 8015834:	680d      	ldr	r5, [r1, #0]
 8015836:	601a      	str	r2, [r3, #0]
 8015838:	2d00      	cmp	r5, #0
 801583a:	da03      	bge.n	8015844 <_printf_i+0x94>
 801583c:	232d      	movs	r3, #45	; 0x2d
 801583e:	9a04      	ldr	r2, [sp, #16]
 8015840:	426d      	negs	r5, r5
 8015842:	7013      	strb	r3, [r2, #0]
 8015844:	4b61      	ldr	r3, [pc, #388]	; (80159cc <_printf_i+0x21c>)
 8015846:	270a      	movs	r7, #10
 8015848:	9303      	str	r3, [sp, #12]
 801584a:	e032      	b.n	80158b2 <_printf_i+0x102>
 801584c:	680d      	ldr	r5, [r1, #0]
 801584e:	601a      	str	r2, [r3, #0]
 8015850:	0641      	lsls	r1, r0, #25
 8015852:	d5f1      	bpl.n	8015838 <_printf_i+0x88>
 8015854:	b22d      	sxth	r5, r5
 8015856:	e7ef      	b.n	8015838 <_printf_i+0x88>
 8015858:	680d      	ldr	r5, [r1, #0]
 801585a:	6819      	ldr	r1, [r3, #0]
 801585c:	1d08      	adds	r0, r1, #4
 801585e:	6018      	str	r0, [r3, #0]
 8015860:	062e      	lsls	r6, r5, #24
 8015862:	d501      	bpl.n	8015868 <_printf_i+0xb8>
 8015864:	680d      	ldr	r5, [r1, #0]
 8015866:	e003      	b.n	8015870 <_printf_i+0xc0>
 8015868:	066d      	lsls	r5, r5, #25
 801586a:	d5fb      	bpl.n	8015864 <_printf_i+0xb4>
 801586c:	680d      	ldr	r5, [r1, #0]
 801586e:	b2ad      	uxth	r5, r5
 8015870:	4b56      	ldr	r3, [pc, #344]	; (80159cc <_printf_i+0x21c>)
 8015872:	270a      	movs	r7, #10
 8015874:	9303      	str	r3, [sp, #12]
 8015876:	2a6f      	cmp	r2, #111	; 0x6f
 8015878:	d117      	bne.n	80158aa <_printf_i+0xfa>
 801587a:	2708      	movs	r7, #8
 801587c:	e015      	b.n	80158aa <_printf_i+0xfa>
 801587e:	3145      	adds	r1, #69	; 0x45
 8015880:	700a      	strb	r2, [r1, #0]
 8015882:	4a52      	ldr	r2, [pc, #328]	; (80159cc <_printf_i+0x21c>)
 8015884:	9203      	str	r2, [sp, #12]
 8015886:	681a      	ldr	r2, [r3, #0]
 8015888:	6821      	ldr	r1, [r4, #0]
 801588a:	ca20      	ldmia	r2!, {r5}
 801588c:	601a      	str	r2, [r3, #0]
 801588e:	0608      	lsls	r0, r1, #24
 8015890:	d550      	bpl.n	8015934 <_printf_i+0x184>
 8015892:	07cb      	lsls	r3, r1, #31
 8015894:	d502      	bpl.n	801589c <_printf_i+0xec>
 8015896:	2320      	movs	r3, #32
 8015898:	4319      	orrs	r1, r3
 801589a:	6021      	str	r1, [r4, #0]
 801589c:	2710      	movs	r7, #16
 801589e:	2d00      	cmp	r5, #0
 80158a0:	d103      	bne.n	80158aa <_printf_i+0xfa>
 80158a2:	2320      	movs	r3, #32
 80158a4:	6822      	ldr	r2, [r4, #0]
 80158a6:	439a      	bics	r2, r3
 80158a8:	6022      	str	r2, [r4, #0]
 80158aa:	0023      	movs	r3, r4
 80158ac:	2200      	movs	r2, #0
 80158ae:	3343      	adds	r3, #67	; 0x43
 80158b0:	701a      	strb	r2, [r3, #0]
 80158b2:	6863      	ldr	r3, [r4, #4]
 80158b4:	60a3      	str	r3, [r4, #8]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	db03      	blt.n	80158c2 <_printf_i+0x112>
 80158ba:	2204      	movs	r2, #4
 80158bc:	6821      	ldr	r1, [r4, #0]
 80158be:	4391      	bics	r1, r2
 80158c0:	6021      	str	r1, [r4, #0]
 80158c2:	2d00      	cmp	r5, #0
 80158c4:	d102      	bne.n	80158cc <_printf_i+0x11c>
 80158c6:	9e04      	ldr	r6, [sp, #16]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d00c      	beq.n	80158e6 <_printf_i+0x136>
 80158cc:	9e04      	ldr	r6, [sp, #16]
 80158ce:	0028      	movs	r0, r5
 80158d0:	0039      	movs	r1, r7
 80158d2:	f7f0 fcc5 	bl	8006260 <__aeabi_uidivmod>
 80158d6:	9b03      	ldr	r3, [sp, #12]
 80158d8:	3e01      	subs	r6, #1
 80158da:	5c5b      	ldrb	r3, [r3, r1]
 80158dc:	7033      	strb	r3, [r6, #0]
 80158de:	002b      	movs	r3, r5
 80158e0:	0005      	movs	r5, r0
 80158e2:	429f      	cmp	r7, r3
 80158e4:	d9f3      	bls.n	80158ce <_printf_i+0x11e>
 80158e6:	2f08      	cmp	r7, #8
 80158e8:	d109      	bne.n	80158fe <_printf_i+0x14e>
 80158ea:	6823      	ldr	r3, [r4, #0]
 80158ec:	07db      	lsls	r3, r3, #31
 80158ee:	d506      	bpl.n	80158fe <_printf_i+0x14e>
 80158f0:	6863      	ldr	r3, [r4, #4]
 80158f2:	6922      	ldr	r2, [r4, #16]
 80158f4:	4293      	cmp	r3, r2
 80158f6:	dc02      	bgt.n	80158fe <_printf_i+0x14e>
 80158f8:	2330      	movs	r3, #48	; 0x30
 80158fa:	3e01      	subs	r6, #1
 80158fc:	7033      	strb	r3, [r6, #0]
 80158fe:	9b04      	ldr	r3, [sp, #16]
 8015900:	1b9b      	subs	r3, r3, r6
 8015902:	6123      	str	r3, [r4, #16]
 8015904:	9b07      	ldr	r3, [sp, #28]
 8015906:	0021      	movs	r1, r4
 8015908:	9300      	str	r3, [sp, #0]
 801590a:	9805      	ldr	r0, [sp, #20]
 801590c:	9b06      	ldr	r3, [sp, #24]
 801590e:	aa09      	add	r2, sp, #36	; 0x24
 8015910:	f7ff fede 	bl	80156d0 <_printf_common>
 8015914:	1c43      	adds	r3, r0, #1
 8015916:	d135      	bne.n	8015984 <_printf_i+0x1d4>
 8015918:	2001      	movs	r0, #1
 801591a:	4240      	negs	r0, r0
 801591c:	b00b      	add	sp, #44	; 0x2c
 801591e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015920:	2220      	movs	r2, #32
 8015922:	6809      	ldr	r1, [r1, #0]
 8015924:	430a      	orrs	r2, r1
 8015926:	6022      	str	r2, [r4, #0]
 8015928:	0022      	movs	r2, r4
 801592a:	2178      	movs	r1, #120	; 0x78
 801592c:	3245      	adds	r2, #69	; 0x45
 801592e:	7011      	strb	r1, [r2, #0]
 8015930:	4a27      	ldr	r2, [pc, #156]	; (80159d0 <_printf_i+0x220>)
 8015932:	e7a7      	b.n	8015884 <_printf_i+0xd4>
 8015934:	0648      	lsls	r0, r1, #25
 8015936:	d5ac      	bpl.n	8015892 <_printf_i+0xe2>
 8015938:	b2ad      	uxth	r5, r5
 801593a:	e7aa      	b.n	8015892 <_printf_i+0xe2>
 801593c:	681a      	ldr	r2, [r3, #0]
 801593e:	680d      	ldr	r5, [r1, #0]
 8015940:	1d10      	adds	r0, r2, #4
 8015942:	6949      	ldr	r1, [r1, #20]
 8015944:	6018      	str	r0, [r3, #0]
 8015946:	6813      	ldr	r3, [r2, #0]
 8015948:	062e      	lsls	r6, r5, #24
 801594a:	d501      	bpl.n	8015950 <_printf_i+0x1a0>
 801594c:	6019      	str	r1, [r3, #0]
 801594e:	e002      	b.n	8015956 <_printf_i+0x1a6>
 8015950:	066d      	lsls	r5, r5, #25
 8015952:	d5fb      	bpl.n	801594c <_printf_i+0x19c>
 8015954:	8019      	strh	r1, [r3, #0]
 8015956:	2300      	movs	r3, #0
 8015958:	9e04      	ldr	r6, [sp, #16]
 801595a:	6123      	str	r3, [r4, #16]
 801595c:	e7d2      	b.n	8015904 <_printf_i+0x154>
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	1d11      	adds	r1, r2, #4
 8015962:	6019      	str	r1, [r3, #0]
 8015964:	6816      	ldr	r6, [r2, #0]
 8015966:	2100      	movs	r1, #0
 8015968:	0030      	movs	r0, r6
 801596a:	6862      	ldr	r2, [r4, #4]
 801596c:	f000 f834 	bl	80159d8 <memchr>
 8015970:	2800      	cmp	r0, #0
 8015972:	d001      	beq.n	8015978 <_printf_i+0x1c8>
 8015974:	1b80      	subs	r0, r0, r6
 8015976:	6060      	str	r0, [r4, #4]
 8015978:	6863      	ldr	r3, [r4, #4]
 801597a:	6123      	str	r3, [r4, #16]
 801597c:	2300      	movs	r3, #0
 801597e:	9a04      	ldr	r2, [sp, #16]
 8015980:	7013      	strb	r3, [r2, #0]
 8015982:	e7bf      	b.n	8015904 <_printf_i+0x154>
 8015984:	6923      	ldr	r3, [r4, #16]
 8015986:	0032      	movs	r2, r6
 8015988:	9906      	ldr	r1, [sp, #24]
 801598a:	9805      	ldr	r0, [sp, #20]
 801598c:	9d07      	ldr	r5, [sp, #28]
 801598e:	47a8      	blx	r5
 8015990:	1c43      	adds	r3, r0, #1
 8015992:	d0c1      	beq.n	8015918 <_printf_i+0x168>
 8015994:	6823      	ldr	r3, [r4, #0]
 8015996:	079b      	lsls	r3, r3, #30
 8015998:	d415      	bmi.n	80159c6 <_printf_i+0x216>
 801599a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801599c:	68e0      	ldr	r0, [r4, #12]
 801599e:	4298      	cmp	r0, r3
 80159a0:	dabc      	bge.n	801591c <_printf_i+0x16c>
 80159a2:	0018      	movs	r0, r3
 80159a4:	e7ba      	b.n	801591c <_printf_i+0x16c>
 80159a6:	0022      	movs	r2, r4
 80159a8:	2301      	movs	r3, #1
 80159aa:	9906      	ldr	r1, [sp, #24]
 80159ac:	9805      	ldr	r0, [sp, #20]
 80159ae:	9e07      	ldr	r6, [sp, #28]
 80159b0:	3219      	adds	r2, #25
 80159b2:	47b0      	blx	r6
 80159b4:	1c43      	adds	r3, r0, #1
 80159b6:	d0af      	beq.n	8015918 <_printf_i+0x168>
 80159b8:	3501      	adds	r5, #1
 80159ba:	68e3      	ldr	r3, [r4, #12]
 80159bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159be:	1a9b      	subs	r3, r3, r2
 80159c0:	42ab      	cmp	r3, r5
 80159c2:	dcf0      	bgt.n	80159a6 <_printf_i+0x1f6>
 80159c4:	e7e9      	b.n	801599a <_printf_i+0x1ea>
 80159c6:	2500      	movs	r5, #0
 80159c8:	e7f7      	b.n	80159ba <_printf_i+0x20a>
 80159ca:	46c0      	nop			; (mov r8, r8)
 80159cc:	0801707c 	.word	0x0801707c
 80159d0:	0801708d 	.word	0x0801708d

080159d4 <__retarget_lock_acquire_recursive>:
 80159d4:	4770      	bx	lr

080159d6 <__retarget_lock_release_recursive>:
 80159d6:	4770      	bx	lr

080159d8 <memchr>:
 80159d8:	b2c9      	uxtb	r1, r1
 80159da:	1882      	adds	r2, r0, r2
 80159dc:	4290      	cmp	r0, r2
 80159de:	d101      	bne.n	80159e4 <memchr+0xc>
 80159e0:	2000      	movs	r0, #0
 80159e2:	4770      	bx	lr
 80159e4:	7803      	ldrb	r3, [r0, #0]
 80159e6:	428b      	cmp	r3, r1
 80159e8:	d0fb      	beq.n	80159e2 <memchr+0xa>
 80159ea:	3001      	adds	r0, #1
 80159ec:	e7f6      	b.n	80159dc <memchr+0x4>

080159ee <memmove>:
 80159ee:	b510      	push	{r4, lr}
 80159f0:	4288      	cmp	r0, r1
 80159f2:	d902      	bls.n	80159fa <memmove+0xc>
 80159f4:	188b      	adds	r3, r1, r2
 80159f6:	4298      	cmp	r0, r3
 80159f8:	d303      	bcc.n	8015a02 <memmove+0x14>
 80159fa:	2300      	movs	r3, #0
 80159fc:	e007      	b.n	8015a0e <memmove+0x20>
 80159fe:	5c8b      	ldrb	r3, [r1, r2]
 8015a00:	5483      	strb	r3, [r0, r2]
 8015a02:	3a01      	subs	r2, #1
 8015a04:	d2fb      	bcs.n	80159fe <memmove+0x10>
 8015a06:	bd10      	pop	{r4, pc}
 8015a08:	5ccc      	ldrb	r4, [r1, r3]
 8015a0a:	54c4      	strb	r4, [r0, r3]
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	d1fa      	bne.n	8015a08 <memmove+0x1a>
 8015a12:	e7f8      	b.n	8015a06 <memmove+0x18>

08015a14 <_realloc_r>:
 8015a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a16:	0007      	movs	r7, r0
 8015a18:	000d      	movs	r5, r1
 8015a1a:	0016      	movs	r6, r2
 8015a1c:	2900      	cmp	r1, #0
 8015a1e:	d105      	bne.n	8015a2c <_realloc_r+0x18>
 8015a20:	0011      	movs	r1, r2
 8015a22:	f7ff fc3f 	bl	80152a4 <_malloc_r>
 8015a26:	0004      	movs	r4, r0
 8015a28:	0020      	movs	r0, r4
 8015a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a2c:	2a00      	cmp	r2, #0
 8015a2e:	d103      	bne.n	8015a38 <_realloc_r+0x24>
 8015a30:	f7ff fbee 	bl	8015210 <_free_r>
 8015a34:	0034      	movs	r4, r6
 8015a36:	e7f7      	b.n	8015a28 <_realloc_r+0x14>
 8015a38:	f000 f812 	bl	8015a60 <_malloc_usable_size_r>
 8015a3c:	002c      	movs	r4, r5
 8015a3e:	42b0      	cmp	r0, r6
 8015a40:	d2f2      	bcs.n	8015a28 <_realloc_r+0x14>
 8015a42:	0031      	movs	r1, r6
 8015a44:	0038      	movs	r0, r7
 8015a46:	f7ff fc2d 	bl	80152a4 <_malloc_r>
 8015a4a:	1e04      	subs	r4, r0, #0
 8015a4c:	d0ec      	beq.n	8015a28 <_realloc_r+0x14>
 8015a4e:	0029      	movs	r1, r5
 8015a50:	0032      	movs	r2, r6
 8015a52:	f7ff fbcb 	bl	80151ec <memcpy>
 8015a56:	0029      	movs	r1, r5
 8015a58:	0038      	movs	r0, r7
 8015a5a:	f7ff fbd9 	bl	8015210 <_free_r>
 8015a5e:	e7e3      	b.n	8015a28 <_realloc_r+0x14>

08015a60 <_malloc_usable_size_r>:
 8015a60:	1f0b      	subs	r3, r1, #4
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	1f18      	subs	r0, r3, #4
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	da01      	bge.n	8015a6e <_malloc_usable_size_r+0xe>
 8015a6a:	580b      	ldr	r3, [r1, r0]
 8015a6c:	18c0      	adds	r0, r0, r3
 8015a6e:	4770      	bx	lr

08015a70 <_init>:
 8015a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a72:	46c0      	nop			; (mov r8, r8)
 8015a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a76:	bc08      	pop	{r3}
 8015a78:	469e      	mov	lr, r3
 8015a7a:	4770      	bx	lr

08015a7c <_fini>:
 8015a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a7e:	46c0      	nop			; (mov r8, r8)
 8015a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a82:	bc08      	pop	{r3}
 8015a84:	469e      	mov	lr, r3
 8015a86:	4770      	bx	lr

08015a88 <__FLASH_Program_Fast_veneer>:
 8015a88:	b401      	push	{r0}
 8015a8a:	4802      	ldr	r0, [pc, #8]	; (8015a94 <__FLASH_Program_Fast_veneer+0xc>)
 8015a8c:	4684      	mov	ip, r0
 8015a8e:	bc01      	pop	{r0}
 8015a90:	4760      	bx	ip
 8015a92:	bf00      	nop
 8015a94:	2000012d 	.word	0x2000012d

Disassembly of section .data:

20000000 <USBPD_Trace>:
20000000:	080013bf                                ....

20000004 <SystemCoreClock>:
20000004:	00f42400                                .$..

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <uxCriticalNesting>:
20000010:	aaaaaaaa                                ....

20000014 <DPM_Settings>:
20000014:	00000001 00000002 00000000              ............

20000020 <DPM_ID_Settings>:
20000020:	f0000003 00020483                       ........

20000028 <DPM_USER_Settings>:
20000028:	0000000c 00000000 00000000 00000000     ................
	...

2000009c <USBPD_NbPDO>:
2000009c:	00000001                                ....

200000a0 <PORT0_PDO_ListSNK>:
200000a0:	26019096 00000000 00000000 00000000     ...&............
	...

200000c0 <MagicNumber>:
200000c0:	deadf00d deadbabe                       ........

200000c8 <_impure_ptr>:
200000c8:	200000cc                                ... 

200000cc <impure_data>:
	...

2000012c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000012c:	b580      	push	{r7, lr}
2000012e:	b088      	sub	sp, #32
20000130:	af00      	add	r7, sp, #0
20000132:	6078      	str	r0, [r7, #4]
20000134:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000136:	231f      	movs	r3, #31
20000138:	18fb      	adds	r3, r7, r3
2000013a:	2200      	movs	r2, #0
2000013c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000013e:	687b      	ldr	r3, [r7, #4]
20000140:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000142:	683b      	ldr	r3, [r7, #0]
20000144:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000146:	4b1a      	ldr	r3, [pc, #104]	; (200001b0 <FLASH_Program_Fast+0x84>)
20000148:	695a      	ldr	r2, [r3, #20]
2000014a:	4b19      	ldr	r3, [pc, #100]	; (200001b0 <FLASH_Program_Fast+0x84>)
2000014c:	2180      	movs	r1, #128	; 0x80
2000014e:	02c9      	lsls	r1, r1, #11
20000150:	430a      	orrs	r2, r1
20000152:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000154:	f3ef 8310 	mrs	r3, PRIMASK
20000158:	60fb      	str	r3, [r7, #12]
  return(result);
2000015a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000015c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000015e:	b672      	cpsid	i
}
20000160:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000162:	e00f      	b.n	20000184 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000164:	697a      	ldr	r2, [r7, #20]
20000166:	69bb      	ldr	r3, [r7, #24]
20000168:	6812      	ldr	r2, [r2, #0]
2000016a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000016c:	697b      	ldr	r3, [r7, #20]
2000016e:	3304      	adds	r3, #4
20000170:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000172:	69bb      	ldr	r3, [r7, #24]
20000174:	3304      	adds	r3, #4
20000176:	61bb      	str	r3, [r7, #24]
    index++;
20000178:	211f      	movs	r1, #31
2000017a:	187b      	adds	r3, r7, r1
2000017c:	781a      	ldrb	r2, [r3, #0]
2000017e:	187b      	adds	r3, r7, r1
20000180:	3201      	adds	r2, #1
20000182:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000184:	231f      	movs	r3, #31
20000186:	18fb      	adds	r3, r7, r3
20000188:	781b      	ldrb	r3, [r3, #0]
2000018a:	2b3f      	cmp	r3, #63	; 0x3f
2000018c:	d9ea      	bls.n	20000164 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000018e:	46c0      	nop			; (mov r8, r8)
20000190:	4b07      	ldr	r3, [pc, #28]	; (200001b0 <FLASH_Program_Fast+0x84>)
20000192:	691a      	ldr	r2, [r3, #16]
20000194:	2380      	movs	r3, #128	; 0x80
20000196:	025b      	lsls	r3, r3, #9
20000198:	4013      	ands	r3, r2
2000019a:	d1f9      	bne.n	20000190 <FLASH_Program_Fast+0x64>
2000019c:	693b      	ldr	r3, [r7, #16]
2000019e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200001a0:	68bb      	ldr	r3, [r7, #8]
200001a2:	f383 8810 	msr	PRIMASK, r3
}
200001a6:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200001a8:	46c0      	nop			; (mov r8, r8)
200001aa:	46bd      	mov	sp, r7
200001ac:	b008      	add	sp, #32
200001ae:	bd80      	pop	{r7, pc}
200001b0:	40022000 	.word	0x40022000
